<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode on Jarvis`s library</title>
    <link>https://www.liunaijie.top/tags/leetcode/</link>
    <description>Recent content in LeetCode on Jarvis`s library</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 15 Apr 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.liunaijie.top/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>乘积为正数的最长子数组长度-LeetCode1567</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B9%98%E7%A7%AF%E4%B8%BA%E6%AD%A3%E6%95%B0%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6-leetcode1567/</link>
      <pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B9%98%E7%A7%AF%E4%B8%BA%E6%AD%A3%E6%95%B0%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6-leetcode1567/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/maximum-length-of-subarray-with-positive-product/&#34;&gt;https://leetcode-cn.com/problems/maximum-length-of-subarray-with-positive-product/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;给定一个整数数组nums, 求乘积为正数的最长子数组的长度&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例1:&lt;/p&gt;&#xA;&lt;p&gt;输入: [1, -2, -3, 4]&lt;/p&gt;&#xA;&lt;p&gt;输出: 4&lt;/p&gt;&#xA;&lt;p&gt;数组本身乘积就是正数&lt;/p&gt;&#xA;&lt;p&gt;示例2:&lt;/p&gt;&#xA;&lt;p&gt;输入: [0, 1, -2, -3, -4]&lt;/p&gt;&#xA;&lt;p&gt;输出: 3&lt;/p&gt;&#xA;&lt;p&gt;最长乘积为整数的子数组为[1, -2, -3]&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>乘积最大子数组-LeetCode152</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84-leetcode152/</link>
      <pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84-leetcode152/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/maximum-product-subarray/&#34;&gt;https://leetcode-cn.com/problems/maximum-product-subarray/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;给你一个整数数组nums, 请你找出数组中成绩最大的非空连续子数组(该子数组中至少包含一个数字), 并返回该子数组所对应的乘积.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例1:&lt;/p&gt;&#xA;&lt;p&gt;输入: [2, 3, -2, 4]&lt;/p&gt;&#xA;&lt;p&gt;输出: 6&lt;/p&gt;&#xA;&lt;p&gt;子数组 [2, 3]得到最大乘积6&lt;/p&gt;&#xA;&lt;p&gt;输入 [-2, 0 -,1]&lt;/p&gt;&#xA;&lt;p&gt;输出: 0&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>环形子数组的最大和-LeetCode918</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%8E%AF%E5%BD%A2%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%92%8C-leetcode918/</link>
      <pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%8E%AF%E5%BD%A2%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%92%8C-leetcode918/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/maximum-sum-circular-subarray/&#34;&gt;https://leetcode-cn.com/problems/maximum-sum-circular-subarray/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;给定一个长度为n的环形整数数组nums, 返回nums的非空子数组的最大和&lt;/p&gt;&#xA;&lt;p&gt;环形数组意味着数组的末端和头部是相连的, 所以子数组可以为数组的中间某一段或者首尾两段.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例1:&lt;/p&gt;&#xA;&lt;p&gt;输入: nums = [1, -1, 3, -2]&lt;/p&gt;&#xA;&lt;p&gt;输出: 3&lt;/p&gt;&#xA;&lt;p&gt;子数组 [3] 为最大和&lt;/p&gt;&#xA;&lt;p&gt;示例2:&lt;/p&gt;&#xA;&lt;p&gt;输入: nums = [5, -3, 5]&lt;/p&gt;&#xA;&lt;p&gt;输出: 10&lt;/p&gt;&#xA;&lt;p&gt;首尾的子数组[5, 5]得到最大和10&lt;/p&gt;&#xA;&lt;p&gt;示例3:&lt;/p&gt;&#xA;&lt;p&gt;输入: [3, -2, 2, -3]&lt;/p&gt;&#xA;&lt;p&gt;输出: 3&lt;/p&gt;&#xA;&lt;p&gt;从子数组[3], [3, -2, 2]都可以得到最大和3&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>跳跃游戏-LeetCode55</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F-leetcode55/</link>
      <pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F-leetcode55/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/jump-game/&#34;&gt;https://leetcode-cn.com/problems/jump-game/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;给定一个非负整数数组nums, 你最初位于数组的第一个下标, 数组中的每个元素代表你在该位置可以跳跃的最大长度.&lt;/p&gt;&#xA;&lt;p&gt;判断你是否能够到达最后一个下标&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例1:&lt;/p&gt;&#xA;&lt;p&gt;输入: nums=[2, 3, 1, 1, 4]&lt;/p&gt;&#xA;&lt;p&gt;输出: true&lt;/p&gt;&#xA;&lt;p&gt;可以先从下标0走1步到下标1,  然后从下标1走3步到最后一个下标&lt;/p&gt;&#xA;&lt;p&gt;示例2:&lt;/p&gt;&#xA;&lt;p&gt;输入: nums = [3, 2, 1, 0, 4]&lt;/p&gt;&#xA;&lt;p&gt;输出: false&lt;/p&gt;&#xA;&lt;p&gt;无论怎么走, 都会走到下标3的位置, 到了这里无法在继续往前走. 所以不可能到达最后一个坐标&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>跳跃游戏2-LeetCode45</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F2-leetcode45/</link>
      <pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F2-leetcode45/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/jump-game-ii/&#34;&gt;https://leetcode-cn.com/problems/jump-game-ii/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;给定一个非负整数数组nums, 最初位于数组的第一个位置. 数组中的每个元素代表你在该位置上可以跳跃的最大长度.&lt;/p&gt;&#xA;&lt;p&gt;你的目标是使用最少的跳跃次数到达数组的最后一个位置. 求最少需要跳跃几次, 假设总是可以到达数组的最后一个位置.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例1:&lt;/p&gt;&#xA;&lt;p&gt;输入: nums = [2, 3, 1, 1, 4]&lt;/p&gt;&#xA;&lt;p&gt;输出: 2&lt;/p&gt;&#xA;&lt;p&gt;从下标0跳到下标1, 再从下标1跳3步到最后一个位置. 总共跳跃2次&lt;/p&gt;&#xA;&lt;p&gt;示例2:&lt;/p&gt;&#xA;&lt;p&gt;输入: nums = [2, 3, 0, 1, 4]&lt;/p&gt;&#xA;&lt;p&gt;输出: 2&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>最大子数组和-LeetCode53</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C-leetcode53/</link>
      <pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C-leetcode53/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/maximum-subarray/&#34;&gt;https://leetcode-cn.com/problems/maximum-subarray/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;给你一个整数数组nums, 请你找出一个具有最大和的连续子数组(子数组最少包含一个元素), 返回其最大和&lt;/p&gt;&#xA;&lt;p&gt;子数组是数组中的一个连续部分&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例1:&lt;/p&gt;&#xA;&lt;p&gt;输入: nums =[-2, 1, -3, 4, -1, 2, 1, -5, 4]&lt;/p&gt;&#xA;&lt;p&gt;输出: 6&lt;/p&gt;&#xA;&lt;p&gt;连续子数组 [4, -1, 2, 1]的和最大, 为6.&lt;/p&gt;&#xA;&lt;p&gt;示例2:&lt;/p&gt;&#xA;&lt;p&gt;输入: nums = [1]&lt;/p&gt;&#xA;&lt;p&gt;输出: 1&lt;/p&gt;&#xA;&lt;p&gt;示例3:&lt;/p&gt;&#xA;&lt;p&gt;输入: nums = [5, 4, -1, 7, 8]&lt;/p&gt;&#xA;&lt;p&gt;输出: 23&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>打家劫舍—LeetCode198</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-leetcode198/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-leetcode198/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/house-robber/&#34;&gt;https://leetcode-cn.com/problems/house-robber/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;你是一个专业的小偷, 计划偷窃沿街的房屋, 每间房内都藏有一定的现金, 影响你偷窃的唯一限制因素是相邻的房屋装有相互连通的防盗系统. 如果两间相邻的房屋在同一晚上被小偷闯入, 系统会自动报警.&lt;/p&gt;&#xA;&lt;p&gt;给定一个代表每个访问存放金额的非负整数数组, 计算你在不触发警报装置的情况下, 一夜之内能够偷窃到的最高金额.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例1:&lt;/p&gt;&#xA;&lt;p&gt;输入: [1, 2, 3, 1]&lt;/p&gt;&#xA;&lt;p&gt;输出: 4&lt;/p&gt;&#xA;&lt;p&gt;偷窃1号和3号. 得到1+3 = 4.&lt;/p&gt;&#xA;&lt;p&gt;示例2:&lt;/p&gt;&#xA;&lt;p&gt;输入: [2, 7, 9, 3, 1]&lt;/p&gt;&#xA;&lt;p&gt;输出: 12&lt;/p&gt;&#xA;&lt;p&gt;偷窃1号, 3号和5号. 得到2+9+1 = 12.&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>打家劫舍2-LeetCode213</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D2-leetcode213/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D2-leetcode213/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/house-robber-ii/&#34;&gt;https://leetcode-cn.com/problems/house-robber-ii/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;你是一个专业的小偷, 计划偷窃沿街的房屋, 每间房内都藏有一定的现金. 这个地方所有的房屋都 围成一圈, 这意味着第一个房屋和最后一个房屋是紧挨着的. 同时, 相邻的房屋装有相互连通的防盗系统, 如果两间相邻的房屋在同一晚上被小偷闯入, 系统会自动报警 .&lt;/p&gt;&#xA;&lt;p&gt;给定一个代表每个房屋存放金额的非负整数数组, 计算你在不触动警报装置的情况下,今晚能够偷窃到的最高金额.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例1:&lt;/p&gt;&#xA;&lt;p&gt;输入：nums = [2,3,2]&lt;/p&gt;&#xA;&lt;p&gt;输出：3&lt;/p&gt;&#xA;&lt;p&gt;你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。&lt;/p&gt;&#xA;&lt;p&gt;示例2:&lt;/p&gt;&#xA;&lt;p&gt;输入：nums = [1,2,3,1]&lt;/p&gt;&#xA;&lt;p&gt;输出：4&lt;/p&gt;&#xA;&lt;p&gt;你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）.    偷窃到的最高金额 = 1 + 3 = 4 .&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>翻转单词顺序-LeetCode58</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F-leetcode58/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F-leetcode58/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/&#34;&gt;https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;输入一个英文句子, 翻转句子中单词的顺序, 但单词内字符的顺序不变. 标点符号和普通字母一样处理. 例如输入字符串&amp;quot;I am a student.&amp;quot;, 输出应该为&amp;quot;student. a am I&amp;quot;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例1:&lt;/p&gt;&#xA;&lt;p&gt;输入 :  &amp;ldquo;the sky is blue&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;输出 : &amp;ldquo;blue is sky the&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;示例2:&lt;/p&gt;&#xA;&lt;p&gt;输入 : &amp;quot;    hello world!   &amp;quot;&lt;/p&gt;&#xA;&lt;p&gt;输出 :  &amp;ldquo;world! hello&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;忽略字符串前后的空格&lt;/p&gt;&#xA;&lt;p&gt;示例3:&lt;/p&gt;&#xA;&lt;p&gt;输入: &amp;ldquo;a good   example&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;输出: &amp;ldquo;example good a&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>和为s的两个数组-LeetCode57</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%92%8C%E4%B8%BAs%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84-leetcode57/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%92%8C%E4%B8%BAs%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84-leetcode57/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/&#34;&gt;https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;输入一个递增排序的数组和一个数字s, 在数组中查找两个数, 使得它们的和正好是s, 如果有多对数字的和都等于s, 则输出任意一对即可.&#xA;示例1:&#xA;输入：nums = [2,7,11,15], target = 9&#xA;输出：[2,7] 或者 [7,2]&lt;/p&gt;&#xA;&lt;p&gt;示例2:&#xA;输入：nums = [10,26,30,31,47,60], target = 40&#xA;输出：[10,30] 或者 [30,10]&lt;/p&gt;</description>
    </item>
    <item>
      <title>删除并获取点数-LeetCode740</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%88%A0%E9%99%A4%E5%B9%B6%E8%8E%B7%E5%8F%96%E7%82%B9%E6%95%B0-leetcode740/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%88%A0%E9%99%A4%E5%B9%B6%E8%8E%B7%E5%8F%96%E7%82%B9%E6%95%B0-leetcode740/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/delete-and-earn/&#34;&gt;https://leetcode-cn.com/problems/delete-and-earn/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;给你一个整数数组nums, 可以对他进行一些操作. 每次操作中, 选择任意一个nums[i], 删除它然后获取nums[i]的点数. 同时还需要删除所有 等于nums[i]-1和nums[i]+1的元素. 例如删除3, 那么得到3个点数, 同时需要在数组中删除所有的2和4.&lt;/p&gt;&#xA;&lt;p&gt;开始时拥有0个点数, 求你能通过这些操作获取的最大点数.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例1:&lt;/p&gt;&#xA;&lt;p&gt;输入: nums = [3, 4, 2]&lt;/p&gt;&#xA;&lt;p&gt;输出: 6&lt;/p&gt;&#xA;&lt;p&gt;删除4和2.得到6点.&lt;/p&gt;&#xA;&lt;p&gt;删除4获取4个点数, 同时3也被删除.&lt;/p&gt;&#xA;&lt;p&gt;还剩下2, 然后删除2再得到2个点数.&lt;/p&gt;&#xA;&lt;p&gt;示例2:&lt;/p&gt;&#xA;&lt;p&gt;输入: nums = [2, 2, 3, 3, 3, 4]&lt;/p&gt;&#xA;&lt;p&gt;输出: 9&lt;/p&gt;&#xA;&lt;p&gt;删除3, 总共可以得到9个点数(3*3). 同时删除2和4.&lt;/p&gt;&#xA;&lt;p&gt;最终得到9个点数.&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>使用最小花费爬楼梯-LeetCode746</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF-leetcode746/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF-leetcode746/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/min-cost-climbing-stairs/&#34;&gt;https://leetcode-cn.com/problems/min-cost-climbing-stairs/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;给定一个整数数组cost, 其中&lt;code&gt;cost[i]&lt;/code&gt;表示从楼梯第i个台阶向上爬需要支付的费用. 每次只能向上爬一个或两个台阶.&lt;/p&gt;&#xA;&lt;p&gt;可以从下标0或下标1的台阶开始爬楼梯.&lt;/p&gt;&#xA;&lt;p&gt;求到达楼梯顶部的最低花费&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例1:&lt;/p&gt;&#xA;&lt;p&gt;输入 cost = [10, 15, 20]&lt;/p&gt;&#xA;&lt;p&gt;输出: 15&lt;/p&gt;&#xA;&lt;p&gt;从下标1开始爬, 向上2格. 到达楼梯顶部.&lt;/p&gt;&#xA;&lt;p&gt;示例2:&lt;/p&gt;&#xA;&lt;p&gt;输入：cost = [1,100,1,1,1,100,1,1,100,1]&#xA;输出：6&#xA;你将从下标为 0 的台阶开始。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。&lt;/li&gt;&#xA;&lt;li&gt;支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。&lt;/li&gt;&#xA;&lt;li&gt;支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。&lt;/li&gt;&#xA;&lt;li&gt;支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。&lt;/li&gt;&#xA;&lt;li&gt;支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。&lt;/li&gt;&#xA;&lt;li&gt;支付 1 ，向上爬一个台阶，到达楼梯顶部。&#xA;总花费为 6&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>矩阵中的路径-剑指Offer LeetCode12</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84-leetcode12/</link>
      <pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84-leetcode12/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/&#34;&gt;https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;给定一个存储字母的m*n二维数组和一个字符串单词word. 如果word存在与二维数组中, 返回true, 否则返回flase&lt;/p&gt;&#xA;&lt;p&gt;单词必须按照字母顺序, 通过相邻的单元格内的字母构成, 其他&amp;quot;相邻&amp;quot;单元格是那些水平相邻或垂直相邻的单元格. 同一个单元格内的字母不允许被重复使用.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;例如, 在下面的3*4的矩阵中包含单词&amp;quot;ABCCED&amp;quot;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://assets.leetcode.com/uploads/2020/11/04/word2.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;示例1:&lt;/p&gt;&#xA;&lt;p&gt;输入: borad = [ [&amp;ldquo;A&amp;rdquo;, &amp;ldquo;B&amp;rdquo;, &amp;ldquo;C&amp;rdquo;, &amp;ldquo;E&amp;rdquo;], [&amp;ldquo;S&amp;rdquo;, &amp;ldquo;F&amp;rdquo;, &amp;ldquo;C&amp;rdquo;, &amp;ldquo;S&amp;rdquo;], [&amp;ldquo;A&amp;rdquo;, &amp;ldquo;D&amp;rdquo;, &amp;ldquo;E&amp;rdquo;, &amp;ldquo;E&amp;rdquo;], [&amp;ldquo;A&amp;rdquo;, &amp;ldquo;D&amp;rdquo;, &amp;ldquo;E&amp;rdquo;, &amp;ldquo;E&amp;rdquo;]], word = &amp;ldquo;ABCCED&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;输出: true&lt;/p&gt;&#xA;&lt;p&gt;示例2:&lt;/p&gt;&#xA;&lt;p&gt;输入：board = [[&amp;ldquo;a&amp;rdquo;,&amp;ldquo;b&amp;rdquo;],[&amp;ldquo;c&amp;rdquo;,&amp;ldquo;d&amp;rdquo;]], word = &amp;ldquo;abcd&amp;rdquo;&#xA;输出：false&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>二叉树中和为某一值的路径- 剑指Offer LeetCode34</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84-leetcode34/</link>
      <pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84-leetcode34/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/&#34;&gt;https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;给定二叉树的根节点root和一个整数目标targetSum, 找出所有&lt;strong&gt;从根节点到叶子节点&lt;/strong&gt;路径总和等于给定目标和的路径&lt;/p&gt;&#xA;&lt;p&gt;叶子节点是指没有子节点的节点&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例1:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22&#xA;输出：[[5,4,11,2], [5,8,4,5]]&lt;/p&gt;&#xA;&lt;p&gt;有两条路径加起来之和等于22&lt;/p&gt;&#xA;&lt;p&gt;示例2:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;输入：root = [1,2,3], targetSum = 5&#xA;输出：[]&lt;/p&gt;&#xA;&lt;p&gt;没有符合条件的路径&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>机器人的运动路径- 剑指Offer LeetCode13</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4--leetcode13/</link>
      <pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4--leetcode13/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/&#34;&gt;https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;地上有一个m行n列的二维矩阵, 从坐标[0, 0]到[m-1, n-1]. 一个机器人从坐标[0, 0]的格子开始移动, 每次可以向左, 右, 上, 下移动一格.&lt;/p&gt;&#xA;&lt;p&gt;不能移动到方格外, 也不能移动到行坐标和列坐标的数位之和大于K的格子. 例如当K=18时, 机器人可以进入方格[35, 37], 因为3+5+3+7=18. 但是不能进入[35, 38], 因为3+5+3+8=19. 求机器人能够到达多少个格子.&lt;/p&gt;</description>
    </item>
    <item>
      <title>把数组排成最小的数-剑指Offer LeetCode45</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0-leetcode45/</link>
      <pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0-leetcode45/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/&#34;&gt;https://leetcode-cn.com/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;输入一个非负整数数组, 把数组里所有数字拼接起来排出一个数, 打印能拼接出的数字中最小的一个.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例1:&lt;/p&gt;&#xA;&lt;p&gt;输入: [10, 2]&lt;/p&gt;&#xA;&lt;p&gt;输出: &amp;ldquo;102&amp;rdquo;. 两个数字的排列可能为102, 210. 由于102小, 所以结果为102.&lt;/p&gt;&#xA;&lt;p&gt;示例2:&lt;/p&gt;&#xA;&lt;p&gt;输入: [3, 30, 34, 5, 9]&lt;/p&gt;&#xA;&lt;p&gt;输出: ”3033459“&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>二叉搜索树的第K大节点-剑指Offer LeetCode54</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%AC%ACk%E5%A4%A7%E8%8A%82%E7%82%B9--leetcode54/</link>
      <pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%AC%ACk%E5%A4%A7%E8%8A%82%E7%82%B9--leetcode54/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/&#34;&gt;https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;给定一颗二叉搜索树, 请找出其中第K大节点的值&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例1:&lt;/p&gt;&#xA;&lt;p&gt;输入:  层序遍历 = [3, 1, 4, null ,2] , k = 1&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;  3&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;/&#x9;&#x9;&#x9;\&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;1&#x9;&#x9;&#x9;&#x9;4&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;\&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;2&lt;/p&gt;&#xA;&lt;p&gt;输出: 4, 最大的节点为4&lt;/p&gt;&#xA;&lt;p&gt;示例2:&lt;/p&gt;&#xA;&lt;p&gt;输入: 层序遍历 =  [ 5, 3, 6, 2, 4, null, null ,1], k = 3&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;5&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;&#x9;/&#x9;&#x9;&#x9;&#x9;&#x9;\&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;   3&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;6&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;&#x9;/&#x9;\&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;&#x9;2&#x9;&#x9;4&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;/&lt;/p&gt;&#xA;&lt;p&gt;1&lt;/p&gt;&#xA;&lt;p&gt;输出: 4. 倒数第3个最大节点为4.&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>扑克牌中的顺子-剑指Offer LeetCode61</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90-leetcode61/</link>
      <pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90-leetcode61/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/&#34;&gt;https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;从若干幅扑克牌中随机抽5张牌, 判断是不是一个顺子, 即这五张牌是不是连续的. 2~10为数字本身, A为1, J为11, Q为12, K为13. &lt;strong&gt;大小王为0, 并且可以看出任意数字&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例1:&lt;/p&gt;&#xA;&lt;p&gt;输入: [1,2,3,4,5]&lt;/p&gt;&#xA;&lt;p&gt;输出:  true&lt;/p&gt;&#xA;&lt;p&gt;示例2:&lt;/p&gt;&#xA;&lt;p&gt;输入: [0,0,1,2,5]&lt;/p&gt;&#xA;&lt;p&gt;输出: true. 由于两个0可以代替为3和4, 所以可以构成顺子&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>IPV4与Int的转换</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/ipv4%E4%B8%8Eint%E7%9A%84%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/ipv4%E4%B8%8Eint%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;将IPV4的地址转换成int值，然后再将其转换回来&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Z字形变换—LeetCode6</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/z-%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2-leetcode6/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/z-%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2-leetcode6/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。&lt;/p&gt;&#xA;&lt;p&gt;比如输入字符串为 &amp;ldquo;LEETCODEISHIRING&amp;rdquo; 行数为 3 时，排列如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;L   C   I   R&#xA;E T O E S I I G&#xA;E   D   H   N&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：&amp;ldquo;LCIRETOESIIGEDHN&amp;rdquo;。&lt;/p&gt;&#xA;&lt;p&gt;请你实现这个将字符串进行指定行数变换的函数：&lt;/p&gt;&#xA;&lt;p&gt;string convert(string s, int numRows);&#xA;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;输入: s = &amp;ldquo;LEETCODEISHIRING&amp;rdquo;, numRows = 3&#xA;输出: &amp;ldquo;LCIRETOESIIGEDHN&amp;rdquo;&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;输入: s = &amp;ldquo;LEETCODEISHIRING&amp;rdquo;, numRows = 4&#xA;输出: &amp;ldquo;LDREOEIIECIHNTSG&amp;rdquo;&#xA;解释:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;L     D     R&#xA;E   O E   I I&#xA;E C   I H   N&#xA;T     S     G&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>最小的k个数-LeetCodeM40</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0-leetcodem40/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0-leetcodem40/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。&lt;/p&gt;&#xA;&lt;p&gt;示例 1：&lt;/p&gt;&#xA;&lt;p&gt;输入：arr = [3,2,1], k = 2&#xA;输出：[1,2] 或者 [2,1]&#xA;示例 2：&lt;/p&gt;&#xA;&lt;p&gt;输入：arr = [0,1,2,1], k = 1&#xA;输出：[0]&lt;/p&gt;&#xA;&lt;p&gt;限制：&lt;/p&gt;&#xA;&lt;p&gt;0 &amp;lt;= k &amp;lt;= arr.length &amp;lt;= 10000&#xA;0 &amp;lt;= &lt;code&gt;arr[i]&lt;/code&gt; &amp;lt;= 10000&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;给定一个数组，找出最小的k个数，对这k个数的大小顺序没有要求。&lt;/p&gt;&#xA;&lt;h1 id=&#34;解题思路&#34;&gt;解题思路&lt;/h1&gt;&#xA;&lt;p&gt;这个题目我最开始的想法是用堆来解决的，但我解答完成看题解的时候发现了一种做法：&lt;/p&gt;&#xA;&lt;p&gt;排序后取前k个元素&lt;/p&gt;&#xA;&lt;p&gt;在评论区中有很多人在讨论这一种解法，虽然的他复杂度比较高，实现方式很简单，有一些专业人士在鄙视这种做法，也有一些人说这个题目的难度是简单，所以用这个也没什么问题。我的看法是支持这种做法，并不因为他的难度级别，而是解决问题的思路。在解决问题的时候每一种思路都是可取的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>二叉树的锯齿形层次遍历-LeetCode103</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86-leetcode103/</link>
      <pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86-leetcode103/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。&lt;/p&gt;&#xA;&lt;p&gt;例如：&#xA;给定二叉树 [3,9,20,null,null,15,7],&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; &#x9;  3&#xA;   / \&#xA;  9  20&#xA;    /  \&#xA;   15   7&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回锯齿形层次遍历如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\[&#xA;  \[3],&#xA;  \[20,9],&#xA;  \[15,7]&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;所谓的锯齿形遍历，即是在第一层从左向右遍历，在第二层从右向左遍历，依次遍历完成。&lt;/p&gt;</description>
    </item>
    <item>
      <title>多数元素-LeetCode169</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0-leetcode169/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0-leetcode169/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。&lt;/p&gt;&#xA;&lt;p&gt;你可以假设数组是非空的，并且给定的数组总是存在多数元素。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;输入: [3,2,3]&#xA;输出: 3&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;输入: [2,2,1,1,1,2,2]&#xA;输出: 2&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>盛水最多的容器—LeetCode11</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8-leetcode11/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8-leetcode11/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给你 n 个非负整数 a1，a2，&amp;hellip;，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。&lt;/p&gt;&#xA;&lt;p&gt;说明：你不能倾斜容器，且 n 的值至少为 2。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。&lt;/p&gt;&#xA;&lt;p&gt;示例：&lt;/p&gt;&#xA;&lt;p&gt;输入：[1,8,6,2,5,4,8,3,7]&#xA;输出：49&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>有序链表转换为二叉搜索树—LeetCode109</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-leetcode109/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-leetcode109/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。&lt;/p&gt;&#xA;&lt;p&gt;本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。&lt;/p&gt;&#xA;&lt;p&gt;示例:&lt;/p&gt;&#xA;&lt;p&gt;给定的有序链表： [-10, -3, 0, 5, 9],&lt;/p&gt;&#xA;&lt;p&gt;一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  &#x9;0&#xA;  -3&#x9;9&#xA;-10&#x9; 5&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;答案不唯一，只要满足平常二叉树的特性即可。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;题目中给出的数组已经按升序排序，我们需要将其转换为平衡二叉树。&lt;/p&gt;</description>
    </item>
    <item>
      <title>统计位数为偶数的数字—LeetCode1295</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%BB%9F%E8%AE%A1%E4%BD%8D%E6%95%B0%E4%B8%BA%E5%81%B6%E6%95%B0%E7%9A%84%E6%95%B0%E5%AD%97-leetcode1295/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%BB%9F%E8%AE%A1%E4%BD%8D%E6%95%B0%E4%B8%BA%E5%81%B6%E6%95%B0%E7%9A%84%E6%95%B0%E5%AD%97-leetcode1295/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给你一个整数数组 nums，请你返回其中位数为 偶数 的数字的个数。&lt;/p&gt;&#xA;&lt;p&gt;示例 1：&lt;/p&gt;&#xA;&lt;p&gt;输入：nums = [12,345,2,6,7896]&#xA;输出：2&#xA;解释：&#xA;12 是 2 位数字（位数为偶数）&#xA;345 是 3 位数字（位数为奇数）&lt;br&gt;&#xA;2 是 1 位数字（位数为奇数）&#xA;6 是 1 位数字 位数为奇数）&#xA;7896 是 4 位数字（位数为偶数）&lt;br&gt;&#xA;因此只有 12 和 7896 是位数为偶数的数字&#xA;示例 2：&lt;/p&gt;&#xA;&lt;p&gt;输入：nums = [555,901,482,1771]&#xA;输出：1&#xA;解释：&#xA;只有 1771 是位数为偶数的数字。&lt;/p&gt;&#xA;&lt;p&gt;提示：&lt;/p&gt;&#xA;&lt;p&gt;1 &amp;lt;= nums.length &amp;lt;= 500&#xA;1 &amp;lt;= nums[i] &amp;lt;= 10^5&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>二叉树的最大深度-LeetCode104</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6-leetcode104/</link>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6-leetcode104/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个二叉树，找出其最大深度。&lt;/p&gt;&#xA;&lt;p&gt;二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。&lt;/p&gt;&#xA;&lt;p&gt;说明: 叶子节点是指没有子节点的节点。&lt;/p&gt;&#xA;&lt;p&gt;示例：&#xA;给定二叉树 [3,9,20,null,null,15,7]，&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;3&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;/ &lt;br&gt;&#xA;9  20&#xA;/  &lt;br&gt;&#xA;15   7&#xA;返回它的最大深度 3 。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>整数的各位积和之差—LeetCode1281</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%95%B4%E6%95%B0%E7%9A%84%E5%90%84%E4%BD%8D%E7%A7%AF%E5%92%8C%E4%B9%8B%E5%B7%AE-leetcode1281/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%95%B4%E6%95%B0%E7%9A%84%E5%90%84%E4%BD%8D%E7%A7%AF%E5%92%8C%E4%B9%8B%E5%B7%AE-leetcode1281/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给你一个整数 n，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。&lt;/p&gt;&#xA;&lt;p&gt;示例 1：&lt;/p&gt;&#xA;&lt;p&gt;输入：n = 234&#xA;输出：15&#xA;解释：&#xA;各位数之积 = 2 * 3 * 4 = 24&#xA;各位数之和 = 2 + 3 + 4 = 9&#xA;结果 = 24 - 9 = 15&#xA;示例 2：&lt;/p&gt;&#xA;&lt;p&gt;输入：n = 4421&#xA;输出：21&#xA;解释：&#xA;各位数之积 = 4 * 4 * 2 * 1 = 32&#xA;各位数之和 = 4 + 4 + 2 + 1 = 11&#xA;结果 = 32 - 11 = 21&lt;/p&gt;&#xA;&lt;p&gt;提示：&lt;/p&gt;&#xA;&lt;p&gt;1 &amp;lt;= n &amp;lt;= 10^5&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>猜数字-LeetCodeLCP1</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%8C%9C%E6%95%B0%E5%AD%97-leetcodelcp1/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%8C%9C%E6%95%B0%E5%AD%97-leetcodelcp1/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;小A 和 小B 在玩猜数字。小B 每次从 1, 2, 3 中随机选择一个，小A 每次也从 1, 2, 3 中选择一个猜。他们一共进行三次这个游戏，请返回 小A 猜对了几次？&lt;/p&gt;&#xA;&lt;p&gt;输入的guess数组为 小A 每次的猜测，answer数组为 小B 每次的选择。guess和answer的长度都等于3。&lt;/p&gt;&#xA;&lt;p&gt;示例 1：&lt;/p&gt;&#xA;&lt;p&gt;输入：guess = [1,2,3], answer = [1,2,3]&#xA;输出：3&#xA;解释：小A 每次都猜对了。&lt;/p&gt;&#xA;&lt;p&gt;示例 2：&lt;/p&gt;&#xA;&lt;p&gt;输入：guess = [2,2,3], answer = [3,2,1]&#xA;输出：1&#xA;解释：小A 只猜对了第二次。&lt;/p&gt;&#xA;&lt;p&gt;限制：&lt;/p&gt;&#xA;&lt;p&gt;guess的长度 = 3&#xA;answer的长度 = 3&#xA;guess的元素取值为 {1, 2, 3} 之一。&#xA;answer的元素取值为 {1, 2, 3} 之一。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>链表中的倒数第K个节点-LeetCodeM22</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9-leetcodem22/</link>
      <pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9-leetcodem22/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例：&lt;/p&gt;&#xA;&lt;p&gt;给定一个链表: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 和 k = 2.&lt;/p&gt;&#xA;&lt;p&gt;返回链表 4-&amp;gt;5.&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>环形链表—LeetCode141</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-leetcode141/</link>
      <pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-leetcode141/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个链表，判断链表中是否有环。&lt;/p&gt;&#xA;&lt;p&gt;为了表示给定链表中的环，我们使用整数 &lt;code&gt;pos&lt;/code&gt; 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 &lt;code&gt;pos&lt;/code&gt; 是 &lt;code&gt;-1&lt;/code&gt;，则在该链表中没有环。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入：head = \[3,2,0,-4], pos = 1&#xA;输出：true&#xA;解释：链表中有一个环，其尾部连接到第二个节点。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入：head = \[1,2], pos = 0&#xA;输出：true&#xA;解释：链表中有一个环，其尾部连接到第一个节点。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入：head = \[1], pos = -1&#xA;输出：false&#xA;解释：链表中没有环。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;进阶：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;你能用 &lt;em&gt;O(1)&lt;/em&gt;（即，常量）内存解决此问题吗？&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>移除元素-LeetCode27</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-leetcode27/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-leetcode27/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。&lt;/p&gt;&#xA;&lt;p&gt;不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。&lt;/p&gt;&#xA;&lt;p&gt;元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;给定 nums = [3,2,2,3], val = 3,&lt;/p&gt;&#xA;&lt;p&gt;函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。&lt;/p&gt;&#xA;&lt;p&gt;你不需要考虑数组中超出新长度后面的元素。&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;给定 nums = [0,1,2,2,3,0,4,2], val = 2,&lt;/p&gt;&#xA;&lt;p&gt;函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。&lt;/p&gt;&#xA;&lt;p&gt;注意这五个元素可为任意顺序。&lt;/p&gt;&#xA;&lt;p&gt;你不需要考虑数组中超出新长度后面的元素。&lt;/p&gt;&#xA;&lt;p&gt;说明:&lt;/p&gt;&#xA;&lt;p&gt;为什么返回数值是整数，但输出的答案是数组呢?&lt;/p&gt;&#xA;&lt;p&gt;请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。&lt;/p&gt;&#xA;&lt;p&gt;你可以想象内部操作如下:&lt;/p&gt;&#xA;&lt;p&gt;// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝&#xA;int len = removeElement(nums, val);&lt;/p&gt;&#xA;&lt;p&gt;// 在函数里修改输入数组对于调用者是可见的。&#xA;// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。&#xA;for (int i = 0; i &amp;lt; len; i++) {&#xA;print(nums[i]);&#xA;}&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>K个一组翻转链表-LeetCode25</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8-leetcode25/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8-leetcode25/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。&#xA;k 是一个正整数，它的值小于或等于链表的长度。&#xA;如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。&#xA;示例 :&#xA;给定这个链表：1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5&#xA;当 k = 2 时，应当返回: 2-&amp;gt;1-&amp;gt;4-&amp;gt;3-&amp;gt;5&#xA;当 k = 3 时，应当返回: 3-&amp;gt;2-&amp;gt;1-&amp;gt;4-&amp;gt;5&#xA;说明 :&#xA;你的算法只能使用常数的额外空间。&#xA;你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;解题思路&#34;&gt;解题思路&lt;/h1&gt;&#xA;&lt;p&gt;首先根据 k，分隔每一组。将这一组反转，将下面的一组递归调用函数，然后将这一组的最后一个节点（就是参数中的头结点）与下一组反转后的头结点相连接。&lt;/p&gt;</description>
    </item>
    <item>
      <title>反转一个单链表-LeetCode206</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8F%8D%E8%BD%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E9%93%BE%E8%A1%A8-leetcode206/</link>
      <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8F%8D%E8%BD%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E9%93%BE%E8%A1%A8-leetcode206/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;反转一个单链表。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL&#xA;输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;进阶:&lt;/strong&gt;&#xA;你可以迭代或递归地反转链表。你能否用两种方法解决这道题？&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>用队列实现栈-LeetCode225</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88-leetcode225/</link>
      <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88-leetcode225/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;使用队列实现栈的下列操作：&#xA;push(x) &amp;ndash; 元素 x 入栈&#xA;pop() &amp;ndash; 移除栈顶元素&#xA;top() &amp;ndash; 获取栈顶元素&#xA;empty() &amp;ndash; 返回栈是否为空&#xA;注意:&lt;/p&gt;&#xA;&lt;p&gt;你只能使用队列的基本操作&amp;ndash; 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。&#xA;你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。&#xA;你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;h1 id=&#34;解题思路&#34;&gt;解题思路&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用两个队列&lt;/p&gt;&#xA;&lt;p&gt;将元素添加到第一个队列中。&lt;/p&gt;&#xA;&lt;p&gt;在获取元素时，将第一个队列中除了最后一个元素都添加到第二个队列中，剩下的这个就是要返回的元素。&lt;/p&gt;&#xA;&lt;p&gt;将两个队列进行交换，这样在添加元素时都能放到第一个队列中。&lt;/p&gt;&#xA;&lt;p&gt;使用一个变量来存储最后一个元素，这样在调用 top 方法时直接返回这个变量即可。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liunaijie/images/master/%E7%94%A8%E5%8F%8C%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.png&#34; alt=&#34;用双队列实现栈&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用一个队列&lt;/p&gt;&#xA;&lt;p&gt;添加元素时添加到队列中，然后将队列中的元素除了最后一个再重新放入一遍&lt;/p&gt;&#xA;&lt;p&gt;在获取元素和查看元素时都拿第一个即可&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liunaijie/images/master/%E7%94%A8%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.png&#34; alt=&#34;用一个队列实现栈&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>用栈实现队列-LeetCode232</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97-leetcode232/</link>
      <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97-leetcode232/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;使用栈实现队列的下列操作：&lt;/p&gt;&#xA;&lt;p&gt;push(x) &amp;ndash; 将一个元素放入队列的尾部。&#xA;pop() &amp;ndash; 从队列首部移除元素。&#xA;peek() &amp;ndash; 返回队列首部的元素。&#xA;empty() &amp;ndash; 返回队列是否为空。&#xA;示例:&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;MyQueue queue = new MyQueue();&lt;/p&gt;&#xA;&lt;p&gt;queue.push(1);&#xA;queue.push(2);&lt;br&gt;&#xA;queue.peek();  // 返回 1&#xA;queue.pop();   // 返回 1&#xA;queue.empty(); // 返回 false&#xA;说明:&lt;/p&gt;&#xA;&lt;p&gt;你只能使用标准的栈操作 &amp;ndash; 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。&#xA;你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。&#xA;假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;h1 id=&#34;解题思路&#34;&gt;解题思路&lt;/h1&gt;&#xA;&lt;p&gt;栈（先进后出）来实现队列（先进先出）。&lt;/p&gt;&#xA;&lt;p&gt;可以用两个栈来实现，第一个栈存储，当进行 peek 或 pop 操作时，将第一个栈内元素按照先进后出的原则拿出来放到第二个栈里面。这时第二个栈里面在取就是我们总的第一个元素。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liunaijie/images/master/%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.png&#34; alt=&#34;用栈实现队列&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>两两交换链表中的节点—LeetCode24</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9-leetcode24/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9-leetcode24/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;你不能只是单纯的改变节点内部的值&lt;/strong&gt;，而是需要实际的进行节点交换。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;给定 1-&amp;gt;2-&amp;gt;3-&amp;gt;4, 你应该返回 2-&amp;gt;1-&amp;gt;4-&amp;gt;3.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;可以看出，链表每两个一组交换了前后位置，然后再跟其他元素按照原有顺序连接。&lt;/p&gt;</description>
    </item>
    <item>
      <title>整数反转—LeetCode7</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC-leetcode7/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC-leetcode7/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;输入: 123&#xA;输出: 321&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;输入: -123&#xA;输出: -321&#xA;示例 3:&lt;/p&gt;&#xA;&lt;p&gt;输入: 120&#xA;输出: 21&#xA;注意:&lt;/p&gt;&#xA;&lt;p&gt;假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;题目中给出了条件，我们只能存储32位有符号整数，如果溢出后则返回0，避免出现溢出错误&lt;/p&gt;</description>
    </item>
    <item>
      <title>回文数—LeetCode9</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%9B%9E%E6%96%87%E6%95%B0-leetcode9/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%9B%9E%E6%96%87%E6%95%B0-leetcode9/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;输入: 121&#xA;输出: true&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;输入: -121&#xA;输出: false&#xA;解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。&#xA;示例 3:&lt;/p&gt;&#xA;&lt;p&gt;输入: 10&#xA;输出: false&#xA;解释: 从右向左读, 为 01 。因此它不是一个回文数。&#xA;进阶:&lt;/p&gt;&#xA;&lt;p&gt;你能不将整数转为字符串来解决这个问题吗？&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;从示例2中可以看出，负数不是回文数，可以先对此进行判断。&lt;/p&gt;&#xA;&lt;p&gt;而提示中有一个提示，能否不使用字符串来解决这个问题，那么使用字符串肯定是可以解决这个问题的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>翻转二叉树—LeetCode226</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91-leetcode226/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91-leetcode226/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;翻转一棵二叉树。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;输入：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;     4&#xA;   /   \&#xA;  2     7&#xA; / \   / \&#xA;1   3 6   9&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;     4&#xA;   /   \&#xA;  7     2&#xA; / \   / \&#xA;9   6 3   1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;代码实现&#34;&gt;代码实现&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;invertTree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;invertTree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;invertTree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>二叉搜索树的范围和-LeetCode938</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E8%8C%83%E5%9B%B4%E5%92%8C-leetcode938/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E8%8C%83%E5%9B%B4%E5%92%8C-leetcode938/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定二叉搜索树的根结点 root，返回 L 和 R（含）之间的所有结点的值的和。&lt;/p&gt;&#xA;&lt;p&gt;二叉搜索树保证具有唯一的值。&lt;/p&gt;&#xA;&lt;p&gt;示例 1：&lt;/p&gt;&#xA;&lt;p&gt;输入：root = [10,5,15,3,7,null,18], L = 7, R = 15&#xA;输出：32&#xA;示例 2：&lt;/p&gt;&#xA;&lt;p&gt;输入：root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10&#xA;输出：23&lt;/p&gt;&#xA;&lt;p&gt;提示：&lt;/p&gt;&#xA;&lt;p&gt;树中的结点数量最多为 10000 个。&#xA;最终的答案保证小于 2^31。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>三数之和—LeetCode15</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C-leetcode15/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C-leetcode15/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？&lt;/p&gt;&#xA;&lt;p&gt;请你找出所有满足条件且不重复的三元组。&lt;/p&gt;&#xA;&lt;p&gt;注意：&lt;strong&gt;答案中不可以包含重复的三元组&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;示例：&lt;/p&gt;&#xA;&lt;p&gt;给定数组 nums = [-1, 0, 1, 2, -1, -4]，&lt;/p&gt;&#xA;&lt;p&gt;满足要求的三元组集合为：&#xA;[&#xA;[-1, 0, 1],&#xA;[-1, -1, 2]&#xA;]&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;这个题目中有一个条件，答案中不可以包含重复的三元组，即给定的数组中会有重复值，所以答案可能会存在重复答案，当答案存在时，不在添加到答案中&lt;/p&gt;</description>
    </item>
    <item>
      <title>实现strStr()—LeetCode28</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%AE%9E%E7%8E%B0strstr-leetcode28/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%AE%9E%E7%8E%B0strstr-leetcode28/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;实现 strStr() 函数。&lt;/p&gt;&#xA;&lt;p&gt;给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;输入: haystack = &amp;ldquo;hello&amp;rdquo;, needle = &amp;ldquo;ll&amp;rdquo;&#xA;输出: 2&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;输入: haystack = &amp;ldquo;aaaaa&amp;rdquo;, needle = &amp;ldquo;bba&amp;rdquo;&#xA;输出: -1&#xA;说明:&lt;/p&gt;&#xA;&lt;p&gt;当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。&lt;/p&gt;&#xA;&lt;p&gt;对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>两数相加-LeetCode2</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0-leetcode2/</link>
      <pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0-leetcode2/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。&lt;/p&gt;&#xA;&lt;p&gt;如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。&lt;/p&gt;&#xA;&lt;p&gt;您可以假设除了数字 0 之外，这两个数都不会以 0 开头。&lt;/p&gt;&#xA;&lt;p&gt;示例：&lt;/p&gt;&#xA;&lt;p&gt;输入：(2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)&#xA;输出：7 -&amp;gt; 0 -&amp;gt; 8&#xA;原因：342 + 465 = 807&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>重复N次的元素-LeetCode961</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E9%87%8D%E5%A4%8Dn%E6%AC%A1%E7%9A%84%E5%85%83%E7%B4%A0-leetcode961/</link>
      <pubDate>Thu, 08 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E9%87%8D%E5%A4%8Dn%E6%AC%A1%E7%9A%84%E5%85%83%E7%B4%A0-leetcode961/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在大小为 2N 的数组 A 中有 N+1 个不同的元素，其中有一个元素重复了 N 次。&lt;/p&gt;&#xA;&lt;p&gt;返回重复了 N 次的那个元素。&lt;/p&gt;&#xA;&lt;p&gt;示例 1：&lt;/p&gt;&#xA;&lt;p&gt;输入：[1,2,3,3]&#xA;输出：3&#xA;示例 2：&lt;/p&gt;&#xA;&lt;p&gt;输入：[2,1,2,5,3,2]&#xA;输出：2&#xA;示例 3：&lt;/p&gt;&#xA;&lt;p&gt;输入：[5,1,5,2,5,3,5,4]&#xA;输出：5&lt;/p&gt;&#xA;&lt;p&gt;提示：&lt;/p&gt;&#xA;&lt;p&gt;4 &amp;lt;= A.length &amp;lt;= 10000&#xA;0 &amp;lt;= A[i] &amp;lt; 10000&#xA;A.length 为偶数&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;大小为2N的数字中有个N+1个元素，其中有个元素重复了N次，这也说明了除了这个元素其他元素都没有重复，也可以理解成查找重复的元素&lt;/p&gt;</description>
    </item>
    <item>
      <title>两个数组的交集II-LeetCode350</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86ii-leetcode350/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86ii-leetcode350/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定两个数组，编写一个函数来计算它们的交集。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入: nums1 = \[1,2,2,1], nums2 = \[2,2]&#xA;输出: \[2,2]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入: nums1 = \[4,9,5], nums2 = \[9,4,9,8,4]&#xA;输出: \[4,9]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。&lt;/li&gt;&#xA;&lt;li&gt;我们可以不考虑输出结果的顺序。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;*进阶:*&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果给定的数组已经排好序呢？你将如何优化你的算法？&lt;/li&gt;&#xA;&lt;li&gt;如果 &lt;em&gt;nums1&lt;/em&gt; 的大小比 &lt;em&gt;nums2&lt;/em&gt; 小很多，哪种方法更优？&lt;/li&gt;&#xA;&lt;li&gt;如果 &lt;em&gt;nums2&lt;/em&gt; 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;这个题目的T349的进阶版。&lt;/p&gt;</description>
    </item>
    <item>
      <title>有效的括号—LeetCode20</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86-leetcode349/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86-leetcode349/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定两个数组，编写一个函数来计算它们的交集。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入: nums1 = \[1,2,2,1], nums2 = \[2,2]&#xA;输出: \[2]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入: nums1 = \[4,9,5], nums2 = \[9,4,9,8,4]&#xA;输出: \[9,4]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输出结果中的每个元素一定是唯一的。&lt;/li&gt;&#xA;&lt;li&gt;我们可以不考虑输出结果的顺序。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>有效的括号—LeetCode20</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7-leetcode20/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7-leetcode20/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;给定一个只包括 &lt;code&gt;&#39;(&#39;&lt;/code&gt;，&lt;code&gt;&#39;)&#39;&lt;/code&gt;，&lt;code&gt;&#39;{&#39;&lt;/code&gt;，&lt;code&gt;&#39;}&#39;&lt;/code&gt;，&lt;code&gt;&#39;[&#39;&lt;/code&gt;，&lt;code&gt;&#39;]&#39;&lt;/code&gt; 的字符串，判断字符串是否有效。&#xA;有效字符串需满足：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;左括号必须用相同类型的右括号闭合。&lt;/li&gt;&#xA;&lt;li&gt;左括号必须以正确的顺序闭合。&#xA;注意空字符串可被认为是有效字符串。&#xA;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入: &amp;#34;()&amp;#34;&#xA;输出: true&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入: &amp;#34;()[]{}&amp;#34;&#xA;输出: true&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 3:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入: &amp;#34;(]&amp;#34;&#xA;输出: false&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 4:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; 输入: &amp;#34;(\[)]&amp;#34;&#xA; 输出: false&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 5:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入: &amp;#34;{\[]}&amp;#34;&#xA;输出: true&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个题目与我们编译器对括号的识别一样，当我们多了一个括号后编译器会报错提示。&lt;/p&gt;</description>
    </item>
    <item>
      <title>保持城市的天际线-LeetCode807</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BF%9D%E6%8C%81%E5%9F%8E%E5%B8%82%E7%9A%84%E5%A4%A9%E9%99%85%E7%BA%BF-leetcode807/</link>
      <pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BF%9D%E6%8C%81%E5%9F%8E%E5%B8%82%E7%9A%84%E5%A4%A9%E9%99%85%E7%BA%BF-leetcode807/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在二维数组grid中，grid[i][j]代表位于某处的建筑物的高度。 我们被允许增加任何数量（不同建筑物的数量可能不同）的建筑物的高度。 高度 0 也被认为是建筑物。&lt;/p&gt;&#xA;&lt;p&gt;最后，从新数组的所有四个方向（即顶部，底部，左侧和右侧）观看的“天际线”必须与原始数组的天际线相同。 城市的天际线是从远处观看时，由所有建筑物形成的矩形的外部轮廓。 请看下面的例子。&lt;/p&gt;&#xA;&lt;p&gt;建筑物高度可以增加的最大总和是多少？&lt;/p&gt;&#xA;&lt;p&gt;例子：&#xA;输入： grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]&#xA;输出： 35&#xA;解释：&#xA;The grid is:&#xA;[ [3, 0, 8, 4],&#xA;[2, 4, 5, 7],&#xA;[9, 2, 6, 3],&#xA;[0, 3, 1, 0] ]&lt;/p&gt;&#xA;&lt;p&gt;从数组竖直方向（即顶部，底部）看“天际线”是：[9, 4, 8, 7]&#xA;从水平水平方向（即左侧，右侧）看“天际线”是：[8, 7, 9, 3]&lt;/p&gt;&#xA;&lt;p&gt;在不影响天际线的情况下对建筑物进行增高后，新数组如下：&lt;/p&gt;&#xA;&lt;p&gt;gridNew = [ [8, 4, 8, 7],&#xA;[7, 4, 7, 7],&#xA;[9, 4, 8, 7],&#xA;[3, 3, 3, 3] ]&#xA;说明:&lt;/p&gt;&#xA;&lt;p&gt;1 &amp;lt; grid.length = &lt;code&gt;grid[0].length&lt;/code&gt; &amp;lt;= 50。&#xA;&lt;code&gt;grid[i][j]&lt;/code&gt; 的高度范围是： [0, 100]。&#xA;一座建筑物占据一个&lt;code&gt;grid[i][j]&lt;/code&gt;：换言之，它们是 &lt;code&gt;1 x 1 x grid[i][j]&lt;/code&gt; 的长方体。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;这个问题类似看三视图，然后再根据两个三视图合并出符合条件的最高值。&lt;/p&gt;&#xA;&lt;p&gt;最后要返回的结果是这个最高值比原有值增长了多少&lt;/p&gt;</description>
    </item>
    <item>
      <title>山脉数组的峰顶索引-LeetCode852</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84%E7%9A%84%E5%B3%B0%E9%A1%B6%E7%B4%A2%E5%BC%95-leetcode852/</link>
      <pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84%E7%9A%84%E5%B3%B0%E9%A1%B6%E7%B4%A2%E5%BC%95-leetcode852/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;我们把符合下列属性的数组 A 称作山脉：&lt;/p&gt;&#xA;&lt;p&gt;A.length &amp;gt;= 3&#xA;存在 0 &amp;lt; i &amp;lt; A.length - 1 使得A[0] &amp;lt; A[1] &amp;lt; &amp;hellip; A[i-1] &amp;lt; A[i] &amp;gt; A[i+1] &amp;gt; &amp;hellip; &amp;gt; A[A.length - 1]&#xA;给定一个确定为山脉的数组，返回任何满足 A[0] &amp;lt; A[1] &amp;lt; &amp;hellip; A[i-1] &amp;lt; A[i] &amp;gt; A[i+1] &amp;gt; &amp;hellip; &amp;gt; A[A.length - 1] 的 i 的值。&lt;/p&gt;&#xA;&lt;p&gt;示例 1：&lt;/p&gt;&#xA;&lt;p&gt;输入：[0,1,0]&#xA;输出：1&#xA;示例 2：&lt;/p&gt;&#xA;&lt;p&gt;输入：[0,2,1,0]&#xA;输出：1&lt;/p&gt;&#xA;&lt;p&gt;提示：&lt;/p&gt;&#xA;&lt;p&gt;3 &amp;lt;= A.length &amp;lt;= 10000&#xA;0 &amp;lt;= A[i] &amp;lt;= 10^6&#xA;A 是如上定义的山脉&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;其实这就是一个寻找数组最大值的问题&lt;/p&gt;</description>
    </item>
    <item>
      <title>键盘行-LeetCode500</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E9%94%AE%E7%9B%98%E8%A1%8C-leetcode500/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E9%94%AE%E7%9B%98%E8%A1%8C-leetcode500/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个单词列表，只返回可以使用在键盘同一行的字母打印出来的单词。键盘如下图所示。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/keyboard.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;示例：&lt;/p&gt;&#xA;&lt;p&gt;输入: [&amp;ldquo;Hello&amp;rdquo;, &amp;ldquo;Alaska&amp;rdquo;, &amp;ldquo;Dad&amp;rdquo;, &amp;ldquo;Peace&amp;rdquo;]&#xA;输出: [&amp;ldquo;Alaska&amp;rdquo;, &amp;ldquo;Dad&amp;rdquo;]&lt;/p&gt;&#xA;&lt;p&gt;注意：&lt;/p&gt;&#xA;&lt;p&gt;你可以重复使用键盘上同一字符。&#xA;你可以假设输入的字符串将只包含字母。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;判断给出的字符是否全部在一行中&lt;/p&gt;</description>
    </item>
    <item>
      <title>反转字符串中的单词III-LeetCode557</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8Diii-leetcode557/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8Diii-leetcode557/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;输入: &amp;ldquo;Let&amp;rsquo;s take LeetCode contest&amp;rdquo;&#xA;输出: &amp;ldquo;s&amp;rsquo;teL ekat edoCteeL tsetnoc&amp;rdquo;&#xA;注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;根据示例可以看出，需要将每个单词反转后再根据原有顺序拼接起来&lt;/p&gt;</description>
    </item>
    <item>
      <title>反转字符串-LeetCode344</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2-leetcode344/</link>
      <pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2-leetcode344/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。&lt;/p&gt;&#xA;&lt;p&gt;不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。&lt;/p&gt;&#xA;&lt;p&gt;你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。&lt;/p&gt;&#xA;&lt;p&gt;示例 1：&lt;/p&gt;&#xA;&lt;p&gt;输入：[&amp;ldquo;h&amp;rdquo;,&amp;ldquo;e&amp;rdquo;,&amp;ldquo;l&amp;rdquo;,&amp;ldquo;l&amp;rdquo;,&amp;ldquo;o&amp;rdquo;]&#xA;输出：[&amp;ldquo;o&amp;rdquo;,&amp;ldquo;l&amp;rdquo;,&amp;ldquo;l&amp;rdquo;,&amp;ldquo;e&amp;rdquo;,&amp;ldquo;h&amp;rdquo;]&#xA;示例 2：&lt;/p&gt;&#xA;&lt;p&gt;输入：[&amp;ldquo;H&amp;rdquo;,&amp;ldquo;a&amp;rdquo;,&amp;ldquo;n&amp;rdquo;,&amp;ldquo;n&amp;rdquo;,&amp;ldquo;a&amp;rdquo;,&amp;ldquo;h&amp;rdquo;]&#xA;输出：[&amp;ldquo;h&amp;rdquo;,&amp;ldquo;a&amp;rdquo;,&amp;ldquo;n&amp;rdquo;,&amp;ldquo;n&amp;rdquo;,&amp;ldquo;a&amp;rdquo;,&amp;ldquo;H&amp;rdquo;]&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;这个题目的要求是在O(1)的空间复杂度下完成反转&lt;/p&gt;&#xA;&lt;h1 id=&#34;解题思路&#34;&gt;解题思路&lt;/h1&gt;&#xA;&lt;p&gt;不能使用额外的空间，又需要将数组反转，我们可以将第一个与最后一个进行反转，然后第二个与倒数第二个进行反转&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;reverseString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>删除最外层的括号—LeetCode1021</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%88%A0%E9%99%A4%E6%9C%80%E5%A4%96%E5%B1%82%E7%9A%84%E6%8B%AC%E5%8F%B7leetcode1021/</link>
      <pubDate>Sat, 22 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%88%A0%E9%99%A4%E6%9C%80%E5%A4%96%E5%B1%82%E7%9A%84%E6%8B%AC%E5%8F%B7leetcode1021/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述：&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;有效括号字符串为空 (&amp;quot;&amp;quot;)、&amp;quot;(&amp;quot; + A + &amp;ldquo;)&amp;rdquo; 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。&#xA;例如，&amp;quot;&amp;quot;，&amp;quot;()&amp;quot;，&amp;quot;(())()&amp;quot; 和 &amp;ldquo;(()(()))&amp;rdquo; 都是有效的括号字符串。&#xA;如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。&#xA;给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + &amp;hellip; + P_k，其中 P_i 是有效括号字符串原语。&#xA;对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。&#xA;示例 1：&#xA;输入：&amp;quot;(()())(())&amp;quot;&#xA;输出：&amp;quot;()()()&amp;quot;&#xA;解释：&#xA;输入字符串为 &amp;ldquo;(()())(())&amp;quot;，原语化分解得到 &amp;ldquo;(()())&amp;rdquo; + &amp;ldquo;(())&amp;quot;，&#xA;删除每个部分中的最外层括号后得到 &amp;ldquo;()()&amp;rdquo; + &amp;ldquo;()&amp;rdquo; = &amp;ldquo;()()()&amp;quot;。&#xA;示例 2：&#xA;输入：&amp;rdquo;(()())(())(()(()))&amp;rdquo;&#xA;输出：&amp;rdquo;()()()()(())&amp;quot;&#xA;解释：&#xA;输入字符串为 &amp;ldquo;(()())(())(()(()))&amp;quot;，原语化分解得到 &amp;ldquo;(()())&amp;rdquo; + &amp;ldquo;(())&amp;rdquo; + &amp;ldquo;(()(()))&amp;quot;，&#xA;删除每隔部分中的最外层括号后得到 &amp;ldquo;()()&amp;rdquo; + &amp;ldquo;()&amp;rdquo; + &amp;ldquo;()(())&amp;rdquo; = &amp;ldquo;()()()()(())&amp;quot;。&#xA;示例 3：&#xA;输入：&amp;rdquo;()()&amp;rdquo;&#xA;输出：&amp;rdquo;&amp;quot;&#xA;解释：&#xA;输入字符串为 &amp;ldquo;()()&amp;quot;，原语化分解得到 &amp;ldquo;()&amp;rdquo; + &amp;ldquo;()&amp;quot;，&#xA;删除每个部分中的最外层括号后得到 &amp;quot;&amp;rdquo; + &amp;quot;&amp;rdquo; = &amp;ldquo;&amp;quot;。&#xA;提示：&#xA;S.length &amp;lt;= 10000&#xA;S[i] 为 &amp;ldquo;(&amp;rdquo; 或 &amp;ldquo;)&amp;rdquo;&#xA;S 是一个有效括号字符串&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;解题思路&#34;&gt;解题思路：&lt;/h1&gt;&#xA;&lt;p&gt;字符串S是一个有效括号字符串，那么我们可以先进行原语化分解，然后再对每个原语进行去除最外层括号。&lt;/p&gt;&#xA;&lt;p&gt;进行原语分解的时候我们可以定义一个值和一个字符串，遇到左括号这个值加一并将左括号添加到这个字符串上，遇到右括号这个值减一并且将右括号添加到字符串上，当这个值变成0并且字符串的长度为2的倍数时就可以认为这个字符串是一个原语。&lt;/p&gt;</description>
    </item>
    <item>
      <title>增减字符串匹配—LeetCode942</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%A2%9E%E5%87%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8Dleetcode942/</link>
      <pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%A2%9E%E5%87%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8Dleetcode942/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述：&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定只含 &amp;ldquo;I&amp;rdquo;（增大）或 &amp;ldquo;D&amp;rdquo;（减小）的字符串 S ，令 N = S.length。&lt;/p&gt;&#xA;&lt;p&gt;返回 [0, 1, &amp;hellip;, N] 的任意排列 A 使得对于所有 i = 0, &amp;hellip;, N-1，都有：&lt;/p&gt;&#xA;&lt;p&gt;如果 &lt;code&gt;S[i]&lt;/code&gt; == &amp;ldquo;I&amp;rdquo;，那么 &lt;code&gt;A[i]&lt;/code&gt; &amp;lt; &lt;code&gt;A[i+1]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果 &lt;code&gt;S[i]&lt;/code&gt; == &amp;ldquo;D&amp;rdquo;，那么 &lt;code&gt;A[i]&lt;/code&gt; &amp;gt; &lt;code&gt;A[i+1]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;示例 1：&lt;/p&gt;&#xA;&lt;p&gt;输出：&amp;ldquo;IDID&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;输出：[0,4,1,3,2]&lt;/p&gt;&#xA;&lt;p&gt;示例 2：&lt;/p&gt;&#xA;&lt;p&gt;输出：&amp;ldquo;III&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;输出：[0,1,2,3]&lt;/p&gt;&#xA;&lt;p&gt;示例 3：&lt;/p&gt;&#xA;&lt;p&gt;输出：&amp;ldquo;DDI&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;输出：[3,2,0,1]&lt;/p&gt;&#xA;&lt;p&gt;提示：&lt;/p&gt;&#xA;&lt;p&gt;1 &amp;lt;= S.length &amp;lt;= 1000&lt;/p&gt;&#xA;&lt;p&gt;S 只包含字符 &amp;ldquo;I&amp;rdquo; 或 &amp;ldquo;D&amp;rdquo;。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;h1 id=&#34;解题思路&#34;&gt;解题思路：&lt;/h1&gt;&#xA;&lt;p&gt;给定只包含&lt;code&gt;I&lt;/code&gt;和&lt;code&gt;D&lt;/code&gt;的字符串，让我们求符合规则的数组。首先确认的是数组内的数值为0到字符串的长度，如果字符串长度为2，那数组内的数值就是0，1，2。&lt;/p&gt;&#xA;&lt;p&gt;然后遇到&lt;code&gt;I&lt;/code&gt;表示增大，遇到&lt;code&gt;D&lt;/code&gt;表示减少，那么可以利用双指针，如果遇到&lt;code&gt;I&lt;/code&gt;则从最小值&lt;code&gt;0&lt;/code&gt;开始放然后加一，遇到&lt;code&gt;D&lt;/code&gt;则从最大值开始放然后减一。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;diStringMatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chars&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toCharArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chars&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>高度检查器—LeetCode1051</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E9%AB%98%E5%BA%A6%E6%A3%80%E6%9F%A5%E5%99%A8leetcode1051/</link>
      <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E9%AB%98%E5%BA%A6%E6%A3%80%E6%9F%A5%E5%99%A8leetcode1051/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述：&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。&#xA;请你返回至少有多少个学生没有站在正确位置数量。该人数指的是：能让所有学生以 非递减 高度排列的必要移动人数。&#xA;示例：&#xA;输入：[1,1,4,2,1,3]&#xA;输出：3&#xA;解释：&#xA;高度为 4、3 和最后一个 1 的学生，没有站在正确的位置。&#xA;提示：&#xA;1 &amp;lt;= heights.length &amp;lt;= 100&#xA;1 &amp;lt;= heights[i] &amp;lt;= 100&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>三角形最小路径和—LeetCode120</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C-leetcode120/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C-leetcode120/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。&lt;/p&gt;&#xA;&lt;p&gt;例如，给定三角形：&lt;/p&gt;&#xA;&lt;p&gt;[&#xA;[2],&#xA;[3,4],&#xA;[6,5,7],&#xA;[4,1,8,3]&#xA;]&#xA;自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。&lt;/p&gt;&#xA;&lt;p&gt;说明：&lt;/p&gt;&#xA;&lt;p&gt;如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;题目中有一句话，每一步只能移动到下一行中相邻的结点中，所以在m行n列时，下一步的落地只能在m+1行n列或者m+1行n+1列中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>电话号码的字母组合—LeetCode17</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88leetcode17/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88leetcode17/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述：&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。&#xA;给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。&#xA;示例:&#xA;输入：&amp;ldquo;23&amp;rdquo;&#xA;输出：[&amp;ldquo;ad&amp;rdquo;, &amp;ldquo;ae&amp;rdquo;, &amp;ldquo;af&amp;rdquo;, &amp;ldquo;bd&amp;rdquo;, &amp;ldquo;be&amp;rdquo;, &amp;ldquo;bf&amp;rdquo;, &amp;ldquo;cd&amp;rdquo;, &amp;ldquo;ce&amp;rdquo;, &amp;ldquo;cf&amp;rdquo;].&#xA;说明:&#xA;尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;题目解读&#34;&gt;题目解读：&lt;/h1&gt;&#xA;&lt;p&gt;这个问题的场景就是我们的手机9宫格按键，当我们按下按键时计算出所有的字母组合，当我们按下第一个按键时，现在的组合次数为该按键对应的字母个数(m)。当我们再一次按下一个按键时，现在的次数变成了这一次按键对应的字母个数与上一次的次数相乘(m*n)&lt;/p&gt;</description>
    </item>
    <item>
      <title>反转图像—LeetCode832</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8F%8D%E8%BD%AC%E5%9B%BE%E5%83%8Fleetcode832/</link>
      <pubDate>Mon, 10 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8F%8D%E8%BD%AC%E5%9B%BE%E5%83%8Fleetcode832/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述：&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。&#xA;水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。&#xA;反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。&#xA;示例 1:&#xA;输入: [[1,1,0],[1,0,1],[0,0,0]]&#xA;输出:[[1,0,0],[0,1,0],[1,1,1]]&#xA;解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；&#xA;然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]&#xA;示例 2:&#xA;输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]&#xA;输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]&#xA;说明:&#xA;1 &amp;lt;= A.length = A[0].length &amp;lt;= 20&#xA;0 &amp;lt;= A[i][j] &amp;lt;= 1&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;解题思路&#34;&gt;解题思路：&lt;/h1&gt;&#xA;&lt;p&gt;将每一行进行翻转就是顺序转换，然后再进行反转图片就是将0转换为1，1转换为0，我们可以用 &lt;code&gt;x=1-x&lt;/code&gt;来实现&lt;/p&gt;</description>
    </item>
    <item>
      <title>自除数—LeetCode728</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E8%87%AA%E9%99%A4%E6%95%B0leetcode728/</link>
      <pubDate>Tue, 04 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E8%87%AA%E9%99%A4%E6%95%B0leetcode728/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述：&lt;/h1&gt;&#xA;&lt;p&gt;自除数 是指可以被它包含的每一位数除尽的数。&#xA;例如，128 是一个自除数，因为 128 % 1 == 0，128 % 2 == 0，128 % 8 == 0。&#xA;还有，自除数不允许包含 0 。&#xA;给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。&#xA;示例 1：&#xA;输入：&#xA;上边界left = 1, 下边界right = 22&#xA;输出： [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]&#xA;注意：&#xA;每个输入参数的边界满足 1 &amp;lt;= left &amp;lt;= right &amp;lt;= 10000。&lt;/p&gt;&#xA;&lt;h1 id=&#34;解读&#34;&gt;解读：&lt;/h1&gt;&#xA;&lt;p&gt;判断一个数能不能被他的每一位除尽，那就要取出每一位数，进行计算，并且自除数不允许包含0，所以如果有0则直接判断不是自除数&lt;/p&gt;</description>
    </item>
    <item>
      <title>机器人能否返回终点—LeetCode657</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%83%BD%E5%90%A6%E8%BF%94%E5%9B%9E%E7%BB%88%E7%82%B9leetcode657/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%83%BD%E5%90%A6%E8%BF%94%E5%9B%9E%E7%BB%88%E7%82%B9leetcode657/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述：&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在二维平面上，有一个机器人从原点 (0, 0) 开始。给出它的移动顺序，判断这个机器人在完成移动后是否在 (0, 0) 处结束。&#xA;移动顺序由字符串表示。字符 move[i] 表示其第 i 次移动。机器人的有效动作有 R（右），L（左），U（上）和 D（下）。如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。&#xA;注意：机器人“面朝”的方向无关紧要。 “R” 将始终使机器人向右移动一次，“L” 将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。&#xA;示例 1:&#xA;输入: &amp;ldquo;UD&amp;rdquo;&#xA;输出: true&#xA;解释：机器人向上移动一次，然后向下移动一次。所有动作都具有相同的幅度，因此它最终回到它开始的原点。因此，我们返回 true。&#xA;示例 2:&#xA;输入: &amp;ldquo;LL&amp;rdquo;&#xA;输出: false&#xA;解释：机器人向左移动两次。它最终位于原点的左侧，距原点有两次 “移动” 的距离。我们返回 false，因为它在移动结束时没有返回原点。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>唯一摩尔斯密码词—LeetCode804</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%94%AF%E4%B8%80%E6%91%A9%E5%B0%94%E6%96%AF%E5%AF%86%E7%A0%81%E8%AF%8Dleetcode804/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%94%AF%E4%B8%80%E6%91%A9%E5%B0%94%E6%96%AF%E5%AF%86%E7%A0%81%E8%AF%8Dleetcode804/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述：&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如: &amp;ldquo;a&amp;rdquo; 对应 &amp;ldquo;.-&amp;rdquo;, &amp;ldquo;b&amp;rdquo; 对应 &amp;ldquo;-&amp;hellip;&amp;rdquo;, &amp;ldquo;c&amp;rdquo; 对应 &amp;ldquo;-.-.&amp;rdquo;, 等等。&#xA;为了方便，所有26个英文字母对应摩尔斯密码表如下：&#xA;[&amp;quot;.-&amp;quot;,&amp;quot;-&amp;hellip;&amp;quot;,&amp;quot;-.-.&amp;quot;,&amp;quot;-..&amp;quot;,&amp;quot;.&amp;quot;,&amp;quot;..-.&amp;quot;,&amp;quot;&amp;ndash;.&amp;quot;,&amp;quot;&amp;hellip;.&amp;quot;,&amp;quot;..&amp;quot;,&amp;quot;.&amp;mdash;&amp;quot;,&amp;quot;-.-&amp;quot;,&amp;quot;.-..&amp;quot;,&amp;quot;&amp;ndash;&amp;quot;,&amp;quot;-.&amp;quot;,&amp;quot;&amp;mdash;&amp;quot;,&amp;quot;.&amp;ndash;.&amp;quot;,&amp;quot;&amp;ndash;.-&amp;quot;,&amp;quot;.-.&amp;quot;,&amp;quot;&amp;hellip;&amp;quot;,&amp;quot;-&amp;quot;,&amp;quot;..-&amp;quot;,&amp;quot;&amp;hellip;-&amp;quot;,&amp;quot;.&amp;ndash;&amp;quot;,&amp;quot;-..-&amp;quot;,&amp;quot;-.&amp;ndash;&amp;quot;,&amp;quot;&amp;ndash;..&amp;quot;]&#xA;给定一个单词列表，每个单词可以写成每个字母对应摩尔斯密码的组合。例如，&amp;ldquo;cab&amp;rdquo; 可以写成 &amp;ldquo;-.-..&amp;ndash;&amp;hellip;&amp;quot;，(即 &amp;ldquo;-.-.&amp;rdquo; + &amp;ldquo;-&amp;hellip;&amp;rdquo; + &amp;ldquo;.-&amp;ldquo;字符串的结合)。我们将这样一个连接过程称作单词翻译。&#xA;返回我们可以获得所有词不同单词翻译的数量。&#xA;例如:&#xA;输入: words = [&amp;ldquo;gin&amp;rdquo;, &amp;ldquo;zen&amp;rdquo;, &amp;ldquo;gig&amp;rdquo;, &amp;ldquo;msg&amp;rdquo;]&#xA;输出: 2&#xA;解释:&#xA;各单词翻译如下:&#xA;&amp;ldquo;gin&amp;rdquo; -&amp;gt; &amp;ldquo;&amp;ndash;&amp;hellip;-.&amp;rdquo;&#xA;&amp;ldquo;zen&amp;rdquo; -&amp;gt; &amp;ldquo;&amp;ndash;&amp;hellip;-.&amp;rdquo;&#xA;&amp;ldquo;gig&amp;rdquo; -&amp;gt; &amp;ldquo;&amp;ndash;&amp;hellip;&amp;ndash;.&amp;rdquo;&#xA;&amp;ldquo;msg&amp;rdquo; -&amp;gt; &amp;ldquo;&amp;ndash;&amp;hellip;&amp;ndash;.&amp;rdquo;&#xA;共有 2 种不同翻译, &amp;ldquo;&amp;ndash;&amp;hellip;-.&amp;rdquo; 和 &amp;ldquo;&amp;ndash;&amp;hellip;&amp;ndash;.&amp;rdquo;.&#xA;注意:&#xA;单词列表words 的长度不会超过 100。&#xA;每个单词 &lt;code&gt;words[i]&lt;/code&gt;的长度范围为 [1, 12]。&#xA;每个单词 &lt;code&gt;words[i]&lt;/code&gt;只包含小写字母。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;解题思路&#34;&gt;解题思路：&lt;/h1&gt;&#xA;&lt;p&gt;我们首先要根据给出的单词转换成摩尔斯密码&lt;/p&gt;&#xA;&lt;p&gt;利用一个数组按照字母顺序存储对应的密码值&lt;/p&gt;&#xA;&lt;p&gt;将一个单词的每一个字母根据对应位数的摩尔斯密码进行转换然后拼接&lt;/p&gt;&#xA;&lt;p&gt;这里利用set的不重复特性，将密码放入set集合中，如果有相同的密码则不会加入，最后获取set的长度即可。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nim游戏—LeetCode292</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/nim%E6%B8%B8%E6%88%8Fleetcode292/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/nim%E6%B8%B8%E6%88%8Fleetcode292/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述：&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。&#xA;你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。&#xA;示例:&#xA;输入: 4&#xA;输出: false&#xA;解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；&#xA;因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;思路&#34;&gt;思路：&lt;/h1&gt;&#xA;&lt;p&gt;先考虑一下什么情况会输呢，就是最后的石头被对手拿走，那么只要保证最后剩余1-3块石头我们即可获胜。如何能确保最后一定剩余1-3块呢，就要我们在每一步的时候跟对手拿的块数总和等于4。所以我们这道题就可以判断总块数是不是4的倍数，如果不是我们就可以赢。&lt;/p&gt;</description>
    </item>
    <item>
      <title>杨辉三角—LeetCode118</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92-leetcode118/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92-leetcode118/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在杨辉三角中，每个数是它左上方和右上方的数的和。&lt;/p&gt;&#xA;&lt;p&gt;示例:&lt;/p&gt;&#xA;&lt;p&gt;输入: 5&#xA;输出:&#xA;[&#xA;[1],&#xA;[1,1],&#xA;[1,2,1],&#xA;[1,3,3,1],&#xA;[1,4,6,4,1]&#xA;]&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>只出现一次的数字—LeetCode136</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97--leetcode136/</link>
      <pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97--leetcode136/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述：&lt;/h1&gt;&#xA;&lt;p&gt;给定一个&lt;strong&gt;非空&lt;/strong&gt;整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。&lt;/p&gt;&#xA;&lt;p&gt;示例1：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入：[2,2,1]&#xA;输出：1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例2：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入：[4,1,2,1,2]&#xA;输出：4&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;!-- more --&gt;&#xA;&lt;h1 id=&#34;解题思路&#34;&gt;解题思路：&lt;/h1&gt;&#xA;&lt;p&gt;刚开始是这样想的，先进行排序，然后我们两个一组，如果这两个数字一样，则开始下一组。如果不一样，那么第一个就是我们要找的元素。我们这组元素是奇数个，所以如果前面的都是相同的，那最后剩下的这个元素就是我们要找的元素。&lt;/p&gt;&#xA;&lt;h1 id=&#34;代码&#34;&gt;代码：&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;singleNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//排序&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &#x9;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 默认第一个元素&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &#x9;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 两个一组&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//如果是最后一个，那么直接返回&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 如果两个数字不一样，返回第一个数字&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&#x9;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;提交后发现我这个代码运行需要9ms，然后看了前面的代码，发现了一个很好的点：利用异或操作。(两个数字异或，相同得0，不同得1)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>删除链表中的节点—LeetCode237</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9-leetcode237/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9-leetcode237/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;输入: head = [4,5,1,9], node = 5&#xA;输出: [4,1,9]&#xA;解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 1 -&amp;gt; 9.&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;输入: head = [4,5,1,9], node = 1&#xA;输出: [4,5,9]&#xA;解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 5 -&amp;gt; 9.&lt;/p&gt;&#xA;&lt;p&gt;说明:&lt;/p&gt;&#xA;&lt;p&gt;链表至少包含两个节点。&#xA;链表中所有节点的值都是唯一的。&#xA;给定的节点为非末尾节点并且一定是链表中的一个有效节点。&#xA;不要从你的函数中返回任何结果。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>买卖股票的最佳时机II-LeetCode122</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAii-leetcode122/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAii-leetcode122/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。&lt;/p&gt;&#xA;&lt;p&gt;设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。&lt;/p&gt;&#xA;&lt;p&gt;注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;输入: [7,1,5,3,6,4]&#xA;输出: 7&#xA;解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。&#xA;随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;输入: [1,2,3,4,5]&#xA;输出: 4&#xA;解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。&#xA;注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。&#xA;因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。&#xA;示例 3:&lt;/p&gt;&#xA;&lt;p&gt;输入: [7,6,4,3,1]&#xA;输出: 0&#xA;解释: 在这种情况下, 没有交易完成, 所以最大利润为 0&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;题目中给出数组，第i个元素表示第i天的价格，我们要做的是求出能获取的最大利润，并且没有限制购买次数，我们可以第一天买入，最后一天卖出。也可以当天买入，第二天就卖出，然后再买入，再卖出。但是我们只能同时有一笔交易。&lt;/p&gt;</description>
    </item>
    <item>
      <title>爬楼梯-LeetCode70</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%88%AC%E6%A5%BC%E6%A2%AF-leetcode70/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%88%AC%E6%A5%BC%E6%A2%AF-leetcode70/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;p&gt;链接: &lt;a href=&#34;https://leetcode-cn.com/problems/climbing-stairs/&#34;&gt;https://leetcode-cn.com/problems/climbing-stairs/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;假设你正在爬楼梯。需要 n 阶你才能到达楼顶。&lt;/p&gt;&#xA;&lt;p&gt;每次你可以爬 1 或 2 个台阶。问你有多少种不同的方法可以爬到楼顶？&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例 1：&lt;/p&gt;&#xA;&lt;p&gt;输入： 2&#xA;输出： 2&#xA;有两种方法可以爬到楼顶。&lt;/p&gt;&#xA;&lt;p&gt;第一种: 1 阶 + 1 阶&lt;/p&gt;&#xA;&lt;p&gt;第二种: 2 阶&lt;/p&gt;&#xA;&lt;p&gt;示例 2：&lt;/p&gt;&#xA;&lt;p&gt;输入： 3&lt;/p&gt;&#xA;&lt;p&gt;输出： 3&lt;/p&gt;&#xA;&lt;p&gt;有三种方法可以爬到楼顶。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;1 阶 + 1 阶 + 1 阶&lt;/li&gt;&#xA;&lt;li&gt;1 阶 + 2 阶&lt;/li&gt;&#xA;&lt;li&gt;2 阶 + 1 阶&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>无重复字符的最长子串-LeetCode3</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2-leetcode3/</link>
      <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2-leetcode3/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;输入: &amp;ldquo;abcabcbb&amp;rdquo;&#xA;输出: 3&#xA;解释: 因为无重复字符的最长子串是 &amp;ldquo;abc&amp;rdquo;，所以其长度为 3。&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;输入: &amp;ldquo;bbbbb&amp;rdquo;&#xA;输出: 1&#xA;解释: 因为无重复字符的最长子串是 &amp;ldquo;b&amp;rdquo;，所以其长度为 1。&#xA;示例 3:&lt;/p&gt;&#xA;&lt;p&gt;输入: &amp;ldquo;pwwkew&amp;rdquo;&#xA;输出: 3&#xA;解释: 因为无重复字符的最长子串是 &amp;ldquo;wke&amp;rdquo;，所以其长度为 3。&#xA;请注意，你的答案必须是 子串 的长度，&amp;ldquo;pwke&amp;rdquo; 是一个子序列，不是子串。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;要注意这个题目最后要求返回的是长度，并不是最长的子串内容是什么&lt;/p&gt;</description>
    </item>
    <item>
      <title>存在重复元素-LeetCode217</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-leetcode217/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-leetcode217/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个整数数组，判断是否存在重复元素。&lt;/p&gt;&#xA;&lt;p&gt;如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;输入: [1,2,3,1]&#xA;输出: true&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;输入: [1,2,3,4]&#xA;输出: false&#xA;示例 3:&lt;/p&gt;&#xA;&lt;p&gt;输入: [1,1,1,3,3,4,3,2,4,2]&#xA;输出: true&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;判断数组中是否有元素存在重复值。&lt;/p&gt;</description>
    </item>
    <item>
      <title>搜索插入位置-LeetCode35</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE-leetcode35/</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE-leetcode35/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。&lt;/p&gt;&#xA;&lt;p&gt;你可以假设数组中无重复元素。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;输入: [1,3,5,6], 5&#xA;输出: 2&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;输入: [1,3,5,6], 2&#xA;输出: 1&#xA;示例 3:&lt;/p&gt;&#xA;&lt;p&gt;输入: [1,3,5,6], 7&#xA;输出: 4&#xA;示例 4:&lt;/p&gt;&#xA;&lt;p&gt;输入: [1,3,5,6], 0&#xA;输出: 0&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>对称二叉树—LeetCode101</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91-leetcode101/</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91-leetcode101/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个二叉树，检查它是否是镜像对称的。&lt;/p&gt;&#xA;&lt;p&gt;例如，二叉树 &lt;code&gt;[1,2,2,3,4,4,3]&lt;/code&gt; 是对称的。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    1&#xA;   / \&#xA;  2   2&#xA; / \ / \&#xA;3  4 4  3&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是下面这个 &lt;code&gt;[1,2,2,null,3,null,3]&lt;/code&gt; 则不是镜像对称的:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    1&#xA;   / \&#xA;  2   2&#xA;   \   \&#xA;   3    3&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果你可以运用递归和迭代两种方法解决这个问题，会很加分。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>打印从1到最大的n位数—LeetCodeM17</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0-leetcodem17/</link>
      <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0-leetcodem17/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;输入数字 &lt;code&gt;n&lt;/code&gt;，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入: n = 1&#xA;输出: \[1,2,3,4,5,6,7,8,9] &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用返回一个整数列表来代替打印&lt;/li&gt;&#xA;&lt;li&gt;n 为正整数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;首先要获取最大值，然后遍历添加到数组中，而通过位数获取最大值可以通过&lt;code&gt;10^n^&lt;/code&gt;来获取。&lt;/p&gt;</description>
    </item>
    <item>
      <title>二进制链表转整数-LeetCode1290</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%95%B4%E6%95%B0-leetcode1290/</link>
      <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%95%B4%E6%95%B0-leetcode1290/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给你一个单链表的引用结点 &lt;code&gt;head&lt;/code&gt;。链表中每个结点的值不是 0 就是 1。已知此链表是一个整数数字的二进制表示形式。&lt;/p&gt;&#xA;&lt;p&gt;请你返回该链表所表示数字的 &lt;strong&gt;十进制值&lt;/strong&gt; 。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/12/15/graph-1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入：head = \[1,0,1]&#xA;输出：5&#xA;解释：二进制数 (101) 转化为十进制数 (5)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入：head = \[0]&#xA;输出：0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入：head = \[1]&#xA;输出：1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 4：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入：head = \[1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]&#xA;输出：18880&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 5：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入：head = \[0,0]&#xA;输出：0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;链表不为空。&lt;/li&gt;&#xA;&lt;li&gt;链表的结点总数不超过 &lt;code&gt;30&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;每个结点的值不是 &lt;code&gt;0&lt;/code&gt; 就是 &lt;code&gt;1&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>有序数组的平方—LeetCode977</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9-leetcode977/</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9-leetcode977/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。&lt;/p&gt;&#xA;&lt;p&gt;示例 1：&lt;/p&gt;&#xA;&lt;p&gt;输入：[-4,-1,0,3,10]&#xA;输出：[0,1,9,16,100]&#xA;示例 2：&lt;/p&gt;&#xA;&lt;p&gt;输入：[-7,-3,2,3,11]&#xA;输出：[4,9,9,49,121]&lt;/p&gt;&#xA;&lt;p&gt;提示：&lt;/p&gt;&#xA;&lt;p&gt;1 &amp;lt;= A.length &amp;lt;= 10000&#xA;-10000 &amp;lt;= &lt;code&gt;A[i]&lt;/code&gt; &amp;lt;= 10000&#xA;A 已按非递减顺序排序。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>最大二叉树—LeetCode654</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91-leetcode654/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91-leetcode654/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：&lt;/p&gt;&#xA;&lt;p&gt;二叉树的根是数组中的最大元素。&#xA;左子树是通过数组中最大值左边部分构造出的最大二叉树。&#xA;右子树是通过数组中最大值右边部分构造出的最大二叉树。&#xA;通过给定的数组构建最大二叉树，并且输出这个树的根节点。&lt;/p&gt;&#xA;&lt;p&gt;示例 ：&lt;/p&gt;&#xA;&lt;p&gt;输入：[3,2,1,6,0,5]&#xA;输出：返回下面这棵树的根节点：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  &#x9;&#x9;6&#xA;    /   \&#xA;   3     5&#xA;    \    / &#xA;     2  0   &#xA;       \&#xA;        1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;提示：&lt;/p&gt;&#xA;&lt;p&gt;给定的数组的大小在 [1, 1000] 之间。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>x的平方根—LeetCode69</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9-leetcode69/</link>
      <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9-leetcode69/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;实现 int sqrt(int x) 函数。&lt;/p&gt;&#xA;&lt;p&gt;计算并返回 x 的平方根，其中 x 是非负整数。&lt;/p&gt;&#xA;&lt;p&gt;由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;输入: 4&#xA;输出: 2&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;输入: 8&#xA;输出: 2&#xA;说明: 8 的平方根是 2.82842&amp;hellip;,&#xA;由于返回类型是整数，小数部分将被舍去。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>按递增顺序显示卡牌—LeetCode950</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%8C%89%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E6%98%BE%E7%A4%BA%E5%8D%A1%E7%89%8C-leetcode950/</link>
      <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%8C%89%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E6%98%BE%E7%A4%BA%E5%8D%A1%E7%89%8C-leetcode950/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;牌组中的每张卡牌都对应有一个唯一的整数。你可以按你想要的顺序对这套卡片进行排序。&lt;/p&gt;&#xA;&lt;p&gt;最初，这些卡牌在牌组里是正面朝下的（即，未显示状态）。&lt;/p&gt;&#xA;&lt;p&gt;现在，重复执行以下步骤，直到显示所有卡牌为止：&lt;/p&gt;&#xA;&lt;p&gt;从牌组顶部抽一张牌，显示它，然后将其从牌组中移出。&#xA;如果牌组中仍有牌，则将下一张处于牌组顶部的牌放在牌组的底部。&#xA;如果仍有未显示的牌，那么返回步骤 1。否则，停止行动。&#xA;返回能以递增顺序显示卡牌的牌组顺序。&lt;/p&gt;&#xA;&lt;p&gt;答案中的第一张牌被认为处于牌堆顶部。&lt;/p&gt;&#xA;&lt;p&gt;示例：&lt;/p&gt;&#xA;&lt;p&gt;输入：[17,13,11,2,3,5,7]&#xA;输出：[2,13,3,11,5,17,7]&#xA;解释：&#xA;我们得到的牌组顺序为 [17,13,11,2,3,5,7]（这个顺序不重要），然后将其重新排序。&#xA;重新排序后，牌组以 [2,13,3,11,5,17,7] 开始，其中 2 位于牌组的顶部。&#xA;我们显示 2，然后将 13 移到底部。牌组现在是 [3,11,5,17,7,13]。&#xA;我们显示 3，并将 11 移到底部。牌组现在是 [5,17,7,13,11]。&#xA;我们显示 5，然后将 17 移到底部。牌组现在是 [7,13,11,17]。&#xA;我们显示 7，并将 13 移到底部。牌组现在是 [11,17,13]。&#xA;我们显示 11，然后将 17 移到底部。牌组现在是 [13,17]。&#xA;我们展示 13，然后将 17 移到底部。牌组现在是 [17]。&#xA;我们显示 17。&#xA;由于所有卡片都是按递增顺序排列显示的，所以答案是正确的。&lt;/p&gt;&#xA;&lt;p&gt;提示：&lt;/p&gt;&#xA;&lt;p&gt;1 &amp;lt;= A.length &amp;lt;= 1000&#xA;1 &amp;lt;= &lt;code&gt;A[i]&lt;/code&gt; &amp;lt;= 10^6&#xA;对于所有的 &lt;code&gt;i != j，A[i] != A[j]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>转换为小写字母—LeetCode709</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D-leetcode709/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D-leetcode709/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。&lt;/p&gt;&#xA;&lt;p&gt;示例 1：&lt;/p&gt;&#xA;&lt;p&gt;输入: &amp;ldquo;Hello&amp;rdquo;&#xA;输出: &amp;ldquo;hello&amp;rdquo;&#xA;示例 2：&lt;/p&gt;&#xA;&lt;p&gt;输入: &amp;ldquo;here&amp;rdquo;&#xA;输出: &amp;ldquo;here&amp;rdquo;&#xA;示例 3：&lt;/p&gt;&#xA;&lt;p&gt;输入: &amp;ldquo;LOVELY&amp;rdquo;&#xA;输出: &amp;ldquo;lovely&amp;rdquo;&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>按奇偶排序数组-LeetCode905</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%8C%89%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84-leetcode905/</link>
      <pubDate>Wed, 02 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%8C%89%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84-leetcode905/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个非负整数数组 A，返回一个数组，在该数组中， A 的所有偶数元素之后跟着所有奇数元素。&lt;/p&gt;&#xA;&lt;p&gt;你可以返回满足此条件的任何数组作为答案。&lt;/p&gt;&#xA;&lt;p&gt;示例：&lt;/p&gt;&#xA;&lt;p&gt;输入：[3,1,2,4]&#xA;输出：[2,4,3,1]&#xA;输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。&lt;/p&gt;&#xA;&lt;p&gt;提示：&lt;/p&gt;&#xA;&lt;p&gt;1 &amp;lt;= A.length &amp;lt;= 5000&#xA;0 &amp;lt;= &lt;code&gt;A[i]&lt;/code&gt; &amp;lt;= 5000&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>独特的电子邮件地址-LeetCode929</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%8B%AC%E7%89%B9%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%9C%B0%E5%9D%80-leetcode929/</link>
      <pubDate>Fri, 21 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%8B%AC%E7%89%B9%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%9C%B0%E5%9D%80-leetcode929/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;每封电子邮件都由一个本地名称和一个域名组成，以 @ 符号分隔。&lt;/p&gt;&#xA;&lt;p&gt;例如，在 &lt;a href=&#34;mailto:alice@leetcode.com&#34;&gt;alice@leetcode.com&lt;/a&gt;中， alice 是本地名称，而 leetcode.com 是域名。&lt;/p&gt;&#xA;&lt;p&gt;除了小写字母，这些电子邮件还可能包含 &amp;lsquo;.&amp;rsquo; 或 &amp;lsquo;+&amp;rsquo;。&lt;/p&gt;&#xA;&lt;p&gt;如果在电子邮件地址的本地名称部分中的某些字符之间添加句点（&amp;rsquo;.&amp;rsquo;），则发往那里的邮件将会转发到本地名称中没有点的同一地址。例如，&amp;ldquo;&lt;a href=&#34;mailto:alice.z@leetcode.com&#34;&gt;alice.z@leetcode.com&lt;/a&gt;” 和 “alicez@leetcode.com” 会转发到同一电子邮件地址。 （请注意，此规则不适用于域名。）&lt;/p&gt;&#xA;&lt;p&gt;如果在本地名称中添加加号（&amp;rsquo;+&amp;rsquo;），则会忽略第一个加号后面的所有内容。这允许过滤某些电子邮件，例如 &lt;a href=&#34;mailto:m.y+name@email.com&#34;&gt;m.y+name@email.com&lt;/a&gt; 将转发到 &lt;a href=&#34;mailto:my@email.com&#34;&gt;my@email.com&lt;/a&gt;。 （同样，此规则不适用于域名。）&lt;/p&gt;&#xA;&lt;p&gt;可以同时使用这两个规则。&lt;/p&gt;&#xA;&lt;p&gt;给定电子邮件列表 emails，我们会向列表中的每个地址发送一封电子邮件。实际收到邮件的不同地址有多少？&lt;/p&gt;&#xA;&lt;p&gt;示例：&lt;/p&gt;&#xA;&lt;p&gt;输入：[&amp;ldquo;&lt;a href=&#34;mailto:test.email+alex@leetcode.com&#34;&gt;test.email+alex@leetcode.com&lt;/a&gt;&amp;rdquo;,&amp;ldquo;&lt;a href=&#34;mailto:test.e.mail+bob.cathy@leetcode.com&#34;&gt;test.e.mail+bob.cathy@leetcode.com&lt;/a&gt;&amp;rdquo;,&amp;ldquo;&lt;a href=&#34;mailto:testemail+david@lee.tcode.com&#34;&gt;testemail+david@lee.tcode.com&lt;/a&gt;&amp;rdquo;]&#xA;输出：2&#xA;解释：实际收到邮件的是 &amp;ldquo;&lt;a href=&#34;mailto:testemail@leetcode.com&#34;&gt;testemail@leetcode.com&lt;/a&gt;&amp;rdquo; 和 &amp;ldquo;&lt;a href=&#34;mailto:testemail@lee.tcode.com&#34;&gt;testemail@lee.tcode.com&lt;/a&gt;&amp;rdquo;。&lt;/p&gt;&#xA;&lt;p&gt;提示：&lt;/p&gt;&#xA;&lt;p&gt;1 &amp;lt;= &lt;code&gt;emails[i]&lt;/code&gt;.length &amp;lt;= 100&#xA;1 &amp;lt;= emails.length &amp;lt;= 100&#xA;每封 &lt;code&gt;emails[i]&lt;/code&gt; 都包含有且仅有一个 &amp;lsquo;@&amp;rsquo; 字符。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>最后一个单词的长度-LeetCode58</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6-leetcode58/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6-leetcode58/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个仅包含大小写字母和空格 &amp;rsquo; &amp;rsquo; 的字符串 s，返回其最后一个单词的长度。如果字符串从左向右滚动显示，那么最后一个单词就是最后出现的单词。&lt;/p&gt;&#xA;&lt;p&gt;如果不存在最后一个单词，请返回 0 。&lt;/p&gt;&#xA;&lt;p&gt;说明：一个单词是指仅由字母组成、不包含任何空格字符的 最大子字符串。&lt;/p&gt;&#xA;&lt;p&gt;示例:&lt;/p&gt;&#xA;&lt;p&gt;输入: &amp;ldquo;Hello World&amp;rdquo;&#xA;输出: 5&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>宝石与石头-LeetCode771</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%AE%9D%E7%9F%B3%E4%B8%8E%E7%9F%B3%E5%A4%B4-leetcode771/</link>
      <pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%AE%9D%E7%9F%B3%E4%B8%8E%E7%9F%B3%E5%A4%B4-leetcode771/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。&lt;/p&gt;&#xA;&lt;p&gt;J 中的字母不重复，J 和 S中的所有字符都是字母。字母区分大小写，因此&amp;quot;a&amp;quot;和&amp;quot;A&amp;quot;是不同类型的石头。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;输入: J = &amp;ldquo;aA&amp;rdquo;, S = &amp;ldquo;aAAbbbb&amp;rdquo;&#xA;输出: 3&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;输入: J = &amp;ldquo;z&amp;rdquo;, S = &amp;ldquo;ZZ&amp;rdquo;&#xA;输出: 0&#xA;注意:&lt;/p&gt;&#xA;&lt;p&gt;S 和 J 最多含有50个字母。&#xA;J 中的字符不重复。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>最长公共前缀-LeetCode14</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80-leetcode14/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80-leetcode14/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;编写一个函数来查找字符串数组中的最长公共前缀。&lt;/p&gt;&#xA;&lt;p&gt;如果不存在公共前缀，返回空字符串 &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入: \[&amp;#34;flower&amp;#34;,&amp;#34;flow&amp;#34;,&amp;#34;flight&amp;#34;]&#xA;输出: &amp;#34;fl&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;输入: \[&amp;#34;dog&amp;#34;,&amp;#34;racecar&amp;#34;,&amp;#34;car&amp;#34;]&#xA;输出: &amp;#34;&amp;#34;&#xA;解释: 输入不存在公共前缀。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;所有输入只包含小写字母 &lt;code&gt;a-z&lt;/code&gt; 。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>罗马数字转整数-LeetCode13</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0-leetcode13/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0-leetcode13/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。&lt;/p&gt;&#xA;&lt;p&gt;字符          数值&#xA;I             1&#xA;V             5&#xA;X             10&#xA;L             50&#xA;C             100&#xA;D             500&#xA;M             1000&#xA;例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。&lt;/p&gt;&#xA;&lt;p&gt;通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：&lt;/p&gt;&#xA;&lt;p&gt;I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。&#xA;X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。&#xA;C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。&#xA;给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;输入: &amp;ldquo;III&amp;rdquo;&#xA;输出: 3&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;输入: &amp;ldquo;IV&amp;rdquo;&#xA;输出: 4&#xA;示例 3:&lt;/p&gt;&#xA;&lt;p&gt;输入: &amp;ldquo;IX&amp;rdquo;&#xA;输出: 9&#xA;示例 4:&lt;/p&gt;&#xA;&lt;p&gt;输入: &amp;ldquo;LVIII&amp;rdquo;&#xA;输出: 58&#xA;解释: L = 50, V= 5, III = 3.&#xA;示例 5:&lt;/p&gt;&#xA;&lt;p&gt;输入: &amp;ldquo;MCMXCIV&amp;rdquo;&#xA;输出: 1994&#xA;解释: M = 1000, CM = 900, XC = 90, IV = 4.&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>删除排序数组中的重复项—LeetCode26</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9-leetcode26/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9-leetcode26/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。&lt;/p&gt;&#xA;&lt;p&gt;不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;给定数组 nums = [1,1,2],&lt;/p&gt;&#xA;&lt;p&gt;函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。&lt;/p&gt;&#xA;&lt;p&gt;你不需要考虑数组中超出新长度后面的元素。&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;给定 nums = [0,0,1,1,1,2,2,3,3,4],&lt;/p&gt;&#xA;&lt;p&gt;函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。&lt;/p&gt;&#xA;&lt;p&gt;你不需要考虑数组中超出新长度后面的元素。&lt;/p&gt;&#xA;&lt;p&gt;说明:&lt;/p&gt;&#xA;&lt;p&gt;为什么返回数值是整数，但输出的答案是数组呢?&lt;/p&gt;&#xA;&lt;p&gt;请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。&lt;/p&gt;&#xA;&lt;p&gt;你可以想象内部操作如下:&lt;/p&gt;&#xA;&lt;p&gt;// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝&#xA;int len = removeDuplicates(nums);&lt;/p&gt;&#xA;&lt;p&gt;// 在函数里修改输入数组对于调用者是可见的。&#xA;// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。&#xA;for (int i = 0; i &amp;lt; len; i++) {&#xA;print(nums[i]);&#xA;}&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;这个题目有几个要求，原地算法，即不能使用额外的空间，空间复杂度要求O(1)。&lt;/p&gt;&#xA;&lt;p&gt;同时我们不需要考虑数组中超出新长度后面的元素，实例1，我们最后给出的结果是[1,2,*]。第三个元素肯定是有的，不用对它进行重置等操作。&lt;/p&gt;&#xA;&lt;p&gt;同时这个题，要求的返回结果是新的长度，即没有重复元素的个数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>旋转数组—LeetCode189</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84-leetcode189/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84-leetcode189/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;输入: [1,2,3,4,5,6,7] 和 k = 3&#xA;输出: [5,6,7,1,2,3,4]&#xA;解释:&#xA;向右旋转 1 步: [7,1,2,3,4,5,6]&#xA;向右旋转 2 步: [6,7,1,2,3,4,5]&#xA;向右旋转 3 步: [5,6,7,1,2,3,4]&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;输入: [-1,-100,3,99] 和 k = 2&#xA;输出: [3,99,-1,-100]&#xA;解释:&#xA;向右旋转 1 步: [99,-1,-100,3]&#xA;向右旋转 2 步: [3,99,-1,-100]&#xA;说明:&lt;/p&gt;&#xA;&lt;p&gt;尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。&#xA;要求使用空间复杂度为 O(1) 的 原地 算法。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;首先我们要明确一个问题，当k超过数组长度时，我们要将k对数组长度取余。 当k等于数组长度时，不用进行操作直接返回。&lt;/p&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;h1 id=&#34;解题思路&#34;&gt;解题思路&lt;/h1&gt;&#xA;&lt;h2 id=&#34;暴力&#34;&gt;暴力&lt;/h2&gt;&#xA;&lt;p&gt;从上面的步骤可以看到我们可以移动k次，每一次向右移动一次。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;rotate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//对k的处理&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//移动k次，&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//将最后一个元素暂时存储，然后将数组从头开始向后挪动一位，移动元素长度-1个。然后再将第一个置为临时元素。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;arraycopy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;复杂度分析：&lt;/p&gt;</description>
    </item>
    <item>
      <title>加一—LeetCode66</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8A%A0%E4%B8%80-leetcode66/</link>
      <pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8A%A0%E4%B8%80-leetcode66/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。&lt;/p&gt;&#xA;&lt;p&gt;最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。&lt;/p&gt;&#xA;&lt;p&gt;你可以假设除了整数 0 之外，这个整数不会以零开头。&lt;/p&gt;&#xA;&lt;p&gt;示例 1:&lt;/p&gt;&#xA;&lt;p&gt;输入: [1,2,3]&#xA;输出: [1,2,4]&#xA;解释: 输入数组表示数字 123。&#xA;示例 2:&lt;/p&gt;&#xA;&lt;p&gt;输入: [4,3,2,1]&#xA;输出: [4,3,2,2]&#xA;解释: 输入数组表示数字 4321。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;一个数组，每一位表示一个数字，高位在前面，然后需要将这个值加一，并且按照数组的形式返回。&lt;/p&gt;</description>
    </item>
    <item>
      <title>两数之和—LeetCode1</title>
      <link>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-leetcode1/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-leetcode1/</guid>
      <description>&lt;h1 id=&#34;题目描述&#34;&gt;题目描述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。&lt;/p&gt;&#xA;&lt;p&gt;你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。&lt;/p&gt;&#xA;&lt;p&gt;示例:&lt;/p&gt;&#xA;&lt;p&gt;给定 nums = [2, 7, 11, 15], target = 9&lt;/p&gt;&#xA;&lt;p&gt;因为 nums[0] + nums[1] = 2 + 7 = 9&#xA;所以返回 [0, 1]&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
  </channel>
</rss>
