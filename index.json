[{"content":"引言 最近在网上冲浪的刷博客的时候, 看到一个题目.\n总共有25匹马, 一共有5个赛道, 现在要选出跑的最快的5匹马, 至少需要比赛几次?\n这个问题刚看到的时候, 看了一眼下面的答案就略过去了, 但是后面突然回想到这道题, 然后没有想通为什么是这样, 特此记录一下.\n首先这个问题有一些潜在的限制, 例如没有计时器, 不然全跑一遍计时一次, 看成绩取top5就好了. 现在是每次只能跑5匹马, 知道这一轮的排序.\n我们一步一步的来解决这个问题.\n首先想如果将top5, 修改为top1. 需要怎么安排? 是不是可以将25匹马, 5匹一组跑一次, 每组选出跑的最快的一匹, 再跑一轮, 这一轮的第一名就是top1了.\n当需要Top1时, 共需要5+1=6次\nOk, 到此我们先将上面的结果梳理一下, 将25匹马进行一下编号, 分为5组, 组编号为A,B,C,D,E, 组内的编号为1-5. 组内按照速度排序1-5, 每组按照顺序排序A-E\n此时, A1\u0026gt;A2\u0026gt;A3\u0026gt;A4\u0026gt;A5, A1\u0026gt;B1\u0026gt;C1\u0026gt;D1\u0026gt;E1. 但是我们不能知道A2, B1的关系.\n如果继续取top2, 需要怎么安排. 首先我们已经取出来了Top1. 那么剩下的人里面怎么取第二名呢. 最简单的方法是在跑一遍, 但是这样很明显的就会多跑. 我们现在已经有A1\u0026gt;A2\u0026gt;A3\u0026gt;A4\u0026gt;A5, A1\u0026gt;B1\u0026gt;C1\u0026gt;D1\u0026gt;E1. 这两个已知的排序. 是不是可以让A2, B1两匹马跑一次就可以得到谁是第二名了. 因为A2\u0026gt;A3, 如果A2\u0026lt;B1, 那么可证A3\u0026lt;B1.\n当需要Top2时, 共需要6+1=7次\nOK, 根据这个我们想一下, A2,B1是怎么找到的, 是不是从A1为起点, 查找走1步可以到达的节点. 如果继续取Top3, 需要怎么安排. 假设我们已经让A2, B1跑了一轮, 得到他们两个之间的排名. 我们假设他们两个的第一名是A2. A2就是全局第二名. 此时全局第三要怎么找呢? B2有资格参赛吗? 是不是没有资格, 因为前面还有B1. 所以仅需要B1和A3进行比赛就可以了. 同理如果B1得到第一名, 那么A3也没有资格参赛, 这时需要对C1, B2, A2进行比赛就可以了.\n等一下, 这样的安排是最少的次数吗? 现在是争夺第二名的比赛中仅有两匹马, 争夺第三名有两匹或者三匹马比赛. 要找到前三, 需要在第二名的比赛后再额外比赛一次, 我们现在第二名和第三名的比赛要参加的马总数是4或者5, 没有超过5条赛道, 是不是可以合并成一次比赛决出2,3名?\n我们从A1出发, 走2步, 所有可能到达的节点有: A2, A3, B1, B2, C1 此时, 共有A2, A3, B1, B2, C1共5匹马, 而我们正好有5条赛道, 正好可以一次完赛. 这次完赛的第一,第二名, 正是我们全局的第二, 第三名. 可以自己证明一下.\n当需要Top3时, 共需要6+1=7次\n如果继续取Top4, 需要怎么安排. 我们首先按照之前的规律, 选出哪些马, 有资格争夺前四 在Top3的比赛中, 共有5匹马进行比赛. A2, A3, B1, B2, C1. 完赛后, 我们就可以对他们之间再次进行排序. 这里面的第一,第二名名就是全局的第二,第三名. 这次比赛中的第三名, 能否作为全局的第四名呢? 这个是不可以的, 例如: 此次比赛A2\u0026gt;A3\u0026gt;B1. 我们能说B1是全局第四吗? 此时A4会不会比他快呢? 需要比赛一场才知道, 此时仅需要对B1, A4进行比赛即可.\n我们根据上面的情况罗列一下第七轮比赛所有可能的结果:\nA2, A3是第二, 第三名 此时争夺第四的资格只有A4, B1两匹马 A2, B1是二三名 这时, 争夺第四资格的有A3,B2,C1三匹马. 而A3, B2, C1的排序我们在上一轮中, 就可以得到了. 所以这一轮就可以省略掉. 不需要进行比赛了\nB1,B2是二三名 这时, 争夺第四资格的有A2,B3,C1三匹马\nB1, C2是二三名 这时, 争夺第四资格的有A2,B2,C2, D1四匹马\n至此, 我们已经整理完成所有可能的情况, 最多也只有4匹马有参赛资格, 只需要一次就可以完赛.\n当需要Top4时, 最少需要7次, 最多需要8次\n如果继续取Top5, 需要怎么安排. 我们还是首先列出来, 有哪些马有资格争夺前五 我们按照Top4的经验, 再来看下在已知Top3的情况下, 该如何安排.\nA2, A3是第二, 第三名 此时有资格去与B1, B2, C1争夺前五比赛资格的只有A4,A5 而他们正好只有5匹, 正好可以构成一组 A2, B1是二三名 我们假设A2第二, B1第三. 还剩下A3, B2, C1三匹马 如果在第七轮中, A2\u0026gt;B1\u0026gt;A3\u0026gt;B2\u0026gt;C1. 此时A3就是第四名, 第五名的争夺资格只有A4, B2两匹马. 那么如果是A2\u0026gt;B1\u0026gt;B2\u0026gt;A3\u0026gt;C1. 此时仅需对A3, B3进行比赛, 就能找出第五名 如果是A2\u0026gt;B1\u0026gt;C1\u0026gt;A3\u0026gt;B2, 此时抉择第五名就需要C2, D1, A3进行比赛了. 其他情况不再证明, 都是少于5匹马, 可以仅比赛一轮就能完成. B1,B2是二三名 如果在第七轮比赛中, B1\u0026gt;B2\u0026gt;C1\u0026gt;A2\u0026gt;A3. 此时前五的资格就需要对A2,B3,C2,D1四匹马进行比赛. 也仅需要一轮即可. 其他情况更加简单, 不在讨论.\nB1, C2是二三名 此时是最复杂的情况. 当B1\u0026gt;C2时, 第三名可能是A2或者B2. 但是我们仍然无法确定它是不是全局的第四, 因为没有与D1进行比赛 我们首先进行一轮A2,B2,C2,D1的比赛, 得到第一名. 假如第一名是D1, 此时他是全局第四, 要得到全局第五还需要进行一轮比赛, 让D2,E1与刚刚这一轮的第二名比赛即可 假如第一名是A2/B2/C2任意一名, 则还需要进行一轮A3/B3/C3与第二名的比赛即可 当需要Top5时, 最少是需要8次比赛的. 最多情况下, 进行9次比赛就可以找出top5\n总结一下 这道题如果用图的方式来表示, 更加容易理解, 经过前6轮比赛, 可以得到一组关系, 一个根节点, 然后找剩下的最近的4个节点. 每次查找充分利用5条赛道的条件, 得到更多的参数, 从而优化下一次的结果.\n参考 https://juejin.cn/post/7077545879384637447 ","permalink":"https://www.liunaijie.top/publish/%E4%B8%80%E9%81%93%E6%99%BA%E5%8A%9B%E9%A2%98-25%E5%8C%B9%E9%A9%AC-5%E6%9D%A1%E8%B5%9B%E9%81%93-%E9%80%89%E5%87%BA%E8%B7%91%E7%9A%84%E6%9C%80%E5%BF%AB%E7%9A%845%E5%8C%B9%E9%A9%AC-%E8%87%B3%E5%B0%91%E9%9C%80%E8%A6%81%E8%B7%91%E5%87%A0%E6%AC%A1/","summary":"\u003ch1 id=\"引言\"\u003e引言\u003c/h1\u003e\n\u003cp\u003e最近在网上冲浪的刷博客的时候, 看到一个题目.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e总共有25匹马, 一共有5个赛道, 现在要选出跑的最快的5匹马, 至少需要比赛几次?\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e这个问题刚看到的时候, 看了一眼下面的答案就略过去了, 但是后面突然回想到这道题, 然后没有想通为什么是这样, 特此记录一下.\u003c/p\u003e\n\u003cp\u003e首先这个问题有一些潜在的限制, 例如没有计时器, 不然全跑一遍计时一次, 看成绩取top5就好了. 现在是每次只能跑5匹马, 知道这一轮的排序.\u003c/p\u003e\n\u003cp\u003e我们一步一步的来解决这个问题.\u003c/p\u003e\n\u003ch3 id=\"首先想如果将top5-修改为top1-需要怎么安排\"\u003e首先想如果将top5, 修改为top1. 需要怎么安排?\u003c/h3\u003e\n\u003cp\u003e是不是可以将25匹马, 5匹一组跑一次, 每组选出跑的最快的一匹, 再跑一轮, 这一轮的第一名就是top1了.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e当需要Top1时, 共需要5+1=6次\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eOk, 到此我们先将上面的结果梳理一下, 将25匹马进行一下编号, 分为5组, 组编号为\u003ccode\u003eA,B,C,D,E\u003c/code\u003e, 组内的编号为\u003ccode\u003e1-5\u003c/code\u003e. 组内按照速度排序\u003ccode\u003e1-5\u003c/code\u003e, 每组按照顺序排序\u003ccode\u003eA-E\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202502121011982.png\" alt=\"image.png\"\u003e\u003c/p\u003e\n\u003cp\u003e此时, \u003ccode\u003eA1\u0026gt;A2\u0026gt;A3\u0026gt;A4\u0026gt;A5\u003c/code\u003e, \u003ccode\u003eA1\u0026gt;B1\u0026gt;C1\u0026gt;D1\u0026gt;E1\u003c/code\u003e.\n但是我们不能知道\u003ccode\u003eA2, B1\u003c/code\u003e的关系.\u003c/p\u003e\n\u003ch3 id=\"如果继续取top2-需要怎么安排\"\u003e如果继续取top2, 需要怎么安排.\u003c/h3\u003e\n\u003cp\u003e首先我们已经取出来了\u003ccode\u003eTop1\u003c/code\u003e. 那么剩下的人里面怎么取第二名呢.\n最简单的方法是在跑一遍, 但是这样很明显的就会多跑.\n我们现在已经有\u003ccode\u003eA1\u0026gt;A2\u0026gt;A3\u0026gt;A4\u0026gt;A5\u003c/code\u003e, \u003ccode\u003eA1\u0026gt;B1\u0026gt;C1\u0026gt;D1\u0026gt;E1\u003c/code\u003e. 这两个已知的排序.\n是不是可以让\u003ccode\u003eA2, B1\u003c/code\u003e两匹马跑一次就可以得到谁是第二名了.\n因为\u003ccode\u003eA2\u0026gt;A3\u003c/code\u003e, 如果\u003ccode\u003eA2\u0026lt;B1\u003c/code\u003e, 那么可证\u003ccode\u003eA3\u0026lt;B1\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e当需要Top2时, 共需要6+1=7次\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eOK, 根据这个我们想一下, \u003ccode\u003eA2,B1\u003c/code\u003e是怎么找到的, 是不是从\u003ccode\u003eA1\u003c/code\u003e为起点, 查找走\u003ccode\u003e1\u003c/code\u003e步可以到达的节点.\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202502121032685.png\" alt=\"image.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"如果继续取top3-需要怎么安排\"\u003e如果继续取Top3, 需要怎么安排.\u003c/h3\u003e\n\u003cp\u003e假设我们已经让\u003ccode\u003eA2, B1\u003c/code\u003e跑了一轮, 得到他们两个之间的排名.\n我们假设他们两个的第一名是\u003ccode\u003eA2\u003c/code\u003e. \u003ccode\u003eA2\u003c/code\u003e就是全局第二名.\n此时全局第三要怎么找呢?\n\u003ccode\u003eB2\u003c/code\u003e有资格参赛吗? 是不是没有资格, 因为前面还有\u003ccode\u003eB1\u003c/code\u003e. 所以仅需要\u003ccode\u003eB1\u003c/code\u003e和\u003ccode\u003eA3\u003c/code\u003e进行比赛就可以了.\n同理如果\u003ccode\u003eB1\u003c/code\u003e得到第一名, 那么\u003ccode\u003eA3\u003c/code\u003e也没有资格参赛, 这时需要对\u003ccode\u003eC1, B2, A2\u003c/code\u003e进行比赛就可以了.\u003c/p\u003e","title":"一道智力题, 25匹马, 5条赛道, 选出跑的最快的5匹马, 至少需要跑几次"},{"content":"前言 这篇文章会介绍一下, SeaTunnel如何在不同环境下进行安装部署, 以及一些可以去调节的参数配置. 这里仅设计Zeta引擎的相关内容, Spark, Flink引擎的提交不需要搭建集群, 所以不会涉及.\nSeaTunnel的集群原理 我想先提一下SeaTunnel的集群工作原理, 再来将如何安装, 这样在后面安装的时候就可以了解每一个步骤是干什么用的. 当启动多个节点搭建集群时, 主要的一件事情就是组网. 只有组网成功, 才能构成一个集群, 当多个节点构成一个集群后, 才能去选举. SeaTunnel依赖hazelcast这样一个分布式内存组件来进行组网和选举, 没有引入类似Zookeeper这样的额外组件, 也没有自己去实现单独的通信机制, 复用了hazelcast的功能. 所以搭建SeaTunnel集群其实就是如何去搭建hazelcast的集群.\n配置文件说明 在集群部署时, 总共会用到一下几类配置文件:\nhazelcast的配置 - 用于组网 hazelcast.yaml 混合模式下使用的配置文件 hazelcast-master.yaml 分离模式下, master使用的配置文件 hazelcast-worker.yaml 分离模式下, worker使用的配置文件 hazelcast-client.yaml 命令行提交时, 客户端使用的配置文件 seatunnel的配置 - 用于设置Zeta引擎的一些功能 seatunnel.yaml 设置Zeta引擎功能的一些配置文件 log4j的配置 - 用于设置日志的输出 log4j2.properties 集群使用的日志配置文件 log4j2_client.properties 命令行提交任务时, 客户端使用的配置文件 jvm的配置 jvm_options 混合模式下, 会添加到jvm的配置 jvm_master_options 分离模型下, 会添加到master的jvm配置 jvm_worker_options 分离模型下, 会添加到worker的jvm配置 如果需要集成Flink, Spark, 你还需要注意下这个配置文件\nseatunnel-env.sh 设置Flink, Spark的安装路径 hazelcast相关配置 在hazelcast中, 一个节点, 根据是否需要存储数据, 分为数据节点和精简节点. 顾名思义数据节点会分布式的存储数据, 而精简节点不会去存储数据, 仅会去执行任务. 在SeaTunnel中使用该特性来在主从分离架构中区分master节点和worker节点.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 hazelcast: cluster-name: seatunnel network: rest-api: enabled: true endpoint-groups: CLUSTER_WRITE: enabled: true DATA: enabled: true join: tcp-ip: enabled: true member-list: - localhost port: auto-increment: false port: 5801 properties: hazelcast.invocation.max.retry.count: 20 hazelcast.tcp.join.port.try.count: 30 hazelcast.logging.type: log4j2 hazelcast.operation.generic.thread.count: 50 hazelcast.heartbeat.failuredetector.type: phi-accrual hazelcast.heartbeat.interval.seconds: 2 hazelcast.max.no.heartbeat.seconds: 180 hazelcast.heartbeat.phiaccrual.failuredetector.threshold: 10 hazelcast.heartbeat.phiaccrual.failuredetector.sample.size: 200 hazelcast.heartbeat.phiaccrual.failuredetector.min.std.dev.millis: 100 member-attributes: group: type: string value: platform 这个是一个官方提供的配置文件. 这里一个有这几个配置项:\ncluster-name 当需要连接到一个集群时, 名称必须一致. 你如果需要在一个或一组机器上部署多个集群, 则只有名称一致的才会加入一个集群, 名称不一致时不会进入一个集群\nnetwork.rest-api 这个选项, 不要去修改. 这个选项开启后, 就可以在外部通过rest-api来提交任务, 查询状态等等.\n在2.3.9版本中, 引入了Jetty来作为rest-api的实现, 所以这部分功能可能在后续的几个版本中移除掉, 当移除后, 这部分可以删除. 就目前版本来说, 不需要变动\nnetwork.port 这个是hazelcast对外交互的端口, hazelast的默认端口是5701, 在seatunnel中修改为5801, 如果这个端口被占用, 可以修改为其他端口. auto-increment这个配置, 推荐设置为false, 否则当设置的端口被占用后, 会递增100个端口进行尝试, 在生产环节中, 不要去修改, 否则你的端口很可能就变成随机的了. 如果在同一个机器上启动多个实例, 这里就需要人工去修改.\nnetwork.join 这个是最重要的一个配置, 这里就是如何去组网的关键配置. 这个部分在不同的部署策略上, 有所不同, 具体需要设置成什么, 在下面具体部署时再看详细的设置.\nmember-attributes 对这个/这组节点添加属性, 后续在提交任务时, 可以根据这个值来选择相应的节点去运行任务 (这一部分, 具体文档可以参考 https://seatunnel.apache.org/docs/2.3.8/seatunnel-engine/resource-isolation/)\n混合部署VS分离部署 在2.3.6版本中,推出了主从分离部署的架构, 推出这个架构要解决的问题是在混合部署中, master节点即负责任务的分配, 管理工作, 也需要进行任务的同步工作. 当master负载较高后, 对整体的集群都会有影响. 采用主从分离架构后, master, worker的工作职责分离开来, 不太容易产生高负载的情况, 但需要有一个备用master节点在没出问题时空闲在那里, 出问题后会接管master的状态. 这个资源的使用与集群的稳定性相比, 问题不大. 推荐使用分离模式来进行部署.\n物理机部署 这里以在本地部署两个服务, 一个master服务, 一个worker服务为例, 讲述下如何在物理机环境下进行部署. 需要改动的文件有:\n`hazelcast-master.yaml hazelcast-worker.yaml hazelcast-client.yaml 在一个机器上部署两个服务, 就需要将其中一个服务的端口修改为一个不同的端口, 这里将worker的端口修改为5901, 而master仍然使用5801端口. hazelcast-master.yaml的配置文件为: 1 2 3 4 5 6 7 8 9 10 11 xxx join: tcp-ip: enabled: true member-list: - localhost:5801 - localhost:5901 port: auto-increment: false port: 5801 xxx hazelcast-worker.yaml的配置文件为:\n1 2 3 4 5 6 7 8 9 10 11 xxx join: tcp-ip: enabled: true member-list: - localhost:5801 - localhost:5901 port: auto-increment: false port: 5901 xxx 然后运行这两个命令:\n./bin/seatunnel-cluster.sh -r master ./bin/seatunnel-cluster.sh -r worker 分别查看两个logs/seatunnel-engine-master.log和logs/seatunnel-engine-worker.log日志文件, 检查是否部署成功, 是否有报错信息.\n然后修改hazelcast-client.yaml配置\n1 2 3 4 5 6 7 8 9 10 11 hazelcast-client: cluster-name: seatunnel properties: hazelcast.logging.type: log4j2 connection-strategy: connection-retry: cluster-connect-timeout-millis: 3000 network: cluster-members: - localhost:5801 - localhost:5901 修改完成后, 使用./bin/seatunnel.sh -c \u0026lt;要提交的配置文件\u0026gt; 即可将该任务提交到集群中运行.\nK8S环境部署 在K8S中部署, 与物理机部署, 不同的点主要是K8S中pod重启后, IP地址就会变化, 当使用TCP/IP的方式配置时, 就无法指定每个节点的地址. 要解决这个问题有两种方式:\n使用StatefulSet来进行部署, 在结合headless service, 可以实现固定域名来实现member-list不需要改动 使用K8S的组网方式, 不需要指定每个节点的IP/域名. 个人经验是推荐使用第二种K8S的组网方式, 更加简洁一点 需要修改的地方为:\n1 2 3 4 5 6 7 8 join: kubernetes: enabled: true service-dns: \u0026lt;将headless的域名填到这里即可\u0026gt; service-port: 5801 port: auto-increment: false port: 5801 另外有一个地方可以去修改一下, 默认设置中, 日志会打印到文件中, 如果pod的磁盘容量有限, 或者日志采集服务无法对文件进行采集, 可以将打印方式修改为Console, 这样部署完成后可以直接运行命令kubectl logs xxx-pod来查看日志, 不需要再进入容器查看文件. 具体修改的文件为:\nlog4j2.properties 将rootLogger.appenderRef.consoleStdout.ref, rootLogger.appenderRef.consoleStderr.ref配置前的注释打开, 将rootLogger.appenderRef.file.ref配置添加注释, 从而将日志打印到控制台 提交任务, 一种是进入到容器内, 执行seatunnel.sh命令去提交任务. 而另外一种方式则是使用Rest API来提交任务\n","permalink":"https://www.liunaijie.top/publish/seatunnel%E5%BA%94%E7%94%A8%E6%96%87%E7%AB%A0%E4%B8%80-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e这篇文章会介绍一下, \u003ccode\u003eSeaTunnel\u003c/code\u003e如何在不同环境下进行安装部署, 以及一些可以去调节的参数配置.\n这里仅设计\u003ccode\u003eZeta\u003c/code\u003e引擎的相关内容, \u003ccode\u003eSpark\u003c/code\u003e, \u003ccode\u003eFlink\u003c/code\u003e引擎的提交不需要搭建集群, 所以不会涉及.\u003c/p\u003e","title":"SeaTunnel应用文章(一)-安装部署"},{"content":"趁着这次博客迁移, 更新记录下当前博客的写作, 同步, 发布方案.\n之前是使用Hexo来作为博客的生成框架, 现在迁移到了Hugo, 迁移的一个原因是Hexo中无法过滤掉没有Title的文件, 导致生产了很多空白页面, 而Hugo则可以过滤掉没有Title的文件, 从而避免了这个问题.\n另外的一个原因是Hugo的性能比Hexo要高, 在生成静态页面时, Hugo的速度更快. 现在博客的主题也只想要一个简洁的样式, 所以就选择了Hugo的Minima主题, 简单修改了一下, 就完成了迁移.\n写作记录方面 我最开始是使用Typora来写作, 及时渲染, 但是Typora后来开始收费, 又尝试了Notion, 但是Notion的速度太慢, 慢慢就换到了现在使用的Obsidian.\n这个目前来说绝对是写作神器, 配合各种插件, 可以方便的写作, 任务安排/查看, 画流程图等等. 再配合Remote Sync插件, 可以非常方便的进行多端同步.\n以下是其中一些步骤的记录:\nObsidian同步 使用Obsidian也有官方同步方案, 但是需要收费, 作为一名白嫖党, 肯定是不愿意花这个钱的, 所以就使用Remote-Sync来进行数据同步, 按照文档配置一下即可完成, 非常简单. Remote-Sync的同步方案有多种, 我最后选择了One Drive的同步方案, 原因有以下几点:\n这个国内也可以正常访问, 速度也很快 注册账号就有一些免费空间, 而同步的数据仅仅是一些文字, 图片. 总的体积也不会很大, 免费空间也足够使用了 在手机端也可以使用(这个就过滤掉了Git的同步方案, 因为手机端无法使用Git, 所以就只能使用OneDrive的同步方案了) 同时我有一台NAS, 在NAS上也会通过Cloud-Sync将数据从OneDrive云盘下载, 来进行数据备份, 再配合定时任务来监测是否有文件变动, 有变动则进行Git的提交. Git提交后则会触发Github Action来进行博客的构建和发布流程.\nNAS同步 使用Obsidian写作时, 我博客的内容仅仅是一个同步内容的子文件夹, 使用Cloud-Sync可以指定要同步哪个文件夹到NAS的哪个目录上. 同时我博客的其他代码, 配置等, 我是没有放到Obsidian中的, 所以会有两个文件夹, 一个存放Obsidian中的文章内容, 一个存放博客的源文件. 然后通过软链将文件关联到源文件下.\n同步任务可以设置每天定时同步, 同步完成后再跟一个任务来检查博客文件是否有变动, 如果有变动, 则自动提交到Github 检查变更的脚本内容为:\n1 2 3 4 5 6 7 8 9 10 #!/bin/bash now=$(date +%Y-%m-%d) if [ -n \u0026#34;git status -s\u0026#34; ];then git add . git commit -m \u0026#34;update files on $now\u0026#34; git push else echo \u0026#34;no changes on $now\u0026#34; fi Github Action. 其实博客的部署也可以在NAS上运行, 但是我不想在NAS上安装相关的依赖, 就使用了Github Action来完成此任务. 我的仓库中有两个分支\nhugo : 是markdown文件和hugo的配置文件 master : 生成的html文件 使用Github的user-name.github.io仓库, 并关联到自己的域名上, 从而实现无服务器部署.\n设置私钥 设置私钥到user-name.github.io仓库下，打开该仓库，找到setting/secrets/New repository secret将本地~/.ssh/id_ras文件复制进来，名称可以随便取，不过在下面使用的时候需要对应起来，比如我用了ACTION_DEPLOY_KEY这个名称。需要勾选 Allow write access 。\nAction配置文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 name: Deploy Blog on: push: branches: - hexo jobs: build: runs-on: ubuntu-latest steps: - name: Checkout source uses: actions/checkout@v4 with: ref: hexo - name: Setup Node.js uses: actions/setup-node@v3 with: node - version: stable - name: Install required libs run: | npm install hexo-deployer-git --save npm install hexo-generator-feed --save - name: Verify Node.js version run: node - v - name: Setup hexo env: ACTION_DEPLOY_KEY: ${{ secrets.ACTION_DEPLOY_KEY }} run: | mkdir -p ~/.ssh/ echo \u0026#34;$ACTION_DEPLOY_KEY\u0026#34; \u0026gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com \u0026gt;\u0026gt; ~/.ssh/known_hosts git config --global user.email \u0026#34;liunaijie1996@163.com\u0026#34; git config --global user.name \u0026#34;Jarvis\u0026#34; npm install hexo-cli -g npm install - name: Hexo deploy run: | hexo clean hexo g hexo d 一个流程图大致是这样: ","permalink":"https://www.liunaijie.top/publish/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/","summary":"\u003cp\u003e趁着这次博客迁移, 更新记录下当前博客的写作, 同步, 发布方案.\u003c/p\u003e\n\u003cp\u003e之前是使用\u003ccode\u003eHexo\u003c/code\u003e来作为博客的生成框架, 现在迁移到了\u003ccode\u003eHugo\u003c/code\u003e, 迁移的一个原因是\u003ccode\u003eHexo\u003c/code\u003e中无法过滤掉没有\u003ccode\u003eTitle\u003c/code\u003e的文件, 导致生产了很多空白页面, 而\u003ccode\u003eHugo\u003c/code\u003e则可以过滤掉没有\u003ccode\u003eTitle\u003c/code\u003e的文件, 从而避免了这个问题.\u003cbr\u003e\n另外的一个原因是\u003ccode\u003eHugo\u003c/code\u003e的性能比\u003ccode\u003eHexo\u003c/code\u003e要高, 在生成静态页面时, \u003ccode\u003eHugo\u003c/code\u003e的速度更快. \u003cbr\u003e\n现在博客的主题也只想要一个简洁的样式, 所以就选择了\u003ccode\u003eHugo\u003c/code\u003e的\u003ccode\u003eMinima\u003c/code\u003e主题, 简单修改了一下, 就完成了迁移.\u003c/p\u003e\n\u003ch1 id=\"写作记录方面\"\u003e写作记录方面\u003c/h1\u003e\n\u003cp\u003e我最开始是使用\u003ccode\u003eTypora\u003c/code\u003e来写作, 及时渲染, 但是\u003ccode\u003eTypora\u003c/code\u003e后来开始收费, 又尝试了\u003ccode\u003eNotion\u003c/code\u003e, 但是\u003ccode\u003eNotion\u003c/code\u003e的速度太慢, 慢慢就换到了现在使用的\u003ccode\u003eObsidian\u003c/code\u003e.\u003cbr\u003e\n这个目前来说绝对是写作神器, 配合各种插件, 可以方便的写作, 任务安排/查看, 画流程图等等. \u003cbr\u003e\n再配合\u003ccode\u003eRemote Sync\u003c/code\u003e插件, 可以非常方便的进行多端同步.\u003c/p\u003e\n\u003cp\u003e以下是其中一些步骤的记录:\u003c/p\u003e\n\u003ch1 id=\"obsidian同步\"\u003eObsidian同步\u003c/h1\u003e\n\u003cp\u003e使用\u003ccode\u003eObsidian\u003c/code\u003e也有官方同步方案, 但是需要收费, 作为一名白嫖党, 肯定是不愿意花这个钱的, 所以就使用\u003ccode\u003eRemote-Sync\u003c/code\u003e来进行数据同步, 按照文档配置一下即可完成, 非常简单.\n\u003ccode\u003eRemote-Sync\u003c/code\u003e的同步方案有多种, 我最后选择了\u003ccode\u003eOne Drive\u003c/code\u003e的同步方案, 原因有以下几点:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e这个国内也可以正常访问, 速度也很快\u003c/li\u003e\n\u003cli\u003e注册账号就有一些免费空间, 而同步的数据仅仅是一些文字, 图片. 总的体积也不会很大, 免费空间也足够使用了\u003c/li\u003e\n\u003cli\u003e在手机端也可以使用(这个就过滤掉了Git的同步方案, 因为手机端无法使用Git, 所以就只能使用\u003ccode\u003eOneDrive\u003c/code\u003e的同步方案了)\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e同时我有一台\u003ccode\u003eNAS\u003c/code\u003e, 在\u003ccode\u003eNAS\u003c/code\u003e上也会通过\u003ccode\u003eCloud-Sync\u003c/code\u003e将数据从\u003ccode\u003eOneDrive\u003c/code\u003e云盘下载, 来进行数据备份, 再配合定时任务来监测是否有文件变动, 有变动则进行\u003ccode\u003eGit\u003c/code\u003e的提交.\n\u003ccode\u003eGit\u003c/code\u003e提交后则会触发\u003ccode\u003eGithub Action\u003c/code\u003e来进行博客的构建和发布流程.\u003c/p\u003e\n\u003ch1 id=\"nas同步\"\u003eNAS同步\u003c/h1\u003e\n\u003cp\u003e使用\u003ccode\u003eObsidian\u003c/code\u003e写作时, 我博客的内容仅仅是一个同步内容的子文件夹, 使用\u003ccode\u003eCloud-Sync\u003c/code\u003e可以指定要同步哪个文件夹到\u003ccode\u003eNAS\u003c/code\u003e的哪个目录上.\n同时我博客的其他代码, 配置等, 我是没有放到\u003ccode\u003eObsidian\u003c/code\u003e中的, 所以会有两个文件夹, 一个存放\u003ccode\u003eObsidian\u003c/code\u003e中的文章内容, 一个存放博客的源文件.\n然后通过软链将文件关联到源文件下.\u003c/p\u003e","title":"博客自动部署方案"},{"content":"省流 这篇文章以seatunnel 2.3.6版本，讲解了一个zeta引擎的一个任务是如何从提交到运行的全流程，希望通过这篇文档，对刚刚上手seatunnel的朋友提供一些帮助。\n这篇文章将从\nseatunnel server端的初始化 client端的任务提交流程 server端的接收到任务的执行流程 三部分来记录下一个任务的整体流程 参考 [ST-Engine][Design] The Design of LogicalPlan to PhysicalPlan 集群拓扑 首先从整体了解下SeaTunnel的Zeta引擎架构， SeaTunnel是基于hazelcast来实现的分布式集群通信\n在2.3.6版本之后， 集群中的节点可以被分配为master或worker节点， 从而将调度与执行分开， 避免master节点的负载过高从而出现问题。\n并且2.3.6版本还添加了一个功能是， 可以对每个节点添加tag属性， 当提交任务时可以通过tag来选择任务将要运行的节点， 从而达到资源隔离的目的（2.3.6版本有问题，2.3.8版本中进行了修复，如果需要使用此功能请使用2.3.8版本）。\n集群的服务端分为master和worker节点， master节点负责接收请求， 逻辑计划生成， 分配任务等（与之前的版本相比，会多了几个backup节点，但是对于集群稳定性来说是一个挺大的提升）。 而worker节点则只负责执行任务， 也就是数据的读取和写入。 提交任务时可以创建hazelcast的客户端连接集群来进行通信， 或者使用restapi来进行通信。\n服务端启动 当我们对集群的整体架构有个大致的了解后， 我们再来具体了解下具体的流程\n首先看下server端的启动过程。 server端的启动命令为：\nsh bin/seatunnel-cluster.sh -d -r \u0026lt;node role type\u0026gt; 当我们查看这个脚本的内容后就会发现， 这个脚本最终的执行命令为：\n1 java -cp seatunnel-starter.jar org.apache.seatunnel.core.starter.seatunnel.SeaTunnelServer \u0026lt;other_java_jvm_config_and_args\u0026gt; 我们查看这个starter.seatunnel.SeaTunnelServer的代码\n1 2 3 4 5 6 7 8 9 10 11 public class SeaTunnelServer { public static void main(String[] args) throws CommandException { ServerCommandArgs serverCommandArgs = CommandLineUtils.parse( args, new ServerCommandArgs(), EngineType.SEATUNNEL.getStarterShellName(), true); SeaTunnel.run(serverCommandArgs.buildCommand()); } } 这个代码是使用了JCommander来解析用户传递的参数并构建并运行Command， serverCommandArgs.buildCommand返回的类为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 public class ServerExecuteCommand implements Command\u0026lt;ServerCommandArgs\u0026gt; { private final ServerCommandArgs serverCommandArgs; public ServerExecuteCommand(ServerCommandArgs serverCommandArgs) { this.serverCommandArgs = serverCommandArgs; } @Override public void execute() { SeaTunnelConfig seaTunnelConfig = ConfigProvider.locateAndGetSeaTunnelConfig(); String clusterRole = this.serverCommandArgs.getClusterRole(); if (StringUtils.isNotBlank(clusterRole)) { if (EngineConfig.ClusterRole.MASTER.toString().equalsIgnoreCase(clusterRole)) { seaTunnelConfig.getEngineConfig().setClusterRole(EngineConfig.ClusterRole.MASTER); } else if (EngineConfig.ClusterRole.WORKER.toString().equalsIgnoreCase(clusterRole)) { seaTunnelConfig.getEngineConfig().setClusterRole(EngineConfig.ClusterRole.WORKER); // in hazelcast lite node will not store IMap data. seaTunnelConfig.getHazelcastConfig().setLiteMember(true); } else { throw new SeaTunnelEngineException(\u0026#34;Not supported cluster role: \u0026#34; + clusterRole); } } else { seaTunnelConfig .getEngineConfig() .setClusterRole(EngineConfig.ClusterRole.MASTER_AND_WORKER); } HazelcastInstanceFactory.newHazelcastInstance( seaTunnelConfig.getHazelcastConfig(), Thread.currentThread().getName(), new SeaTunnelNodeContext(seaTunnelConfig)); } } 在这里会根据配置的角色类型来修改配置信息。 当是worker节点时，将hazelcast节点的类型设置为lite member，在hazelcast中lite member是不进行数据存储的\n然后会创建了一个hazelcast实例， 并且传递了SeaTunnelNodeContext实例以及读取并修改的配置信息\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 public class SeaTunnelNodeContext extends DefaultNodeContext { private final SeaTunnelConfig seaTunnelConfig; public SeaTunnelNodeContext(@NonNull SeaTunnelConfig seaTunnelConfig) { this.seaTunnelConfig = seaTunnelConfig; } @Override public NodeExtension createNodeExtension(@NonNull Node node) { return new org.apache.seatunnel.engine.server.NodeExtension(node, seaTunnelConfig); } @Override public Joiner createJoiner(Node node) { JoinConfig join = getActiveMemberNetworkConfig(seaTunnelConfig.getHazelcastConfig()).getJoin(); join.verify(); if (node.shouldUseMulticastJoiner(join) \u0026amp;\u0026amp; node.multicastService != null) { super.createJoiner(node); } else if (join.getTcpIpConfig().isEnabled()) { log.info(\u0026#34;Using LiteNodeDropOutTcpIpJoiner TCP/IP discovery\u0026#34;); return new LiteNodeDropOutTcpIpJoiner(node); } else if (node.getProperties().getBoolean(DISCOVERY_SPI_ENABLED) || isAnyAliasedConfigEnabled(join) || join.isAutoDetectionEnabled()) { super.createJoiner(node); } return null; } private static boolean isAnyAliasedConfigEnabled(JoinConfig join) { return !AliasedDiscoveryConfigUtils.createDiscoveryStrategyConfigs(join).isEmpty(); } private boolean usePublicAddress(JoinConfig join, Node node) { return node.getProperties().getBoolean(DISCOVERY_SPI_PUBLIC_IP_ENABLED) || allUsePublicAddress( AliasedDiscoveryConfigUtils.aliasedDiscoveryConfigsFrom(join)); } } 在SeaTunnelNodeContext中覆盖了createNodeExtension方法， 将使用engine.server.NodeExtension类， 这个类的代码为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 public class NodeExtension extends DefaultNodeExtension { private final NodeExtensionCommon extCommon; public NodeExtension(@NonNull Node node, @NonNull SeaTunnelConfig seaTunnelConfig) { super(node); extCommon = new NodeExtensionCommon(node, new SeaTunnelServer(seaTunnelConfig)); } @Override public void beforeStart() { // TODO Get Config from Node here super.beforeStart(); } @Override public void afterStart() { super.afterStart(); extCommon.afterStart(); } @Override public void beforeClusterStateChange( ClusterState currState, ClusterState requestedState, boolean isTransient) { super.beforeClusterStateChange(currState, requestedState, isTransient); extCommon.beforeClusterStateChange(requestedState); } @Override public void onClusterStateChange(ClusterState newState, boolean isTransient) { super.onClusterStateChange(newState, isTransient); extCommon.onClusterStateChange(newState); } @Override public Map\u0026lt;String, Object\u0026gt; createExtensionServices() { return extCommon.createExtensionServices(); } @Override public TextCommandService createTextCommandService() { return new TextCommandServiceImpl(node) { { register(HTTP_GET, new Log4j2HttpGetCommandProcessor(this)); register(HTTP_POST, new Log4j2HttpPostCommandProcessor(this)); register(HTTP_GET, new RestHttpGetCommandProcessor(this)); register(HTTP_POST, new RestHttpPostCommandProcessor(this)); } }; } @Override public void printNodeInfo() { extCommon.printNodeInfo(systemLogger); } } 在这个代码中， 我们可以看到在构造方法中， 初始化了SeaTunnelServer这个类， 而这个类与最开始的类是同名的， 但是在不同的包下， 这个类的完整类名为： org.apache.seatunnel.engine.server.SeaTunnelServer\n我们看下这个类的代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 public class SeaTunnelServer implements ManagedService, MembershipAwareService, LiveOperationsTracker { private static final ILogger LOGGER = Logger.getLogger(SeaTunnelServer.class); public static final String SERVICE_NAME = \u0026#34;st:impl:seaTunnelServer\u0026#34;; private NodeEngineImpl nodeEngine; private final LiveOperationRegistry liveOperationRegistry; private volatile SlotService slotService; private TaskExecutionService taskExecutionService; private ClassLoaderService classLoaderService; private CoordinatorService coordinatorService; private ScheduledExecutorService monitorService; @Getter private SeaTunnelHealthMonitor seaTunnelHealthMonitor; private final SeaTunnelConfig seaTunnelConfig; private volatile boolean isRunning = true; public SeaTunnelServer(@NonNull SeaTunnelConfig seaTunnelConfig) { this.liveOperationRegistry = new LiveOperationRegistry(); this.seaTunnelConfig = seaTunnelConfig; LOGGER.info(\u0026#34;SeaTunnel server start...\u0026#34;); } @Override public void init(NodeEngine engine, Properties hzProperties) { ... if (EngineConfig.ClusterRole.MASTER_AND_WORKER.ordinal() == seaTunnelConfig.getEngineConfig().getClusterRole().ordinal()) { startWorker(); startMaster(); } else if (EngineConfig.ClusterRole.WORKER.ordinal() == seaTunnelConfig.getEngineConfig().getClusterRole().ordinal()) { startWorker(); } else { startMaster(); } ... } .... } 这个类是SeaTunnel Server端的核心代码， 在这个类中会根据节点的角色来启动相关的组件。 稍微总结下seatunnel的流程： SeaTunnel是借助于hazelcast的基础能力， 来实现集群端的组网， 并调用启动核心的代码。对于这一块有想深入了解的朋友可以去看下hazelcast的相关内容，这里仅仅列出了调用路径。 按照顺序所加载调用的类为\nstarter.SeaTunnelServer ServerExecutreCommand SeaTunnelNodeContext NodeExtension server.SeaTunnelServer 接下来再来详细看下master节点以及worker节点中所创建的组件\nmaster相关组件 1 2 3 4 5 6 7 8 9 10 private void startMaster() { coordinatorService = new CoordinatorService(nodeEngine, this, seaTunnelConfig.getEngineConfig()); monitorService = Executors.newSingleThreadScheduledExecutor(); monitorService.scheduleAtFixedRate( this::printExecutionInfo, 0, seaTunnelConfig.getEngineConfig().getPrintExecutionInfoInterval(), TimeUnit.SECONDS); } 在这个方法内，可以看到一个初始化了两个组件\ncoordinatorService 协调器组件 monitorService 监控组件 监控组件所做的事情，在这个方法内，也可以看到，就是周期性的打印信息。 CoordinatorService 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 public CoordinatorService( @NonNull NodeEngineImpl nodeEngine, @NonNull SeaTunnelServer seaTunnelServer, EngineConfig engineConfig) { this.nodeEngine = nodeEngine; this.logger = nodeEngine.getLogger(getClass()); this.executorService = Executors.newCachedThreadPool( new ThreadFactoryBuilder() .setNameFormat(\u0026#34;seatunnel-coordinator-service-%d\u0026#34;) .build()); this.seaTunnelServer = seaTunnelServer; this.engineConfig = engineConfig; masterActiveListener = Executors.newSingleThreadScheduledExecutor(); masterActiveListener.scheduleAtFixedRate( this::checkNewActiveMaster, 0, 100, TimeUnit.MILLISECONDS); } private void checkNewActiveMaster() { try { if (!isActive \u0026amp;\u0026amp; this.seaTunnelServer.isMasterNode()) { logger.info( \u0026#34;This node become a new active master node, begin init coordinator service\u0026#34;); if (this.executorService.isShutdown()) { this.executorService = Executors.newCachedThreadPool( new ThreadFactoryBuilder() .setNameFormat(\u0026#34;seatunnel-coordinator-service-%d\u0026#34;) .build()); } initCoordinatorService(); isActive = true; } else if (isActive \u0026amp;\u0026amp; !this.seaTunnelServer.isMasterNode()) { isActive = false; logger.info( \u0026#34;This node become leave active master node, begin clear coordinator service\u0026#34;); clearCoordinatorService(); } } catch (Exception e) { isActive = false; logger.severe(ExceptionUtils.getMessage(e)); throw new SeaTunnelEngineException(\u0026#34;check new active master error, stop loop\u0026#34;, e); } } 协调器组件启动之后，会创建一个线程定时检测自身与集群状态，检查是否需要进行切换。 状态检查有两种\n当本地标记不是master，但在hazelcast集群中被选举为master时 调用initCoordinatorService()来进行状态的初始化，同时修改本地状态标记信息 当本地标记自身为master，但是在集群中已经不是master时 状态清理 我们看下initCoordinatorService()方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 private void initCoordinatorService() { // 从hazelcast中获取分布式IMAP runningJobInfoIMap = nodeEngine.getHazelcastInstance().getMap(Constant.IMAP_RUNNING_JOB_INFO); runningJobStateIMap = nodeEngine.getHazelcastInstance().getMap(Constant.IMAP_RUNNING_JOB_STATE); runningJobStateTimestampsIMap = nodeEngine.getHazelcastInstance().getMap(Constant.IMAP_STATE_TIMESTAMPS); ownedSlotProfilesIMap = nodeEngine.getHazelcastInstance().getMap(Constant.IMAP_OWNED_SLOT_PROFILES); metricsImap = nodeEngine.getHazelcastInstance().getMap(Constant.IMAP_RUNNING_JOB_METRICS); // 初始化JobHistoryService jobHistoryService = new JobHistoryService( runningJobStateIMap, logger, runningJobMasterMap, nodeEngine.getHazelcastInstance().getMap(Constant.IMAP_FINISHED_JOB_STATE), nodeEngine .getHazelcastInstance() .getMap(Constant.IMAP_FINISHED_JOB_METRICS), nodeEngine .getHazelcastInstance() .getMap(Constant.IMAP_FINISHED_JOB_VERTEX_INFO), engineConfig.getHistoryJobExpireMinutes()); // 初始化EventProcess, 用于发送事件到其他服务 eventProcessor = createJobEventProcessor( engineConfig.getEventReportHttpApi(), engineConfig.getEventReportHttpHeaders(), nodeEngine); // If the user has configured the connector package service, create it on the master node. ConnectorJarStorageConfig connectorJarStorageConfig = engineConfig.getConnectorJarStorageConfig(); if (connectorJarStorageConfig.getEnable()) { connectorPackageService = new ConnectorPackageService(seaTunnelServer); } // 集群恢复后, 尝试恢复之前的历史任务 restoreAllJobFromMasterNodeSwitchFuture = new PassiveCompletableFuture( CompletableFuture.runAsync( this::restoreAllRunningJobFromMasterNodeSwitch, executorService)); } 在coordinatorservice中， 会拉取分布式MAP， 这个数据结构是hazelcast的一个数据结构， 可以认为是在集群中数据一致的一个MAP。 在seatunnel中， 使用这个结构来存储任务信息， slot信息等。\n在这里还会创建EventProcessor， 这个类是用来将事件通知到其他服务， 比如任务失败， 可以发送信息到配置的接口中， 实现事件推送。\n最后， 由于节点启动， 可能是集群异常重启， 或者节点切换， 这时需要恢复历史运行的任务， 那么就会从刚刚获取到的IMAP中获取到之前正在跑的任务列表， 然后尝试进行恢复。 这里的IMAP信息可以开启持久化将信息存储到HDFS等文件系统中， 这样可以在系统完全重启后仍然能够读取到之前的任务状态并进行恢复。\n在CoordinatorService中运行的组件有：\nexecutorService （所有可能被选举为master的节点） masterActiveListener（所有可能被选举为master的节点） jobHistoryService （master节点） eventProcessor （master节点） \u0026ndash; TODO 修改图片，添加executorService 接下来再看下worker节点所启动的组件 worker节点 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 private void startWorker() { taskExecutionService = new TaskExecutionService( classLoaderService, nodeEngine, nodeEngine.getProperties()); nodeEngine.getMetricsRegistry().registerDynamicMetricsProvider(taskExecutionService); taskExecutionService.start(); getSlotService(); } public SlotService getSlotService() { if (slotService == null) { synchronized (this) { if (slotService == null) { SlotService service = new DefaultSlotService( nodeEngine, taskExecutionService, seaTunnelConfig.getEngineConfig().getSlotServiceConfig()); service.init(); slotService = service; } } } return slotService; } 我们可以看到在startWorker方法中， 也会初始化两个组件\ntaskExecutionService 任务执行线程池 slotService 任务资源管理 SlotService 先来看下SlotService的初始化\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 @Override public void init() { initStatus = true; slotServiceSequence = UUID.randomUUID().toString(); contexts = new ConcurrentHashMap\u0026lt;\u0026gt;(); assignedSlots = new ConcurrentHashMap\u0026lt;\u0026gt;(); unassignedSlots = new ConcurrentHashMap\u0026lt;\u0026gt;(); unassignedResource = new AtomicReference\u0026lt;\u0026gt;(new ResourceProfile()); assignedResource = new AtomicReference\u0026lt;\u0026gt;(new ResourceProfile()); scheduledExecutorService = Executors.newSingleThreadScheduledExecutor( r -\u0026gt; new Thread( r, String.format( \u0026#34;hz.%s.seaTunnel.slotService.thread\u0026#34;, nodeEngine.getHazelcastInstance().getName()))); if (!config.isDynamicSlot()) { initFixedSlots(); } unassignedResource.set(getNodeResource()); scheduledExecutorService.scheduleAtFixedRate( () -\u0026gt; { try { LOGGER.fine( \u0026#34;start send heartbeat to resource manager, this address: \u0026#34; + nodeEngine.getClusterService().getThisAddress()); sendToMaster(new WorkerHeartbeatOperation(getWorkerProfile())).join(); } catch (Exception e) { LOGGER.warning( \u0026#34;failed send heartbeat to resource manager, will retry later. this address: \u0026#34; + nodeEngine.getClusterService().getThisAddress()); } }, 0, DEFAULT_HEARTBEAT_TIMEOUT, TimeUnit.MILLISECONDS); } 在SeaTunnel中，会有一个动态slot(DynamicSlot) 的概念。 如果设置为true， 则每个节点不再有Slot数量的限制，可以提交任意数量的任务到此节点上。 如果设置为固定数量的slot， 那么该节点仅能接受这些slot数量的任务运行。\n两者的区别在于你的同步使用场景， 如果你的任务都是大数据量的同步任务，那么最好可以设置成固定数量的Slot，避免提交过多任务影响单个节点的稳定性 但是如果每个任务的数据量都很少，其实可以选择动态Slot，这样可以更大限度的提升资源使用率\n在初始化时， 会根据是否为动态slot来进行slot数量的初始化\n1 2 3 4 5 6 7 8 9 10 11 12 13 private void initFixedSlots() { long maxMemory = Runtime.getRuntime().maxMemory(); for (int i = 0; i \u0026lt; config.getSlotNum(); i++) { unassignedSlots.put( i, new SlotProfile( nodeEngine.getThisAddress(), i, new ResourceProfile( CPU.of(0), Memory.of(maxMemory / config.getSlotNum())), slotServiceSequence)); } } 同时我们也可以看到初始化时会启动一个线程， 定时向master节点发送心跳， 心跳信息中则包含了当前节点的信息， 包括已经分配的， 未分配的slot数量等属性，worker节点通过心跳将信息定时更新给master。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @Override public synchronized WorkerProfile getWorkerProfile() { WorkerProfile workerProfile = new WorkerProfile(nodeEngine.getThisAddress()); workerProfile.setProfile(getNodeResource()); workerProfile.setAssignedSlots(assignedSlots.values().toArray(new SlotProfile[0])); workerProfile.setUnassignedSlots(unassignedSlots.values().toArray(new SlotProfile[0])); workerProfile.setUnassignedResource(unassignedResource.get()); workerProfile.setAttributes(nodeEngine.getLocalMember().getAttributes()); workerProfile.setDynamicSlot(config.isDynamicSlot()); return workerProfile; } private ResourceProfile getNodeResource() { return new ResourceProfile(CPU.of(0), Memory.of(Runtime.getRuntime().maxMemory())); } TaskExecutionService 这个组件与任务提交相关， 这里先简单看下，与任务提交的相关代码在后续再深入查看。\n在worker节点初始化时， 会新建一个TaskExecutionService对象，并调用其start方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 private final ExecutorService executorService = newCachedThreadPool(new BlockingTaskThreadFactory()); public TaskExecutionService( ClassLoaderService classLoaderService, NodeEngineImpl nodeEngine, HazelcastProperties properties) { // 加载配置信息 seaTunnelConfig = ConfigProvider.locateAndGetSeaTunnelConfig(); this.hzInstanceName = nodeEngine.getHazelcastInstance().getName(); this.nodeEngine = nodeEngine; this.classLoaderService = classLoaderService; this.logger = nodeEngine.getLoggingService().getLogger(TaskExecutionService.class); // 指标相关 MetricsRegistry registry = nodeEngine.getMetricsRegistry(); MetricDescriptor descriptor = registry.newMetricDescriptor() .withTag(MetricTags.SERVICE, this.getClass().getSimpleName()); registry.registerStaticMetrics(descriptor, this); scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(); // 定时任务更新指标到IMAP中 scheduledExecutorService.scheduleAtFixedRate( this::updateMetricsContextInImap, 0, seaTunnelConfig.getEngineConfig().getJobMetricsBackupInterval(), TimeUnit.SECONDS); serverConnectorPackageClient = new ServerConnectorPackageClient(nodeEngine, seaTunnelConfig); eventBuffer = new ArrayBlockingQueue\u0026lt;\u0026gt;(2048); // 事件转发服务 eventForwardService = Executors.newSingleThreadExecutor( new ThreadFactoryBuilder().setNameFormat(\u0026#34;event-forwarder-%d\u0026#34;).build()); eventForwardService.submit( () -\u0026gt; { List\u0026lt;Event\u0026gt; events = new ArrayList\u0026lt;\u0026gt;(); RetryUtils.RetryMaterial retryMaterial = new RetryUtils.RetryMaterial(2, true, e -\u0026gt; true); while (!Thread.currentThread().isInterrupted()) { try { events.clear(); Event first = eventBuffer.take(); events.add(first); eventBuffer.drainTo(events, 500); JobEventReportOperation operation = new JobEventReportOperation(events); RetryUtils.retryWithException( () -\u0026gt; NodeEngineUtil.sendOperationToMasterNode( nodeEngine, operation) .join(), retryMaterial); logger.fine(\u0026#34;Event forward success, events \u0026#34; + events.size()); } catch (InterruptedException e) { Thread.currentThread().interrupt(); logger.info(\u0026#34;Event forward thread interrupted\u0026#34;); } catch (Throwable t) { logger.warning( \u0026#34;Event forward failed, discard events \u0026#34; + events.size(), t); } } }); } public void start() { runBusWorkSupplier.runNewBusWork(false); } 在这个类中，有一个成员变量，创建了一个线程池，该线程池为CachedThreadPool，没有大小限制。 在构造方法中构建了一个定时任务，这个任务会将本地执行的一些指标信息更新到IMAP中。 同时创建了一个任务来将Event信息发送给master节点， 由master节点再将这些Event发送给外部服务。 至此， 服务端所有服务组件都已启动完成\nmaster节点与备选节点上会\n定时检查自己是否为master节点， 如果是则进行相应的状态转化 master节点上会 定时打印集群的状态信息。 启动转发服务， 将要推送的事件转发到外部服务 在worker节点上， 启动后会 定时将状态信息上报到master节点 将任务信息更新到IMAP里面。 将在worker产生的要推送给外部服务的事件转发到master节点上。 下面我们会再从一个简单的任务开始， 从客户端看下任务的提交流程。\n客户端提交任务 这里以命令行提交任务的形式来讲解任务的提交流程。\n命令行提交任务的命令为\n./bin/seatunnel/sh -c \u0026lt;config_path\u0026gt; 我们查看这个脚本文件后可以看到这个脚本中最后会调用org.apache.seatunnel.core.starter.seatunnel.SeaTunnelClient这个类\n1 2 3 4 5 6 7 8 9 10 11 public class SeaTunnelClient { public static void main(String[] args) throws CommandException { ClientCommandArgs clientCommandArgs = CommandLineUtils.parse( args, new ClientCommandArgs(), EngineType.SEATUNNEL.getStarterShellName(), true); SeaTunnel.run(clientCommandArgs.buildCommand()); } } 在这个类中，仅有一个main方法， 与上面的server端的代码类似，不过这里构建的是ClientCommandArgs\n解析命令行参数 我们查看clientCommandArgs.buildCommand方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 public Command\u0026lt;?\u0026gt; buildCommand() { Common.setDeployMode(getDeployMode()); if (checkConfig) { return new SeaTunnelConfValidateCommand(this); } if (encrypt) { return new ConfEncryptCommand(this); } if (decrypt) { return new ConfDecryptCommand(this); } return new ClientExecuteCommand(this); } 这里是调用了jcommander来解析参数， 会根据用户传递的参数来决定构建哪个类， 例如是对配置文件做检查，还是加密文件，解密文件以及是不是Client提交任务的命令。 这里就不再讲解其他几个类，主要来看下ClientExecuteCommand 这个类的主要代码都在execute方法中， 整体方法比较长， 我将分段来描述每一段的作业\n连接集群 在这一部分代码中， 做的事情是读取hazelcast-client.yaml文件，尝试建立与server端的连接， 当使用local模式时，会现在本地创建一个hazelcast的实例， 然后连接到这个实例上， 当使用cluster模式时， 则直接连接到集群上。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 public void execute() throws CommandExecuteException { JobMetricsRunner.JobMetricsSummary jobMetricsSummary = null; LocalDateTime startTime = LocalDateTime.now(); LocalDateTime endTime = LocalDateTime.now(); SeaTunnelConfig seaTunnelConfig = ConfigProvider.locateAndGetSeaTunnelConfig(); try { String clusterName = clientCommandArgs.getClusterName(); // 加载配置信息 ClientConfig clientConfig = ConfigProvider.locateAndGetClientConfig(); // 根据此次提交的任务类型，当使用local模式时，意味着上面服务端的流程是没有执行的， // 所以先创建一个本地seatunnel server if (clientCommandArgs.getMasterType().equals(MasterType.LOCAL)) { clusterName = creatRandomClusterName( StringUtils.isNotEmpty(clusterName) ? clusterName : Constant.DEFAULT_SEATUNNEL_CLUSTER_NAME); instance = createServerInLocal(clusterName, seaTunnelConfig); int port = instance.getCluster().getLocalMember().getSocketAddress().getPort(); clientConfig .getNetworkConfig() .setAddresses(Collections.singletonList(\u0026#34;localhost:\u0026#34; + port)); } // 与远程或本地的seatunnel server连接，创建一个engineClient if (StringUtils.isNotEmpty(clusterName)) { seaTunnelConfig.getHazelcastConfig().setClusterName(clusterName); clientConfig.setClusterName(clusterName); } engineClient = new SeaTunnelClient(clientConfig); // 省略第二段代码 // 省略第三段代码 } } catch (Exception e) { throw new CommandExecuteException(\u0026#34;SeaTunnel job executed failed\u0026#34;, e); } finally { if (jobMetricsSummary != null) { // 任务结束，打印日志 log.info( StringFormatUtils.formatTable( \u0026#34;Job Statistic Information\u0026#34;, \u0026#34;Start Time\u0026#34;, DateTimeUtils.toString( startTime, DateTimeUtils.Formatter.YYYY_MM_DD_HH_MM_SS), \u0026#34;End Time\u0026#34;, DateTimeUtils.toString( endTime, DateTimeUtils.Formatter.YYYY_MM_DD_HH_MM_SS), \u0026#34;Total Time(s)\u0026#34;, Duration.between(startTime, endTime).getSeconds(), \u0026#34;Total Read Count\u0026#34;, jobMetricsSummary.getSourceReadCount(), \u0026#34;Total Write Count\u0026#34;, jobMetricsSummary.getSinkWriteCount(), \u0026#34;Total Failed Count\u0026#34;, jobMetricsSummary.getSourceReadCount() - jobMetricsSummary.getSinkWriteCount())); } closeClient(); } } 判断任务类型，调用相关方法 则是根据用户的参数来判断这次的任务类型是什么， 根据参数的不同，调用不同的方法， 例如取消任务， 则会调用相应的取消任务方法， 这次对这里的几个任务不再具体分析， 这次以提交任务为主， 当我们将提交任务的流程弄明白， 这些再去看时也就简单了。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 if (clientCommandArgs.isListJob()) { String jobStatus = engineClient.getJobClient().listJobStatus(true); System.out.println(jobStatus); } else if (clientCommandArgs.isGetRunningJobMetrics()) { String runningJobMetrics = engineClient.getJobClient().getRunningJobMetrics(); System.out.println(runningJobMetrics); } else if (null != clientCommandArgs.getJobId()) { String jobState = engineClient .getJobClient() .getJobDetailStatus(Long.parseLong(clientCommandArgs.getJobId())); System.out.println(jobState); } else if (null != clientCommandArgs.getCancelJobId()) { engineClient .getJobClient() .cancelJob(Long.parseLong(clientCommandArgs.getCancelJobId())); } else if (null != clientCommandArgs.getMetricsJobId()) { String jobMetrics = engineClient .getJobClient() .getJobMetrics(Long.parseLong(clientCommandArgs.getMetricsJobId())); System.out.println(jobMetrics); } else if (null != clientCommandArgs.getSavePointJobId()) { engineClient .getJobClient() .savePointJob(Long.parseLong(clientCommandArgs.getSavePointJobId())); } else { // 省略第三段代码 } 提交任务到集群 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 // 获取配置文件的路径, 并检查文件是否存在 Path configFile = FileUtils.getConfigPath(clientCommandArgs); checkConfigExist(configFile); JobConfig jobConfig = new JobConfig(); // 下面会根据这次任务是根据savepoint重启还是启动新任务来调用不同的方法来构建ClientJobExecutionEnvironment对象 ClientJobExecutionEnvironment jobExecutionEnv; jobConfig.setName(clientCommandArgs.getJobName()); if (null != clientCommandArgs.getRestoreJobId()) { jobExecutionEnv = engineClient.restoreExecutionContext( configFile.toString(), clientCommandArgs.getVariables(), jobConfig, seaTunnelConfig, Long.parseLong(clientCommandArgs.getRestoreJobId())); } else { jobExecutionEnv = engineClient.createExecutionContext( configFile.toString(), clientCommandArgs.getVariables(), jobConfig, seaTunnelConfig, clientCommandArgs.getCustomJobId() != null ? Long.parseLong(clientCommandArgs.getCustomJobId()) : null); } // get job start time startTime = LocalDateTime.now(); // create job proxy // 提交任务 ClientJobProxy clientJobProxy = jobExecutionEnv.execute(); // 判断是否为异步提交,当异步提交时会直接退出,不进行状态检查 if (clientCommandArgs.isAsync()) { if (clientCommandArgs.getMasterType().equals(MasterType.LOCAL)) { log.warn(\u0026#34;The job is running in local mode, can not use async mode.\u0026#34;); } else { return; } } // register cancelJob hook // 添加hook方法, 当提交完成任务后, 命令行退出时, 取消刚刚提交的任务 Runtime.getRuntime() .addShutdownHook( new Thread( () -\u0026gt; { CompletableFuture\u0026lt;Void\u0026gt; future = CompletableFuture.runAsync( () -\u0026gt; { log.info( \u0026#34;run shutdown hook because get close signal\u0026#34;); shutdownHook(clientJobProxy); }); try { future.get(15, TimeUnit.SECONDS); } catch (Exception e) { log.error(\u0026#34;Cancel job failed.\u0026#34;, e); } })); // 同步，检查任务状态相关代码 // 获取任务id, 然后启动后台线程定时检查任务状态 long jobId = clientJobProxy.getJobId(); JobMetricsRunner jobMetricsRunner = new JobMetricsRunner(engineClient, jobId); // 创建线程，定时检查状态 executorService = Executors.newSingleThreadScheduledExecutor( new ThreadFactoryBuilder() .setNameFormat(\u0026#34;job-metrics-runner-%d\u0026#34;) .setDaemon(true) .build()); executorService.scheduleAtFixedRate( jobMetricsRunner, 0, seaTunnelConfig.getEngineConfig().getPrintJobMetricsInfoInterval(), TimeUnit.SECONDS); // wait for job complete // 等待任务结束, 检查任务状态,当任务为异常退出时, 抛出异常 JobResult jobResult = clientJobProxy.waitForJobCompleteV2(); jobStatus = jobResult.getStatus(); if (StringUtils.isNotEmpty(jobResult.getError()) || jobResult.getStatus().equals(JobStatus.FAILED)) { throw new SeaTunnelEngineException(jobResult.getError()); } // get job end time endTime = LocalDateTime.now(); // get job statistic information when job finished jobMetricsSummary = engineClient.getJobMetricsSummary(jobId); 下面我们就看下jobExecutionEnv这个类的初始化与execute方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public ClientJobExecutionEnvironment( JobConfig jobConfig, String jobFilePath, List\u0026lt;String\u0026gt; variables, SeaTunnelHazelcastClient seaTunnelHazelcastClient, SeaTunnelConfig seaTunnelConfig, boolean isStartWithSavePoint, Long jobId) { super(jobConfig, isStartWithSavePoint); this.jobFilePath = jobFilePath; this.variables = variables; this.seaTunnelHazelcastClient = seaTunnelHazelcastClient; this.jobClient = new JobClient(seaTunnelHazelcastClient); this.seaTunnelConfig = seaTunnelConfig; Long finalJobId; if (isStartWithSavePoint || jobId != null) { finalJobId = jobId; } else { finalJobId = jobClient.getNewJobId(); } this.jobConfig.setJobContext(new JobContext(finalJobId)); this.connectorPackageClient = new ConnectorPackageClient(seaTunnelHazelcastClient); } 这个类的初始化中，很简单，只是变量赋值操作，没有做其他初始化操作。再来看下execute方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public ClientJobProxy execute() throws ExecutionException, InterruptedException { LogicalDag logicalDag = getLogicalDag(); log.info( \u0026#34;jarUrls is : [{}]\u0026#34;, jarUrls.stream().map(URL::getPath).collect(Collectors.joining(\u0026#34;, \u0026#34;))); JobImmutableInformation jobImmutableInformation = new JobImmutableInformation( Long.parseLong(jobConfig.getJobContext().getJobId()), jobConfig.getName(), isStartWithSavePoint, seaTunnelHazelcastClient.getSerializationService().toData(logicalDag), jobConfig, new ArrayList\u0026lt;\u0026gt;(jarUrls), new ArrayList\u0026lt;\u0026gt;(connectorJarIdentifiers)); return jobClient.createJobProxy(jobImmutableInformation); } 这个方法中，先调用getLogicalDag生产了逻辑计划，然后构建JobImmutableInformation 信息，传递给jobClient，我们先看后面的步骤，等会再看如何生成的逻辑计划。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 public ClientJobProxy createJobProxy(@NonNull JobImmutableInformation jobImmutableInformation) { return new ClientJobProxy(hazelcastClient, jobImmutableInformation); } public ClientJobProxy( @NonNull SeaTunnelHazelcastClient seaTunnelHazelcastClient, @NonNull JobImmutableInformation jobImmutableInformation) { this.seaTunnelHazelcastClient = seaTunnelHazelcastClient; this.jobId = jobImmutableInformation.getJobId(); submitJob(jobImmutableInformation); } private void submitJob(JobImmutableInformation jobImmutableInformation) { LOGGER.info( String.format( \u0026#34;Start submit job, job id: %s, with plugin jar %s\u0026#34;, jobImmutableInformation.getJobId(), jobImmutableInformation.getPluginJarsUrls())); ClientMessage request = SeaTunnelSubmitJobCodec.encodeRequest( jobImmutableInformation.getJobId(), seaTunnelHazelcastClient .getSerializationService() .toData(jobImmutableInformation), jobImmutableInformation.isStartWithSavePoint()); PassiveCompletableFuture\u0026lt;Void\u0026gt; submitJobFuture = seaTunnelHazelcastClient.requestOnMasterAndGetCompletableFuture(request); submitJobFuture.join(); LOGGER.info( String.format( \u0026#34;Submit job finished, job id: %s, job name: %s\u0026#34;, jobImmutableInformation.getJobId(), jobImmutableInformation.getJobName())); } 在这里的代码可以看到，生成JobImmutableInformation后，会将这个信息转换为ClientMessage(SeaTunnelSubmitJobCodec)然后发送给Master节点，也就是hazelcast server中的master节点。提交完成之后又回到上面的任务状态检测相关步骤。\n这里的消息发送是调用了hazelcast的相关方法，我们对其的实现不需要关注。\n逻辑计划解析 下面一章会再回到Server端看下当收到client端发送的提交任务后的处理逻辑，这里我们先回到前面，看下在客户端如何生成的逻辑计划。\n1 LogicalDag logicalDag = getLogicalDag(); 先看下LogicalDag的结构\n1 2 3 4 5 @Getter private JobConfig jobConfig; private final Set\u0026lt;LogicalEdge\u0026gt; edges = new LinkedHashSet\u0026lt;\u0026gt;(); private final Map\u0026lt;Long, LogicalVertex\u0026gt; logicalVertexMap = new LinkedHashMap\u0026lt;\u0026gt;(); private IdGenerator idGenerator; private boolean isStartWithSavePoint = false; 在这个类里有这几个变量，有两个比较关键的类LogicalEdge和LogicalVertex，通过任务之间的关联关联构建出DAG。\nLogicalEdge的类中存储的变量很简单， 存储了两个点的关系。\n1 2 3 4 5 6 7 8 9 /** The input vertex connected to this edge. */ private LogicalVertex inputVertex; /** The target vertex connected to this edge. */ private LogicalVertex targetVertex; private Long inputVertexId; private Long targetVertexId; LogicalVertex的变量为这几个变量，有当前点的编号，以及所需的并行度，以及Action接口， Action接口会有SourceAction，SinkAction，TransformAction等不同的实现类。\n1 2 3 4 5 private Long vertexId; private Action action; /** Number of subtasks to split this task into at runtime. */ private int parallelism; 看下getLogicalDag的方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public LogicalDag getLogicalDag() { // ImmutablePair\u0026lt;List\u0026lt;Action\u0026gt;, Set\u0026lt;URL\u0026gt;\u0026gt; immutablePair = getJobConfigParser().parse(null); actions.addAll(immutablePair.getLeft()); // seatunnel有个功能是不需要服务端所有节点有全部的依赖，可以在客户端中将所需依赖上传到服务端 // 这里的if-else是这个功能的一些逻辑判断，判断是否需要从客户端将jar包上传到服务端，从而服务端不需要维护全部的jar包 boolean enableUploadConnectorJarPackage = seaTunnelConfig.getEngineConfig().getConnectorJarStorageConfig().getEnable(); if (enableUploadConnectorJarPackage) { Set\u0026lt;ConnectorJarIdentifier\u0026gt; commonJarIdentifiers = connectorPackageClient.uploadCommonPluginJars( Long.parseLong(jobConfig.getJobContext().getJobId()), commonPluginJars); Set\u0026lt;URL\u0026gt; commonPluginJarUrls = getJarUrlsFromIdentifiers(commonJarIdentifiers); Set\u0026lt;ConnectorJarIdentifier\u0026gt; pluginJarIdentifiers = new HashSet\u0026lt;\u0026gt;(); uploadActionPluginJar(actions, pluginJarIdentifiers); Set\u0026lt;URL\u0026gt; connectorPluginJarUrls = getJarUrlsFromIdentifiers(pluginJarIdentifiers); connectorJarIdentifiers.addAll(commonJarIdentifiers); connectorJarIdentifiers.addAll(pluginJarIdentifiers); jarUrls.addAll(commonPluginJarUrls); jarUrls.addAll(connectorPluginJarUrls); actions.forEach( action -\u0026gt; { addCommonPluginJarsToAction( action, commonPluginJarUrls, commonJarIdentifiers); }); } else { jarUrls.addAll(commonPluginJars); jarUrls.addAll(immutablePair.getRight()); actions.forEach( action -\u0026gt; { addCommonPluginJarsToAction( action, new HashSet\u0026lt;\u0026gt;(commonPluginJars), Collections.emptySet()); }); } return getLogicalDagGenerator().generate(); } 方法中首先调用了.parse(null)方法，此方法的返回值是一个不可变二元组，第一个值为List\u0026lt;Action\u0026gt;对象，getJobConfigParser返回的对象是MultipleTableJobConfigParser\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public MultipleTableJobConfigParser( Config seaTunnelJobConfig, IdGenerator idGenerator, JobConfig jobConfig, List\u0026lt;URL\u0026gt; commonPluginJars, boolean isStartWithSavePoint) { this.idGenerator = idGenerator; this.jobConfig = jobConfig; this.commonPluginJars = commonPluginJars; this.isStartWithSavePoint = isStartWithSavePoint; this.seaTunnelJobConfig = seaTunnelJobConfig; this.envOptions = ReadonlyConfig.fromConfig(seaTunnelJobConfig.getConfig(\u0026#34;env\u0026#34;)); this.fallbackParser = new JobConfigParser(idGenerator, commonPluginJars, this, isStartWithSavePoint); } 当调用parse(null)方法时，会进行解析\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 public ImmutablePair\u0026lt;List\u0026lt;Action\u0026gt;, Set\u0026lt;URL\u0026gt;\u0026gt; parse(ClassLoaderService classLoaderService) { // 将配置文件中的 env.jars添加到 commonJars中 this.fillJobConfigAndCommonJars(); // 从配置文件中，将source，transform，sink的配置分别读取处理 List\u0026lt;? extends Config\u0026gt; sourceConfigs = TypesafeConfigUtils.getConfigList( seaTunnelJobConfig, \u0026#34;source\u0026#34;, Collections.emptyList()); List\u0026lt;? extends Config\u0026gt; transformConfigs = TypesafeConfigUtils.getConfigList( seaTunnelJobConfig, \u0026#34;transform\u0026#34;, Collections.emptyList()); List\u0026lt;? extends Config\u0026gt; sinkConfigs = TypesafeConfigUtils.getConfigList( seaTunnelJobConfig, \u0026#34;sink\u0026#34;, Collections.emptyList()); // 获取连接器的jar包地址 List\u0026lt;URL\u0026gt; connectorJars = getConnectorJarList(sourceConfigs, sinkConfigs); if (!commonPluginJars.isEmpty()) { // 将commonJars添加到连接器的jars中 connectorJars.addAll(commonPluginJars); } ClassLoader parentClassLoader = Thread.currentThread().getContextClassLoader(); ClassLoader classLoader; if (classLoaderService == null) { // 由于我们刚才传递了null，所以这里会创建SeaTunnelChildFirstClassLoader类加载器 // 从名字也能看出，这里会与默认的加载器不同，不会先调用父类进行加载， // 而是自己找不到之后再调用父类进行加载，避免jar包冲突 classLoader = new SeaTunnelChildFirstClassLoader(connectorJars, parentClassLoader); } else { classLoader = classLoaderService.getClassLoader( Long.parseLong(jobConfig.getJobContext().getJobId()), connectorJars); } try { Thread.currentThread().setContextClassLoader(classLoader); // 检查DAG里面是否构成环，避免后续的构建过程陷入循环 ConfigParserUtil.checkGraph(sourceConfigs, transformConfigs, sinkConfigs); LinkedHashMap\u0026lt;String, List\u0026lt;Tuple2\u0026lt;CatalogTable, Action\u0026gt;\u0026gt;\u0026gt; tableWithActionMap = new LinkedHashMap\u0026lt;\u0026gt;(); log.info(\u0026#34;start generating all sources.\u0026#34;); for (int configIndex = 0; configIndex \u0026lt; sourceConfigs.size(); configIndex++) { Config sourceConfig = sourceConfigs.get(configIndex); // parseSource方法为真正生成source的方法 // 返回值为2元组，第一个值为 当前source生成的表名称 // 第二个值为 CatalogTable和Action的二元组列表 // 由于SeaTunnel Source支持读取多表，所以第二个值为列表 Tuple2\u0026lt;String, List\u0026lt;Tuple2\u0026lt;CatalogTable, Action\u0026gt;\u0026gt;\u0026gt; tuple2 = parseSource(configIndex, sourceConfig, classLoader); tableWithActionMap.put(tuple2._1(), tuple2._2()); } log.info(\u0026#34;start generating all transforms.\u0026#34;); // parseTransforms来生成transform // 这里将上面的 tableWithActionMap传递了进去，所以不需要返回值 parseTransforms(transformConfigs, classLoader, tableWithActionMap); log.info(\u0026#34;start generating all sinks.\u0026#34;); List\u0026lt;Action\u0026gt; sinkActions = new ArrayList\u0026lt;\u0026gt;(); for (int configIndex = 0; configIndex \u0026lt; sinkConfigs.size(); configIndex++) { Config sinkConfig = sinkConfigs.get(configIndex); // parseSink方法来生成sink // 同样，传递了tableWithActionMap sinkActions.addAll( parseSink(configIndex, sinkConfig, classLoader, tableWithActionMap)); } Set\u0026lt;URL\u0026gt; factoryUrls = getUsedFactoryUrls(sinkActions); return new ImmutablePair\u0026lt;\u0026gt;(sinkActions, factoryUrls); } finally { // 将当前线程的类加载器切换为原来的类加载器 Thread.currentThread().setContextClassLoader(parentClassLoader); if (classLoaderService != null) { classLoaderService.releaseClassLoader( Long.parseLong(jobConfig.getJobContext().getJobId()), connectorJars); } } } 解析Source 先来看下parseSource方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 public Tuple2\u0026lt;String, List\u0026lt;Tuple2\u0026lt;CatalogTable, Action\u0026gt;\u0026gt;\u0026gt; parseSource( int configIndex, Config sourceConfig, ClassLoader classLoader) { final ReadonlyConfig readonlyConfig = ReadonlyConfig.fromConfig(sourceConfig); // factoryId就是我们配置里面的 source名称，例如 FakeSource， Jdbc final String factoryId = getFactoryId(readonlyConfig); // 获取当前数据源生成的 表 名称，注意这里的表可能并不对应一个表 // 由于 seatunnel source支持多表读取，那么这里就会出现一对多的关系 final String tableId = readonlyConfig.getOptional(CommonOptions.RESULT_TABLE_NAME).orElse(DEFAULT_ID); // 获取并行度 final int parallelism = getParallelism(readonlyConfig); // 这个地方是由于某些Source还不支持通过Factory工厂来构建，所以会有两种构建方法 // 后续当所有连接器都支持通过工厂来创建后，这里的代码会被删除掉，所以这次忽略掉这部分代码 // 方法内部是查询是否有相应的工厂类，相应的工厂类不存在时返回 true，不存在时返回false boolean fallback = isFallback( classLoader, TableSourceFactory.class, factoryId, (factory) -\u0026gt; factory.createSource(null)); if (fallback) { Tuple2\u0026lt;CatalogTable, Action\u0026gt; tuple = fallbackParser.parseSource(sourceConfig, jobConfig, tableId, parallelism); return new Tuple2\u0026lt;\u0026gt;(tableId, Collections.singletonList(tuple)); } // 通过FactoryUtil来创建Source // 返回对象为 SeaTunnelSource实例，以及List\u0026lt;CatalogTable\u0026gt; // 这里会创建我们同步任务中Source的实例，catalogtable列表表示这个数据源读取的表的表结构等信息 Tuple2\u0026lt;SeaTunnelSource\u0026lt;Object, SourceSplit, Serializable\u0026gt;, List\u0026lt;CatalogTable\u0026gt;\u0026gt; tuple2 = FactoryUtil.createAndPrepareSource(readonlyConfig, classLoader, factoryId); // 获取当前source connector的jar包 Set\u0026lt;URL\u0026gt; factoryUrls = new HashSet\u0026lt;\u0026gt;(); factoryUrls.addAll(getSourcePluginJarPaths(sourceConfig)); List\u0026lt;Tuple2\u0026lt;CatalogTable, Action\u0026gt;\u0026gt; actions = new ArrayList\u0026lt;\u0026gt;(); long id = idGenerator.getNextId(); String actionName = JobConfigParser.createSourceActionName(configIndex, factoryId); SeaTunnelSource\u0026lt;Object, SourceSplit, Serializable\u0026gt; source = tuple2._1(); source.setJobContext(jobConfig.getJobContext()); PluginUtil.ensureJobModeMatch(jobConfig.getJobContext(), source); // 构建 SourceAction SourceAction\u0026lt;Object, SourceSplit, Serializable\u0026gt; action = new SourceAction\u0026lt;\u0026gt;(id, actionName, tuple2._1(), factoryUrls, new HashSet\u0026lt;\u0026gt;()); action.setParallelism(parallelism); for (CatalogTable catalogTable : tuple2._2()) { actions.add(new Tuple2\u0026lt;\u0026gt;(catalogTable, action)); } return new Tuple2\u0026lt;\u0026gt;(tableId, actions); } 看一下新版本中是如何通过工厂来创建Source实例的\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 public static \u0026lt;T, SplitT extends SourceSplit, StateT extends Serializable\u0026gt; Tuple2\u0026lt;SeaTunnelSource\u0026lt;T, SplitT, StateT\u0026gt;, List\u0026lt;CatalogTable\u0026gt;\u0026gt; createAndPrepareSource( ReadonlyConfig options, ClassLoader classLoader, String factoryIdentifier) { try { // 通过SPI加载TableSourceFactory的类，然后根据factoryIdentifier找对应的类 // 即 找到 souce对应的 SourceFactory final TableSourceFactory factory = discoverFactory(classLoader, TableSourceFactory.class, factoryIdentifier); // 通过Factory来创建Source实例，这个Source实例就是你任务中对应类型的Source // 也就是说Source类的初始化会在Client端创建一次，需要注意这里的环境是否能够连接到该Source SeaTunnelSource\u0026lt;T, SplitT, StateT\u0026gt; source = createAndPrepareSource(factory, options, classLoader); List\u0026lt;CatalogTable\u0026gt; catalogTables; try { // 获取 source会产生的表 列表。包含了字段，数据类型，分区信息等 catalogTables = source.getProducedCatalogTables(); } catch (UnsupportedOperationException e) { // 为了兼容有些Connector未实现getProducedCatalogTables方法 // 调用老的获取数据类型的方法，并转换为Catalog SeaTunnelDataType\u0026lt;T\u0026gt; seaTunnelDataType = source.getProducedType(); final String tableId = options.getOptional(CommonOptions.RESULT_TABLE_NAME).orElse(DEFAULT_ID); catalogTables = CatalogTableUtil.convertDataTypeToCatalogTables(seaTunnelDataType, tableId); } LOG.info( \u0026#34;get the CatalogTable from source {}: {}\u0026#34;, source.getPluginName(), catalogTables.stream() .map(CatalogTable::getTableId) .map(TableIdentifier::toString) .collect(Collectors.joining(\u0026#34;,\u0026#34;))); // 这个代码已经过时 if (options.get(SourceOptions.DAG_PARSING_MODE) == ParsingMode.SHARDING) { CatalogTable catalogTable = catalogTables.get(0); catalogTables.clear(); catalogTables.add(catalogTable); } return new Tuple2\u0026lt;\u0026gt;(source, catalogTables); } catch (Throwable t) { throw new FactoryException( String.format( \u0026#34;Unable to create a source for identifier \u0026#39;%s\u0026#39;.\u0026#34;, factoryIdentifier), t); } } private static \u0026lt;T, SplitT extends SourceSplit, StateT extends Serializable\u0026gt; SeaTunnelSource\u0026lt;T, SplitT, StateT\u0026gt; createAndPrepareSource( TableSourceFactory factory, ReadonlyConfig options, ClassLoader classLoader) { // 通过TableSourceFactory来创建Source TableSourceFactoryContext context = new TableSourceFactoryContext(options, classLoader); ConfigValidator.of(context.getOptions()).validate(factory.optionRule()); TableSource\u0026lt;T, SplitT, StateT\u0026gt; tableSource = factory.createSource(context); return tableSource.createSource(); } 在客户端就会通过SPI加载到Source相应的Factory然后创建出对应的Source实例出来，所以这里需要保证提交的客户端也能够与Source/Sink端建立连接，避免网络连不通的问题。\n解析Transform 接下来在看一下如何创建Transform\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 public void parseTransforms( List\u0026lt;? extends Config\u0026gt; transformConfigs, ClassLoader classLoader, LinkedHashMap\u0026lt;String, List\u0026lt;Tuple2\u0026lt;CatalogTable, Action\u0026gt;\u0026gt;\u0026gt; tableWithActionMap) { if (CollectionUtils.isEmpty(transformConfigs) || transformConfigs.isEmpty()) { return; } Queue\u0026lt;Config\u0026gt; configList = new LinkedList\u0026lt;\u0026gt;(transformConfigs); int index = 0; while (!configList.isEmpty()) { parseTransform(index++, configList, classLoader, tableWithActionMap); } } private void parseTransform( int index, Queue\u0026lt;Config\u0026gt; transforms, ClassLoader classLoader, LinkedHashMap\u0026lt;String, List\u0026lt;Tuple2\u0026lt;CatalogTable, Action\u0026gt;\u0026gt;\u0026gt; tableWithActionMap) { Config config = transforms.poll(); final ReadonlyConfig readonlyConfig = ReadonlyConfig.fromConfig(config); final String factoryId = getFactoryId(readonlyConfig); // get jar urls Set\u0026lt;URL\u0026gt; jarUrls = new HashSet\u0026lt;\u0026gt;(); jarUrls.addAll(getTransformPluginJarPaths(config)); final List\u0026lt;String\u0026gt; inputIds = getInputIds(readonlyConfig); // inputIds为source_table_name，根据这个值找到所依赖的上游source // 目前Transform不支持对多表进行处理，所以如果所依赖的上游是多表，会抛出异常 List\u0026lt;Tuple2\u0026lt;CatalogTable, Action\u0026gt;\u0026gt; inputs = inputIds.stream() .map(tableWithActionMap::get) .filter(Objects::nonNull) .peek( input -\u0026gt; { if (input.size() \u0026gt; 1) { throw new JobDefineCheckException( \u0026#34;Adding transform to multi-table source is not supported.\u0026#34;); } }) .flatMap(Collection::stream) .collect(Collectors.toList()); // inputs为空，表明当前Transform节点找不到任何上游的节点 // 此时会有几种情况 if (inputs.isEmpty()) { if (transforms.isEmpty()) { // 未设置source_table_name，设置结果与之前不对应并且只有一个transform时 // 把最后一个source作为这个transform的上游表 inputs = findLast(tableWithActionMap); } else { // 所依赖的transform可能还没有创建，将本次的transform再放回队列中，后续再进行解析 transforms.offer(config); return; } } // 这次transform结果产生的表名称 final String tableId = readonlyConfig.getOptional(CommonOptions.RESULT_TABLE_NAME).orElse(DEFAULT_ID); // 获取上游source的Action Set\u0026lt;Action\u0026gt; inputActions = inputs.stream() .map(Tuple2::_2) .collect(Collectors.toCollection(LinkedHashSet::new)); // 验证所依赖的多个上游，是否产生的表结构都相同，只有所有的表结构都相同才能进入一个transform来处理 checkProducedTypeEquals(inputActions); // 设置并行度 int spareParallelism = inputs.get(0)._2().getParallelism(); int parallelism = readonlyConfig.getOptional(CommonOptions.PARALLELISM).orElse(spareParallelism); // 创建Transform实例，与刚刚通过Source工厂来创建差不多的行为 CatalogTable catalogTable = inputs.get(0)._1(); SeaTunnelTransform\u0026lt;?\u0026gt; transform = FactoryUtil.createAndPrepareTransform( catalogTable, readonlyConfig, classLoader, factoryId); transform.setJobContext(jobConfig.getJobContext()); long id = idGenerator.getNextId(); String actionName = JobConfigParser.createTransformActionName(index, factoryId); // 封装成Action TransformAction transformAction = new TransformAction( id, actionName, new ArrayList\u0026lt;\u0026gt;(inputActions), transform, jarUrls, new HashSet\u0026lt;\u0026gt;()); transformAction.setParallelism(parallelism); // 放入到map中，此时map里面存储了source和transform // 以每个节点产生的表结构为key，action作为value tableWithActionMap.put( tableId, Collections.singletonList( new Tuple2\u0026lt;\u0026gt;(transform.getProducedCatalogTable(), transformAction))); } 解析Sink 当看完source/transform的解析之后，对于sink的解析逻辑也会比较明了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 public List\u0026lt;SinkAction\u0026lt;?, ?, ?, ?\u0026gt;\u0026gt; parseSink( int configIndex, Config sinkConfig, ClassLoader classLoader, LinkedHashMap\u0026lt;String, List\u0026lt;Tuple2\u0026lt;CatalogTable, Action\u0026gt;\u0026gt;\u0026gt; tableWithActionMap) { ReadonlyConfig readonlyConfig = ReadonlyConfig.fromConfig(sinkConfig); // String factoryId = getFactoryId(readonlyConfig); // 获取当前sink节点依赖的上游节点 List\u0026lt;String\u0026gt; inputIds = getInputIds(readonlyConfig); // 在tableWithActionMap中查找 List\u0026lt;List\u0026lt;Tuple2\u0026lt;CatalogTable, Action\u0026gt;\u0026gt;\u0026gt; inputVertices = inputIds.stream() .map(tableWithActionMap::get) .filter(Objects::nonNull) .collect(Collectors.toList()); // 当sink节点找不到上游节点时，找到最后一个节点信息作为上游节点 // 这里与transform不一样的地方是，不会再等其他sink节点初始化完成，因为sink节点不可能依赖与其他sink节点 if (inputVertices.isEmpty()) { // Tolerates incorrect configuration of simple graph inputVertices = Collections.singletonList(findLast(tableWithActionMap)); } else if (inputVertices.size() \u0026gt; 1) { for (List\u0026lt;Tuple2\u0026lt;CatalogTable, Action\u0026gt;\u0026gt; inputVertex : inputVertices) { if (inputVertex.size() \u0026gt; 1) { // 当一个sink节点即有多个上游节点，且某个上游节点还会产生多表时抛出异常 // sink可以支持多个数据源，或者单个数据源下产生多表，不能同时支持多个数据源，且某个数据源下存在多表 throw new JobDefineCheckException( \u0026#34;Sink don\u0026#39;t support simultaneous writing of data from multi-table source and other sources.\u0026#34;); } } } // 与解析source一样，对老代码的兼容 boolean fallback = isFallback( classLoader, TableSinkFactory.class, factoryId, (factory) -\u0026gt; factory.createSink(null)); if (fallback) { return fallbackParser.parseSinks(configIndex, inputVertices, sinkConfig, jobConfig); } // 获取sink的连接器jar包 Set\u0026lt;URL\u0026gt; jarUrls = new HashSet\u0026lt;\u0026gt;(); jarUrls.addAll(getSinkPluginJarPaths(sinkConfig)); List\u0026lt;SinkAction\u0026lt;?, ?, ?, ?\u0026gt;\u0026gt; sinkActions = new ArrayList\u0026lt;\u0026gt;(); // 多个数据源的情况 if (inputVertices.size() \u0026gt; 1) { Set\u0026lt;Action\u0026gt; inputActions = inputVertices.stream() .flatMap(Collection::stream) .map(Tuple2::_2) .collect(Collectors.toCollection(LinkedHashSet::new)); // 检查多个上游数据源产生的表结构是否一致 checkProducedTypeEquals(inputActions); // 创建sinkAction Tuple2\u0026lt;CatalogTable, Action\u0026gt; inputActionSample = inputVertices.get(0).get(0); SinkAction\u0026lt;?, ?, ?, ?\u0026gt; sinkAction = createSinkAction( inputActionSample._1(), inputActions, readonlyConfig, classLoader, jarUrls, new HashSet\u0026lt;\u0026gt;(), factoryId, inputActionSample._2().getParallelism(), configIndex); sinkActions.add(sinkAction); return sinkActions; } // 此时只有一个数据源，且此数据源下可能会产生多表，循环创建sinkAction for (Tuple2\u0026lt;CatalogTable, Action\u0026gt; tuple : inputVertices.get(0)) { SinkAction\u0026lt;?, ?, ?, ?\u0026gt; sinkAction = createSinkAction( tuple._1(), Collections.singleton(tuple._2()), readonlyConfig, classLoader, jarUrls, new HashSet\u0026lt;\u0026gt;(), factoryId, tuple._2().getParallelism(), configIndex); sinkActions.add(sinkAction); } // 当一个数据源下多表时与多个数据源 会多进行这么这一步 // 上面的createSinkAction是一致的 // 此方法内会判断sink是否支持多表，以及 Optional\u0026lt;SinkAction\u0026lt;?, ?, ?, ?\u0026gt;\u0026gt; multiTableSink = tryGenerateMultiTableSink( sinkActions, readonlyConfig, classLoader, factoryId, configIndex); // 最终会将所创建的sink action作为返回值返回 return multiTableSink .\u0026lt;List\u0026lt;SinkAction\u0026lt;?, ?, ?, ?\u0026gt;\u0026gt;\u0026gt;map(Collections::singletonList) .orElse(sinkActions); } 接下来看下创建sinkAction方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 private SinkAction\u0026lt;?, ?, ?, ?\u0026gt; createSinkAction( CatalogTable catalogTable, Set\u0026lt;Action\u0026gt; inputActions, ReadonlyConfig readonlyConfig, ClassLoader classLoader, Set\u0026lt;URL\u0026gt; factoryUrls, Set\u0026lt;ConnectorJarIdentifier\u0026gt; connectorJarIdentifiers, String factoryId, int parallelism, int configIndex) { // 使用工厂类创建sink SeaTunnelSink\u0026lt;?, ?, ?, ?\u0026gt; sink = FactoryUtil.createAndPrepareSink( catalogTable, readonlyConfig, classLoader, factoryId); sink.setJobContext(jobConfig.getJobContext()); SinkConfig actionConfig = new SinkConfig(catalogTable.getTableId().toTablePath().toString()); long id = idGenerator.getNextId(); String actionName = JobConfigParser.createSinkActionName( configIndex, factoryId, actionConfig.getMultipleRowTableId()); // 创建sinkAction SinkAction\u0026lt;?, ?, ?, ?\u0026gt; sinkAction = new SinkAction\u0026lt;\u0026gt;( id, actionName, new ArrayList\u0026lt;\u0026gt;(inputActions), sink, factoryUrls, connectorJarIdentifiers, actionConfig); if (!isStartWithSavePoint) { // 这里需要注意，当非从savepoint启动时，会进行savemode的处理 handleSaveMode(sink); } sinkAction.setParallelism(parallelism); return sinkAction; } public void handleSaveMode(SeaTunnelSink\u0026lt;?, ?, ?, ?\u0026gt; sink) { // 当sink类支持了savemode特性时，会进行savemode处理 // 例如删除表，重建表，报错等 if (SupportSaveMode.class.isAssignableFrom(sink.getClass())) { SupportSaveMode saveModeSink = (SupportSaveMode) sink; // 当 设置savemode在client端执行时，会在client端去做这些事 // 我们之前出现过一个错误是当在客户端执行完毕后，到集群后任务执行出错，卡在scheduling的状态 // 导致数据被清空后没有及时写入 // 以及需要注意这个地方执行的机器到sink集群的网络是否能够连通，推荐将这个行为放到server端执行 if (envOptions .get(EnvCommonOptions.SAVEMODE_EXECUTE_LOCATION) .equals(SaveModeExecuteLocation.CLIENT)) { log.warn( \u0026#34;SaveMode execute location on CLIENT is deprecated, please use CLUSTER instead.\u0026#34;); Optional\u0026lt;SaveModeHandler\u0026gt; saveModeHandler = saveModeSink.getSaveModeHandler(); if (saveModeHandler.isPresent()) { try (SaveModeHandler handler = saveModeHandler.get()) { new SaveModeExecuteWrapper(handler).execute(); } catch (Exception e) { throw new SeaTunnelRuntimeException(HANDLE_SAVE_MODE_FAILED, e); } } } } } 我们看完了如何去解析Source/Transform/Sink的逻辑，再回到调用的地方\n1 2 3 4 5 6 7 8 9 10 List\u0026lt;Action\u0026gt; sinkActions = new ArrayList\u0026lt;\u0026gt;(); for (int configIndex = 0; configIndex \u0026lt; sinkConfigs.size(); configIndex++) { Config sinkConfig = sinkConfigs.get(configIndex); // parseSink方法来生成sink // 同样，传递了tableWithActionMap sinkActions.addAll( parseSink(configIndex, sinkConfig, classLoader, tableWithActionMap)); } Set\u0026lt;URL\u0026gt; factoryUrls = getUsedFactoryUrls(sinkActions); return new ImmutablePair\u0026lt;\u0026gt;(sinkActions, factoryUrls); parseSink会返回所有创建的Sink Action，而每个Action都维护了upstream Action，所以我们能通过最终的Sink Action找到相关联的Transform Action和Source Action\n最终调用getUsedFactoryUrls或找到此链路上的所有依赖的Jar\n然后返回一个二元组\n逻辑计划解析 再回到逻辑计划生成的部分\n1 2 3 4 5 6 7 public LogicalDag getLogicalDag() { // ImmutablePair\u0026lt;List\u0026lt;Action\u0026gt;, Set\u0026lt;URL\u0026gt;\u0026gt; immutablePair = getJobConfigParser().parse(null); actions.addAll(immutablePair.getLeft()); .... return getLogicalDagGenerator().generate(); } 在上面看完了如何去解析配置，接下来看下如何去生成逻辑计划\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // 初始化将我们生成的所有SinkAction传入 protected LogicalDagGenerator getLogicalDagGenerator() { return new LogicalDagGenerator(actions, jobConfig, idGenerator, isStartWithSavePoint); } public LogicalDag generate() { // 根据action来生成节点信息 actions.forEach(this::createLogicalVertex); // 创建边 Set\u0026lt;LogicalEdge\u0026gt; logicalEdges = createLogicalEdges(); // 构建LogicalDag对象，并将解析的值设置到相应属性中 LogicalDag logicalDag = new LogicalDag(jobConfig, idGenerator); logicalDag.getEdges().addAll(logicalEdges); logicalDag.getLogicalVertexMap().putAll(logicalVertexMap); logicalDag.setStartWithSavePoint(isStartWithSavePoint); return logicalDag; } 创建逻辑计划节点\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 private void createLogicalVertex(Action action) { // 获取当前action的id,判断当map中已经存在则返回 final Long logicalVertexId = action.getId(); if (logicalVertexMap.containsKey(logicalVertexId)) { return; } // 对上游的依赖进行循环创建 // map对象的存储结构为： // 当前节点的id为key // value为一个list，存储下游使用到该节点的id编号 action.getUpstream() .forEach( inputAction -\u0026gt; { createLogicalVertex(inputAction); inputVerticesMap .computeIfAbsent( inputAction.getId(), id -\u0026gt; new LinkedHashSet\u0026lt;\u0026gt;()) .add(logicalVertexId); }); // 最后创建当前节点的信息 final LogicalVertex logicalVertex = new LogicalVertex(logicalVertexId, action, action.getParallelism()); // 注意这里有两个map // 一个为inputVerticesMap，一个为logicalVertexMap // inputVerticesMap中存储了节点之间的关系 // logicalVertexMap存储了节点编号与节点的关系 logicalVertexMap.put(logicalVertexId, logicalVertex); } private Set\u0026lt;LogicalEdge\u0026gt; createLogicalEdges() { // 使用上面创建的两个map来创建边 return inputVerticesMap.entrySet().stream() .map( entry -\u0026gt; entry.getValue().stream() .map( targetId -\u0026gt; new LogicalEdge( logicalVertexMap.get( entry.getKey()), logicalVertexMap.get(targetId))) .collect(Collectors.toList())) .flatMap(Collection::stream) .collect(Collectors.toCollection(LinkedHashSet::new)); } 上面的配置中，会根据上下游关系生成这样的逻辑计划图，并且由于Fake2节点是没有任务下游的，并不会计入到逻辑计划中\n小结一下 至此我们看完了在客户端如何完成一个任务的提交流程 小结一下：\n首先会判断我们执行的模式，当我们是local模式时，会在本机创建一个server节点 然后在当前节点创建一个hazelcast节点，与hazelcast集群进行连接，连接到集群或者刚刚启动的本地节点 接下来判断我们这次的任务类型来调用不同的方法 以提交任务为例，会解析配置文件，并进行逻辑计划解析，在逻辑计划解析时，会在提交的机器上创建Source/Transform/Sink实例。并且去执行savemode功能，有可能会建表，重建表，删除数据操作（当启用客户端执行时） 当逻辑计划解析完成后，会将信息编码，然后通过hazelcast的集群通信功能，将信息发送给server的master节点 发送完成后，根据配置决定退出还是继续做任务状态的检测 程序添加hook配置，当客户端退出后取消刚刚提交的任务 服务端提交任务相关 我们再回顾一下当服务端启动后会执行的组件：\ncoordinatorService 仅在master/standby节点启用，会监听集群状态，主备切换 SlotService 在worker节点中启用，会定期上报自身信息到master中 TaskExecutionSerive 在worker节点中启用，会定时更新执行的任务指标到IMAP中 在集群未接收到任何任务时，会运行这些组件，当Client发送一条SeaTunnelSubmitJobCodec信息到服务端后，服务端又是如何处理的呢？\n接收消息 因为客户端与服务端在不同的机器上，所有这里无法使用方法调用，而是使用了消息传递，当服务端接收到一条消息后是如何进行相关的方法调用的呢 首先我们在上面的代码中，知道客户端向服务端发送的是一条类型为SeaTunnelSubmitJobCodec的消息\n1 2 3 4 5 6 7 8 9 10 // 客户端相关代码 ClientMessage request = SeaTunnelSubmitJobCodec.encodeRequest( jobImmutableInformation.getJobId(), seaTunnelHazelcastClient .getSerializationService() .toData(jobImmutableInformation), jobImmutableInformation.isStartWithSavePoint()); PassiveCompletableFuture\u0026lt;Void\u0026gt; submitJobFuture = seaTunnelHazelcastClient.requestOnMasterAndGetCompletableFuture(request); 我们进入SeaTunnelSubmitJobCodec这个类，查看他的相关调用类，可以找到一个SeaTunnelMessageTaskFactoryProvider的类，在这个里中维护了一个消息类型到MessageTask的映射关系，也可以理解为客户端消息到服务端调用类的映射关系，以SeaTunnelSubmitJobCodec为例，会返回SubmitJobTask这个类\n1 2 3 4 5 6 7 8 9 10 11 12 private final Int2ObjectHashMap\u0026lt;MessageTaskFactory\u0026gt; factories = new Int2ObjectHashMap\u0026lt;\u0026gt;(60); private void initFactories() { factories.put( SeaTunnelPrintMessageCodec.REQUEST_MESSAGE_TYPE, (clientMessage, connection) -\u0026gt; new PrintMessageTask(clientMessage, node, connection)); factories.put( SeaTunnelSubmitJobCodec.REQUEST_MESSAGE_TYPE, (clientMessage, connection) -\u0026gt; new SubmitJobTask(clientMessage, node, connection)); ..... } 当我们查看SubmitJobTask这个类时，又会发现继续调用了SubmitJobOperation这个类\n1 2 3 4 5 6 7 @Override protected Operation prepareOperation() { return new SubmitJobOperation( parameters.jobId, parameters.jobImmutableInformation, parameters.isStartWithSavePoint); } 在SubmitJobOperation中我们可以看到真正调用的地方，将我们的信息交给了CoordinatorService组件，调用了其submitJob方法\n1 2 3 4 5 6 7 8 @Override protected PassiveCompletableFuture\u0026lt;?\u0026gt; doRun() throws Exception { SeaTunnelServer seaTunnelServer = getService(); return seaTunnelServer .getCoordinatorService() .submitJob(jobId, jobImmutableInformation, isStartWithSavePoint); } 这时一个客户端的消息就真正的被交给服务端来进行方法调用了，至于其他类型的操作也都可以类似找到相关的类，就不再赘述。\nCoordinatorService 接下来看下在CoordinatorService是如何进行任务提交的\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 public PassiveCompletableFuture\u0026lt;Void\u0026gt; submitJob( long jobId, Data jobImmutableInformation, boolean isStartWithSavePoint) { CompletableFuture\u0026lt;Void\u0026gt; jobSubmitFuture = new CompletableFuture\u0026lt;\u0026gt;(); // 首先会根据任务id来判断，当存在相同任务的id时，直接返回 if (getJobMaster(jobId) != null) { logger.warning( String.format( \u0026#34;The job %s is currently running; no need to submit again.\u0026#34;, jobId)); jobSubmitFuture.complete(null); return new PassiveCompletableFuture\u0026lt;\u0026gt;(jobSubmitFuture); } // 初始化JobMaster对象 JobMaster jobMaster = new JobMaster( jobImmutableInformation, this.nodeEngine, executorService, getResourceManager(), getJobHistoryService(), runningJobStateIMap, runningJobStateTimestampsIMap, ownedSlotProfilesIMap, runningJobInfoIMap, metricsImap, engineConfig, seaTunnelServer); // executorService.submit( () -\u0026gt; { try { // 由于2.3.6中任务id可以由用户传递，而在seatunnel中会根据任务id来做一些状态判断 // 所以这里的检查是保证在当前的状态中，不会存在相同id的任务 if (!isStartWithSavePoint \u0026amp;\u0026amp; getJobHistoryService().getJobMetrics(jobId) != null) { throw new JobException( String.format( \u0026#34;The job id %s has already been submitted and is not starting with a savepoint.\u0026#34;, jobId)); } // 将当前任务的信息添加到IMAP中 runningJobInfoIMap.put( jobId, new JobInfo(System.currentTimeMillis(), jobImmutableInformation)); runningJobMasterMap.put(jobId, jobMaster); // 对JobMaster做初始化操作 jobMaster.init( runningJobInfoIMap.get(jobId).getInitializationTimestamp(), false); // 当jobMaster初始化完成后，会认为任务创建成功 jobSubmitFuture.complete(null); } catch (Throwable e) { String errorMsg = ExceptionUtils.getMessage(e); logger.severe(String.format(\u0026#34;submit job %s error %s \u0026#34;, jobId, errorMsg)); jobSubmitFuture.completeExceptionally(new JobException(errorMsg)); } if (!jobSubmitFuture.isCompletedExceptionally()) { // 当任务正常提交后，调用jobMaster的run方法开始执行任务 // 以及最后会检查任务状态，从内部状态中将此次任务信息删除 try { jobMaster.run(); } finally { // voidCompletableFuture will be cancelled when zeta master node // shutdown to simulate master failure, // don\u0026#39;t update runningJobMasterMap is this case. if (!jobMaster.getJobMasterCompleteFuture().isCancelled()) { runningJobMasterMap.remove(jobId); } } } else { runningJobInfoIMap.remove(jobId); runningJobMasterMap.remove(jobId); } }); return new PassiveCompletableFuture\u0026lt;\u0026gt;(jobSubmitFuture); } 可以看到在服务端，会通过创建一个JobMaster对象，由这个对象来进行单个任务的管理。\n在创建JobMaster对象时，会通过getResourceManager方法来获取资源管理对象，以及通过getJobHistoryService方法获取任务历史信息，jobHistoryService在启动时就会创建完成，ResourceManage则采用了懒加载的方式，在第一次有任务提交之后才会进行创建\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /** Lazy load for resource manager */ public ResourceManager getResourceManager() { if (resourceManager == null) { synchronized (this) { if (resourceManager == null) { ResourceManager manager = new ResourceManagerFactory(nodeEngine, engineConfig) .getResourceManager(); manager.init(); resourceManager = manager; } } } return resourceManager; } ResourceManager 目前seatunnel也仅支持standalone的部署方式，当初始化ResourceManager时，会获取到集群所有节点，然后向其发送SyncWorkerProfileOperation操作来获取节点的信息，然后更新到内部的registerWorker状态中\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 @Override public void init() { log.info(\u0026#34;Init ResourceManager\u0026#34;); initWorker(); } private void initWorker() { log.info(\u0026#34;initWorker... \u0026#34;); List\u0026lt;Address\u0026gt; aliveNode = nodeEngine.getClusterService().getMembers().stream() .map(Member::getAddress) .collect(Collectors.toList()); log.info(\u0026#34;init live nodes: {}\u0026#34;, aliveNode); List\u0026lt;CompletableFuture\u0026lt;Void\u0026gt;\u0026gt; futures = aliveNode.stream() .map( node -\u0026gt; sendToMember(new SyncWorkerProfileOperation(), node) .thenAccept( p -\u0026gt; { if (p != null) { registerWorker.put( node, (WorkerProfile) p); log.info( \u0026#34;received new worker register: \u0026#34; + ((WorkerProfile) p) .getAddress()); } })) .collect(Collectors.toList()); futures.forEach(CompletableFuture::join); log.info(\u0026#34;registerWorker: {}\u0026#34;, registerWorker); } 而我们之前在SlotService中注意到在每个节点会定时向master发送心跳信息，心跳信息里面包含了当前节点的状态，在ResourceManager中当接收到心跳信息后，也会在内部状态中更新每个节点的状态\n1 2 3 4 5 6 7 8 9 10 @Override public void heartbeat(WorkerProfile workerProfile) { if (!registerWorker.containsKey(workerProfile.getAddress())) { log.info(\u0026#34;received new worker register: \u0026#34; + workerProfile.getAddress()); sendToMember(new ResetResourceOperation(), workerProfile.getAddress()).join(); } else { log.debug(\u0026#34;received worker heartbeat from: \u0026#34; + workerProfile.getAddress()); } registerWorker.put(workerProfile.getAddress(), workerProfile); } JobMaster 在CoordinatorService中会创建JobMaster并调用其init方法，当init方法完成后会认为任务创建成功。然后再调用run方法来正式运行任务\n我们看一下初始化以及init方法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public JobMaster( @NonNull Data jobImmutableInformationData, @NonNull NodeEngine nodeEngine, @NonNull ExecutorService executorService, @NonNull ResourceManager resourceManager, @NonNull JobHistoryService jobHistoryService, @NonNull IMap runningJobStateIMap, @NonNull IMap runningJobStateTimestampsIMap, @NonNull IMap ownedSlotProfilesIMap, @NonNull IMap\u0026lt;Long, JobInfo\u0026gt; runningJobInfoIMap, @NonNull IMap\u0026lt;Long, HashMap\u0026lt;TaskLocation, SeaTunnelMetricsContext\u0026gt;\u0026gt; metricsImap, EngineConfig engineConfig, SeaTunnelServer seaTunnelServer) { this.jobImmutableInformationData = jobImmutableInformationData; this.nodeEngine = nodeEngine; this.executorService = executorService; flakeIdGenerator = this.nodeEngine .getHazelcastInstance() .getFlakeIdGenerator(Constant.SEATUNNEL_ID_GENERATOR_NAME); this.ownedSlotProfilesIMap = ownedSlotProfilesIMap; this.resourceManager = resourceManager; this.jobHistoryService = jobHistoryService; this.runningJobStateIMap = runningJobStateIMap; this.runningJobStateTimestampsIMap = runningJobStateTimestampsIMap; this.runningJobInfoIMap = runningJobInfoIMap; this.engineConfig = engineConfig; this.metricsImap = metricsImap; this.seaTunnelServer = seaTunnelServer; this.releasedSlotWhenTaskGroupFinished = new ConcurrentHashMap\u0026lt;\u0026gt;(); } 在初始化时只是进行简单的变量赋值，并没有进行什么操作，我们需要着重看下init方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 public synchronized void init(long initializationTimestamp, boolean restart) throws Exception { // 服务端接收到客户端传递过来的消息是一个二进制的对象 // 首先将其转换为JobImmutableInformation对象，而这个对象也正是客户端发送给服务端的对象 jobImmutableInformation = nodeEngine.getSerializationService().toObject(jobImmutableInformationData); // 获取checkpoint的相关配置，例如周期，超时时间等 jobCheckpointConfig = createJobCheckpointConfig( engineConfig.getCheckpointConfig(), jobImmutableInformation.getJobConfig()); LOGGER.info( String.format( \u0026#34;Init JobMaster for Job %s (%s) \u0026#34;, jobImmutableInformation.getJobConfig().getName(), jobImmutableInformation.getJobId())); LOGGER.info( String.format( \u0026#34;Job %s (%s) needed jar urls %s\u0026#34;, jobImmutableInformation.getJobConfig().getName(), jobImmutableInformation.getJobId(), jobImmutableInformation.getPluginJarsUrls())); ClassLoader appClassLoader = Thread.currentThread().getContextClassLoader(); // 获取ClassLoader ClassLoader classLoader = seaTunnelServer .getClassLoaderService() .getClassLoader( jobImmutableInformation.getJobId(), jobImmutableInformation.getPluginJarsUrls()); // 将客户端传递的信息反序列化为逻辑计划 logicalDag = CustomClassLoadedObject.deserializeWithCustomClassLoader( nodeEngine.getSerializationService(), classLoader, jobImmutableInformation.getLogicalDag()); try { Thread.currentThread().setContextClassLoader(classLoader); // 在服务端会执行savemode的功能，例如对表进行创建，删除操作。 if (!restart \u0026amp;\u0026amp; !logicalDag.isStartWithSavePoint() \u0026amp;\u0026amp; ReadonlyConfig.fromMap(logicalDag.getJobConfig().getEnvOptions()) .get(EnvCommonOptions.SAVEMODE_EXECUTE_LOCATION) .equals(SaveModeExecuteLocation.CLUSTER)) { logicalDag.getLogicalVertexMap().values().stream() .map(LogicalVertex::getAction) .filter(action -\u0026gt; action instanceof SinkAction) .map(sink -\u0026gt; ((SinkAction\u0026lt;?, ?, ?, ?\u0026gt;) sink).getSink()) .forEach(JobMaster::handleSaveMode); } // 逻辑计划到物理计划的解析 final Tuple2\u0026lt;PhysicalPlan, Map\u0026lt;Integer, CheckpointPlan\u0026gt;\u0026gt; planTuple = PlanUtils.fromLogicalDAG( logicalDag, nodeEngine, jobImmutableInformation, initializationTimestamp, executorService, flakeIdGenerator, runningJobStateIMap, runningJobStateTimestampsIMap, engineConfig.getQueueType(), engineConfig); this.physicalPlan = planTuple.f0(); this.physicalPlan.setJobMaster(this); this.checkpointPlanMap = planTuple.f1(); } finally { // 重置当前线程的ClassLoader，并且释放上面创建的classLoader Thread.currentThread().setContextClassLoader(appClassLoader); seaTunnelServer .getClassLoaderService() .releaseClassLoader( jobImmutableInformation.getJobId(), jobImmutableInformation.getPluginJarsUrls()); } Exception initException = null; try { // 初始化checkpointManager this.initCheckPointManager(restart); } catch (Exception e) { initException = e; } // 添加一些回调函数做任务状态监听 this.initStateFuture(); if (initException != null) { if (restart) { cancelJob(); } throw initException; } } 最后再看下run方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public void run() { try { physicalPlan.startJob(); } catch (Throwable e) { LOGGER.severe( String.format( \u0026#34;Job %s (%s) run error with: %s\u0026#34;, physicalPlan.getJobImmutableInformation().getJobConfig().getName(), physicalPlan.getJobImmutableInformation().getJobId(), ExceptionUtils.getMessage(e))); } finally { jobMasterCompleteFuture.join(); if (engineConfig.getConnectorJarStorageConfig().getEnable()) { List\u0026lt;ConnectorJarIdentifier\u0026gt; pluginJarIdentifiers = jobImmutableInformation.getPluginJarIdentifiers(); seaTunnelServer .getConnectorPackageService() .cleanUpWhenJobFinished( jobImmutableInformation.getJobId(), pluginJarIdentifiers); } } } 此方法比较简单，调用physicalPlan.startJob()对生成的物理计划调用run方法\n通过以上代码可以看出，当服务端接收到客户端提交任务请求后，会初始化JobMaster类，在JobMaster中完成了从逻辑计划到物理计划的生成，最终执行生成的物理计划。\n下面需要深入看下如何从逻辑计划生成物理计划\n逻辑计划到物理计划 物理计划的生成是由JobMaster中调用生成的\n1 2 3 4 5 6 7 8 9 10 11 12 final Tuple2\u0026lt;PhysicalPlan, Map\u0026lt;Integer, CheckpointPlan\u0026gt;\u0026gt; planTuple = PlanUtils.fromLogicalDAG( logicalDag, nodeEngine, jobImmutableInformation, initializationTimestamp, executorService, flakeIdGenerator, runningJobStateIMap, runningJobStateTimestampsIMap, engineConfig.getQueueType(), engineConfig); 在生成的方法中可以看到中间会先从逻辑计划生成执行计划，然后再由执行计划生成物理计划\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public static Tuple2\u0026lt;PhysicalPlan, Map\u0026lt;Integer, CheckpointPlan\u0026gt;\u0026gt; fromLogicalDAG( @NonNull LogicalDag logicalDag, @NonNull NodeEngine nodeEngine, @NonNull JobImmutableInformation jobImmutableInformation, long initializationTimestamp, @NonNull ExecutorService executorService, @NonNull FlakeIdGenerator flakeIdGenerator, @NonNull IMap runningJobStateIMap, @NonNull IMap runningJobStateTimestampsIMap, @NonNull QueueType queueType, @NonNull EngineConfig engineConfig) { return new PhysicalPlanGenerator( new ExecutionPlanGenerator( logicalDag, jobImmutableInformation, engineConfig) .generate(), nodeEngine, jobImmutableInformation, initializationTimestamp, executorService, flakeIdGenerator, runningJobStateIMap, runningJobStateTimestampsIMap, queueType) .generate(); } 执行计划的生成 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public ExecutionPlanGenerator( @NonNull LogicalDag logicalPlan, @NonNull JobImmutableInformation jobImmutableInformation, @NonNull EngineConfig engineConfig) { checkArgument( logicalPlan.getEdges().size() \u0026gt; 0, \u0026#34;ExecutionPlan Builder must have LogicalPlan.\u0026#34;); this.logicalPlan = logicalPlan; this.jobImmutableInformation = jobImmutableInformation; this.engineConfig = engineConfig; } public ExecutionPlan generate() { log.debug(\u0026#34;Generate execution plan using logical plan:\u0026#34;); Set\u0026lt;ExecutionEdge\u0026gt; executionEdges = generateExecutionEdges(logicalPlan.getEdges()); log.debug(\u0026#34;Phase 1: generate execution edge list {}\u0026#34;, executionEdges); executionEdges = generateShuffleEdges(executionEdges); log.debug(\u0026#34;Phase 2: generate shuffle edge list {}\u0026#34;, executionEdges); executionEdges = generateTransformChainEdges(executionEdges); log.debug(\u0026#34;Phase 3: generate transform chain edge list {}\u0026#34;, executionEdges); List\u0026lt;Pipeline\u0026gt; pipelines = generatePipelines(executionEdges); log.debug(\u0026#34;Phase 4: generate pipeline list {}\u0026#34;, pipelines); ExecutionPlan executionPlan = new ExecutionPlan(pipelines, jobImmutableInformation); log.debug(\u0026#34;Phase 5: generate execution plan: {}\u0026#34;, executionPlan); return executionPlan; } 首先看下执行计划这个类里面有什么内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public class ExecutionPlan { private final List\u0026lt;Pipeline\u0026gt; pipelines; private final JobImmutableInformation jobImmutableInformation; } public class Pipeline { /** The ID of the pipeline. */ private final Integer id; private final List\u0026lt;ExecutionEdge\u0026gt; edges; private final Map\u0026lt;Long, ExecutionVertex\u0026gt; vertexes; } public class ExecutionEdge { private ExecutionVertex leftVertex; private ExecutionVertex rightVertex; } public class ExecutionVertex { private Long vertexId; private Action action; private int parallelism; } 我们再与逻辑计划比较一下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public class LogicalDag implements IdentifiedDataSerializable { @Getter private JobConfig jobConfig; private final Set\u0026lt;LogicalEdge\u0026gt; edges = new LinkedHashSet\u0026lt;\u0026gt;(); private final Map\u0026lt;Long, LogicalVertex\u0026gt; logicalVertexMap = new LinkedHashMap\u0026lt;\u0026gt;(); private IdGenerator idGenerator; private boolean isStartWithSavePoint = false; } public class LogicalEdge implements IdentifiedDataSerializable { private LogicalVertex inputVertex; private LogicalVertex targetVertex; private Long inputVertexId; private Long targetVertexId; } public class LogicalVertex implements IdentifiedDataSerializable { private Long vertexId; private Action action; private int parallelism; } 我们看这两个类的内容，感觉每个Pipeline都像一个逻辑计划，为什么需要这一步转换呢，我们来具体看下逻辑计划的生成过程。 在上面可以看到生成执行计划共有5步，我们逐步看下\n第一步：逻辑计划转执行计划 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 // 入参是逻辑计划的边，每个边存储了上下游的节点 private Set\u0026lt;ExecutionEdge\u0026gt; generateExecutionEdges(Set\u0026lt;LogicalEdge\u0026gt; logicalEdges) { Set\u0026lt;ExecutionEdge\u0026gt; executionEdges = new LinkedHashSet\u0026lt;\u0026gt;(); Map\u0026lt;Long, ExecutionVertex\u0026gt; logicalVertexIdToExecutionVertexMap = new HashMap(); // 按照顺序进行排序，首先按照输入节点的顺序进行排序，当输入节点相同时，按照输出节点进行排序 List\u0026lt;LogicalEdge\u0026gt; sortedLogicalEdges = new ArrayList\u0026lt;\u0026gt;(logicalEdges); Collections.sort( sortedLogicalEdges, (o1, o2) -\u0026gt; { if (o1.getInputVertexId() != o2.getInputVertexId()) { return o1.getInputVertexId() \u0026gt; o2.getInputVertexId() ? 1 : -1; } if (o1.getTargetVertexId() != o2.getTargetVertexId()) { return o1.getTargetVertexId() \u0026gt; o2.getTargetVertexId() ? 1 : -1; } return 0; }); // 循环将每个逻辑计划的边转换为执行计划的边 for (LogicalEdge logicalEdge : sortedLogicalEdges) { LogicalVertex logicalInputVertex = logicalEdge.getInputVertex(); ExecutionVertex executionInputVertex = logicalVertexIdToExecutionVertexMap.computeIfAbsent( logicalInputVertex.getVertexId(), vertexId -\u0026gt; { long newId = idGenerator.getNextId(); // 对每个逻辑计划节点重新创建Action Action newLogicalInputAction = recreateAction( logicalInputVertex.getAction(), newId, logicalInputVertex.getParallelism()); // 转换为执行计划节点 return new ExecutionVertex( newId, newLogicalInputAction, logicalInputVertex.getParallelism()); }); // 与输入节点类似，重新创建执行计划节点 LogicalVertex logicalTargetVertex = logicalEdge.getTargetVertex(); ExecutionVertex executionTargetVertex = logicalVertexIdToExecutionVertexMap.computeIfAbsent( logicalTargetVertex.getVertexId(), vertexId -\u0026gt; { long newId = idGenerator.getNextId(); Action newLogicalTargetAction = recreateAction( logicalTargetVertex.getAction(), newId, logicalTargetVertex.getParallelism()); return new ExecutionVertex( newId, newLogicalTargetAction, logicalTargetVertex.getParallelism()); }); // 生成执行计划的边 ExecutionEdge executionEdge = new ExecutionEdge(executionInputVertex, executionTargetVertex); executionEdges.add(executionEdge); } return executionEdges; } 第二步 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 private Set\u0026lt;ExecutionEdge\u0026gt; generateShuffleEdges(Set\u0026lt;ExecutionEdge\u0026gt; executionEdges) { // 以上游节点编号为key，list存储下游所有节点 Map\u0026lt;Long, List\u0026lt;ExecutionVertex\u0026gt;\u0026gt; targetVerticesMap = new LinkedHashMap\u0026lt;\u0026gt;(); // 仅存储类型为Source的节点 Set\u0026lt;ExecutionVertex\u0026gt; sourceExecutionVertices = new HashSet\u0026lt;\u0026gt;(); executionEdges.forEach( edge -\u0026gt; { ExecutionVertex leftVertex = edge.getLeftVertex(); ExecutionVertex rightVertex = edge.getRightVertex(); if (leftVertex.getAction() instanceof SourceAction) { sourceExecutionVertices.add(leftVertex); } targetVerticesMap .computeIfAbsent(leftVertex.getVertexId(), id -\u0026gt; new ArrayList\u0026lt;\u0026gt;()) .add(rightVertex); }); if (sourceExecutionVertices.size() != 1) { return executionEdges; } ExecutionVertex sourceExecutionVertex = sourceExecutionVertices.stream().findFirst().get(); Action sourceAction = sourceExecutionVertex.getAction(); List\u0026lt;CatalogTable\u0026gt; producedCatalogTables = new ArrayList\u0026lt;\u0026gt;(); if (sourceAction instanceof SourceAction) { try { producedCatalogTables = ((SourceAction\u0026lt;?, ?, ?\u0026gt;) sourceAction) .getSource() .getProducedCatalogTables(); } catch (UnsupportedOperationException e) { } } else if (sourceAction instanceof TransformChainAction) { return executionEdges; } else { throw new SeaTunnelException( \u0026#34;source action must be SourceAction or TransformChainAction\u0026#34;); } // 数据源仅产生单表或 // 数据源仅有一个下游输出时，直接返回 if (producedCatalogTables.size() \u0026lt;= 1 || targetVerticesMap.get(sourceExecutionVertex.getVertexId()).size() \u0026lt;= 1) { return executionEdges; } List\u0026lt;ExecutionVertex\u0026gt; sinkVertices = targetVerticesMap.get(sourceExecutionVertex.getVertexId()); // 检查是否有其他类型的Action，在当前步骤下游节点尽可能有两种类型，Transform与Sink，这里是判断仅能有Sink类型 Optional\u0026lt;ExecutionVertex\u0026gt; hasOtherAction = sinkVertices.stream() .filter(vertex -\u0026gt; !(vertex.getAction() instanceof SinkAction)) .findFirst(); checkArgument(!hasOtherAction.isPresent()); // 当以上代码全部走完之后，当前的场景为： // 仅有一个数据源，该数据源会产生多张表，下游还有多个sink节点依赖与产生的多表 // 也就是说当前任务仅有两类节点，一个会产生多张表的Source节点，一组依赖与该Source的Sink节点 // 那么会新生成一个shuffle节点，添加到两者之间 // 将依赖关系修改与source-\u0026gt;shuffle-\u0026gt;多个sink Set\u0026lt;ExecutionEdge\u0026gt; newExecutionEdges = new LinkedHashSet\u0026lt;\u0026gt;(); // 这里的Shuffle策略此次不深入了解了 ShuffleStrategy shuffleStrategy = ShuffleMultipleRowStrategy.builder() .jobId(jobImmutableInformation.getJobId()) .inputPartitions(sourceAction.getParallelism()) .catalogTables(producedCatalogTables) .queueEmptyQueueTtl( (int) (engineConfig.getCheckpointConfig().getCheckpointInterval() * 3)) .build(); ShuffleConfig shuffleConfig = ShuffleConfig.builder().shuffleStrategy(shuffleStrategy).build(); long shuffleVertexId = idGenerator.getNextId(); String shuffleActionName = String.format(\u0026#34;Shuffle [%s]\u0026#34;, sourceAction.getName()); ShuffleAction shuffleAction = new ShuffleAction(shuffleVertexId, shuffleActionName, shuffleConfig); shuffleAction.setParallelism(sourceAction.getParallelism()); ExecutionVertex shuffleVertex = new ExecutionVertex(shuffleVertexId, shuffleAction, shuffleAction.getParallelism()); ExecutionEdge sourceToShuffleEdge = new ExecutionEdge(sourceExecutionVertex, shuffleVertex); newExecutionEdges.add(sourceToShuffleEdge); // 将多个sink节点的并行度修改为1 for (ExecutionVertex sinkVertex : sinkVertices) { sinkVertex.setParallelism(1); sinkVertex.getAction().setParallelism(1); ExecutionEdge shuffleToSinkEdge = new ExecutionEdge(shuffleVertex, sinkVertex); newExecutionEdges.add(shuffleToSinkEdge); } return newExecutionEdges; } 这一步Shuffle是针对某些特殊场景，source支持多表读取，并且有多个sink节点依赖与该source节点时会在中间添加一个shuffle节点\n第三步private Set\u0026lt;ExecutionEdge\u0026gt; generateTransformChainEdges(Set\u0026lt;ExecutionEdge\u0026gt; executionEdges) { // 使用了三个结构，存储所有的Source节点，以及每个输入，输出节点 // inputVerticesMap中以下游节点id为key，存储了所有的上游输入节点 // targetVerticesMap则以上游节点id为key，存储了所有的下游输出节点 Map\u0026lt;Long, List\u0026lt;ExecutionVertex\u0026gt;\u0026gt; inputVerticesMap = new HashMap\u0026lt;\u0026gt;(); Map\u0026lt;Long, List\u0026lt;ExecutionVertex\u0026gt;\u0026gt; targetVerticesMap = new HashMap\u0026lt;\u0026gt;(); Set\u0026lt;ExecutionVertex\u0026gt; sourceExecutionVertices = new HashSet\u0026lt;\u0026gt;(); executionEdges.forEach( edge -\u0026gt; { ExecutionVertex leftVertex = edge.getLeftVertex(); ExecutionVertex rightVertex = edge.getRightVertex(); if (leftVertex.getAction() instanceof SourceAction) { sourceExecutionVertices.add(leftVertex); } inputVerticesMap .computeIfAbsent(rightVertex.getVertexId(), id -\u0026gt; new ArrayList\u0026lt;\u0026gt;()) .add(leftVertex); targetVerticesMap .computeIfAbsent(leftVertex.getVertexId(), id -\u0026gt; new ArrayList\u0026lt;\u0026gt;()) .add(rightVertex); }); Map\u0026lt;Long, ExecutionVertex\u0026gt; transformChainVertexMap = new HashMap\u0026lt;\u0026gt;(); Map\u0026lt;Long, Long\u0026gt; chainedTransformVerticesMapping = new HashMap\u0026lt;\u0026gt;(); // 对每个source进行循环，即从DAG中所有的头节点开始变量 for (ExecutionVertex sourceVertex : sourceExecutionVertices) { List\u0026lt;ExecutionVertex\u0026gt; vertices = new ArrayList\u0026lt;\u0026gt;(); vertices.add(sourceVertex); for (int index = 0; index \u0026lt; vertices.size(); index++) { ExecutionVertex vertex = vertices.get(index); fillChainedTransformExecutionVertex( vertex, chainedTransformVerticesMapping, transformChainVertexMap, executionEdges, Collections.unmodifiableMap(inputVerticesMap), Collections.unmodifiableMap(targetVerticesMap)); // 当当前节点存在下游节点时，将所有下游节点放入list中，二层循环会重新计算刚刚加入进去的下游节点，可能是Transform节点也可能是Sink节点 if (targetVerticesMap.containsKey(vertex.getVertexId())) { vertices.addAll(targetVerticesMap.get(vertex.getVertexId())); } } } // 循环完成，会将可以链化的Transform节点进行链化，在链化过程中会将可以链化的关系边从执行计划中删除 // 所以此时的逻辑计划已经无法构成图的关系，需要重新构建 Set\u0026lt;ExecutionEdge\u0026gt; transformChainEdges = new LinkedHashSet\u0026lt;\u0026gt;(); // 对现存关系进行循环 for (ExecutionEdge executionEdge : executionEdges) { ExecutionVertex leftVertex = executionEdge.getLeftVertex(); ExecutionVertex rightVertex = executionEdge.getRightVertex(); boolean needRebuild = false; // 会从链化的map中查询当前边的输入，输出节点 // 如果在链化的map中存在，则表明该节点已经被链化，需要从映射关系中找到链化之后的节点 // 重新修正DAG if (chainedTransformVerticesMapping.containsKey(leftVertex.getVertexId())) { needRebuild = true; leftVertex = transformChainVertexMap.get( chainedTransformVerticesMapping.get(leftVertex.getVertexId())); } if (chainedTransformVerticesMapping.containsKey(rightVertex.getVertexId())) { needRebuild = true; rightVertex = transformChainVertexMap.get( chainedTransformVerticesMapping.get(rightVertex.getVertexId())); } if (needRebuild) { executionEdge = new ExecutionEdge(leftVertex, rightVertex); } transformChainEdges.add(executionEdge); } return transformChainEdges; } private void fillChainedTransformExecutionVertex( ExecutionVertex currentVertex, Map\u0026lt;Long, Long\u0026gt; chainedTransformVerticesMapping, Map\u0026lt;Long, ExecutionVertex\u0026gt; transformChainVertexMap, Set\u0026lt;ExecutionEdge\u0026gt; executionEdges, Map\u0026lt;Long, List\u0026lt;ExecutionVertex\u0026gt;\u0026gt; inputVerticesMap, Map\u0026lt;Long, List\u0026lt;ExecutionVertex\u0026gt;\u0026gt; targetVerticesMap) { // 当map中以及包含当前节点则退出 if (chainedTransformVerticesMapping.containsKey(currentVertex.getVertexId())) { return; } List\u0026lt;ExecutionVertex\u0026gt; transformChainedVertices = new ArrayList\u0026lt;\u0026gt;(); collectChainedVertices( currentVertex, transformChainedVertices, executionEdges, inputVerticesMap, targetVerticesMap); // 当list不为空时，表示list里面的transform节点可以被合并成一个 if (transformChainedVertices.size() \u0026gt; 0) { long newVertexId = idGenerator.getNextId(); List\u0026lt;SeaTunnelTransform\u0026gt; transforms = new ArrayList\u0026lt;\u0026gt;(transformChainedVertices.size()); List\u0026lt;String\u0026gt; names = new ArrayList\u0026lt;\u0026gt;(transformChainedVertices.size()); Set\u0026lt;URL\u0026gt; jars = new HashSet\u0026lt;\u0026gt;(); Set\u0026lt;ConnectorJarIdentifier\u0026gt; identifiers = new HashSet\u0026lt;\u0026gt;(); transformChainedVertices.stream() .peek( // 在mapping中添加所有历史节点编号与新节点编号的映射 vertex -\u0026gt; chainedTransformVerticesMapping.put( vertex.getVertexId(), newVertexId)) .map(ExecutionVertex::getAction) .map(action -\u0026gt; (TransformAction) action) .forEach( action -\u0026gt; { transforms.add(action.getTransform()); jars.addAll(action.getJarUrls()); identifiers.addAll(action.getConnectorJarIdentifiers()); names.add(action.getName()); }); String transformChainActionName = String.format(\u0026#34;TransformChain[%s]\u0026#34;, String.join(\u0026#34;-\u0026gt;\u0026#34;, names)); // 将多个TransformAction合并成一个TransformChainAction TransformChainAction transformChainAction = new TransformChainAction( newVertexId, transformChainActionName, jars, identifiers, transforms); transformChainAction.setParallelism(currentVertex.getAction().getParallelism()); ExecutionVertex executionVertex = new ExecutionVertex( newVertexId, transformChainAction, currentVertex.getParallelism()); // 在状态中将修改完成的节点信息放入 transformChainVertexMap.put(newVertexId, executionVertex); chainedTransformVerticesMapping.put( currentVertex.getVertexId(), executionVertex.getVertexId()); } } private void collectChainedVertices( ExecutionVertex currentVertex, List\u0026lt;ExecutionVertex\u0026gt; chainedVertices, Set\u0026lt;ExecutionEdge\u0026gt; executionEdges, Map\u0026lt;Long, List\u0026lt;ExecutionVertex\u0026gt;\u0026gt; inputVerticesMap, Map\u0026lt;Long, List\u0026lt;ExecutionVertex\u0026gt;\u0026gt; targetVerticesMap) { Action action = currentVertex.getAction(); // 仅对TransformAction进行合并 if (action instanceof TransformAction) { if (chainedVertices.size() == 0) { // 需要进行合并的节点list为空时，将自身添加到list中 // 进入该分支的条件为当前节点为TransformAction并且所需链化列表为空 // 此时可能有几种场景：第一个Transform节点进入，该Transform节点无任何限制 chainedVertices.add(currentVertex); } else if (inputVerticesMap.get(currentVertex.getVertexId()).size() == 1) { // 当进入该条件分支则表明： // 所需链化的列表chainedVertices已经至少有一个TransformAction了 // 此时的场景为：上游的Transform节点仅有一个下游节点，即当前节点。此限制是由下方的判断保证 // 将当前TransformAction节点与上一个TransformAction节点进行链化 // 在执行计划中将该关系删除 executionEdges.remove( new ExecutionEdge( chainedVertices.get(chainedVertices.size() - 1), currentVertex)); // 将自身加入需要链化的list中 chainedVertices.add(currentVertex); } else { return; } } else { return; } // It cannot chain to any target vertex if it has multiple target vertices. if (targetVerticesMap.get(currentVertex.getVertexId()).size() == 1) { // 当当前节点仅有一个下游节点时，再次尝试链化 // 如果当前节点存在多个下游节点，则不会将下游的节点进行链化，所以能保证上面的链化时两个节点是一对一的关系 // 这里会调用的场景为Transform节点仅有一个下游节点 collectChainedVertices( targetVerticesMap.get(currentVertex.getVertexId()).get(0), chainedVertices, executionEdges, inputVerticesMap, targetVerticesMap); } } 第四步 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 private List\u0026lt;Pipeline\u0026gt; generatePipelines(Set\u0026lt;ExecutionEdge\u0026gt; executionEdges) { // 存储每个执行计划节点 Set\u0026lt;ExecutionVertex\u0026gt; executionVertices = new LinkedHashSet\u0026lt;\u0026gt;(); for (ExecutionEdge edge : executionEdges) { executionVertices.add(edge.getLeftVertex()); executionVertices.add(edge.getRightVertex()); } // 调用Pipeline执行器将执行计划转换为Pipeline PipelineGenerator pipelineGenerator = new PipelineGenerator(executionVertices, new ArrayList\u0026lt;\u0026gt;(executionEdges)); List\u0026lt;Pipeline\u0026gt; pipelines = pipelineGenerator.generatePipelines(); Set\u0026lt;String\u0026gt; duplicatedActionNames = new HashSet\u0026lt;\u0026gt;(); Set\u0026lt;String\u0026gt; actionNames = new HashSet\u0026lt;\u0026gt;(); for (Pipeline pipeline : pipelines) { Integer pipelineId = pipeline.getId(); for (ExecutionVertex vertex : pipeline.getVertexes().values()) { // 获取当前Pipeline的每个执行节点，重新设置Action的名称，添加了pipeline的名称 Action action = vertex.getAction(); String actionName = String.format(\u0026#34;pipeline-%s [%s]\u0026#34;, pipelineId, action.getName()); action.setName(actionName); if (actionNames.contains(actionName)) { duplicatedActionNames.add(actionName); } actionNames.add(actionName); } } // 检查，不能存在重复的Action Name checkArgument( duplicatedActionNames.isEmpty(), \u0026#34;Action name is duplicated: \u0026#34; + duplicatedActionNames); return pipelines; } public PipelineGenerator(Collection\u0026lt;ExecutionVertex\u0026gt; vertices, List\u0026lt;ExecutionEdge\u0026gt; edges) { this.vertices = vertices; this.edges = edges; } public List\u0026lt;Pipeline\u0026gt; generatePipelines() { List\u0026lt;ExecutionEdge\u0026gt; executionEdges = expandEdgeByParallelism(edges); // 将执行计划进行拆分，按照关联关系，将执行计划进行拆分 // 拆分为几个不相关的执行计划 List\u0026lt;List\u0026lt;ExecutionEdge\u0026gt;\u0026gt; edgesList = splitUnrelatedEdges(executionEdges); edgesList = edgesList.stream() .flatMap(e -\u0026gt; this.splitUnionEdge(e).stream()) .collect(Collectors.toList()); // just convert execution plan to pipeline at now. We should split it to multi pipeline with // cache in the future IdGenerator idGenerator = new IdGenerator(); // 将执行计划图转换为Pipeline return edgesList.stream() .map( e -\u0026gt; { Map\u0026lt;Long, ExecutionVertex\u0026gt; vertexes = new HashMap\u0026lt;\u0026gt;(); List\u0026lt;ExecutionEdge\u0026gt; pipelineEdges = e.stream() .map( edge -\u0026gt; { if (!vertexes.containsKey( edge.getLeftVertexId())) { vertexes.put( edge.getLeftVertexId(), edge.getLeftVertex()); } ExecutionVertex source = vertexes.get( edge.getLeftVertexId()); if (!vertexes.containsKey( edge.getRightVertexId())) { vertexes.put( edge.getRightVertexId(), edge.getRightVertex()); } ExecutionVertex destination = vertexes.get( edge.getRightVertexId()); return new ExecutionEdge( source, destination); }) .collect(Collectors.toList()); return new Pipeline( (int) idGenerator.getNextId(), pipelineEdges, vertexes); }) .collect(Collectors.toList()); } 第五步 第五步则是生成执行计划实例，传递了第四步生成的Pipeline参数\n小结一下： 执行计划会将逻辑计划做这几件事情\n当source会生成多张表，并且有多个sink节点依赖于此source时，会在中间添加一个shuffle节点 尝试对transform节点进行链化合并，将多个transform节点合并为一个节点 将任务进行拆分，将一个配置文件/LogicalDag拆分为几个不相关的任务List\u0026lt;Pipeline\u0026gt; 物理计划的生成 在看物理计划生成之前，先看下生成的物理计划中包含了什么信息， 我们对物理计划以及内部相关的内都拿出来看一下相关信息\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class PhysicalPlan { private final List\u0026lt;SubPlan\u0026gt; pipelineList; private final AtomicInteger finishedPipelineNum = new AtomicInteger(0); private final AtomicInteger canceledPipelineNum = new AtomicInteger(0); private final AtomicInteger failedPipelineNum = new AtomicInteger(0); private final JobImmutableInformation jobImmutableInformation; private final IMap\u0026lt;Object, Object\u0026gt; runningJobStateIMap; private final IMap\u0026lt;Object, Long[]\u0026gt; runningJobStateTimestampsIMap; private CompletableFuture\u0026lt;JobResult\u0026gt; jobEndFuture; private final AtomicReference\u0026lt;String\u0026gt; errorBySubPlan = new AtomicReference\u0026lt;\u0026gt;(); private final String jobFullName; private final long jobId; private JobMaster jobMaster; private boolean makeJobEndWhenPipelineEnded = true; private volatile boolean isRunning = false; } 这个类中有一个关键字段pipelineList，是一个SubPlan的列表\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class SubPlan { private final int pipelineMaxRestoreNum; private final int pipelineRestoreIntervalSeconds; private final List\u0026lt;PhysicalVertex\u0026gt; physicalVertexList; private final List\u0026lt;PhysicalVertex\u0026gt; coordinatorVertexList; private final int pipelineId; private final AtomicInteger finishedTaskNum = new AtomicInteger(0); private final AtomicInteger canceledTaskNum = new AtomicInteger(0); private final AtomicInteger failedTaskNum = new AtomicInteger(0); private final String pipelineFullName; private final IMap\u0026lt;Object, Object\u0026gt; runningJobStateIMap; private final Map\u0026lt;String, String\u0026gt; tags; private final IMap\u0026lt;Object, Long[]\u0026gt; runningJobStateTimestampsIMap; private CompletableFuture\u0026lt;PipelineExecutionState\u0026gt; pipelineFuture; private final PipelineLocation pipelineLocation; private AtomicReference\u0026lt;String\u0026gt; errorByPhysicalVertex = new AtomicReference\u0026lt;\u0026gt;(); private final ExecutorService executorService; private JobMaster jobMaster; private PassiveCompletableFuture\u0026lt;Void\u0026gt; reSchedulerPipelineFuture; private Integer pipelineRestoreNum; private final Object restoreLock = new Object(); private volatile PipelineStatus currPipelineStatus; public volatile boolean isRunning = false; private Map\u0026lt;TaskGroupLocation, SlotProfile\u0026gt; slotProfiles; } 在SubPlan中，又维护了PhysicalVertex物理节点的一个列表，并且拆分成了物理计划节点和协调器节点。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class PhysicalVertex { private final TaskGroupLocation taskGroupLocation; private final String taskFullName; private final TaskGroupDefaultImpl taskGroup; private final ExecutorService executorService; private final FlakeIdGenerator flakeIdGenerator; private final Set\u0026lt;URL\u0026gt; pluginJarsUrls; private final Set\u0026lt;ConnectorJarIdentifier\u0026gt; connectorJarIdentifiers; private final IMap\u0026lt;Object, Object\u0026gt; runningJobStateIMap; private CompletableFuture\u0026lt;TaskExecutionState\u0026gt; taskFuture; private final IMap\u0026lt;Object, Long[]\u0026gt; runningJobStateTimestampsIMap; private final NodeEngine nodeEngine; private JobMaster jobMaster; private volatile ExecutionState currExecutionState = ExecutionState.CREATED; public volatile boolean isRunning = false; private AtomicReference\u0026lt;String\u0026gt; errorByPhysicalVertex = new AtomicReference\u0026lt;\u0026gt;(); } 1 2 3 4 5 6 7 8 public class TaskGroupDefaultImpl implements TaskGroup { private final TaskGroupLocation taskGroupLocation; private final String taskGroupName; // 存储了当前物理节点所需要执行的task // 这里的每个task可能是一个读取数据的任务，也可能是一个写入数据的任务 // 或者是数据拆分，checkpoint的任务等等 private final Map\u0026lt;Long, Task\u0026gt; tasks; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 public PhysicalPlanGenerator( @NonNull ExecutionPlan executionPlan, @NonNull NodeEngine nodeEngine, @NonNull JobImmutableInformation jobImmutableInformation, long initializationTimestamp, @NonNull ExecutorService executorService, @NonNull FlakeIdGenerator flakeIdGenerator, @NonNull IMap runningJobStateIMap, @NonNull IMap runningJobStateTimestampsIMap, @NonNull QueueType queueType) { this.pipelines = executionPlan.getPipelines(); this.nodeEngine = nodeEngine; this.jobImmutableInformation = jobImmutableInformation; this.initializationTimestamp = initializationTimestamp; this.executorService = executorService; this.flakeIdGenerator = flakeIdGenerator; // the checkpoint of a pipeline this.pipelineTasks = new HashSet\u0026lt;\u0026gt;(); this.startingTasks = new HashSet\u0026lt;\u0026gt;(); this.subtaskActions = new HashMap\u0026lt;\u0026gt;(); this.runningJobStateIMap = runningJobStateIMap; this.runningJobStateTimestampsIMap = runningJobStateTimestampsIMap; this.queueType = queueType; } public Tuple2\u0026lt;PhysicalPlan, Map\u0026lt;Integer, CheckpointPlan\u0026gt;\u0026gt; generate() { // 获取用户配置中的节点过滤条件，用于选择任务将要运行的节点 Map\u0026lt;String, String\u0026gt; tagFilter = (Map\u0026lt;String, String\u0026gt;) jobImmutableInformation .getJobConfig() .getEnvOptions() .get(EnvCommonOptions.NODE_TAG_FILTER.key()); // TODO Determine which tasks do not need to be restored according to state CopyOnWriteArrayList\u0026lt;PassiveCompletableFuture\u0026lt;PipelineStatus\u0026gt;\u0026gt; waitForCompleteBySubPlanList = new CopyOnWriteArrayList\u0026lt;\u0026gt;(); Map\u0026lt;Integer, CheckpointPlan\u0026gt; checkpointPlans = new HashMap\u0026lt;\u0026gt;(); final int totalPipelineNum = pipelines.size(); Stream\u0026lt;SubPlan\u0026gt; subPlanStream = pipelines.stream() .map( pipeline -\u0026gt; { // 每次都将状态清空 this.pipelineTasks.clear(); this.startingTasks.clear(); this.subtaskActions.clear(); final int pipelineId = pipeline.getId(); // 获取当前任务的信息 final List\u0026lt;ExecutionEdge\u0026gt; edges = pipeline.getEdges(); // 获取所有的SourceAction List\u0026lt;SourceAction\u0026lt;?, ?, ?\u0026gt;\u0026gt; sources = findSourceAction(edges); // 生成Source数据切片任务，即SourceSplitEnumeratorTask， // 这个任务会调用连接器中的SourceSplitEnumerator类，如果该连接器支持的话 List\u0026lt;PhysicalVertex\u0026gt; coordinatorVertexList = getEnumeratorTask( sources, pipelineId, totalPipelineNum); // 生成Sink提交任务，即SinkAggregatedCommitterTask // 这个任务会调用连接器中的SinkAggregatedCommitter类，如果该连接器支持的话 // 这两个任务是作为协调任务来执行的 coordinatorVertexList.addAll( getCommitterTask(edges, pipelineId, totalPipelineNum)); List\u0026lt;PhysicalVertex\u0026gt; physicalVertexList = getSourceTask( edges, sources, pipelineId, totalPipelineNum); // physicalVertexList.addAll( getShuffleTask(edges, pipelineId, totalPipelineNum)); CompletableFuture\u0026lt;PipelineStatus\u0026gt; pipelineFuture = new CompletableFuture\u0026lt;\u0026gt;(); waitForCompleteBySubPlanList.add( new PassiveCompletableFuture\u0026lt;\u0026gt;(pipelineFuture)); // 添加checkpoint的任务 checkpointPlans.put( pipelineId, CheckpointPlan.builder() .pipelineId(pipelineId) .pipelineSubtasks(pipelineTasks) .startingSubtasks(startingTasks) .pipelineActions(pipeline.getActions()) .subtaskActions(subtaskActions) .build()); return new SubPlan( pipelineId, totalPipelineNum, initializationTimestamp, physicalVertexList, coordinatorVertexList, jobImmutableInformation, executorService, runningJobStateIMap, runningJobStateTimestampsIMap, tagFilter); }); PhysicalPlan physicalPlan = new PhysicalPlan( subPlanStream.collect(Collectors.toList()), executorService, jobImmutableInformation, initializationTimestamp, runningJobStateIMap, runningJobStateTimestampsIMap); return Tuple2.tuple2(physicalPlan, checkpointPlans); } 生成物理计划的过程就是去将执行计划转换成SeaTunnelTask，并且在执行过程中添加各种协调任务，例如数据切分任务，数据提交任务，checkpoint任务。\n在SeaTunnelTask中，会将任务转换成SourceFlowLifeCycle，SinkFlowLifeCycle，TransformFlowLifeCycle，ShuffleSinkFlowLifeCycle，ShuffleSourceFlowLifeCycle。\n我们以SourceFlowLifeCycle， SinkFlowLifeCycle为例\nSourceFlowLifeCycle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 @Override public void init() throws Exception { this.splitSerializer = sourceAction.getSource().getSplitSerializer(); this.reader = sourceAction .getSource() .createReader( new SourceReaderContext( indexID, sourceAction.getSource().getBoundedness(), this, metricsContext, eventListener)); this.enumeratorTaskAddress = getEnumeratorTaskAddress(); } @Override public void open() throws Exception { reader.open(); register(); } public void collect() throws Exception { if (!prepareClose) { if (schemaChanging()) { log.debug(\u0026#34;schema is changing, stop reader collect records\u0026#34;); Thread.sleep(200); return; } reader.pollNext(collector); if (collector.isEmptyThisPollNext()) { Thread.sleep(100); } else { collector.resetEmptyThisPollNext(); /** * The current thread obtain a checkpoint lock in the method {@link * SourceReader#pollNext(Collector)}. When trigger the checkpoint or savepoint, * other threads try to obtain the lock in the method {@link * SourceFlowLifeCycle#triggerBarrier(Barrier)}. When high CPU load, checkpoint * process may be blocked as long time. So we need sleep to free the CPU. */ Thread.sleep(0L); } if (collector.captureSchemaChangeBeforeCheckpointSignal()) { if (schemaChangePhase.get() != null) { throw new IllegalStateException( \u0026#34;previous schema changes in progress, schemaChangePhase: \u0026#34; + schemaChangePhase.get()); } schemaChangePhase.set(SchemaChangePhase.createBeforePhase()); runningTask.triggerSchemaChangeBeforeCheckpoint().get(); log.info(\u0026#34;triggered schema-change-before checkpoint, stopping collect data\u0026#34;); } else if (collector.captureSchemaChangeAfterCheckpointSignal()) { if (schemaChangePhase.get() != null) { throw new IllegalStateException( \u0026#34;previous schema changes in progress, schemaChangePhase: \u0026#34; + schemaChangePhase.get()); } schemaChangePhase.set(SchemaChangePhase.createAfterPhase()); runningTask.triggerSchemaChangeAfterCheckpoint().get(); log.info(\u0026#34;triggered schema-change-after checkpoint, stopping collect data\u0026#34;); } } else { Thread.sleep(100); } } 可以看到Source的数据读取，是在SourceFlowLifeCycle的collect方法中被真正的调用，\n数据读取到之后，会放入SeaTunnelSourceCollector中，在这个collector中，当接收到数据时，会进行指标的更新，并将数据发送给相关的下游\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 @Override public void collect(T row) { try { if (row instanceof SeaTunnelRow) { String tableId = ((SeaTunnelRow) row).getTableId(); int size; if (rowType instanceof SeaTunnelRowType) { size = ((SeaTunnelRow) row).getBytesSize((SeaTunnelRowType) rowType); } else if (rowType instanceof MultipleRowType) { size = ((SeaTunnelRow) row).getBytesSize(rowTypeMap.get(tableId)); } else { throw new SeaTunnelEngineException( \u0026#34;Unsupported row type: \u0026#34; + rowType.getClass().getName()); } sourceReceivedBytes.inc(size); sourceReceivedBytesPerSeconds.markEvent(size); flowControlGate.audit((SeaTunnelRow) row); if (StringUtils.isNotEmpty(tableId)) { String tableName = getFullName(TablePath.of(tableId)); Counter sourceTableCounter = sourceReceivedCountPerTable.get(tableName); if (Objects.nonNull(sourceTableCounter)) { sourceTableCounter.inc(); } else { Counter counter = metricsContext.counter(SOURCE_RECEIVED_COUNT + \u0026#34;#\u0026#34; + tableName); counter.inc(); sourceReceivedCountPerTable.put(tableName, counter); } } } sendRecordToNext(new Record\u0026lt;\u0026gt;(row)); emptyThisPollNext = false; sourceReceivedCount.inc(); sourceReceivedQPS.markEvent(); } catch (IOException e) { throw new RuntimeException(e); } } public void sendRecordToNext(Record\u0026lt;?\u0026gt; record) throws IOException { synchronized (checkpointLock) { for (OneInputFlowLifeCycle\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt; output : outputs) { output.received(record); } } } SinkFlowLifeCycle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 @Override public void received(Record\u0026lt;?\u0026gt; record) { try { if (record.getData() instanceof Barrier) { long startTime = System.currentTimeMillis(); Barrier barrier = (Barrier) record.getData(); if (barrier.prepareClose(this.taskLocation)) { prepareClose = true; } if (barrier.snapshot()) { try { lastCommitInfo = writer.prepareCommit(); } catch (Exception e) { writer.abortPrepare(); throw e; } List\u0026lt;StateT\u0026gt; states = writer.snapshotState(barrier.getId()); if (!writerStateSerializer.isPresent()) { runningTask.addState( barrier, ActionStateKey.of(sinkAction), Collections.emptyList()); } else { runningTask.addState( barrier, ActionStateKey.of(sinkAction), serializeStates(writerStateSerializer.get(), states)); } if (containAggCommitter) { CommitInfoT commitInfoT = null; if (lastCommitInfo.isPresent()) { commitInfoT = lastCommitInfo.get(); } runningTask .getExecutionContext() .sendToMember( new SinkPrepareCommitOperation\u0026lt;CommitInfoT\u0026gt;( barrier, committerTaskLocation, commitInfoSerializer.isPresent() ? commitInfoSerializer .get() .serialize(commitInfoT) : null), committerTaskAddress) .join(); } } else { if (containAggCommitter) { runningTask .getExecutionContext() .sendToMember( new BarrierFlowOperation(barrier, committerTaskLocation), committerTaskAddress) .join(); } } runningTask.ack(barrier); log.debug( \u0026#34;trigger barrier [{}] finished, cost {}ms. taskLocation [{}]\u0026#34;, barrier.getId(), System.currentTimeMillis() - startTime, taskLocation); } else if (record.getData() instanceof SchemaChangeEvent) { if (prepareClose) { return; } SchemaChangeEvent event = (SchemaChangeEvent) record.getData(); writer.applySchemaChange(event); } else { if (prepareClose) { return; } writer.write((T) record.getData()); sinkWriteCount.inc(); sinkWriteQPS.markEvent(); if (record.getData() instanceof SeaTunnelRow) { long size = ((SeaTunnelRow) record.getData()).getBytesSize(); sinkWriteBytes.inc(size); sinkWriteBytesPerSeconds.markEvent(size); String tableId = ((SeaTunnelRow) record.getData()).getTableId(); if (StringUtils.isNotBlank(tableId)) { String tableName = getFullName(TablePath.of(tableId)); Counter sinkTableCounter = sinkWriteCountPerTable.get(tableName); if (Objects.nonNull(sinkTableCounter)) { sinkTableCounter.inc(); } else { Counter counter = metricsContext.counter(SINK_WRITE_COUNT + \u0026#34;#\u0026#34; + tableName); counter.inc(); sinkWriteCountPerTable.put(tableName, counter); } } } } } catch (Exception e) { throw new RuntimeException(e); } } 同样，在这个类中是真正调用Sink的Writer方法，将数据写入到下游中。\n一个简易的图大概是这样 用图来详细拆解下物理计划的生成步骤: 以这个执行计划为例 这个执行计划在经过查找findSourceAction方法后, 可以得到这两个source action 后续的分析仅会分析一下source1的流程 在getSourceTask方法中, 首先会将SourceAction转化为PhyscicalExecutionFlow source1会被转化为 接下来会有一步, 判断是否有sink action, 如何存在则需要进行拆分splitSinkFromFlow, 而刚刚生成的Flow是带有sink action的, 经过splitSinkFromFlow会变成 根据这个source生成的PhysicalVertex为 任务执行 在CoordinatorService中通过init方法生成了物理计划，然后会再调用run来真正的将任务运行起来。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 CoordinatorService { jobMaster.init( runningJobInfoIMap.get(jobId).getInitializationTimestamp(), false); ... jobMaster.run(); } JobMaster { public void run() { ... physicalPlan.startJob(); ... } } 在JobMaster中启动任务，会调用PhysicalPlan的startJob方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 public void startJob() { isRunning = true; log.info(\u0026#34;{} state process is start\u0026#34;, getJobFullName()); stateProcess(); } private synchronized void stateProcess() { if (!isRunning) { log.warn(String.format(\u0026#34;%s state process is stopped\u0026#34;, jobFullName)); return; } switch (getJobStatus()) { case CREATED: updateJobState(JobStatus.SCHEDULED); break; case SCHEDULED: getPipelineList() .forEach( subPlan -\u0026gt; { if (PipelineStatus.CREATED.equals( subPlan.getCurrPipelineStatus())) { subPlan.startSubPlanStateProcess(); } }); updateJobState(JobStatus.RUNNING); break; case RUNNING: case DOING_SAVEPOINT: break; case FAILING: case CANCELING: jobMaster.neverNeedRestore(); getPipelineList().forEach(SubPlan::cancelPipeline); break; case FAILED: case CANCELED: case SAVEPOINT_DONE: case FINISHED: stopJobStateProcess(); jobEndFuture.complete(new JobResult(getJobStatus(), errorBySubPlan.get())); return; default: throw new IllegalArgumentException(\u0026#34;Unknown Job State: \u0026#34; + getJobStatus()); } } 在PhysicalPlan中，启动任务会将任务的状态更新为SCHEDULED状态，然后会继续调用SubPlan的启动方法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 public void startSubPlanStateProcess() { isRunning = true; log.info(\u0026#34;{} state process is start\u0026#34;, getPipelineFullName()); stateProcess(); } private synchronized void stateProcess() { if (!isRunning) { log.warn(String.format(\u0026#34;%s state process not start\u0026#34;, pipelineFullName)); return; } PipelineStatus state = getCurrPipelineStatus(); switch (state) { case CREATED: updatePipelineState(PipelineStatus.SCHEDULED); break; case SCHEDULED: try { ResourceUtils.applyResourceForPipeline(jobMaster.getResourceManager(), this); log.debug( \u0026#34;slotProfiles: {}, PipelineLocation: {}\u0026#34;, slotProfiles, this.getPipelineLocation()); updatePipelineState(PipelineStatus.DEPLOYING); } catch (Exception e) { makePipelineFailing(e); } break; case DEPLOYING: coordinatorVertexList.forEach( task -\u0026gt; { if (task.getExecutionState().equals(ExecutionState.CREATED)) { task.startPhysicalVertex(); task.makeTaskGroupDeploy(); } }); physicalVertexList.forEach( task -\u0026gt; { if (task.getExecutionState().equals(ExecutionState.CREATED)) { task.startPhysicalVertex(); task.makeTaskGroupDeploy(); } }); updatePipelineState(PipelineStatus.RUNNING); break; case RUNNING: break; case FAILING: case CANCELING: coordinatorVertexList.forEach( task -\u0026gt; { task.startPhysicalVertex(); task.cancel(); }); physicalVertexList.forEach( task -\u0026gt; { task.startPhysicalVertex(); task.cancel(); }); break; case FAILED: case CANCELED: if (checkNeedRestore(state) \u0026amp;\u0026amp; prepareRestorePipeline()) { jobMaster.releasePipelineResource(this); restorePipeline(); return; } subPlanDone(state); stopSubPlanStateProcess(); pipelineFuture.complete( new PipelineExecutionState(pipelineId, state, errorByPhysicalVertex.get())); return; case FINISHED: subPlanDone(state); stopSubPlanStateProcess(); pipelineFuture.complete( new PipelineExecutionState( pipelineId, getPipelineState(), errorByPhysicalVertex.get())); return; default: throw new IllegalArgumentException(\u0026#34;Unknown Pipeline State: \u0026#34; + getPipelineState()); } } 在SubPlan中，当状态为SCHEDULED时，会进行资源的申请，\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 public static void applyResourceForPipeline( @NonNull ResourceManager resourceManager, @NonNull SubPlan subPlan) { Map\u0026lt;TaskGroupLocation, CompletableFuture\u0026lt;SlotProfile\u0026gt;\u0026gt; futures = new HashMap\u0026lt;\u0026gt;(); Map\u0026lt;TaskGroupLocation, SlotProfile\u0026gt; slotProfiles = new HashMap\u0026lt;\u0026gt;(); // TODO If there is no enough resources for tasks, we need add some wait profile subPlan.getCoordinatorVertexList() .forEach( coordinator -\u0026gt; futures.put( coordinator.getTaskGroupLocation(), applyResourceForTask( resourceManager, coordinator, subPlan.getTags()))); subPlan.getPhysicalVertexList() .forEach( task -\u0026gt; futures.put( task.getTaskGroupLocation(), applyResourceForTask( resourceManager, task, subPlan.getTags()))); futures.forEach( (key, value) -\u0026gt; { try { slotProfiles.put(key, value == null ? null : value.join()); } catch (CompletionException e) { // do nothing } }); // set it first, avoid can\u0026#39;t get it when get resource not enough exception and need release // applied resource subPlan.getJobMaster().setOwnedSlotProfiles(subPlan.getPipelineLocation(), slotProfiles); if (futures.size() != slotProfiles.size()) { throw new NoEnoughResourceException(); } } public static CompletableFuture\u0026lt;SlotProfile\u0026gt; applyResourceForTask( ResourceManager resourceManager, PhysicalVertex task, Map\u0026lt;String, String\u0026gt; tags) { // TODO custom resource size return resourceManager.applyResource( task.getTaskGroupLocation().getJobId(), new ResourceProfile(), tags); } public CompletableFuture\u0026lt;List\u0026lt;SlotProfile\u0026gt;\u0026gt; applyResources( long jobId, List\u0026lt;ResourceProfile\u0026gt; resourceProfile, Map\u0026lt;String, String\u0026gt; tagFilter) throws NoEnoughResourceException { waitingWorkerRegister(); ConcurrentMap\u0026lt;Address, WorkerProfile\u0026gt; matchedWorker = filterWorkerByTag(tagFilter); if (matchedWorker.isEmpty()) { log.error(\u0026#34;No matched worker with tag filter {}.\u0026#34;, tagFilter); throw new NoEnoughResourceException(); } return new ResourceRequestHandler(jobId, resourceProfile, matchedWorker, this) .request(tagFilter); } 在一个SubPlan中会将所有的任务进行资源的申请，申请资源是通过ResourceManager进行的。申请时首先会按照用户任务中设置的tag来选择将要运行任务的节点，这样就可以将任务运行在我们指定的节点上，达到资源隔离的目的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 public Optional\u0026lt;WorkerProfile\u0026gt; preCheckWorkerResource(ResourceProfile r) { // Shuffle the order to ensure random selection of workers List\u0026lt;WorkerProfile\u0026gt; workerProfiles = Arrays.asList(registerWorker.values().toArray(new WorkerProfile[0])); Collections.shuffle(workerProfiles); // Check if there are still unassigned slots Optional\u0026lt;WorkerProfile\u0026gt; workerProfile = workerProfiles.stream() .filter( worker -\u0026gt; Arrays.stream(worker.getUnassignedSlots()) .anyMatch( slot -\u0026gt; slot.getResourceProfile() .enoughThan(r))) .findAny(); if (!workerProfile.isPresent()) { // Check if there are still unassigned resources workerProfile = workerProfiles.stream() .filter(WorkerProfile::isDynamicSlot) .filter(worker -\u0026gt; worker.getUnassignedResource().enoughThan(r)) .findAny(); } return workerProfile; } private CompletableFuture\u0026lt;SlotAndWorkerProfile\u0026gt; singleResourceRequestToMember( int i, ResourceProfile r, WorkerProfile workerProfile) { CompletableFuture\u0026lt;SlotAndWorkerProfile\u0026gt; future = resourceManager.sendToMember( new RequestSlotOperation(jobId, r), workerProfile.getAddress()); return future.whenComplete( withTryCatch( LOGGER, (slotAndWorkerProfile, error) -\u0026gt; { if (error != null) { throw new RuntimeException(error); } else { resourceManager.heartbeat(slotAndWorkerProfile.getWorkerProfile()); addSlotToCacheMap(i, slotAndWorkerProfile.getSlotProfile()); } })); } 当拿到全部可用节点后，会将节点先打乱，然后再随机查找一个可用资源比所需资源大的节点，随即与该节点通信，发送RequestSlotOperation给该节点\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 @Override public synchronized SlotAndWorkerProfile requestSlot( long jobId, ResourceProfile resourceProfile) { initStatus = false; SlotProfile profile = selectBestMatchSlot(resourceProfile); if (profile != null) { profile.assign(jobId); assignedResource.accumulateAndGet(profile.getResourceProfile(), ResourceProfile::merge); unassignedResource.accumulateAndGet( profile.getResourceProfile(), ResourceProfile::subtract); unassignedSlots.remove(profile.getSlotID()); assignedSlots.put(profile.getSlotID(), profile); contexts.computeIfAbsent( profile.getSlotID(), p -\u0026gt; new SlotContext(profile.getSlotID(), taskExecutionService)); } LOGGER.fine( String.format( \u0026#34;received slot request, jobID: %d, resource profile: %s, return: %s\u0026#34;, jobId, resourceProfile, profile)); return new SlotAndWorkerProfile(getWorkerProfile(), profile); } 该节点的SlotService中接收到requestSlot请求后，会将自身信息进行更新，然后返回给master节点信息。 在请求资源的过程中，如果最终请求的资源没有达到预期结果，会得到NoEnoughResourceException异常，任务运行失败。 当资源请求成功后，会开始进行任务的部署，task.makeTaskGroupDeploy()将任务发送到worker节点上来运行任务\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 TaskDeployState deployState = deploy(jobMaster.getOwnedSlotProfiles(taskGroupLocation)); public TaskDeployState deploy(@NonNull SlotProfile slotProfile) { try { if (slotProfile.getWorker().equals(nodeEngine.getThisAddress())) { return deployOnLocal(slotProfile); } else { return deployOnRemote(slotProfile); } } catch (Throwable th) { return TaskDeployState.failed(th); } } private TaskDeployState deployOnRemote(@NonNull SlotProfile slotProfile) { return deployInternal( taskGroupImmutableInformation -\u0026gt; { try { return (TaskDeployState) NodeEngineUtil.sendOperationToMemberNode( nodeEngine, new DeployTaskOperation( slotProfile, nodeEngine .getSerializationService() .toData( taskGroupImmutableInformation)), slotProfile.getWorker()) .get(); } catch (Exception e) { if (getExecutionState().isEndState()) { log.warn(ExceptionUtils.getMessage(e)); log.warn( String.format( \u0026#34;%s deploy error, but the state is already in end state %s, skip this error\u0026#34;, getTaskFullName(), currExecutionState)); return TaskDeployState.success(); } else { return TaskDeployState.failed(e); } } }); } 部署任务时，会将任务信息发送到刚刚在资源分配时获取到的节点上\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 public TaskDeployState deployTask(@NonNull Data taskImmutableInformation) { TaskGroupImmutableInformation taskImmutableInfo = nodeEngine.getSerializationService().toObject(taskImmutableInformation); return deployTask(taskImmutableInfo); } public TaskDeployState deployTask(@NonNull TaskGroupImmutableInformation taskImmutableInfo) { logger.info( String.format( \u0026#34;received deploying task executionId [%s]\u0026#34;, taskImmutableInfo.getExecutionId())); TaskGroup taskGroup = null; try { Set\u0026lt;ConnectorJarIdentifier\u0026gt; connectorJarIdentifiers = taskImmutableInfo.getConnectorJarIdentifiers(); Set\u0026lt;URL\u0026gt; jars = new HashSet\u0026lt;\u0026gt;(); ClassLoader classLoader; if (!CollectionUtils.isEmpty(connectorJarIdentifiers)) { // Prioritize obtaining the jar package file required for the current task execution // from the local, if it does not exist locally, it will be downloaded from the // master node. jars = serverConnectorPackageClient.getConnectorJarFromLocal( connectorJarIdentifiers); } else if (!CollectionUtils.isEmpty(taskImmutableInfo.getJars())) { jars = taskImmutableInfo.getJars(); } classLoader = classLoaderService.getClassLoader( taskImmutableInfo.getJobId(), Lists.newArrayList(jars)); if (jars.isEmpty()) { taskGroup = nodeEngine.getSerializationService().toObject(taskImmutableInfo.getGroup()); } else { taskGroup = CustomClassLoadedObject.deserializeWithCustomClassLoader( nodeEngine.getSerializationService(), classLoader, taskImmutableInfo.getGroup()); } logger.info( String.format( \u0026#34;deploying task %s, executionId [%s]\u0026#34;, taskGroup.getTaskGroupLocation(), taskImmutableInfo.getExecutionId())); synchronized (this) { if (executionContexts.containsKey(taskGroup.getTaskGroupLocation())) { throw new RuntimeException( String.format( \u0026#34;TaskGroupLocation: %s already exists\u0026#34;, taskGroup.getTaskGroupLocation())); } deployLocalTask(taskGroup, classLoader, jars); return TaskDeployState.success(); } } catch (Throwable t) { logger.severe( String.format( \u0026#34;TaskGroupID : %s deploy error with Exception: %s\u0026#34;, taskGroup != null \u0026amp;\u0026amp; taskGroup.getTaskGroupLocation() != null ? taskGroup.getTaskGroupLocation().toString() : \u0026#34;taskGroupLocation is null\u0026#34;, ExceptionUtils.getMessage(t))); return TaskDeployState.failed(t); } } 当worker节点接收到任务后，会调用TaskExecutionService的deployTask方法将任务提交到启动时创建的线程池中。\n当任务提交到线程池中\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 private final class BlockingWorker implements Runnable { private final TaskTracker tracker; private final CountDownLatch startedLatch; private BlockingWorker(TaskTracker tracker, CountDownLatch startedLatch) { this.tracker = tracker; this.startedLatch = startedLatch; } @Override public void run() { TaskExecutionService.TaskGroupExecutionTracker taskGroupExecutionTracker = tracker.taskGroupExecutionTracker; ClassLoader classLoader = executionContexts .get(taskGroupExecutionTracker.taskGroup.getTaskGroupLocation()) .getClassLoader(); ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader(); Thread.currentThread().setContextClassLoader(classLoader); final Task t = tracker.task; ProgressState result = null; try { startedLatch.countDown(); t.init(); do { result = t.call(); } while (!result.isDone() \u0026amp;\u0026amp; isRunning \u0026amp;\u0026amp; !taskGroupExecutionTracker.executionCompletedExceptionally()); ... } } 会调用Task.call 方法，从而数据同步的任务会真正的被调用起来。\nClassLoader 在SeaTunnel中，修改了默认的ClassLoader的类，修改为子类优先，从而避免了与其他组件类冲突的问题\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 @Override public synchronized ClassLoader getClassLoader(long jobId, Collection\u0026lt;URL\u0026gt; jars) { log.debug(\u0026#34;Get classloader for job {} with jars {}\u0026#34;, jobId, jars); if (cacheMode) { // with cache mode, all jobs share the same classloader if the jars are the same jobId = 1L; } if (!classLoaderCache.containsKey(jobId)) { classLoaderCache.put(jobId, new ConcurrentHashMap\u0026lt;\u0026gt;()); classLoaderReferenceCount.put(jobId, new ConcurrentHashMap\u0026lt;\u0026gt;()); } Map\u0026lt;String, ClassLoader\u0026gt; classLoaderMap = classLoaderCache.get(jobId); String key = covertJarsToKey(jars); if (classLoaderMap.containsKey(key)) { classLoaderReferenceCount.get(jobId).get(key).incrementAndGet(); return classLoaderMap.get(key); } else { ClassLoader classLoader = new SeaTunnelChildFirstClassLoader(jars); log.info(\u0026#34;Create classloader for job {} with jars {}\u0026#34;, jobId, jars); classLoaderMap.put(key, classLoader); classLoaderReferenceCount.get(jobId).put(key, new AtomicInteger(1)); return classLoader; } } RestAPI任务提交 SeaTunnel也支持RestAPI的提交方式，当需要此功能时，首先需要在hazelcast.yaml文件中添加这样一段配置\n1 2 3 4 5 6 7 8 network: rest-api: enabled: true endpoint-groups: CLUSTER_WRITE: enabled: true DATA: enabled: true 当添加这样一段配置后，hazelcast节点启动后就可以接收http请求了\n我们同样以提交任务为例，看下执行流程。\n当我们使用RestAPI来提交任务时，客户端的就变成了我们发送http请求的节点，服务端就是seatunnel集群。\n当服务端接收到请求后，会根据请求的链接，调用相应的方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public void handle(HttpPostCommand httpPostCommand) { String uri = httpPostCommand.getURI(); try { if (uri.startsWith(SUBMIT_JOB_URL)) { handleSubmitJob(httpPostCommand, uri); } else if (uri.startsWith(STOP_JOB_URL)) { handleStopJob(httpPostCommand, uri); } else if (uri.startsWith(ENCRYPT_CONFIG)) { handleEncrypt(httpPostCommand); } else { original.handle(httpPostCommand); } } catch (IllegalArgumentException e) { prepareResponse(SC_400, httpPostCommand, exceptionResponse(e)); } catch (Throwable e) { logger.warning(\u0026#34;An error occurred while handling request \u0026#34; + httpPostCommand, e); prepareResponse(SC_500, httpPostCommand, exceptionResponse(e)); } this.textCommandService.sendResponse(httpPostCommand); } 会根据路径来查找相应的方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 private void handleSubmitJob(HttpPostCommand httpPostCommand, String uri) throws IllegalArgumentException { Map\u0026lt;String, String\u0026gt; requestParams = new HashMap\u0026lt;\u0026gt;(); RestUtil.buildRequestParams(requestParams, uri); Config config = RestUtil.buildConfig(requestHandle(httpPostCommand), false); ReadonlyConfig envOptions = ReadonlyConfig.fromConfig(config.getConfig(\u0026#34;env\u0026#34;)); String jobName = envOptions.get(EnvCommonOptions.JOB_NAME); JobConfig jobConfig = new JobConfig(); jobConfig.setName( StringUtils.isEmpty(requestParams.get(RestConstant.JOB_NAME)) ? jobName : requestParams.get(RestConstant.JOB_NAME)); boolean startWithSavePoint = Boolean.parseBoolean(requestParams.get(RestConstant.IS_START_WITH_SAVE_POINT)); String jobIdStr = requestParams.get(RestConstant.JOB_ID); Long finalJobId = StringUtils.isNotBlank(jobIdStr) ? Long.parseLong(jobIdStr) : null; SeaTunnelServer seaTunnelServer = getSeaTunnelServer(); RestJobExecutionEnvironment restJobExecutionEnvironment = new RestJobExecutionEnvironment( seaTunnelServer, jobConfig, config, textCommandService.getNode(), startWithSavePoint, finalJobId); JobImmutableInformation jobImmutableInformation = restJobExecutionEnvironment.build(); long jobId = jobImmutableInformation.getJobId(); if (!seaTunnelServer.isMasterNode()) { NodeEngineUtil.sendOperationToMasterNode( getNode().nodeEngine, new SubmitJobOperation( jobId, getNode().nodeEngine.toData(jobImmutableInformation), jobImmutableInformation.isStartWithSavePoint())) .join(); } else { submitJob(seaTunnelServer, jobImmutableInformation, jobConfig); } this.prepareResponse( httpPostCommand, new JsonObject() .add(RestConstant.JOB_ID, String.valueOf(jobId)) .add(RestConstant.JOB_NAME, jobConfig.getName())); } 这里的逻辑与客户端差不多，由于没有local模式，那么就不需要去创建本地服务了。\n在客户端我们会通过ClientJobExecutionEnvironment这个类来进行逻辑计划解析等操作，同样这样也有一个RestJobExecutionEnvironment来做同样的事情。\n最终提交任务时，如果当前节点非master节点，那么就会向master节点发送信息，master节点接收到信息后与从命令行客户端接收信息的处理逻辑就一致了。\n如果当前节点是master节点，会直接调用submitJob方法，这里直接调用了coordinatorService.submitJob方法进行后续的处理。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 private void submitJob( SeaTunnelServer seaTunnelServer, JobImmutableInformation jobImmutableInformation, JobConfig jobConfig) { CoordinatorService coordinatorService = seaTunnelServer.getCoordinatorService(); Data data = textCommandService .getNode() .nodeEngine .getSerializationService() .toData(jobImmutableInformation); PassiveCompletableFuture\u0026lt;Void\u0026gt; voidPassiveCompletableFuture = coordinatorService.submitJob( Long.parseLong(jobConfig.getJobContext().getJobId()), data, jobImmutableInformation.isStartWithSavePoint()); voidPassiveCompletableFuture.join(); } 可以看出，两种提交方式，都是会在提交任务的一端做逻辑计划解析，然后将信息发送给master节点，再由master节点做任务的物理计划解析，分配等操作。\n","permalink":"https://www.liunaijie.top/publish/seatunnel%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E4%BA%8Czeta%E5%BC%95%E6%93%8E%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3/","summary":"\u003ch1 id=\"省流\"\u003e省流\u003c/h1\u003e\n\u003cp\u003e这篇文章以seatunnel 2.3.6版本，讲解了一个zeta引擎的一个任务是如何从提交到运行的全流程，希望通过这篇文档，对刚刚上手seatunnel的朋友提供一些帮助。\u003c/p\u003e\n\u003cp\u003e这篇文章将从\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eseatunnel server端的初始化\u003c/li\u003e\n\u003cli\u003eclient端的任务提交流程\u003c/li\u003e\n\u003cli\u003eserver端的接收到任务的执行流程\n三部分来记录下一个任务的整体流程\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"参考\"\u003e参考\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/apache/seatunnel/issues/2269\"\u003e[ST-Engine][Design] The Design of LogicalPlan to PhysicalPlan\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"集群拓扑\"\u003e集群拓扑\u003c/h1\u003e\n\u003cp\u003e首先从整体了解下SeaTunnel的Zeta引擎架构， SeaTunnel是基于\u003ca href=\"https://hazelcast.com/\"\u003ehazelcast\u003c/a\u003e来实现的分布式集群通信\u003c/p\u003e\n\u003cp\u003e在2.3.6版本之后， 集群中的节点可以被分配为master或worker节点， 从而将调度与执行分开， 避免master节点的负载过高从而出现问题。\u003c/p\u003e\n\u003cp\u003e并且2.3.6版本还添加了一个功能是， 可以对每个节点添加\u003ccode\u003etag\u003c/code\u003e属性， 当提交任务时可以通过\u003ccode\u003etag\u003c/code\u003e来选择任务将要运行的节点， 从而达到资源隔离的目的（2.3.6版本有问题，2.3.8版本中进行了修复，如果需要使用此功能请使用2.3.8版本）。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/34e19e5696c8ac0e639fc9350b58662afdca222d/Pasted%20image%2020240821105221.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e集群的服务端分为master和worker节点， master节点负责接收请求， 逻辑计划生成， 分配任务等（与之前的版本相比，会多了几个backup节点，但是对于集群稳定性来说是一个挺大的提升）。\n而worker节点则只负责执行任务， 也就是数据的读取和写入。\n提交任务时可以创建hazelcast的客户端连接集群来进行通信， 或者使用restapi来进行通信。\u003c/p\u003e\n\u003ch1 id=\"服务端启动\"\u003e服务端启动\u003c/h1\u003e\n\u003cp\u003e当我们对集群的整体架构有个大致的了解后， 我们再来具体了解下具体的流程\u003c/p\u003e\n\u003cp\u003e首先看下server端的启动过程。 server端的启动命令为：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\nsh bin/seatunnel-cluster.sh -d -r \u0026lt;node role type\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e当我们查看这个脚本的内容后就会发现， 这个脚本最终的执行命令为：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ejava -cp seatunnel-starter.jar org.apache.seatunnel.core.starter.seatunnel.SeaTunnelServer \u0026lt;other_java_jvm_config_and_args\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e我们查看这个\u003ccode\u003estarter.seatunnel.SeaTunnelServer\u003c/code\u003e的代码\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-Java\" data-lang=\"Java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSeaTunnelServer\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eCommandException\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eServerCommandArgs\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eserverCommandArgs\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003eCommandLineUtils\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                        \u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                        \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eServerCommandArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                        \u003c/span\u003e\u003cspan class=\"n\"\u003eEngineType\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eSEATUNNEL\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetStarterShellName\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                        \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eSeaTunnel\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eserverCommandArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ebuildCommand\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e这个代码是使用了\u003ccode\u003eJCommander\u003c/code\u003e来解析用户传递的参数并构建并运行\u003ccode\u003eCommand\u003c/code\u003e， \u003ccode\u003eserverCommandArgs.buildCommand\u003c/code\u003e返回的类为：\u003c/p\u003e","title":"SeaTunnel源码解析-(二)Zeta引擎源码讲解"},{"content":"这篇文章会聊些什么 SeaTunnel作为一款数据集成工具, 那么它最终的目的是来做数据同步的, 可以将数据从某个存储同步到另外一个存储中. 但是这篇文档并不会聊它使用层面的事情, 而是去聊一下这个工具/框架的设计, 任务的执行等.对于某个连接器(数据库)的实现不会深入的了解. 基于的源码版本: 2.3.6-release\n任务是如何被执行的 在我的另外一篇文章2.Zeta引擎源码讲解中有一些关于Zeta引擎的分析, 聊了一下Zeta引擎的客户端, 服务端都会做一些什么事情, 也笼统的带了一点任务执行的内容, 想了解相关内容的朋友可以去看一下. 在下面的内容, 则主要是记录一下在SeaTunnel中, 一个任务是如何与连接器中的各种类进行关联的.\n要聊任务与连接器的关联, 就要回到物理计划生成的这一部分(PhysicalPlanGenerator#generate()).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 Stream\u0026lt;SubPlan\u0026gt; subPlanStream = pipelines.stream() .map( pipeline -\u0026gt; { this.pipelineTasks.clear(); this.startingTasks.clear(); this.subtaskActions.clear(); final int pipelineId = pipeline.getId(); final List\u0026lt;ExecutionEdge\u0026gt; edges = pipeline.getEdges(); List\u0026lt;SourceAction\u0026lt;?, ?, ?\u0026gt;\u0026gt; sources = findSourceAction(edges); List\u0026lt;PhysicalVertex\u0026gt; coordinatorVertexList = getEnumeratorTask( sources, pipelineId, totalPipelineNum); coordinatorVertexList.addAll( getCommitterTask(edges, pipelineId, totalPipelineNum)); List\u0026lt;PhysicalVertex\u0026gt; physicalVertexList = getSourceTask( edges, sources, pipelineId, totalPipelineNum); physicalVertexList.addAll( getShuffleTask(edges, pipelineId, totalPipelineNum)); CompletableFuture\u0026lt;PipelineStatus\u0026gt; pipelineFuture = new CompletableFuture\u0026lt;\u0026gt;(); waitForCompleteBySubPlanList.add( new PassiveCompletableFuture\u0026lt;\u0026gt;(pipelineFuture)); checkpointPlans.put( pipelineId, CheckpointPlan.builder() .pipelineId(pipelineId) .pipelineSubtasks(pipelineTasks) .startingSubtasks(startingTasks) .pipelineActions(pipeline.getActions()) .subtaskActions(subtaskActions) .build()); return new SubPlan( pipelineId, totalPipelineNum, initializationTimestamp, physicalVertexList, coordinatorVertexList, jobImmutableInformation, executorService, runningJobStateIMap, runningJobStateTimestampsIMap, tagFilter); }); 这是将执行计划转换为物理计划时的相关代码，里面有这样4行代码。 生成EnumeratorTask, CommitterTask将其添加到协调器任务列表中 生成SourceTask，ShuffleTask将其添加到物理任务列表中。\n1 2 3 4 5 6 7 8 9 10 11 12 List\u0026lt;PhysicalVertex\u0026gt; coordinatorVertexList = getEnumeratorTask( sources, pipelineId, totalPipelineNum); coordinatorVertexList.addAll( getCommitterTask(edges, pipelineId, totalPipelineNum)); List\u0026lt;PhysicalVertex\u0026gt; physicalVertexList = getSourceTask( edges, sources, pipelineId, totalPipelineNum); physicalVertexList.addAll( getShuffleTask(edges, pipelineId, totalPipelineNum)); 生成计划图的过程的大致在第二篇文章中也有记录2.Zeta引擎源码讲解 我们这篇文章看下这四行代码以及他们与上面的Source，Transform，Sink有什么关系。接口中定义的reader，enumerator，writer是如何被执行的。\nTask 在看这几个之前先看下他们实现的公共接口Task 从物理计划解析的代码可以知道，一个同步任务的执行过程都会被转换为Task。 Task是执行层面的最小单位，一个同步任务配置DAG，可以包括多个不相关，可以并行的Pipeline，一个Pipeline中可以包括多个类型的Task，Task之间存在依赖关系，可以认为是一个图中的一个顶点。 任务的容错也是基于最小粒度的Task来进行恢复的，而无需恢复整个DAG或Pipeline。可以实现最小粒度的容错。\n一个Task在执行时会被worker上线程池里面的一个线程拿去执行，在SeaTunnel中对于数据同步的场景，某些Task可能暂时没有数据需要进行同步，如果一直占用某个线程资源，可能会造成浪费的情况，做了共享资源的优化。关于这部分的内容，可以参考这个Pull Request以及TaskExecutionService#BlockingWorker和TaskExecutionService#CooperativeTaskWorker相关代码(此功能也默认没有开启，不过这部分代码的设计确实值得了解学习一下。)\n一个Task被分类为CoordinatorTask协调任务和SeaTunnelTask同步任务。 这篇内容里面不会对CoordinatorTask协调任务里面的checkpoint进行探讨, 只会关注SeaTunnelTask同步任务.\nSourceSplitEnumeratorTask 在生成物理计划时，会对所有的source进行遍历，为每个source都创建一个 SourceSplitEnumeratorTask\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 private List\u0026lt;PhysicalVertex\u0026gt; getEnumeratorTask( List\u0026lt;SourceAction\u0026lt;?, ?, ?\u0026gt;\u0026gt; sources, int pipelineIndex, int totalPipelineNum) { AtomicInteger atomicInteger = new AtomicInteger(-1); return sources.stream() .map( sourceAction -\u0026gt; { long taskGroupID = idGenerator.getNextId(); long taskTypeId = idGenerator.getNextId(); TaskGroupLocation taskGroupLocation = new TaskGroupLocation( jobImmutableInformation.getJobId(), pipelineIndex, taskGroupID); TaskLocation taskLocation = new TaskLocation(taskGroupLocation, taskTypeId, 0); SourceSplitEnumeratorTask\u0026lt;?\u0026gt; t = new SourceSplitEnumeratorTask\u0026lt;\u0026gt;( jobImmutableInformation.getJobId(), taskLocation, sourceAction); ... ... }) .collect(Collectors.toList()); } 我们先看下这个数据源切入任务类的成员变量和构造方法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 public class SourceSplitEnumeratorTask\u0026lt;SplitT extends SourceSplit\u0026gt; extends CoordinatorTask { private static final long serialVersionUID = -3713701594297977775L; private final SourceAction\u0026lt;?, SplitT, Serializable\u0026gt; source; private SourceSplitEnumerator\u0026lt;SplitT, Serializable\u0026gt; enumerator; private SeaTunnelSplitEnumeratorContext\u0026lt;SplitT\u0026gt; enumeratorContext; private Serializer\u0026lt;Serializable\u0026gt; enumeratorStateSerializer; private Serializer\u0026lt;SplitT\u0026gt; splitSerializer; private int maxReaderSize; private Set\u0026lt;Long\u0026gt; unfinishedReaders; private Map\u0026lt;TaskLocation, Address\u0026gt; taskMemberMapping; private Map\u0026lt;Long, TaskLocation\u0026gt; taskIDToTaskLocationMapping; private Map\u0026lt;Integer, TaskLocation\u0026gt; taskIndexToTaskLocationMapping; private volatile SeaTunnelTaskState currState; private volatile boolean readerRegisterComplete; private volatile boolean prepareCloseTriggered; @SuppressWarnings(\u0026#34;unchecked\u0026#34;) public SourceSplitEnumeratorTask( long jobID, TaskLocation taskID, SourceAction\u0026lt;?, SplitT, ?\u0026gt; source) { super(jobID, taskID); this.source = (SourceAction\u0026lt;?, SplitT, Serializable\u0026gt;) source; this.currState = SeaTunnelTaskState.CREATED; } } 可以看到这个类中持有了几个关键的成员变量，SourceAction，SourceSplitEnumerator, SeaTunnelSplitEnumeratorContext 这些都是与enumerator相关的类。 还有几个map，set等容器存放了任务信息，任务执行地址等等的映射关系。\n在构造方法的最后会将当前任务的状态初始化为CREATED\n再来看下这个任务的其他方法：\n初始化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 @Override public void init() throws Exception { currState = SeaTunnelTaskState.INIT; super.init(); readerRegisterComplete = false; log.info( \u0026#34;starting seatunnel source split enumerator task, source name: \u0026#34; + source.getName()); enumeratorContext = new SeaTunnelSplitEnumeratorContext\u0026lt;\u0026gt;( this.source.getParallelism(), this, getMetricsContext(), new JobEventListener(taskLocation, getExecutionContext())); enumeratorStateSerializer = this.source.getSource().getEnumeratorStateSerializer(); splitSerializer = this.source.getSource().getSplitSerializer(); taskMemberMapping = new ConcurrentHashMap\u0026lt;\u0026gt;(); taskIDToTaskLocationMapping = new ConcurrentHashMap\u0026lt;\u0026gt;(); taskIndexToTaskLocationMapping = new ConcurrentHashMap\u0026lt;\u0026gt;(); maxReaderSize = source.getParallelism(); unfinishedReaders = new CopyOnWriteArraySet\u0026lt;\u0026gt;(); } 在初始化时，会将状态修改为INIT，并且创建enumeratorContext，以及对其他几个变量进行初始化操作。 不知道大家有没有注意到，到执行完init方法，enumerator实例都没有被创建出来， 当搜索一下代码，会发现enumerator实例会在restoreState(List\u0026lt;ActionSubtaskState\u0026gt; actionStateList)这个方法中进行初始化。 当我们看完状态切换后就可以看到这个方法什么时候被调用了。\n状态切换 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 private void stateProcess() throws Exception { switch (currState) { case INIT: currState = WAITING_RESTORE; reportTaskStatus(WAITING_RESTORE); break; case WAITING_RESTORE: if (restoreComplete.isDone()) { currState = READY_START; reportTaskStatus(READY_START); } else { Thread.sleep(100); } break; case READY_START: if (startCalled \u0026amp;\u0026amp; readerRegisterComplete) { currState = STARTING; enumerator.open(); enumeratorContext.getEventListener().onEvent(new EnumeratorOpenEvent()); } else { Thread.sleep(100); } break; case STARTING: currState = RUNNING; log.info(\u0026#34;received enough reader, starting enumerator...\u0026#34;); enumerator.run(); break; case RUNNING: // The reader closes automatically after reading if (prepareCloseStatus) { this.getExecutionContext() .sendToMaster(new LastCheckpointNotifyOperation(jobID, taskLocation)); currState = PREPARE_CLOSE; } else if (prepareCloseTriggered) { currState = PREPARE_CLOSE; } else { Thread.sleep(100); } break; case PREPARE_CLOSE: if (closeCalled) { currState = CLOSED; } else { Thread.sleep(100); } break; case CLOSED: this.close(); return; // TODO support cancel by outside case CANCELLING: this.close(); currState = CANCELED; return; default: throw new IllegalArgumentException(\u0026#34;Unknown Enumerator State: \u0026#34; + currState); } } 当调用init方法，会将状态设置为INIT，进入分支判断 当状态为INIT时，将状态切换为WAITING_RESTORE 当状态为WAITING_RESTORE时，进行restoreComplete.isDone()条件判断，当不满足时，睡眠100毫秒后重试。当满足时，会将状态设置为READY_START restoreComplete在执行init方法时，会完成初始化操作，所以这里的睡眠等待就是等待init方法调用完成。\n当状态为READY_START时，会判断是否所有的reader都注册完成，如果都注册完成则将状态修改为STARTING，并且调用enumerator.open()方法。如果没有全部注册完成，则是继续休眠等待，一直到全部注册完成为止。 readerRegisterComplete变量在什么时候会变成true： 在初始化时，可以获取到source的并行度，也就是最终需要多少个reader，保存为maxReaderSize reader在启动时，会向enumerator注册自己的地址，在SourceSplitEnumeratorTask中内部维护了一个map结构，保存了reader的信息，每当有新reader注册时就会判断是否达到maxReaderSize，当达到数量后，会将readerRegisterComplete置为true\n当状态为STARTING时，将状态切换为RUNNING，同时调用enumerator.run()方法。 当调用run方法后，enumerator会真正去执行切分任务，根据配置，实际数据等等方式来将数据读取任务切分成多个小任务。然后将任务分发到不同的reader上。 当状态为RUNNING时，会检查状态是否需要关闭，如果需要关闭则将状态修改为PREPARE_CLOSE, 否则休眠等待一直等到需要关闭。 prepareCloseStatus, prepareCloseTriggered变量什么时候会变为true： prepareCloseStatus变量会在所有的reader都完成读取任务时将状态置为true，也就是说enumerator任务是在所有reader任务结束之后才能结束的。 prepareCloseTriggered 变量则是当接收到系统任务完成或者是接收到需要做savepoint时才会将状态置为true 当两个变量被置为true时，表示当前任务已经结束或者需要手动结束了\n当状态为PREPARE_CLOSE时，会判断closeCalled变量是否为true，如果是则将状态修改为CLOSED，否则休眠等待 CLOSED/CANCELLING状态时，则调用close方法对当前任务进行资源关闭清理工作。 刚刚在上面有写到enumerator实例没有被初始化，那么当调用enumerator相关方法时应该会得到空指针异常，所以初始化操作也就是restoreState的调用肯定是在READY_START状态前。 在最开始的两个状态INIT,WAITING_RESTORE中，有两个上报更新任务状态的方法调用.\nreportTaskStatus(WAITING_RESTORE); reportTaskStatus(READY_START); 这个方法里，会向集群的Master发送一条TaskReportStatusOperation消息，消息里包含当前任务的位置和状态信息 1 2 3 4 5 protected void reportTaskStatus(SeaTunnelTaskState status) { getExecutionContext() .sendToMaster(new TaskReportStatusOperation(taskLocation, status)) .join(); } 我们看下TaskReportStatusOperation这个类的代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @Override public void run() throws Exception { CoordinatorService coordinatorService = ((SeaTunnelServer) getService()).getCoordinatorService(); RetryUtils.retryWithException( () -\u0026gt; { coordinatorService .getJobMaster(location.getJobId()) .getCheckpointManager() .reportedTask(this); return null; }, new RetryUtils.RetryMaterial( Constant.OPERATION_RETRY_TIME, true, e -\u0026gt; true, Constant.OPERATION_RETRY_SLEEP)); } 可以看到在这个类中，会根据当前任务的id获取到JobMaster，然后调用其checkpointManager.reportTask()方法 再来看下checkpointManager.reportTask()方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public void reportedTask(TaskReportStatusOperation reportStatusOperation) { // task address may change during restore. log.debug( \u0026#34;reported task({}) status {}\u0026#34;, reportStatusOperation.getLocation().getTaskID(), reportStatusOperation.getStatus()); getCheckpointCoordinator(reportStatusOperation.getLocation()) .reportedTask(reportStatusOperation); } protected void reportedTask(TaskReportStatusOperation operation) { pipelineTaskStatus.put(operation.getLocation().getTaskID(), operation.getStatus()); CompletableFuture.runAsync( () -\u0026gt; { switch (operation.getStatus()) { case WAITING_RESTORE: restoreTaskState(operation.getLocation()); break; case READY_START: allTaskReady(); break; default: break; } }, executorService) .exceptionally( error -\u0026gt; { handleCoordinatorError( \u0026#34;task running failed\u0026#34;, error, CheckpointCloseReason.CHECKPOINT_INSIDE_ERROR); return null; }); } 在CheckpointCoordinator中，会根据状态分别调用restoreTaskState()和allTaskReady()两个方法。 先看下restoreTaskState()方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 private void restoreTaskState(TaskLocation taskLocation) { List\u0026lt;ActionSubtaskState\u0026gt; states = new ArrayList\u0026lt;\u0026gt;(); if (latestCompletedCheckpoint != null) { if (!latestCompletedCheckpoint.isRestored()) { latestCompletedCheckpoint.setRestored(true); } final Integer currentParallelism = pipelineTasks.get(taskLocation.getTaskVertexId()); plan.getSubtaskActions() .get(taskLocation) .forEach( tuple -\u0026gt; { ActionState actionState = latestCompletedCheckpoint.getTaskStates().get(tuple.f0()); if (actionState == null) { LOG.info( \u0026#34;Not found task({}) state for key({})\u0026#34;, taskLocation, tuple.f0()); return; } if (COORDINATOR_INDEX.equals(tuple.f1())) { states.add(actionState.getCoordinatorState()); return; } for (int i = tuple.f1(); i \u0026lt; actionState.getParallelism(); i += currentParallelism) { ActionSubtaskState subtaskState = actionState.getSubtaskStates().get(i); if (subtaskState != null) { states.add(subtaskState); } } }); } checkpointManager .sendOperationToMemberNode(new NotifyTaskRestoreOperation(taskLocation, states)) .join(); } 在这个方法里，首先会判断latestCompletedCheckpoint是否为null，那么我们在任务最开始的时候，这个状态肯定是空的，那么就会直接调用最下面的一段代码，发送一个NotifyTaskRestoreOperation到具体的任务节点. 既然看到这段代码，那么就再多想一下，如果latestCompletedCheckpoint不为null，那么就表示之前有过checkpoint记录，那么就表示了该任务是由历史状态进行恢复的，需要查询出历史状态，从历史状态进行恢复，这里的List\u0026lt;ActionSubtaskState\u0026gt;就存储了这些状态信息。\n继续看下NotifyTaskRestoreOperation的代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 public void run() throws Exception { SeaTunnelServer server = getService(); RetryUtils.retryWithException( () -\u0026gt; { log.debug(\u0026#34;NotifyTaskRestoreOperation \u0026#34; + taskLocation); TaskGroupContext groupContext = server.getTaskExecutionService() .getExecutionContext(taskLocation.getTaskGroupLocation()); Task task = groupContext.getTaskGroup().getTask(taskLocation.getTaskID()); try { ClassLoader classLoader = Thread.currentThread().getContextClassLoader(); task.getExecutionContext() .getTaskExecutionService() .asyncExecuteFunction( taskLocation.getTaskGroupLocation(), () -\u0026gt; { Thread.currentThread() .setContextClassLoader( groupContext.getClassLoader()); try { log.debug( \u0026#34;NotifyTaskRestoreOperation.restoreState \u0026#34; + restoredState); task.restoreState(restoredState); log.debug( \u0026#34;NotifyTaskRestoreOperation.finished \u0026#34; + restoredState); } catch (Throwable e) { task.getExecutionContext() .sendToMaster( new CheckpointErrorReportOperation( taskLocation, e)); } finally { Thread.currentThread() .setContextClassLoader(classLoader); } }); } catch (Exception e) { throw new SeaTunnelException(e); } return null; }, new RetryUtils.RetryMaterial( Constant.OPERATION_RETRY_TIME, true, exception -\u0026gt; exception instanceof TaskGroupContextNotFoundException \u0026amp;\u0026amp; !server.taskIsEnded(taskLocation.getTaskGroupLocation()), Constant.OPERATION_RETRY_SLEEP)); } 从上面的代码中可以看出最终是调用了task.restoreState(restoredState)方法。在这个方法调用中，enumerator实例也就被初始化了。\n在上面还有一个当状态为READY_START时，调用allTaskReady()的分支。 我们先回到分支切换时，看下当什么情况下会是READY_START的状态。\n1 2 3 4 5 6 7 8 case WAITING_RESTORE: if (restoreComplete.isDone()) { currState = READY_START; reportTaskStatus(READY_START); } else { Thread.sleep(100); } break; 这里会判断一个restoreComplete是否是完成状态，而这个变量会在restoreState方法内标记为完成\n1 2 3 4 5 6 7 8 9 10 11 12 13 @Override public void restoreState(List\u0026lt;ActionSubtaskState\u0026gt; actionStateList) throws Exception { log.debug(\u0026#34;restoreState for split enumerator [{}]\u0026#34;, actionStateList); Optional\u0026lt;Serializable\u0026gt; state = .....; if (state.isPresent()) { this.enumerator = this.source.getSource().restoreEnumerator(enumeratorContext, state.get()); } else { this.enumerator = this.source.getSource().createEnumerator(enumeratorContext); } restoreComplete.complete(null); log.debug(\u0026#34;restoreState split enumerator [{}] finished\u0026#34;, actionStateList); } 也就是当初始化真正完成时，会标记为READY_START的状态。 看下allTaskReady的方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 private void allTaskReady() { if (pipelineTaskStatus.size() != plan.getPipelineSubtasks().size()) { return; } for (SeaTunnelTaskState status : pipelineTaskStatus.values()) { if (READY_START != status) { return; } } isAllTaskReady = true; InvocationFuture\u0026lt;?\u0026gt;[] futures = notifyTaskStart(); CompletableFuture.allOf(futures).join(); notifyCompleted(latestCompletedCheckpoint); if (coordinatorConfig.isCheckpointEnable()) { LOG.info(\u0026#34;checkpoint is enabled, start schedule trigger pending checkpoint.\u0026#34;); scheduleTriggerPendingCheckpoint(coordinatorConfig.getCheckpointInterval()); } else { LOG.info( \u0026#34;checkpoint is disabled, because in batch mode and \u0026#39;checkpoint.interval\u0026#39; of env is missing.\u0026#34;); } } 这个方法内调用notifyTaskStart()方法，在此方法内会发送一个NotifyTaskStartOperation消息，在NotifyTaskStartOperation中，会获取到Task，调用startCall方法，在startCall中，将startCalled变量置为true\n只有这里被执行了，状态切换中的READY_START状态才会切换为STARTING\n1 2 3 4 5 6 7 8 9 10 11 12 case READY_START: // 当任务启动并且所有reader节点也都启动注册完成后 // 改为STARTING状态，并且调用enumerate的open方法 // 否则一直等待 // 直到自身启动完成，以及所有reader注册完成 if (startCalled \u0026amp;\u0026amp; readerRegisterComplete) { currState = STARTING; enumerator.open(); } else { Thread.sleep(100); } break; 其他的任务类型也都会有这样一段逻辑。\n接着按照顺序先看下committer task，这是另外一个协调任务\nSinkAggregatedCommitterTask 这个类的代码与enumerator的代码类似，\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public class SinkAggregatedCommitterTask\u0026lt;CommandInfoT, AggregatedCommitInfoT\u0026gt; extends CoordinatorTask { private static final long serialVersionUID = 5906594537520393503L; private volatile SeaTunnelTaskState currState; private final SinkAction\u0026lt;?, ?, CommandInfoT, AggregatedCommitInfoT\u0026gt; sink; private final int maxWriterSize; private final SinkAggregatedCommitter\u0026lt;CommandInfoT, AggregatedCommitInfoT\u0026gt; aggregatedCommitter; private transient Serializer\u0026lt;AggregatedCommitInfoT\u0026gt; aggregatedCommitInfoSerializer; @Getter private transient Serializer\u0026lt;CommandInfoT\u0026gt; commitInfoSerializer; private Map\u0026lt;Long, Address\u0026gt; writerAddressMap; private ConcurrentMap\u0026lt;Long, List\u0026lt;CommandInfoT\u0026gt;\u0026gt; commitInfoCache; private ConcurrentMap\u0026lt;Long, List\u0026lt;AggregatedCommitInfoT\u0026gt;\u0026gt; checkpointCommitInfoMap; private Map\u0026lt;Long, Integer\u0026gt; checkpointBarrierCounter; private CompletableFuture\u0026lt;Void\u0026gt; completableFuture; private MultiTableResourceManager resourceManager; private volatile boolean receivedSinkWriter; public SinkAggregatedCommitterTask( long jobID, TaskLocation taskID, SinkAction\u0026lt;?, ?, CommandInfoT, AggregatedCommitInfoT\u0026gt; sink, SinkAggregatedCommitter\u0026lt;CommandInfoT, AggregatedCommitInfoT\u0026gt; aggregatedCommitter) { super(jobID, taskID); this.sink = sink; this.aggregatedCommitter = aggregatedCommitter; this.maxWriterSize = sink.getParallelism(); this.receivedSinkWriter = false; } ... } 成员变量存储了sink的action，committer的实例引用。 使用几个容器存储writer的地址，checkpoint id与commit信息的映射等。\n接下来再看下初始化方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 @Override public void init() throws Exception { super.init(); currState = INIT; this.checkpointBarrierCounter = new ConcurrentHashMap\u0026lt;\u0026gt;(); this.commitInfoCache = new ConcurrentHashMap\u0026lt;\u0026gt;(); this.writerAddressMap = new ConcurrentHashMap\u0026lt;\u0026gt;(); this.checkpointCommitInfoMap = new ConcurrentHashMap\u0026lt;\u0026gt;(); this.completableFuture = new CompletableFuture\u0026lt;\u0026gt;(); this.commitInfoSerializer = sink.getSink().getCommitInfoSerializer().get(); this.aggregatedCommitInfoSerializer = sink.getSink().getAggregatedCommitInfoSerializer().get(); if (this.aggregatedCommitter instanceof SupportResourceShare) { resourceManager = ((SupportResourceShare) this.aggregatedCommitter) .initMultiTableResourceManager(1, 1); } aggregatedCommitter.init(); if (resourceManager != null) { ((SupportResourceShare) this.aggregatedCommitter) .setMultiTableResourceManager(resourceManager, 0); } log.debug( \u0026#34;starting seatunnel sink aggregated committer task, sink name[{}] \u0026#34;, sink.getName()); } 在初始化时，会对几个容器进行初始化，将状态置为INIT状态，对aggregatedCommitter进行初始化。这里会source split enumerator不同，sink committer是通过构造方法在外部初始化完成后传递进来的。\n状态转换的方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 protected void stateProcess() throws Exception { switch (currState) { case INIT: currState = WAITING_RESTORE; reportTaskStatus(WAITING_RESTORE); break; case WAITING_RESTORE: if (restoreComplete.isDone()) { currState = READY_START; reportTaskStatus(READY_START); } else { Thread.sleep(100); } break; case READY_START: if (startCalled) { currState = STARTING; } else { Thread.sleep(100); } break; case STARTING: if (receivedSinkWriter) { currState = RUNNING; } else { Thread.sleep(100); } break; case RUNNING: if (prepareCloseStatus) { currState = PREPARE_CLOSE; } else { Thread.sleep(100); } break; case PREPARE_CLOSE: if (closeCalled) { currState = CLOSED; } else { Thread.sleep(100); } break; case CLOSED: this.close(); return; // TODO support cancel by outside case CANCELLING: this.close(); currState = CANCELED; return; default: throw new IllegalArgumentException(\u0026#34;Unknown Enumerator State: \u0026#34; + currState); } } 这里的状态转换比较简单，基本上都是直接进入下一个状态，但是这里有一点与eunmerator不太一样，在source enumerator中，需要等待全部的reader都启动完成，才会切换到running状态，这里稍有不同，这里只要有一个writer注册就会将receivedSinkWriter置为true，从而可以切换到running状态。\nsource eunmerator需要等待全部的reader节点才能启动是需要避免分配时，任务分配不均匀，早启动的任务分配了全部或者较多的任务。 而sink committer的任务则不一样，它是二次提交时使用，所以只要有一个writer启动，就有可能会有二次提交的任务产生，所以不需要等待全部writer启动。\n这里的RUNNING状态到PREPARE_CLOSE状态的切换，会判断prepareCloseStatus是否为true，而这个变量只有在接收到任务结束的信号时才会被置为true，所以这个任务会在任务全部完成时才会被关闭。\n现在就看完了数据拆分任务SourceSplitEnumerator以及数据提交任务SinkAggregatedCommitter的相关内容 接下来我们看下几个数据读取，写入。即reader，writer的相关任务执行过程。\nSourceSeaTunnelTask 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public class SourceSeaTunnelTask\u0026lt;T, SplitT extends SourceSplit\u0026gt; extends SeaTunnelTask { private static final ILogger LOGGER = Logger.getLogger(SourceSeaTunnelTask.class); private transient SeaTunnelSourceCollector\u0026lt;T\u0026gt; collector; private transient Object checkpointLock; @Getter private transient Serializer\u0026lt;SplitT\u0026gt; splitSerializer; private final Map\u0026lt;String, Object\u0026gt; envOption; private final PhysicalExecutionFlow\u0026lt;SourceAction, SourceConfig\u0026gt; sourceFlow; public SourceSeaTunnelTask( long jobID, TaskLocation taskID, int indexID, PhysicalExecutionFlow\u0026lt;SourceAction, SourceConfig\u0026gt; executionFlow, Map\u0026lt;String, Object\u0026gt; envOption) { super(jobID, taskID, indexID, executionFlow); this.sourceFlow = executionFlow; this.envOption = envOption; } ... } SourceSeaTunnelTask与TransformSeaTunnelTask都继承了SeaTunnelTask，这里的构造方法调用了父类的构造方法，这一部分我们统一在后面在看，先看下这个类中的其他方法。\n一些其他方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @Override protected void collect() throws Exception { ((SourceFlowLifeCycle\u0026lt;T, SplitT\u0026gt;) startFlowLifeCycle).collect(); } @NonNull @Override public ProgressState call() throws Exception { stateProcess(); return progress.toState(); } public void receivedSourceSplit(List\u0026lt;SplitT\u0026gt; splits) { ((SourceFlowLifeCycle\u0026lt;T, SplitT\u0026gt;) startFlowLifeCycle).receivedSplits(splits); } @Override public void triggerBarrier(Barrier barrier) throws Exception { SourceFlowLifeCycle\u0026lt;T, SplitT\u0026gt; sourceFlow = (SourceFlowLifeCycle\u0026lt;T, SplitT\u0026gt;) startFlowLifeCycle; sourceFlow.triggerBarrier(barrier); } 这几个方法中，都是将调用转给了startFlowLifeCycle去进行调用。\n在这个类中，还重新了父类的createSourceFlowLifeCycle方法，会去创建一个SourceFlowLifeCycle\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @Override protected SourceFlowLifeCycle\u0026lt;?, ?\u0026gt; createSourceFlowLifeCycle( SourceAction\u0026lt;?, ?, ?\u0026gt; sourceAction, SourceConfig config, CompletableFuture\u0026lt;Void\u0026gt; completableFuture, MetricsContext metricsContext) { return new SourceFlowLifeCycle\u0026lt;\u0026gt;( sourceAction, indexID, config.getEnumeratorTask(), this, taskLocation, completableFuture, metricsContext); } 初始化方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 @Override public void init() throws Exception { super.init(); this.checkpointLock = new Object(); this.splitSerializer = sourceFlow.getAction().getSource().getSplitSerializer(); LOGGER.info(\u0026#34;starting seatunnel source task, index \u0026#34; + indexID); if (!(startFlowLifeCycle instanceof SourceFlowLifeCycle)) { throw new TaskRuntimeException( \u0026#34;SourceSeaTunnelTask only support SourceFlowLifeCycle, but get \u0026#34; + startFlowLifeCycle.getClass().getName()); } else { SeaTunnelDataType sourceProducedType; List\u0026lt;TablePath\u0026gt; tablePaths = new ArrayList\u0026lt;\u0026gt;(); try { List\u0026lt;CatalogTable\u0026gt; producedCatalogTables = sourceFlow.getAction().getSource().getProducedCatalogTables(); sourceProducedType = CatalogTableUtil.convertToDataType(producedCatalogTables); tablePaths = producedCatalogTables.stream() .map(CatalogTable::getTableId) .map(TableIdentifier::toTablePath) .collect(Collectors.toList()); } catch (UnsupportedOperationException e) { // TODO remove it when all connector use `getProducedCatalogTables` sourceProducedType = sourceFlow.getAction().getSource().getProducedType(); } this.collector = new SeaTunnelSourceCollector\u0026lt;\u0026gt;( checkpointLock, outputs, this.getMetricsContext(), FlowControlStrategy.fromMap(envOption), sourceProducedType, tablePaths); ((SourceFlowLifeCycle\u0026lt;T, SplitT\u0026gt;) startFlowLifeCycle).setCollector(collector); } } 初始化方法也是先调用父类的初始化方法，一并放到后面再看。 其他的内容则是通过调用Source的API获取到所产生数据的表结构，数据类型，表路径信息等。 在这里还会初始化一个SeaTunnelSourceCollector，并赋值给startFlowLifeCycle. 我们看下这个类的相关代码\nSeaTunnelSourceCollector 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 public class SeaTunnelSourceCollector\u0026lt;T\u0026gt; implements Collector\u0026lt;T\u0026gt; { private final Object checkpointLock; private final List\u0026lt;OneInputFlowLifeCycle\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt;\u0026gt; outputs; private final MetricsContext metricsContext; private final AtomicBoolean schemaChangeBeforeCheckpointSignal = new AtomicBoolean(false); private final AtomicBoolean schemaChangeAfterCheckpointSignal = new AtomicBoolean(false); private final Counter sourceReceivedCount; private final Map\u0026lt;String, Counter\u0026gt; sourceReceivedCountPerTable = new ConcurrentHashMap\u0026lt;\u0026gt;(); private final Meter sourceReceivedQPS; private final Counter sourceReceivedBytes; private final Meter sourceReceivedBytesPerSeconds; private volatile boolean emptyThisPollNext; private final DataTypeChangeEventHandler dataTypeChangeEventHandler = new DataTypeChangeEventDispatcher(); private Map\u0026lt;String, SeaTunnelRowType\u0026gt; rowTypeMap = new HashMap\u0026lt;\u0026gt;(); private SeaTunnelDataType rowType; private FlowControlGate flowControlGate; public SeaTunnelSourceCollector( Object checkpointLock, List\u0026lt;OneInputFlowLifeCycle\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt;\u0026gt; outputs, MetricsContext metricsContext, FlowControlStrategy flowControlStrategy, SeaTunnelDataType rowType, List\u0026lt;TablePath\u0026gt; tablePaths) { this.checkpointLock = checkpointLock; this.outputs = outputs; this.rowType = rowType; this.metricsContext = metricsContext; if (rowType instanceof MultipleRowType) { ((MultipleRowType) rowType) .iterator() .forEachRemaining(type -\u0026gt; this.rowTypeMap.put(type.getKey(), type.getValue())); } if (CollectionUtils.isNotEmpty(tablePaths)) { tablePaths.forEach( tablePath -\u0026gt; sourceReceivedCountPerTable.put( getFullName(tablePath), metricsContext.counter( SOURCE_RECEIVED_COUNT + \u0026#34;#\u0026#34; + getFullName(tablePath)))); } sourceReceivedCount = metricsContext.counter(SOURCE_RECEIVED_COUNT); sourceReceivedQPS = metricsContext.meter(SOURCE_RECEIVED_QPS); sourceReceivedBytes = metricsContext.counter(SOURCE_RECEIVED_BYTES); sourceReceivedBytesPerSeconds = metricsContext.meter(SOURCE_RECEIVED_BYTES_PER_SECONDS); flowControlGate = FlowControlGate.create(flowControlStrategy); } 从变量可以看到这个类里面是实现了指标的统计，从source读到了多少数据，平均每秒读取的速度等都是在这个类中维护计算的。 还有记录了该任务下游的任务列表List\u0026lt;OneInputFlowLifeCycle\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt;\u0026gt; outputs\n在构造方法中，则是一些指标的初始化。\n再看下这个类中的关键方法: collect\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 @Override public void collect(T row) { try { if (row instanceof SeaTunnelRow) { String tableId = ((SeaTunnelRow) row).getTableId(); int size; if (rowType instanceof SeaTunnelRowType) { size = ((SeaTunnelRow) row).getBytesSize((SeaTunnelRowType) rowType); } else if (rowType instanceof MultipleRowType) { size = ((SeaTunnelRow) row).getBytesSize(rowTypeMap.get(tableId)); } else { throw new SeaTunnelEngineException( \u0026#34;Unsupported row type: \u0026#34; + rowType.getClass().getName()); } sourceReceivedBytes.inc(size); sourceReceivedBytesPerSeconds.markEvent(size); flowControlGate.audit((SeaTunnelRow) row); if (StringUtils.isNotEmpty(tableId)) { String tableName = getFullName(TablePath.of(tableId)); Counter sourceTableCounter = sourceReceivedCountPerTable.get(tableName); if (Objects.nonNull(sourceTableCounter)) { sourceTableCounter.inc(); } else { Counter counter = metricsContext.counter(SOURCE_RECEIVED_COUNT + \u0026#34;#\u0026#34; + tableName); counter.inc(); sourceReceivedCountPerTable.put(tableName, counter); } } } sendRecordToNext(new Record\u0026lt;\u0026gt;(row)); emptyThisPollNext = false; sourceReceivedCount.inc(); sourceReceivedQPS.markEvent(); } catch (IOException e) { throw new RuntimeException(e); } } @Override public void collect(SchemaChangeEvent event) { try { if (rowType instanceof SeaTunnelRowType) { rowType = dataTypeChangeEventHandler.reset((SeaTunnelRowType) rowType).apply(event); } else if (rowType instanceof MultipleRowType) { String tableId = event.tablePath().toString(); rowTypeMap.put( tableId, dataTypeChangeEventHandler.reset(rowTypeMap.get(tableId)).apply(event)); } else { throw new SeaTunnelEngineException( \u0026#34;Unsupported row type: \u0026#34; + rowType.getClass().getName()); } sendRecordToNext(new Record\u0026lt;\u0026gt;(event)); } catch (IOException e) { throw new RuntimeException(e); } } } 在这个类中有两个collect方法，一个是接收数据，一个是接收表结构变更事件。 对于接收数据方法，当数据是读取到的数据SeaTunnelRow时，则会进行一些指标计算，更新。然后调用sendRecordToNext方法，将数据封装为Record发送给下游。\n对于表结构变更方法，则是先将内部存储的表结构信息进行更新，然后再同样是调用sendRecordToNext方法发送给下游.\n1 2 3 4 5 6 7 public void sendRecordToNext(Record\u0026lt;?\u0026gt; record) throws IOException { synchronized (checkpointLock) { for (OneInputFlowLifeCycle\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt; output : outputs) { output.received(record); } } } 在这个方法中，则是将数据发送给全部的下游任务。这里如何获取的下游任务是在父类中获取的，这一部分后面在SeaTunnelTask中再继续介绍。\n可以看出这个SeaTunnelSourceCollector会被传递给reader实例，reader读取到数据转换完成之后，再由这个类进行指标统计后发送给所有的下游任务。\nTransformSeaTunnelTask 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 public class TransformSeaTunnelTask extends SeaTunnelTask { private static final ILogger LOGGER = Logger.getLogger(TransformSeaTunnelTask.class); public TransformSeaTunnelTask( long jobID, TaskLocation taskID, int indexID, Flow executionFlow) { super(jobID, taskID, indexID, executionFlow); } private Collector\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt; collector; @Override public void init() throws Exception { super.init(); LOGGER.info(\u0026#34;starting seatunnel transform task, index \u0026#34; + indexID); collector = new SeaTunnelTransformCollector(outputs); if (!(startFlowLifeCycle instanceof OneOutputFlowLifeCycle)) { throw new TaskRuntimeException( \u0026#34;TransformSeaTunnelTask only support OneOutputFlowLifeCycle, but get \u0026#34; + startFlowLifeCycle.getClass().getName()); } } @Override protected SourceFlowLifeCycle\u0026lt;?, ?\u0026gt; createSourceFlowLifeCycle( SourceAction\u0026lt;?, ?, ?\u0026gt; sourceAction, SourceConfig config, CompletableFuture\u0026lt;Void\u0026gt; completableFuture, MetricsContext metricsContext) { throw new UnsupportedOperationException( \u0026#34;TransformSeaTunnelTask can\u0026#39;t create SourceFlowLifeCycle\u0026#34;); } @Override protected void collect() throws Exception { ((OneOutputFlowLifeCycle\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt;) startFlowLifeCycle).collect(collector); } @NonNull @Override public ProgressState call() throws Exception { stateProcess(); return progress.toState(); } } 这个类相比较于SourceSeaTunnelTask则比较简单，在初始化时会创建一个SeaTunnelTransformCollector，当调用collect方法时也是转交给startFlowLifeCycle执行\nSeaTunnelTransformCollector 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class SeaTunnelTransformCollector implements Collector\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt; { private final List\u0026lt;OneInputFlowLifeCycle\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt;\u0026gt; outputs; public SeaTunnelTransformCollector(List\u0026lt;OneInputFlowLifeCycle\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt;\u0026gt; outputs) { this.outputs = outputs; } @Override public void collect(Record\u0026lt;?\u0026gt; record) { for (OneInputFlowLifeCycle\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt; output : outputs) { try { output.received(record); } catch (IOException e) { throw new TaskRuntimeException(e); } } } @Override public void close() {} } SeaTunnelTransformCollector的内容也很简单，收到数据后将数据转发给所有的下游任务。\n好了，接下来我们看下SeaTunnelTask的相关内容\nSeaTunnelTask 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 public abstract class SeaTunnelTask extends AbstractTask { private static final long serialVersionUID = 2604309561613784425L; protected volatile SeaTunnelTaskState currState; private final Flow executionFlow; protected FlowLifeCycle startFlowLifeCycle; protected List\u0026lt;FlowLifeCycle\u0026gt; allCycles; protected List\u0026lt;OneInputFlowLifeCycle\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt;\u0026gt; outputs; protected List\u0026lt;CompletableFuture\u0026lt;Void\u0026gt;\u0026gt; flowFutures; protected final Map\u0026lt;Long, List\u0026lt;ActionSubtaskState\u0026gt;\u0026gt; checkpointStates = new ConcurrentHashMap\u0026lt;\u0026gt;(); private final Map\u0026lt;Long, Integer\u0026gt; cycleAcks = new ConcurrentHashMap\u0026lt;\u0026gt;(); protected int indexID; private TaskGroup taskBelongGroup; private SeaTunnelMetricsContext metricsContext; public SeaTunnelTask(long jobID, TaskLocation taskID, int indexID, Flow executionFlow) { super(jobID, taskID); this.indexID = indexID; this.executionFlow = executionFlow; this.currState = SeaTunnelTaskState.CREATED; } ... } 在SeaTunnelTask中，executionFlow就表示一个物理执行节点，是在PhysicalPlanGenerator中产生传递过来的。这里需要与执行计划图一起对比看下。 在构造方法中没有做太多的事情，仅仅是将变量赋值，将状态初始化为CREATED状态。 看下其他的方法\ninit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @Override public void init() throws Exception { super.init(); metricsContext = getExecutionContext().getOrCreateMetricsContext(taskLocation); this.currState = SeaTunnelTaskState.INIT; flowFutures = new ArrayList\u0026lt;\u0026gt;(); allCycles = new ArrayList\u0026lt;\u0026gt;(); startFlowLifeCycle = convertFlowToActionLifeCycle(executionFlow); for (FlowLifeCycle cycle : allCycles) { cycle.init(); } CompletableFuture.allOf(flowFutures.toArray(new CompletableFuture[0])) .whenComplete((s, e) -\u0026gt; closeCalled = true); } 初始化方法内，调用了convertFlowToActionLifeCycle方法来获取当前任务的开始任务的lifecycle对象。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 private FlowLifeCycle convertFlowToActionLifeCycle(@NonNull Flow flow) throws Exception { FlowLifeCycle lifeCycle; // 局部变量存储当前节点的所有下游节点的lifecycle对象 List\u0026lt;OneInputFlowLifeCycle\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt;\u0026gt; flowLifeCycles = new ArrayList\u0026lt;\u0026gt;(); if (!flow.getNext().isEmpty()) { for (Flow f : flow.getNext()) { flowLifeCycles.add( // 递归调用 将所有节点都进行转换 (OneInputFlowLifeCycle\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt;) convertFlowToActionLifeCycle(f)); } } CompletableFuture\u0026lt;Void\u0026gt; completableFuture = new CompletableFuture\u0026lt;\u0026gt;(); // 加到全部变量中 flowFutures.add(completableFuture); if (flow instanceof PhysicalExecutionFlow) { PhysicalExecutionFlow f = (PhysicalExecutionFlow) flow; // 根据不同的action类型创建不同的 FlowLifecycle if (f.getAction() instanceof SourceAction) { lifeCycle = createSourceFlowLifeCycle( (SourceAction\u0026lt;?, ?, ?\u0026gt;) f.getAction(), (SourceConfig) f.getConfig(), completableFuture, this.getMetricsContext()); // 当前节点的下游输出已经存储在 flowLifeCycles中了，赋值 outputs = flowLifeCycles; } else if (f.getAction() instanceof SinkAction) { lifeCycle = new SinkFlowLifeCycle\u0026lt;\u0026gt;( (SinkAction) f.getAction(), taskLocation, indexID, this, ((SinkConfig) f.getConfig()).getCommitterTask(), ((SinkConfig) f.getConfig()).isContainCommitter(), completableFuture, this.getMetricsContext()); // sink已经是最后的节点，所以不需要设置outputs } else if (f.getAction() instanceof TransformChainAction) { // 对于transform，outputs通过在构造`SeaTunnelTransformCollector`时通过参数传递进入 lifeCycle = new TransformFlowLifeCycle\u0026lt;SeaTunnelRow\u0026gt;( (TransformChainAction) f.getAction(), this, new SeaTunnelTransformCollector(flowLifeCycles), completableFuture); } else if (f.getAction() instanceof ShuffleAction) { ShuffleAction shuffleAction = (ShuffleAction) f.getAction(); HazelcastInstance hazelcastInstance = getExecutionContext().getInstance(); if (flow.getNext().isEmpty()) { lifeCycle = new ShuffleSinkFlowLifeCycle( this, indexID, shuffleAction, hazelcastInstance, completableFuture); } else { lifeCycle = new ShuffleSourceFlowLifeCycle( this, indexID, shuffleAction, hazelcastInstance, completableFuture); } outputs = flowLifeCycles; } else { throw new UnknownActionException(f.getAction()); } } else if (flow instanceof IntermediateExecutionFlow) { IntermediateQueueConfig config = ((IntermediateExecutionFlow\u0026lt;IntermediateQueueConfig\u0026gt;) flow).getConfig(); lifeCycle = new IntermediateQueueFlowLifeCycle( this, completableFuture, ((AbstractTaskGroupWithIntermediateQueue) taskBelongGroup) .getQueueCache(config.getQueueID())); outputs = flowLifeCycles; } else { throw new UnknownFlowException(flow); } allCycles.add(lifeCycle); return lifeCycle; } 在这个方法中，对一个物理执行节点进行遍历，对每一个下游任务都进行转换，转换为对于的FlowLifecycle，然后将其添加到全部变量allCycles中。 在转换FlowLifecycle 时，会根据不同的类型进行相应的转换。并且在每次转换时，都可以获取到当前节点的下游所有节点的LifeCycle，可以将其设置到output中，从而在Collector中发送的时候可以知道下游的信息。 这里的PhysicalExecutionFlow与IntermediateExecutionFlow区别我们先不关心，我们先认为都只有PhysicalExecutionFlow。\n回到init方法，当全部转换完成后，会对所有的FlowLifecycle调用初始化方法进行初始化\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 @Override public void init() throws Exception { super.init(); metricsContext = getExecutionContext().getOrCreateMetricsContext(taskLocation); this.currState = SeaTunnelTaskState.INIT; flowFutures = new ArrayList\u0026lt;\u0026gt;(); allCycles = new ArrayList\u0026lt;\u0026gt;(); startFlowLifeCycle = convertFlowToActionLifeCycle(executionFlow); for (FlowLifeCycle cycle : allCycles) { cycle.init(); } CompletableFuture.allOf(flowFutures.toArray(new CompletableFuture[0])) .whenComplete((s, e) -\u0026gt; closeCalled = true); } 我们对其中提到的几个FlowLifyCycle看下源码\nSourceFlowLifeCycle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 public class SourceFlowLifeCycle\u0026lt;T, SplitT extends SourceSplit\u0026gt; extends ActionFlowLifeCycle implements InternalCheckpointListener { private final SourceAction\u0026lt;T, SplitT, ?\u0026gt; sourceAction; private final TaskLocation enumeratorTaskLocation; private Address enumeratorTaskAddress; private SourceReader\u0026lt;T, SplitT\u0026gt; reader; private transient Serializer\u0026lt;SplitT\u0026gt; splitSerializer; private final int indexID; private final TaskLocation currentTaskLocation; private SeaTunnelSourceCollector\u0026lt;T\u0026gt; collector; private final MetricsContext metricsContext; private final EventListener eventListener; private final AtomicReference\u0026lt;SchemaChangePhase\u0026gt; schemaChangePhase = new AtomicReference\u0026lt;\u0026gt;(); public SourceFlowLifeCycle( SourceAction\u0026lt;T, SplitT, ?\u0026gt; sourceAction, int indexID, TaskLocation enumeratorTaskLocation, SeaTunnelTask runningTask, TaskLocation currentTaskLocation, CompletableFuture\u0026lt;Void\u0026gt; completableFuture, MetricsContext metricsContext) { super(sourceAction, runningTask, completableFuture); this.sourceAction = sourceAction; this.indexID = indexID; this.enumeratorTaskLocation = enumeratorTaskLocation; this.currentTaskLocation = currentTaskLocation; this.metricsContext = metricsContext; this.eventListener = new JobEventListener(currentTaskLocation, runningTask.getExecutionContext()); } } 在这个类的几个成员变量有source enumerator的地址，用来reader与enumerator进行通信交互，还有SourceReader的实例，在这个类里去创建reader并进行实际的读取。\n再来看下其他的方法：\n初始化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @Override public void init() throws Exception { this.splitSerializer = sourceAction.getSource().getSplitSerializer(); this.reader = sourceAction .getSource() .createReader( new SourceReaderContext( indexID, sourceAction.getSource().getBoundedness(), this, metricsContext, eventListener)); this.enumeratorTaskAddress = getEnumeratorTaskAddress(); } 初始化时会去创建reader实例，创建时会将自身作为参数设置到context中。还要去获取切分任务的地址，后续的通信需要这个地址。\ncollect方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 public void collect() throws Exception { if (!prepareClose) { if (schemaChanging()) { log.debug(\u0026#34;schema is changing, stop reader collect records\u0026#34;); Thread.sleep(200); return; } reader.pollNext(collector); if (collector.isEmptyThisPollNext()) { Thread.sleep(100); } else { collector.resetEmptyThisPollNext(); Thread.sleep(0L); } if (collector.captureSchemaChangeBeforeCheckpointSignal()) { if (schemaChangePhase.get() != null) { throw new IllegalStateException( \u0026#34;previous schema changes in progress, schemaChangePhase: \u0026#34; + schemaChangePhase.get()); } schemaChangePhase.set(SchemaChangePhase.createBeforePhase()); runningTask.triggerSchemaChangeBeforeCheckpoint().get(); log.info(\u0026#34;triggered schema-change-before checkpoint, stopping collect data\u0026#34;); } else if (collector.captureSchemaChangeAfterCheckpointSignal()) { if (schemaChangePhase.get() != null) { throw new IllegalStateException( \u0026#34;previous schema changes in progress, schemaChangePhase: \u0026#34; + schemaChangePhase.get()); } schemaChangePhase.set(SchemaChangePhase.createAfterPhase()); runningTask.triggerSchemaChangeAfterCheckpoint().get(); log.info(\u0026#34;triggered schema-change-after checkpoint, stopping collect data\u0026#34;); } } else { Thread.sleep(100); } } 当调用collect方法时，会调用reader的pollNext方法来进行真正的数据读取。 当reader的pollNext方法被调用时，reader会真正的从数据源进行读取数据，转换成内部的SeaTunnelRow数据类型，放到collector中。 而这个collector就是我们上面刚刚看的SeaTunnelSourceCollector， 当它接收到一条数据后，又会将数据发送给所有的下游任务。\n一些其他方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 @Override public void open() throws Exception { reader.open(); // 在open方法里，会将自己向enumerator进行注册 register(); } private void register() { try { runningTask .getExecutionContext() .sendToMember( new SourceRegisterOperation( currentTaskLocation, enumeratorTaskLocation), enumeratorTaskAddress) .get(); } catch (InterruptedException | ExecutionException e) { log.warn(\u0026#34;source register failed.\u0026#34;, e); throw new RuntimeException(e); } } @Override public void close() throws IOException { reader.close(); super.close(); } // 当reader读取完全部数据后，会调用此方法 // 此方法会向enumerator发送消息 public void signalNoMoreElement() { // ready close this reader try { this.prepareClose = true; runningTask .getExecutionContext() .sendToMember( new SourceNoMoreElementOperation( currentTaskLocation, enumeratorTaskLocation), enumeratorTaskAddress) .get(); } catch (Exception e) { log.warn(\u0026#34;source close failed {}\u0026#34;, e); throw new RuntimeException(e); } } public void requestSplit() { try { runningTask .getExecutionContext() .sendToMember( new RequestSplitOperation(currentTaskLocation, enumeratorTaskLocation), enumeratorTaskAddress) .get(); } catch (InterruptedException | ExecutionException e) { log.warn(\u0026#34;source request split failed.\u0026#34;, e); throw new RuntimeException(e); } } public void sendSourceEventToEnumerator(SourceEvent sourceEvent) { try { runningTask .getExecutionContext() .sendToMember( new SourceReaderEventOperation( enumeratorTaskLocation, currentTaskLocation, sourceEvent), enumeratorTaskAddress) .get(); } catch (InterruptedException | ExecutionException e) { log.warn(\u0026#34;source request split failed.\u0026#34;, e); throw new RuntimeException(e); } } public void receivedSplits(List\u0026lt;SplitT\u0026gt; splits) { if (splits.isEmpty()) { reader.handleNoMoreSplits(); } else { reader.addSplits(splits); } } TransformFlowLifeCycle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 public class TransformFlowLifeCycle\u0026lt;T\u0026gt; extends ActionFlowLifeCycle implements OneInputFlowLifeCycle\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt; { private final TransformChainAction\u0026lt;T\u0026gt; action; private final List\u0026lt;SeaTunnelTransform\u0026lt;T\u0026gt;\u0026gt; transform; private final Collector\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt; collector; public TransformFlowLifeCycle( TransformChainAction\u0026lt;T\u0026gt; action, SeaTunnelTask runningTask, Collector\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt; collector, CompletableFuture\u0026lt;Void\u0026gt; completableFuture) { super(action, runningTask, completableFuture); this.action = action; this.transform = action.getTransforms(); this.collector = collector; } @Override public void open() throws Exception { super.open(); for (SeaTunnelTransform\u0026lt;T\u0026gt; t : transform) { try { t.open(); } catch (Exception e) { log.error( \u0026#34;Open transform: {} failed, cause: {}\u0026#34;, t.getPluginName(), e.getMessage(), e); } } } @Override public void received(Record\u0026lt;?\u0026gt; record) { if (record.getData() instanceof Barrier) { CheckpointBarrier barrier = (CheckpointBarrier) record.getData(); if (barrier.prepareClose(this.runningTask.getTaskLocation())) { prepareClose = true; } if (barrier.snapshot()) { runningTask.addState(barrier, ActionStateKey.of(action), Collections.emptyList()); } // ack after #addState runningTask.ack(barrier); collector.collect(record); } else { if (prepareClose) { return; } T inputData = (T) record.getData(); T outputData = inputData; for (SeaTunnelTransform\u0026lt;T\u0026gt; t : transform) { outputData = t.map(inputData); log.debug(\u0026#34;Transform[{}] input row {} and output row {}\u0026#34;, t, inputData, outputData); if (outputData == null) { log.trace(\u0026#34;Transform[{}] filtered data row {}\u0026#34;, t, inputData); break; } inputData = outputData; } if (outputData != null) { // todo log metrics collector.collect(new Record\u0026lt;\u0026gt;(outputData)); } } } ... } 在TransformFlowLifeCycle中，存储了所需要用到的SeaTunnelTransform，当被调用open方法时，会调用具体使用到的transform实现的open方法，由该实现进行相关的一些初始化操作。 当接收到数据后，会调用Transform接口的map方法，对数据进行处理，处理完成后，会判断是否会被过滤掉，如果没有被过滤（数据不为null）则会发送给下游。\nSinkFlowLifeCycle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 public class SinkFlowLifeCycle\u0026lt;T, CommitInfoT extends Serializable, AggregatedCommitInfoT, StateT\u0026gt; extends ActionFlowLifeCycle implements OneInputFlowLifeCycle\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt;, InternalCheckpointListener { private final SinkAction\u0026lt;T, StateT, CommitInfoT, AggregatedCommitInfoT\u0026gt; sinkAction; private SinkWriter\u0026lt;T, CommitInfoT, StateT\u0026gt; writer; private transient Optional\u0026lt;Serializer\u0026lt;CommitInfoT\u0026gt;\u0026gt; commitInfoSerializer; private transient Optional\u0026lt;Serializer\u0026lt;StateT\u0026gt;\u0026gt; writerStateSerializer; private final int indexID; private final TaskLocation taskLocation; private Address committerTaskAddress; private final TaskLocation committerTaskLocation; private Optional\u0026lt;SinkCommitter\u0026lt;CommitInfoT\u0026gt;\u0026gt; committer; private Optional\u0026lt;CommitInfoT\u0026gt; lastCommitInfo; private MetricsContext metricsContext; private Counter sinkWriteCount; private Map\u0026lt;String, Counter\u0026gt; sinkWriteCountPerTable = new ConcurrentHashMap\u0026lt;\u0026gt;(); private Meter sinkWriteQPS; private Counter sinkWriteBytes; private Meter sinkWriteBytesPerSeconds; private final boolean containAggCommitter; private MultiTableResourceManager resourceManager; private EventListener eventListener; public SinkFlowLifeCycle( SinkAction\u0026lt;T, StateT, CommitInfoT, AggregatedCommitInfoT\u0026gt; sinkAction, TaskLocation taskLocation, int indexID, SeaTunnelTask runningTask, TaskLocation committerTaskLocation, boolean containAggCommitter, CompletableFuture\u0026lt;Void\u0026gt; completableFuture, MetricsContext metricsContext) { super(sinkAction, runningTask, completableFuture); this.sinkAction = sinkAction; this.indexID = indexID; this.taskLocation = taskLocation; this.committerTaskLocation = committerTaskLocation; this.containAggCommitter = containAggCommitter; this.metricsContext = metricsContext; this.eventListener = new JobEventListener(taskLocation, runningTask.getExecutionContext()); sinkWriteCount = metricsContext.counter(SINK_WRITE_COUNT); sinkWriteQPS = metricsContext.meter(SINK_WRITE_QPS); sinkWriteBytes = metricsContext.counter(SINK_WRITE_BYTES); sinkWriteBytesPerSeconds = metricsContext.meter(SINK_WRITE_BYTES_PER_SECONDS); if (sinkAction.getSink() instanceof MultiTableSink) { List\u0026lt;TablePath\u0026gt; sinkTables = ((MultiTableSink) sinkAction.getSink()).getSinkTables(); sinkTables.forEach( tablePath -\u0026gt; sinkWriteCountPerTable.put( getFullName(tablePath), metricsContext.counter( SINK_WRITE_COUNT + \u0026#34;#\u0026#34; + getFullName(tablePath)))); } } ... } 与SourceFlowLifeCycle类似，这个SinkFlowLifeCycle中维护了SinkWriter的实例，当接收到一条数据后，会交给writer的具体实现来进行真正的数据写入。 同时在这个类中维护了一些指标数据，会进行写入数据，每个表写入数据等指标的统计。\n接下来看下其他的一些方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 @Override public void init() throws Exception { this.commitInfoSerializer = sinkAction.getSink().getCommitInfoSerializer(); this.writerStateSerializer = sinkAction.getSink().getWriterStateSerializer(); this.committer = sinkAction.getSink().createCommitter(); this.lastCommitInfo = Optional.empty(); } @Override public void open() throws Exception { super.open(); if (containAggCommitter) { committerTaskAddress = getCommitterTaskAddress(); } registerCommitter(); } private void registerCommitter() { if (containAggCommitter) { runningTask .getExecutionContext() .sendToMember( new SinkRegisterOperation(taskLocation, committerTaskLocation), committerTaskAddress) .join(); } } 在初始化方法中，会创建committer，通过API可以知道，committer并不是一定需要的，所以这里的值也有可能为空，在open方法中当存在committer时，会获取地址然后进行注册。\n这里有一点与SourceFlowLifeCycle不同的点是, SourceReader的创建是在init方法中去创建的\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @Override public void init() throws Exception { this.splitSerializer = sourceAction.getSource().getSplitSerializer(); this.reader = sourceAction .getSource() .createReader( new SourceReaderContext( indexID, sourceAction.getSource().getBoundedness(), this, metricsContext, eventListener)); this.enumeratorTaskAddress = getEnumeratorTaskAddress(); } 但是在这里SinkWriter的创建并没有在这里去创建。查看代码之后发现是在restoreState这个方法中进行创建的\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public void restoreState(List\u0026lt;ActionSubtaskState\u0026gt; actionStateList) throws Exception { List\u0026lt;StateT\u0026gt; states = new ArrayList\u0026lt;\u0026gt;(); if (writerStateSerializer.isPresent()) { states = actionStateList.stream() .map(ActionSubtaskState::getState) .flatMap(Collection::stream) .filter(Objects::nonNull) .map( bytes -\u0026gt; sneaky( () -\u0026gt; writerStateSerializer .get() .deserialize(bytes))) .collect(Collectors.toList()); } if (states.isEmpty()) { this.writer = sinkAction .getSink() .createWriter( new SinkWriterContext(indexID, metricsContext, eventListener)); } else { this.writer = sinkAction .getSink() .restoreWriter( new SinkWriterContext(indexID, metricsContext, eventListener), states); } if (this.writer instanceof SupportResourceShare) { resourceManager = ((SupportResourceShare) this.writer).initMultiTableResourceManager(1, 1); ((SupportResourceShare) this.writer).setMultiTableResourceManager(resourceManager, 0); } } 至于这个方法什么时候会被调用，会在下面任务状态转换的时候在介绍。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 public void received(Record\u0026lt;?\u0026gt; record) { try { if (record.getData() instanceof Barrier) { long startTime = System.currentTimeMillis(); Barrier barrier = (Barrier) record.getData(); if (barrier.prepareClose(this.taskLocation)) { prepareClose = true; } if (barrier.snapshot()) { try { lastCommitInfo = writer.prepareCommit(); } catch (Exception e) { writer.abortPrepare(); throw e; } List\u0026lt;StateT\u0026gt; states = writer.snapshotState(barrier.getId()); if (!writerStateSerializer.isPresent()) { runningTask.addState( barrier, ActionStateKey.of(sinkAction), Collections.emptyList()); } else { runningTask.addState( barrier, ActionStateKey.of(sinkAction), serializeStates(writerStateSerializer.get(), states)); } if (containAggCommitter) { CommitInfoT commitInfoT = null; if (lastCommitInfo.isPresent()) { commitInfoT = lastCommitInfo.get(); } runningTask .getExecutionContext() .sendToMember( new SinkPrepareCommitOperation\u0026lt;CommitInfoT\u0026gt;( barrier, committerTaskLocation, commitInfoSerializer.isPresent() ? commitInfoSerializer .get() .serialize(commitInfoT) : null), committerTaskAddress) .join(); } } else { if (containAggCommitter) { runningTask .getExecutionContext() .sendToMember( new BarrierFlowOperation(barrier, committerTaskLocation), committerTaskAddress) .join(); } } runningTask.ack(barrier); log.debug( \u0026#34;trigger barrier [{}] finished, cost {}ms. taskLocation [{}]\u0026#34;, barrier.getId(), System.currentTimeMillis() - startTime, taskLocation); } else if (record.getData() instanceof SchemaChangeEvent) { if (prepareClose) { return; } SchemaChangeEvent event = (SchemaChangeEvent) record.getData(); writer.applySchemaChange(event); } else { if (prepareClose) { return; } writer.write((T) record.getData()); sinkWriteCount.inc(); sinkWriteQPS.markEvent(); if (record.getData() instanceof SeaTunnelRow) { long size = ((SeaTunnelRow) record.getData()).getBytesSize(); sinkWriteBytes.inc(size); sinkWriteBytesPerSeconds.markEvent(size); String tableId = ((SeaTunnelRow) record.getData()).getTableId(); if (StringUtils.isNotBlank(tableId)) { String tableName = getFullName(TablePath.of(tableId)); Counter sinkTableCounter = sinkWriteCountPerTable.get(tableName); if (Objects.nonNull(sinkTableCounter)) { sinkTableCounter.inc(); } else { Counter counter = metricsContext.counter(SINK_WRITE_COUNT + \u0026#34;#\u0026#34; + tableName); counter.inc(); sinkWriteCountPerTable.put(tableName, counter); } } } } } catch (Exception e) { throw new RuntimeException(e); } } 在接收数据的方法中，会对数据进行一些判断，会进行这几种类型的判断\n是否是snapshot 当触发snapshot时，会产生预提交信息，这个信息后面会在提交时使用 以及调用writer的snapshot方法，将现在的状态进行存储，从而在后面恢复时可以根据当前状态进行恢复。 然后再判断是否有committer的存在，如果有，则向其发送消息，让其根据刚刚产生的commit信息进行预提交。 是否是表结构变更的事件 当接收到表结构变更事件，也直接调用writer的相关方法，交由writer去实现 其他情况下 调用writer.writer()方法，进行真正的数据写入。并进行一些数据统计。 这个地方只是将数据交给了具体的writer实现，至于writer有没有实时的将数据写入到具体的存储里面，也是根据连接器的实现来决定，有些连接器可能为了性能考虑会将数据进行攒批或者其他策略来进行发送写入，那么这里的调用与真正的数据写入还是会有一定的延迟的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 @Override public void notifyCheckpointComplete(long checkpointId) throws Exception { if (committer.isPresent() \u0026amp;\u0026amp; lastCommitInfo.isPresent()) { committer.get().commit(Collections.singletonList(lastCommitInfo.get())); } } @Override public void notifyCheckpointAborted(long checkpointId) throws Exception { if (committer.isPresent() \u0026amp;\u0026amp; lastCommitInfo.isPresent()) { committer.get().abort(Collections.singletonList(lastCommitInfo.get())); } } 这两个方法是checkpoint的成功与失败的方法，当成功时，如果committer存在，则进行真正的提交操作。否则则回滚这次提交。\nIntermediateQueueFlowLifeCycle 在生成任务时, 会在任务之间添加IntermediateExecutionFlow来进行切分. 一个IntermediateExecutionFlow的Flow, 在生成lifeCycle阶段, 会生成一个IntermediateQueueFlowLifeCycle\n1 2 3 4 5 6 7 8 9 10 11 else if (flow instanceof IntermediateExecutionFlow) { IntermediateQueueConfig config = ((IntermediateExecutionFlow\u0026lt;IntermediateQueueConfig\u0026gt;) flow).getConfig(); lifeCycle = new IntermediateQueueFlowLifeCycle( this, completableFuture, ((AbstractTaskGroupWithIntermediateQueue) taskBelongGroup) .getQueueCache(config.getQueueID())); outputs = flowLifeCycles; } 来看一下IntermediateQueueFlowLifeCycle的代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 public class IntermediateQueueFlowLifeCycle\u0026lt;T extends AbstractIntermediateQueue\u0026lt;?\u0026gt;\u0026gt; extends AbstractFlowLifeCycle implements OneInputFlowLifeCycle\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt;, OneOutputFlowLifeCycle\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt; { private final AbstractIntermediateQueue\u0026lt;?\u0026gt; queue; public IntermediateQueueFlowLifeCycle( SeaTunnelTask runningTask, CompletableFuture\u0026lt;Void\u0026gt; completableFuture, AbstractIntermediateQueue\u0026lt;?\u0026gt; queue) { super(runningTask, completableFuture); this.queue = queue; queue.setIntermediateQueueFlowLifeCycle(this); queue.setRunningTask(runningTask); } @Override public void received(Record\u0026lt;?\u0026gt; record) { queue.received(record); } @Override public void collect(Collector\u0026lt;Record\u0026lt;?\u0026gt;\u0026gt; collector) throws Exception { queue.collect(collector); } @Override public void close() throws IOException { queue.close(); super.close(); } } 在这个里面有一个成员变量AbstractIntermediateQueue, 在初始化时会传递过来, 当被调用received或collect时, 都会调用AbstractIntermediateQueue的相应方法.\n状态切换 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 protected void stateProcess() throws Exception { switch (currState) { // 当调用init方法时，都会将任务的状态置为INIT case INIT: // 切换为WAITING_RESTORE currState = WAITING_RESTORE; // 报告任务的状态为WAITING_RESTORE reportTaskStatus(WAITING_RESTORE); break; case WAITING_RESTORE: // 当init方法执行结束后，会对所有的下游任务调用open方法 if (restoreComplete.isDone()) { for (FlowLifeCycle cycle : allCycles) { cycle.open(); } // 切换为READY_START,并且上报更新状态 currState = READY_START; reportTaskStatus(READY_START); } else { Thread.sleep(100); } break; case READY_START: if (startCalled) { currState = STARTING; } else { Thread.sleep(100); } break; case STARTING: currState = RUNNING; break; case RUNNING: // 在RUNNING状态会调用collect方法 // 这个方法在SourceTask中会调用reader.pollNext方法，从而开始真正的数据读取，读取完成后会发送到SeaTunnelSourceCollector中，在SeaTunnelSourceCollector中接收到一条数据后，又会将数据发送给所有的下游任务 // 在TransformTask中，会调用transform的map方法，进行数据转换，转换完成后，将数据发送给SeaTunnelTransformCollector，同样在SeaTunnelTransformCollector中也会将数据发送给所有的下游 collect(); if (prepareCloseStatus) { currState = PREPARE_CLOSE; } break; case PREPARE_CLOSE: if (closeCalled) { currState = CLOSED; } else { Thread.sleep(100); } break; case CLOSED: this.close(); progress.done(); return; // TODO support cancel by outside case CANCELLING: this.close(); currState = CANCELED; progress.done(); return; default: throw new IllegalArgumentException(\u0026#34;Unknown Enumerator State: \u0026#34; + currState); } } Collector 在API的章节, 有描述Collector的功能, 是在单进程内多个线程间的数据管道. 在任务拆分阶段, 会将sink单独拆离出来, 通过IntermediateExecutionFlow进行关联. 而source和transform则是放到了一起. 也就是说这里涉及到的数据传递涉及到的节点是sink和它的上游任务. 在IntermediateQueueFlowLifeCycle中, 有一个AbstractIntermediateQueue队列变量, 多个线程之间通过这个队列来实现生产者/消费者的消费模型来进行数据传递. AbstractIntermediateQueue有两个实现类:\nIntermediateBlockingQueue IntermediateDisruptor 它们两个的区别是消息队列的实现有所不同, IntermediateBlockingQueue是默认的实现, 是通过ArrayBlockingQueue来实现的. 而IntermediateDisruptor则是通过Disruptor来实现的, 如果需要开启此功能, 需要在seatunnel.yaml中修改配置项engine.queue-type=DISRUPTOR来开启. 其实在代码中也有一些关于Shuffle的实现, 它实现的数据传递是基于hazelcast的IQueue队列来实现的, 可以实现跨进程的数据传递, 但是这一部分请教了社区的大佬之后, 说这一部分后续也废弃了.\nTaskExecution 在上面分析了一个任务的执行过程，这个章节会记录一下，一个具体的任务/Task/Class，是如何被运行起来的。\nTaskExecutionService 在Zeta引擎启动后，在服务端会启动一个TaskExecutionService服务，这个服务内会有一个缓存线程池来执行任务。 在PhysicalVertex的状态切换中，当状态为DEPLOYING时，\n1 2 3 4 5 6 7 8 9 10 case DEPLOYING: TaskDeployState deployState = deploy(jobMaster.getOwnedSlotProfiles(taskGroupLocation)); if (!deployState.isSuccess()) { makeTaskGroupFailing( new TaskGroupDeployException(deployState.getThrowableMsg())); } else { updateTaskState(ExecutionState.RUNNING); } break; 会将作业进行部署，部署到之前所申请到的worker节点上。 这个类里有这样一个方法来生成TaskGroupImmutableInformation\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public TaskGroupImmutableInformation getTaskGroupImmutableInformation() { List\u0026lt;Data\u0026gt; tasksData = this.taskGroup.getTasks().stream() .map(task -\u0026gt; (Data) nodeEngine.getSerializationService().toData(task)) .collect(Collectors.toList()); return new TaskGroupImmutableInformation( this.taskGroup.getTaskGroupLocation().getJobId(), flakeIdGenerator.newId(), this.taskGroup.getTaskGroupType(), this.taskGroup.getTaskGroupLocation(), this.taskGroup.getTaskGroupName(), tasksData, this.pluginJarsUrls, this.connectorJarIdentifiers); } 这里可以看出，会将当前节点上的所有任务进行序列化，然后设置相应的字段值。 生成这个信息后，会进行网络调用，将这个信息发送给具体的Worker上。 从这个地方也可以得知，一个TaskGroup内的所有任务都会被分发到同一个节点上运行.\n而Worker接收到这个信息后，会调用TaskExecutionService的deployTask(@NonNull Data taskImmutableInformation)方法。这个方法内会进行网络传输数据的反序列化，之后再调用TaskDeployState deployTask(@NonNull TaskGroupImmutableInformation taskImmutableInfo)\n我们来具体看下这个方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 public TaskDeployState deployTask(@NonNull TaskGroupImmutableInformation taskImmutableInfo) { logger.info( String.format( \u0026#34;received deploying task executionId [%s]\u0026#34;, taskImmutableInfo.getExecutionId())); TaskGroup taskGroup = null; try { List\u0026lt;Set\u0026lt;ConnectorJarIdentifier\u0026gt;\u0026gt; connectorJarIdentifiersList = taskImmutableInfo.getConnectorJarIdentifiers(); List\u0026lt;Data\u0026gt; taskData = taskImmutableInfo.getTasksData(); ConcurrentHashMap\u0026lt;Long, ClassLoader\u0026gt; classLoaders = new ConcurrentHashMap\u0026lt;\u0026gt;(); List\u0026lt;Task\u0026gt; tasks = new ArrayList\u0026lt;\u0026gt;(); ConcurrentHashMap\u0026lt;Long, Collection\u0026lt;URL\u0026gt;\u0026gt; taskJars = new ConcurrentHashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; taskData.size(); i++) { Set\u0026lt;URL\u0026gt; jars = new HashSet\u0026lt;\u0026gt;(); Set\u0026lt;ConnectorJarIdentifier\u0026gt; connectorJarIdentifiers = connectorJarIdentifiersList.get(i); if (!CollectionUtils.isEmpty(connectorJarIdentifiers)) { jars = serverConnectorPackageClient.getConnectorJarFromLocal( connectorJarIdentifiers); } else if (!CollectionUtils.isEmpty(taskImmutableInfo.getJars().get(i))) { jars = taskImmutableInfo.getJars().get(i); } ClassLoader classLoader = classLoaderService.getClassLoader( taskImmutableInfo.getJobId(), Lists.newArrayList(jars)); Task task; if (jars.isEmpty()) { task = nodeEngine.getSerializationService().toObject(taskData.get(i)); } else { task = CustomClassLoadedObject.deserializeWithCustomClassLoader( nodeEngine.getSerializationService(), classLoader, taskData.get(i)); } tasks.add(task); classLoaders.put(task.getTaskID(), classLoader); taskJars.put(task.getTaskID(), jars); } taskGroup = TaskGroupUtils.createTaskGroup( taskImmutableInfo.getTaskGroupType(), taskImmutableInfo.getTaskGroupLocation(), taskImmutableInfo.getTaskGroupName(), tasks); logger.info( String.format( \u0026#34;deploying task %s, executionId [%s]\u0026#34;, taskGroup.getTaskGroupLocation(), taskImmutableInfo.getExecutionId())); // 上面获取一些信息后重新构建taskGroup synchronized (this) { // 首先会判断当前是否已经运行了该任务，如果已经运行过则不再提交任务 // 同时这里也对当前实例添加了全局锁，避免同时调用的问题 if (executionContexts.containsKey(taskGroup.getTaskGroupLocation())) { throw new RuntimeException( String.format( \u0026#34;TaskGroupLocation: %s already exists\u0026#34;, taskGroup.getTaskGroupLocation())); } // 没有运行过当前任务则进行提交 deployLocalTask(taskGroup, classLoaders, taskJars); return TaskDeployState.success(); } } catch (Throwable t) { ... return TaskDeployState.failed(t); } } 这个方法内会根据TaskGroupImmutableInformation信息来重新构建TaskGroup，然后调用deployLocalTask()进行部署任务。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 public PassiveCompletableFuture\u0026lt;TaskExecutionState\u0026gt; deployLocalTask( @NonNull TaskGroup taskGroup, @NonNull ConcurrentHashMap\u0026lt;Long, ClassLoader\u0026gt; classLoaders, ConcurrentHashMap\u0026lt;Long, Collection\u0026lt;URL\u0026gt;\u0026gt; jars) { CompletableFuture\u0026lt;TaskExecutionState\u0026gt; resultFuture = new CompletableFuture\u0026lt;\u0026gt;(); try { // 初始化操作 taskGroup.init(); logger.info( String.format( \u0026#34;deploying TaskGroup %s init success\u0026#34;, taskGroup.getTaskGroupLocation())); // 获取到当前任务组中的所有任务 Collection\u0026lt;Task\u0026gt; tasks = taskGroup.getTasks(); CompletableFuture\u0026lt;Void\u0026gt; cancellationFuture = new CompletableFuture\u0026lt;\u0026gt;(); TaskGroupExecutionTracker executionTracker = new TaskGroupExecutionTracker(cancellationFuture, taskGroup, resultFuture); ConcurrentMap\u0026lt;Long, TaskExecutionContext\u0026gt; taskExecutionContextMap = new ConcurrentHashMap\u0026lt;\u0026gt;(); final Map\u0026lt;Boolean, List\u0026lt;Task\u0026gt;\u0026gt; byCooperation = tasks.stream() .peek( // 设置context信息 task -\u0026gt; { TaskExecutionContext taskExecutionContext = new TaskExecutionContext(task, nodeEngine, this); task.setTaskExecutionContext(taskExecutionContext); taskExecutionContextMap.put( task.getTaskID(), taskExecutionContext); }) .collect( // 会根据是否需要线程共享来进行分组 // 目前默认是不共享的，也就是全部都会是false partitioningBy( t -\u0026gt; { ThreadShareMode mode = seaTunnelConfig .getEngineConfig() .getTaskExecutionThreadShareMode(); if (mode.equals(ThreadShareMode.ALL)) { return true; } if (mode.equals(ThreadShareMode.OFF)) { return false; } if (mode.equals(ThreadShareMode.PART)) { return t.isThreadsShare(); } return true; })); executionContexts.put( taskGroup.getTaskGroupLocation(), new TaskGroupContext(taskGroup, classLoaders, jars)); cancellationFutures.put(taskGroup.getTaskGroupLocation(), cancellationFuture); // 这里全部是空，如果用户修改了，这里会找出来需要线程共享的任务 submitThreadShareTask(executionTracker, byCooperation.get(true)); // 提交任务 submitBlockingTask(executionTracker, byCooperation.get(false)); taskGroup.setTasksContext(taskExecutionContextMap); // 打印成功的日志 logger.info( String.format( \u0026#34;deploying TaskGroup %s success\u0026#34;, taskGroup.getTaskGroupLocation())); } catch (Throwable t) { logger.severe(ExceptionUtils.getMessage(t)); resultFuture.completeExceptionally(t); } resultFuture.whenCompleteAsync( withTryCatch( logger, (r, s) -\u0026gt; { if (s != null) { logger.severe( String.format( \u0026#34;Task %s complete with error %s\u0026#34;, taskGroup.getTaskGroupLocation(), ExceptionUtils.getMessage(s))); } if (r == null) { r = new TaskExecutionState( taskGroup.getTaskGroupLocation(), ExecutionState.FAILED, s); } logger.info( String.format( \u0026#34;Task %s complete with state %s\u0026#34;, r.getTaskGroupLocation(), r.getExecutionState())); // 报告部署的状态给master notifyTaskStatusToMaster(taskGroup.getTaskGroupLocation(), r); }), MDCTracer.tracing(executorService)); return new PassiveCompletableFuture\u0026lt;\u0026gt;(resultFuture); } submitBlockingTask 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 private void submitBlockingTask( TaskGroupExecutionTracker taskGroupExecutionTracker, List\u0026lt;Task\u0026gt; tasks) { MDCExecutorService mdcExecutorService = MDCTracer.tracing(executorService); CountDownLatch startedLatch = new CountDownLatch(tasks.size()); taskGroupExecutionTracker.blockingFutures = tasks.stream() .map( t -\u0026gt; new BlockingWorker( new TaskTracker(t, taskGroupExecutionTracker), startedLatch)) .map( r -\u0026gt; new NamedTaskWrapper( r, \u0026#34;BlockingWorker-\u0026#34; + taskGroupExecutionTracker.taskGroup .getTaskGroupLocation())) .map(mdcExecutorService::submit) .collect(toList()); // Do not return from this method until all workers have started. Otherwise, // on cancellation there is a race where the executor might not have started // the worker yet. This would result in taskletDone() never being called for // a worker. uncheckRun(startedLatch::await); } 这里的MDCExecutorService是ExecutorService实现，BlockWorking是Runnable的实现。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 private final class BlockingWorker implements Runnable { private final TaskTracker tracker; private final CountDownLatch startedLatch; private BlockingWorker(TaskTracker tracker, CountDownLatch startedLatch) { this.tracker = tracker; this.startedLatch = startedLatch; } @Override public void run() { TaskExecutionService.TaskGroupExecutionTracker taskGroupExecutionTracker = tracker.taskGroupExecutionTracker; ClassLoader classLoader = executionContexts .get(taskGroupExecutionTracker.taskGroup.getTaskGroupLocation()) .getClassLoaders() .get(tracker.task.getTaskID()); ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader(); Thread.currentThread().setContextClassLoader(classLoader); // 获取到SeaTunnel的Task final Task t = tracker.task; ProgressState result = null; try { startedLatch.countDown(); // 调用Task的init方法 t.init(); do { // 循环调用 call()方法 result = t.call(); } while (!result.isDone() \u0026amp;\u0026amp; isRunning \u0026amp;\u0026amp; !taskGroupExecutionTracker.executionCompletedExceptionally()); } catch (InterruptedException e) { logger.warning(String.format(\u0026#34;Interrupted task %d - %s\u0026#34;, t.getTaskID(), t)); if (taskGroupExecutionTracker.executionException.get() == null \u0026amp;\u0026amp; !taskGroupExecutionTracker.isCancel.get()) { taskGroupExecutionTracker.exception(e); } } catch (Throwable e) { logger.warning(\u0026#34;Exception in \u0026#34; + t, e); taskGroupExecutionTracker.exception(e); } finally { taskGroupExecutionTracker.taskDone(t); if (result == null || !result.isDone()) { try { tracker.task.close(); } catch (IOException e) { logger.severe(\u0026#34;Close task error\u0026#34;, e); } } } Thread.currentThread().setContextClassLoader(oldClassLoader); } } 从这几部分代码可以看出，每一个Task都会作为一个单独的线程任务，被放到Worker的newCachedThreadPool线程池中来进行运行。\n我们如果将上面的任务放大来看，将每个线程所做的任务以及任务之间的通信也画出来，大致是这样 如果将上面的图缩小看一下，仅关注数据的传输过程，大致是这样\n参考 https://github.com/apache/seatunnel/issues/2272 本文是对SeaTunnel Zeta引擎的解析，这个pr中记录了当时Zeta引擎的一些设计文档，强烈推荐阅读下相关的pr及设计文档 ","permalink":"https://www.liunaijie.top/publish/seatunnel%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E4%B8%89zeta%E5%BC%95%E6%93%8E%E6%89%A7%E8%A1%8C%E8%A7%A3%E6%9E%90/","summary":"\u003ch1 id=\"这篇文章会聊些什么\"\u003e这篇文章会聊些什么\u003c/h1\u003e\n\u003cp\u003eSeaTunnel作为一款数据集成工具, 那么它最终的目的是来做数据同步的, 可以将数据从某个存储同步到另外一个存储中.\n但是这篇文档并不会聊它使用层面的事情, 而是去聊一下这个工具/框架的设计, 任务的执行等.对于某个连接器(数据库)的实现不会深入的了解.\n基于的源码版本: \u003ccode\u003e2.3.6-release\u003c/code\u003e\u003c/p\u003e\n\u003ch1 id=\"任务是如何被执行的\"\u003e任务是如何被执行的\u003c/h1\u003e\n\u003cp\u003e在我的另外一篇文章\u003ca href=\"2.Zeta%E5%BC%95%E6%93%8E%E6%BA%90%E7%A0%81%E8%AE%B2%E8%A7%A3.md\"\u003e2.Zeta引擎源码讲解\u003c/a\u003e中有一些关于Zeta引擎的分析, 聊了一下Zeta引擎的客户端, 服务端都会做一些什么事情, 也笼统的带了一点任务执行的内容, 想了解相关内容的朋友可以去看一下.\n在下面的内容, 则主要是记录一下在SeaTunnel中, 一个任务是如何与连接器中的各种类进行关联的.\u003c/p\u003e\n\u003cp\u003e要聊任务与连接器的关联, 就要回到物理计划生成的这一部分(\u003ccode\u003ePhysicalPlanGenerator#generate()\u003c/code\u003e).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eStream\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSubPlan\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esubPlanStream\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003epipelines\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estream\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                        \u003c/span\u003e\u003cspan class=\"n\"\u003epipeline\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epipelineTasks\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclear\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estartingTasks\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclear\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esubtaskActions\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclear\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epipelineId\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epipeline\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetId\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eExecutionEdge\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eedges\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epipeline\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetEdges\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSourceAction\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e?\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esources\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efindSourceAction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eedges\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ePhysicalVertex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecoordinatorVertexList\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"n\"\u003egetEnumeratorTask\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                            \u003c/span\u003e\u003cspan class=\"n\"\u003esources\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epipelineId\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etotalPipelineNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"n\"\u003ecoordinatorVertexList\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eaddAll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"n\"\u003egetCommitterTask\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eedges\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epipelineId\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etotalPipelineNum\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ePhysicalVertex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ephysicalVertexList\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"n\"\u003egetSourceTask\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                            \u003c/span\u003e\u003cspan class=\"n\"\u003eedges\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esources\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epipelineId\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etotalPipelineNum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"n\"\u003ephysicalVertexList\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eaddAll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"n\"\u003egetShuffleTask\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eedges\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epipelineId\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etotalPipelineNum\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"n\"\u003eCompletableFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ePipelineStatus\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epipelineFuture\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eCompletableFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"n\"\u003ewaitForCompleteBySubPlanList\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ePassiveCompletableFuture\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epipelineFuture\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"n\"\u003echeckpointPlans\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eput\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"n\"\u003epipelineId\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"n\"\u003eCheckpointPlan\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ebuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                            \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epipelineId\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epipelineId\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                            \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epipelineSubtasks\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epipelineTasks\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                            \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estartingSubtasks\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estartingTasks\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                            \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epipelineActions\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epipeline\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetActions\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                            \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esubtaskActions\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esubtaskActions\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                            \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                            \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSubPlan\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"n\"\u003epipelineId\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"n\"\u003etotalPipelineNum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"n\"\u003einitializationTimestamp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"n\"\u003ephysicalVertexList\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"n\"\u003ecoordinatorVertexList\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"n\"\u003ejobImmutableInformation\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"n\"\u003eexecutorService\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"n\"\u003erunningJobStateIMap\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"n\"\u003erunningJobStateTimestampsIMap\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                                    \u003c/span\u003e\u003cspan class=\"n\"\u003etagFilter\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                        \u003c/span\u003e\u003cspan class=\"p\"\u003e});\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e这是将执行计划转换为物理计划时的相关代码，里面有这样4行代码。\n生成\u003ccode\u003eEnumeratorTask\u003c/code\u003e, \u003ccode\u003eCommitterTask\u003c/code\u003e将其添加到协调器任务列表中\n生成\u003ccode\u003eSourceTask\u003c/code\u003e，\u003ccode\u003eShuffleTask\u003c/code\u003e将其添加到物理任务列表中。\u003c/p\u003e","title":"SeaTunnel源码解析-(三)Zeta引擎执行解析"},{"content":"从接口定义来看SeaTunnel 从官网的这个图中, 可以看到在SeaTunnel中, 定义了\nSource Transform Sink 三种类型/算子 所以我想先从接口的定义上来看下SeaTunnel的设计理念.\nSeaTunnelSource SeaTunnelSource是数据读取的接口定义, 在这个接口中, 定义了如何从某个数据源中抽取数据.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 public interface SeaTunnelSource\u0026lt;T, SplitT extends SourceSplit, StateT extends Serializable\u0026gt; extends Serializable, PluginIdentifierInterface, SeaTunnelPluginLifeCycle, SeaTunnelJobAware { /** * 返回当前Source的类型，是[有界批数据]还是[无界流数据] */ Boundedness getBoundedness(); /** * 此方法后面将弃用 * 后面将使用Catalog来表示数据，可以添加更多的元数据来描述数据 */ default SeaTunnelDataType\u0026lt;T\u0026gt; getProducedType() { return (SeaTunnelDataType) getProducedCatalogTables().get(0).getSeaTunnelRowType(); } /** * 当前SeaTunnel是支持多表读取的, 所以这里会返回一个list类型的结构 * 每个catalog则是对读取的表的元数据信息 */ default List\u0026lt;CatalogTable\u0026gt; getProducedCatalogTables() { throw new UnsupportedOperationException( \u0026#34;getProducedCatalogTables method has not been implemented.\u0026#34;); } /** * 创建 Reader，Reader是真正去读取数据的类 */ SourceReader\u0026lt;T, SplitT\u0026gt; createReader(SourceReader.Context readerContext) throws Exception; /** * 这两个方法是创建/恢复 SplitEnumerator */ SourceSplitEnumerator\u0026lt;SplitT, StateT\u0026gt; createEnumerator( SourceSplitEnumerator.Context\u0026lt;SplitT\u0026gt; enumeratorContext) throws Exception; SourceSplitEnumerator\u0026lt;SplitT, StateT\u0026gt; restoreEnumerator( SourceSplitEnumerator.Context\u0026lt;SplitT\u0026gt; enumeratorContext, StateT checkpointState) throws Exception; /** * 这两个方法一般不会修改, 如果需要对Enumerator自定义序列化方式可以重写 */ default Serializer\u0026lt;SplitT\u0026gt; getSplitSerializer() { return new DefaultSerializer\u0026lt;\u0026gt;(); } default Serializer\u0026lt;StateT\u0026gt; getEnumeratorStateSerializer() { return new DefaultSerializer\u0026lt;\u0026gt;(); } } 从这个接口中可以看到有两个主要的方法\ncreateReader createEnumerator createEnumerator方法创建的SourceSplitEnumerator作用是对要抽取的数据进行任务拆分. createReader方法创建的SourceReader则会依据这些拆分的任务进行实际的任务读取 首先来看下SourceSplitEnumerator的代码\nSourceSplitEnumerator 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 public interface SourceSplitEnumerator\u0026lt;SplitT extends SourceSplit, StateT\u0026gt; extends AutoCloseable, CheckpointListener { void open(); void run() throws Exception; @Override void close() throws IOException; void addSplitsBack(List\u0026lt;SplitT\u0026gt; splits, int subtaskId); int currentUnassignedSplitSize(); void handleSplitRequest(int subtaskId); void registerReader(int subtaskId); StateT snapshotState(long checkpointId) throws Exception; default void handleSourceEvent(int subtaskId, SourceEvent sourceEvent) {} interface Context\u0026lt;SplitT extends SourceSplit\u0026gt; { int currentParallelism(); Set\u0026lt;Integer\u0026gt; registeredReaders(); void assignSplit(int subtaskId, List\u0026lt;SplitT\u0026gt; splits); default void assignSplit(int subtaskId, SplitT split) { assignSplit(subtaskId, Collections.singletonList(split)); } void signalNoMoreSplits(int subtask); void sendEventToSourceReader(int subtaskId, SourceEvent event); MetricsContext getMetricsContext(); EventListener getEventListener(); } } SourceSplitEnumerator接口中定义了一些方法以及一个内部类Context 先看下自身的一些方法. 可以看到有3个跟生命周期相关的方法，open(), run()和close()。这几个方法就需要连接器自己去根据相关的实现来做一下资源的创建或关闭动作.\nregisterReader(int subtaskId)方法 reader主动向split enumerator进行注册 handleSplitRequest(int subtaskId) reader主动向split enumerator进行请求，获取自己将要执行的抽取任务.\n(但看了代码实现，这种方式比较少，大部分还是enumerator主动向reader推送任务) addSplitsBack(List\u0026lt;SplitT\u0026gt; splits, int subtaskId) 则是当某个reader出现异常后，需要将它运行的任务重新分配，此时需要将它运行的任务重新添加回队列中，后面进行重新分配到其他节点进行容错。 而在Context接口定义中有两个关键方法\nassignSplit(int subtaskId, List\u0026lt;SplitT\u0026gt; splits) split enumerator主动向某个reader推送任务 signalNoMoreSplits(int subtaskId) split enumerator告诉某个reader，它后面将不会再有其他任务被分配。 SourceReader 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public interface SourceReader\u0026lt;T, SplitT extends SourceSplit\u0026gt; extends AutoCloseable, CheckpointListener { void open() throws Exception; @Override void close() throws IOException; void pollNext(Collector\u0026lt;T\u0026gt; output) throws Exception; List\u0026lt;SplitT\u0026gt; snapshotState(long checkpointId) throws Exception; void addSplits(List\u0026lt;SplitT\u0026gt; splits); void handleNoMoreSplits(); default void handleSourceEvent(SourceEvent sourceEvent) {} interface Context { int getIndexOfSubtask(); Boundedness getBoundedness(); void signalNoMoreElement(); void sendSplitRequest(); void sendSourceEventToEnumerator(SourceEvent sourceEvent); MetricsContext getMetricsContext(); EventListener getEventListener(); } } 在Reader接口定义中, 也有一个内部类Context 我们来看下几个主要方法\npollNext(Collector\u0026lt;T\u0026gt; output) 抽取数据的主要方法，在这个方法中每个连接器都会实现从自己相应的数据源中抽取数据，转换成seatunnel的内部数据结构SeaTunnelRow，然后再添加到Collector中 addSplits(List\u0026lt;SplitT\u0026gt; splits) reader接收split enumerator分配给自己的任务后的相关处理 snapshotState(long checkpointId) 这个方法是做checkpoint时会被调用, 需要reader记录一些状态, 从而可以进行后续的容错 用一张图来总结一下 在这里的一个Split表示对数据源数据读取拆分的一个任务，可以是一个Hive表的一个分区，可以是一个Kafka的分区，也可以是JDBC查询语句的拆分，总之核心思想是将一个数据的读取拆分成多个互相不影响的读取任务，从而可以交给不同的reader实例去执行，从而加快查询速度。 举个例子：在批处理下可以将数据拆分为N份, 使得数据抽取可以并行执行, 达到提升速度的目的. 而对于流式处理, 有两种方式, 一个是将数据拆分为有限的无界数据流(例如Kafka根据分区进 行拆分, 一个分区一个任务，每个任务都是无界的数据流). 另外一种方式是生成无限的有界数据流(同样以Kafka为例, 每次抽取某个分区中的一部分数据, 无限次生成任务定义)。 至于一个数据读取任务最终会被切分成多少个Split以及如何实现切分，则是每个连接器的自己实现，每个连接器可以根据实际读取的分区或者参数来决定。\n接下来看下Transform的相关代码\nSeaTunnelTransform 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public interface SeaTunnelTransform\u0026lt;T\u0026gt; extends Serializable, PluginIdentifierInterface, SeaTunnelJobAware { default void open() {} default void setTypeInfo(SeaTunnelDataType\u0026lt;T\u0026gt; inputDataType) { throw new UnsupportedOperationException(\u0026#34;setTypeInfo method is not supported\u0026#34;); } // 获取Transform处理之后的数据结构 CatalogTable getProducedCatalogTable(); // 从这里可以看出，SeaTunnel里面的Transform是仅支持map操作的 // 对于Join这种多个数据源的操作是不支持的 T map(T row); default void close() {} } 在transform中就一个关键的方法T map(T row)，就是对原有的一条数据进行map处理，得到一条新数据。新数据的结构则是与getProducedCatalogTable()一致。\n这个代码是基于2.3.6版本, 目前社区也正在做Transform的多表读取,写入功能 目前仅支持map这种一对一的算子, 我看社区也在讨论是否支持flatMap这种一对多的算子, 从而可以在同步过程中进行一些数据展开的操作.\n再来看下Sink的代码\nSeaTunnelSink 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 public interface SeaTunnelSink\u0026lt;IN, StateT, CommitInfoT, AggregatedCommitInfoT\u0026gt; extends Serializable, PluginIdentifierInterface, SeaTunnelPluginLifeCycle, SeaTunnelJobAware { @Deprecated // 这两个方法也都被标记为废弃, 后续都将使用Catalog来进行表示 default void setTypeInfo(SeaTunnelRowType seaTunnelRowType) { throw new UnsupportedOperationException(\u0026#34;setTypeInfo method is not supported\u0026#34;); } @Deprecated default SeaTunnelDataType\u0026lt;IN\u0026gt; getConsumedType() { throw new UnsupportedOperationException(\u0026#34;getConsumedType method is not supported\u0026#34;); } /** * 创建/恢复 SinkWriter，Writer是真正执行数据写入的类 */ SinkWriter\u0026lt;IN, CommitInfoT, StateT\u0026gt; createWriter(SinkWriter.Context context) throws IOException; default SinkWriter\u0026lt;IN, CommitInfoT, StateT\u0026gt; restoreWriter( SinkWriter.Context context, List\u0026lt;StateT\u0026gt; states) throws IOException { return createWriter(context); } default Optional\u0026lt;Serializer\u0026lt;StateT\u0026gt;\u0026gt; getWriterStateSerializer() { return Optional.empty(); } default Optional\u0026lt;SinkCommitter\u0026lt;CommitInfoT\u0026gt;\u0026gt; createCommitter() throws IOException { return Optional.empty(); } default Optional\u0026lt;Serializer\u0026lt;CommitInfoT\u0026gt;\u0026gt; getCommitInfoSerializer() { return Optional.empty(); } default Optional\u0026lt;SinkAggregatedCommitter\u0026lt;CommitInfoT, AggregatedCommitInfoT\u0026gt;\u0026gt; createAggregatedCommitter() throws IOException { return Optional.empty(); } default Optional\u0026lt;Serializer\u0026lt;AggregatedCommitInfoT\u0026gt;\u0026gt; getAggregatedCommitInfoSerializer() { return Optional.empty(); } } 在Sink中，有几个关键的方法\ncreateWriter(SinkWriter.Context context) 创建Writer实例，与Source类似，数据的实际写入是由Writer来写入 createCommitter() 可选，在需要二阶段提交时，创建一个SinkCommitter，由SinkCommitter来完成二阶段提交, 此方式也不再推荐, 推荐使用createAggregatedCommitter()来进行二阶段提交 createAggregatedCommitter() 可选，与SinkCommitter类似，都是在提交阶段进行二阶段提交使用。 不同的点在于SinkAggregatedCommitter是单一实例去执行，不会存在多实例，将所有的提交任务集中到一个地方执行。所以如果连接器需要二阶段提交, 推荐使用createAggregatedCommitter()来创建 SinkWriter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public interface SinkWriter\u0026lt;T, CommitInfoT, StateT\u0026gt; { void write(T element) throws IOException; default void applySchemaChange(SchemaChangeEvent event) throws IOException {} Optional\u0026lt;CommitInfoT\u0026gt; prepareCommit() throws IOException; default List\u0026lt;StateT\u0026gt; snapshotState(long checkpointId) throws IOException { return Collections.emptyList(); } void abortPrepare(); void close() throws IOException; interface Context extends Serializable { int getIndexOfSubtask(); default int getNumberOfParallelSubtasks() { return 1; } MetricsContext getMetricsContext(); EventListener getEventListener(); } } 可以看到SinkWriter的结构与SourceReader结构有些类似, 来看下一些关键方法\nwrite(T element) 当接收到一条上游数据时, 写入到目标数据库的实现 applySchemaChange(SchemaChangeEvent event) 当上游数据的表结构变动后, 下游如何进行相应的实现, 例如增删字段, 修改字段名称. 但这个跟具体的实现有关. prepareCommit() 当需要二阶段提交时, 生成此次需要提交的信息, 该信息将交给SinkCommitter/SinkAggregatedCommitter来进行二阶段提交. 这个方法的调用, 是在做checkpoint时会被调用, 也就是每次checkpoint时才会提交刚刚产生的信息到目标端连接器. snapshotState() 当做checkpoint时, 存储writer的一些状态, 从而可以进行后续的容错. 用一张图来总结一下 当需要对某个数据源进行读取时，会先由SourceSplitEnumerator来进行任务的切分，再由SourceReader来执行拆分的数据读取任务，读取是需要将原始数据转换为SeaTunnel内部的SeaTunnelRow，然后传递给下游，交由Transform进行数据转换，转换完成后交由SinkWriter实现将SeaTunnelRow的数据写入到相应的连接器中，在写入过程中如果需要二阶段提交，则需要额外实现SinkCommitter的相关类。\nCollector 在上面的几个章节, 已经将source, transform, sink的功能描述了一下. 但source,transform, sink之间的数据传递是如何实现的呢, 如果一个source有多个下游, 消息是如何全部分发给多个下游的呢? 这个地方就是由Collector接口来定义的. 从数据流转的方向上, 仅会有source到下游或者transform到下游传递数据, 所以可以看到有两个Collector的接口定义, 分别在source和transform包下 先来看下source中Collector的定义\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public interface Collector\u0026lt;T\u0026gt; { void collect(T record); default void markSchemaChangeBeforeCheckpoint() {} default void collect(SchemaChangeEvent event) {} default void markSchemaChangeAfterCheckpoint() {} Object getCheckpointLock(); default boolean isEmptyThisPollNext() { return false; } default void resetEmptyThisPollNext() {} } 而transform中的Collector定义就相对简单了\n1 2 3 4 public interface Collector\u0026lt;T\u0026gt; { void collect(T record); void close(); } Collector将多个算子进行解耦, 每个算子仅需关心如何处理数据, 而无需关心结果数据需要发送给谁. 对上面的图再更新一下大致是这样(多加了一个Transform来显示多下游的场景)\n在分布式系统中, 每个任务都使用单独的线程来运行, 那么多个线程之间的数据传递就存在两种情况, 一个是同进程之间的传递, 另外就是跨进程之间的传递也就是Shuffle. 而SeaTunnel的定位是一个数据传输工具, 数据产生之后, 并不需要对数据进行计算, 数据的传输可以仅在进程之间传递. 不需要做shuffle. 从而提升性能以及减少由shuffle带来的其他问题.\n所以在SeaTunnel中, Collector的实现就是实现一个进程内跨线程的数据管道.\n同样, 由于这样的设计, 之前在issue区看到有人想实现多个source并行读取, 单个sink写入的功能也就无法实现了. 如果需要想实现单点写入的功能, 那么就需要连接器实现SinkAggregatedCommitter来进行单点的二阶段提交(至于具体是否是单节点写入, 也需要看连接器的具体实现).\nFactory 在新的设计中，所有连接器都是通过Factory工厂类来进行创建的。\nTableSourceFactory TableTransformFactory TableSinkFactory 他们均实现了Factory接口，而他们本身也是接口，需要各个连接器去具体实现。 里面有这么几个方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 public interface Factory { String factoryIdentifier(); OptionRule optionRule(); } public interface TableSourceFactory extends Factory { default \u0026lt;T, SplitT extends SourceSplit, StateT extends Serializable\u0026gt; TableSource\u0026lt;T, SplitT, StateT\u0026gt; createSource(TableSourceFactoryContext context) { throw new UnsupportedOperationException( \u0026#34;The Factory has not been implemented and the deprecated Plugin will be used.\u0026#34;); } Class\u0026lt;? extends SeaTunnelSource\u0026gt; getSourceClass(); } public interface TableTransformFactory extends Factory { default \u0026lt;T\u0026gt; TableTransform\u0026lt;T\u0026gt; createTransform(TableTransformFactoryContext context) { throw new UnsupportedOperationException( \u0026#34;The Factory has not been implemented and the deprecated Plugin will be used.\u0026#34;); } } public interface TableSinkFactory\u0026lt;IN, StateT, CommitInfoT, AggregatedCommitInfoT\u0026gt; extends Factory { default TableSink\u0026lt;IN, StateT, CommitInfoT, AggregatedCommitInfoT\u0026gt; createSink( TableSinkFactoryContext context) { throw new UnsupportedOperationException( \u0026#34;The Factory has not been implemented and the deprecated Plugin will be used.\u0026#34;); } @Deprecated default List\u0026lt;String\u0026gt; excludeTablePlaceholderReplaceKeys() { return Collections.emptyList(); } } 在这几个接口定义中, 有两个公共方法\nfactoryIdentifier() 进行连接器标识, 每个连接器应该唯一 optionRule() 声明该连接器所需要的参数, 哪些是必填, 哪些是选填, 哪些一起填会存在冲突等等, 在创建连接器时会先对配置参数来进行校验. 当参数验证通过后, 会调用相应的方法来创建相应的连接器SeaTunnelSource/SeaTunnelTransform/SeaTunnelSink\n通过这几个关键API的定义, 我们可以看到, SeaTunnel是将数据同步进行了高度抽象, 并且可以灵活的对各个连接器进行组装, 各个连接器之间是没有依赖的.\n","permalink":"https://www.liunaijie.top/publish/seatunnel%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E4%B8%80seatunnel-api%E8%A7%A3%E6%9E%90/","summary":"\u003ch1 id=\"从接口定义来看seatunnel\"\u003e从接口定义来看SeaTunnel\u003c/h1\u003e\n\u003cp\u003e从官网的这个图中, 可以看到在SeaTunnel中, 定义了\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSource\u003c/li\u003e\n\u003cli\u003eTransform\u003c/li\u003e\n\u003cli\u003eSink\n三种类型/算子\n\u003cimg src=\"https://seatunnel.apache.org/zh-CN/home/introduction2.png\" alt=\"\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以我想先从接口的定义上来看下SeaTunnel的设计理念.\u003c/p\u003e\n\u003ch2 id=\"seatunnelsource\"\u003eSeaTunnelSource\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eSeaTunnelSource\u003c/code\u003e是数据读取的接口定义, 在这个接口中, 定义了如何从某个数据源中抽取数据.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003einterface\u003c/span\u003e \u003cspan class=\"nc\"\u003eSeaTunnelSource\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSplitT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSourceSplit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStateT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSerializable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSerializable\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003ePluginIdentifierInterface\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003eSeaTunnelPluginLifeCycle\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003eSeaTunnelJobAware\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"cm\"\u003e/** \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e    * 返回当前Source的类型，是[有界批数据]还是[无界流数据]  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e    */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eBoundedness\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetBoundedness\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"cm\"\u003e/** \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e    * 此方法后面将弃用\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e    * 后面将使用Catalog来表示数据，可以添加更多的元数据来描述数据\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e    */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSeaTunnelDataType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetProducedType\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSeaTunnelDataType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egetProducedCatalogTables\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"na\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"na\"\u003egetSeaTunnelRowType\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"cm\"\u003e/** \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e    * 当前SeaTunnel是支持多表读取的, 所以这里会返回一个list类型的结构\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e    * 每个catalog则是对读取的表的元数据信息\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e    */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCatalogTable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetProducedCatalogTables\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ethrow\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eUnsupportedOperationException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;getProducedCatalogTables method has not been implemented.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"cm\"\u003e/** \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e    * 创建 Reader，Reader是真正去读取数据的类\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e    */\u003c/span\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSourceReader\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSplitT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ecreateReader\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSourceReader\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eContext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ereaderContext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t* 这两个方法是创建/恢复 SplitEnumerator\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t*/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSourceSplitEnumerator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSplitT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStateT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ecreateEnumerator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eSourceSplitEnumerator\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eContext\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSplitT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eenumeratorContext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSourceSplitEnumerator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSplitT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStateT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003erestoreEnumerator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eSourceSplitEnumerator\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eContext\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSplitT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eenumeratorContext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStateT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003echeckpointState\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t* 这两个方法一般不会修改, 如果需要对Enumerator自定义序列化方式可以重写\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t*/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSerializer\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSplitT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetSplitSerializer\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDefaultSerializer\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSerializer\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eStateT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetEnumeratorStateSerializer\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDefaultSerializer\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e从这个接口中可以看到有两个主要的方法\u003c/p\u003e","title":"SeaTunnel源码解析-(一)SeaTunnel API解析"},{"content":"最近在换工作, 抽个时间把这几年所学的内容整理一下. 接触spark已经3年多的时间, 把之前写的一些文章进行一下综合性的整理.\nSpark是什么 Spark是一套基于内存的分布式大规模数据处理框架, 而我对于spark的应用场景主要是做数据处理, 数据分析. Spark内的数据抽象为弹性分布式数据集(Resilient Distributed Dataset - RDD), 通过这个抽象类来对数据进行描述. 对于数据处理, 数据分析. 我主要通过高层API - DataFrame. DataFrame中添加了对数据集的结构描述, 让我们来更加方便的处理结构化数据.\nSpark的Job提交过程 Spark源码解析-(一)提交流程 我在这篇之前的文章中整理了Spark以Yarn为资源管理器的提交过程. 在此总结一下: 使用策略模式/工厂模式, 根据传递的参数, 来调用不同的调度器实现类, 将程序部署到不同的资源管理器上. 然后通过代理模式调用用户的代码, 对执行逻辑进行分析, 生成最终的执行计划. 后续通过配置信息以及执行计划来申请资源去做真正的数据运算操作.\nSpark执行计划的生成 Spark源码解析-(二)SparkContext 通过SparkContext我们可以了解spark是如何对我们的任务进行划分, 调度等.\n一些常见的问题 数据倾斜 http://www.jasongj.com/spark/skew/ 这篇文章中很好的总结了数据倾斜的一些可能性以及处理方式. 在这里对处理方式做一下总结:\n修改并行度, 增大/调小都可能会优化 将小表做broadcast, 让可能会倾斜的大表不去做分发, 在map端就可以完成计算 如果倾斜的key已知, 可以单独抽出来做额外的处理 如果倾斜的key不确定, 可以通过添加盐的方式来打散数据 Spark的容错机制 在大数据, 分布式的处理中, 出错是很常见的事情, spark通过以下几点来做容错\n调度层 stage失败, 通过调度器来重新启动 血缘层 任务重新计算时, 不需要计算全部的数据, 只需要计算失败job所依赖的部分数据 checkpoint机制 可以通过checkpoint来将job做切分, 强行划分action, 将中间结果缓存, 后续计算可以根据这一份结果来继续计算, 而不需要从源头在进行计算 参考 极客时间《Spark 性能调优实战》 http://www.jasongj.com/spark/skew/ ","permalink":"https://www.liunaijie.top/publish/spark%E5%86%85%E5%AE%B9%E6%95%B4%E7%90%86/","summary":"\u003cp\u003e最近在换工作, 抽个时间把这几年所学的内容整理一下.\n接触spark已经3年多的时间, 把之前写的一些文章进行一下综合性的整理.\u003c/p\u003e","title":"Spark内容整理"},{"content":"前言 本文将记录一下iceberg表的文件存储结构, 数据写入流程, 查询流程的等. 基于Spark引擎.\n准备工作 java8 spark binary iceberg jar, 并放到spark binary的jars文件夹下 由于在Spark 3.3之后才支持Time Travel功能，所以我们使用Spark 3.5并下载相应的iceberg-spark-runtime-3.5_2.12-1.4.2 jar包，放入到spark的jars文件夹下. iceberg的meta信息使用avro格式存储，我们可以使用这个命令来查看文件内容java -jar avro-tools-1.11.1.jar tojson xxx.avro 正式测试 创建Catalog 这里使用type=hadoop创建一个名为local的Catalog，文件存储位置为当前路径下的warehouse目录\n./bin/spark-sql \\ --conf spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions \\ --conf spark.sql.catalog.spark_catalog=org.apache.iceberg.spark.SparkSessionCatalog \\ --conf spark.sql.catalog.spark_catalog.type=hive \\ --conf spark.sql.catalog.local=org.apache.iceberg.spark.SparkCatalog \\ --conf spark.sql.catalog.local.type=hadoop \\ --conf spark.sql.catalog.local.warehouse=$PWD/warehouse 1 CREATE TABLE local.db.tb01 (id bigint not null, name string, ts timestamp not null) USING iceberg PARTITIONED BY (year(ts)) 这张表中包含三个字段，设置了两个不能为空，并且分区字段通过ts这个字段计算而来。 下面插入一些数据\n1 2 3 4 5 6 7 8 insert into local.db.tb01 values ( 1, \u0026#39;name1\u0026#39;, to_timestamp(\u0026#39;2023-12-31 00:12:00\u0026#39;)), ..., ( 50, \u0026#39;name50\u0026#39;, to_timestamp(\u0026#39;2023-12-31 00:12:00\u0026#39;)), ( 51, \u0026#39;name51\u0026#39;, to_timestamp(\u0026#39;2022-12-31 00:12:00\u0026#39;)), ..., ( 100, \u0026#39;name100\u0026#39;, to_timestamp(\u0026#39;2022-12-31 00:12:00\u0026#39;)) ; 插入数据 插入了100条数据，时间分别为50条23年，50条22年。 接下来我们看一下这时的文件存储结构： iceberg表的文件存储结构如官网上的图所示。我们根据这张图以及我们生成的文件内容来具体分析一下。 data 存储数据的文件夹，里面的文件存储格式与Hive存储没什么区别。唯一区别在分区文件夹的命名上，iceberg这里的命名由于我们使用了转化函数，多了_year的后缀。 metadata/version-hint.text 这个文件记录了当前使用的metadata文件版本 metadata/v[version].metadata.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 { \u0026#34;format-version\u0026#34;: 2, \u0026#34;table-uuid\u0026#34;: \u0026#34;6109e725-f2be-4dd1-bb39-f990c2b38727\u0026#34;, \u0026#34;location\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01\u0026#34;, \u0026#34;last-sequence-number\u0026#34;: 1, \u0026#34;last-updated-ms\u0026#34;: 1702262809304, \u0026#34;last-column-id\u0026#34;: 3, \u0026#34;current-schema-id\u0026#34;: 0, \u0026#34;schemas\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;struct\u0026#34;, \u0026#34;schema-id\u0026#34;: 0, \u0026#34;fields\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;id\u0026#34;, \u0026#34;required\u0026#34;: true, \u0026#34;type\u0026#34;: \u0026#34;long\u0026#34; }, { \u0026#34;id\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;name\u0026#34;, \u0026#34;required\u0026#34;: false, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;id\u0026#34;: 3, \u0026#34;name\u0026#34;: \u0026#34;ts\u0026#34;, \u0026#34;required\u0026#34;: true, \u0026#34;type\u0026#34;: \u0026#34;timestamptz\u0026#34; } ] } ], \u0026#34;default-spec-id\u0026#34;: 0, \u0026#34;partition-specs\u0026#34;: [ { \u0026#34;spec-id\u0026#34;: 0, \u0026#34;fields\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ts_year\u0026#34;, \u0026#34;transform\u0026#34;: \u0026#34;year\u0026#34;, \u0026#34;source-id\u0026#34;: 3, \u0026#34;field-id\u0026#34;: 1000 } ] } ], \u0026#34;last-partition-id\u0026#34;: 1000, \u0026#34;default-sort-order-id\u0026#34;: 0, \u0026#34;sort-orders\u0026#34;: [ { \u0026#34;order-id\u0026#34;: 0, \u0026#34;fields\u0026#34;: [] } ], \u0026#34;properties\u0026#34;: { \u0026#34;owner\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;write.parquet.compression-codec\u0026#34;: \u0026#34;zstd\u0026#34; }, \u0026#34;current-snapshot-id\u0026#34;: 1284014949645635555, \u0026#34;refs\u0026#34;: { \u0026#34;main\u0026#34;: { \u0026#34;snapshot-id\u0026#34;: 1284014949645635555, \u0026#34;type\u0026#34;: \u0026#34;branch\u0026#34; } }, \u0026#34;snapshots\u0026#34;: [ { \u0026#34;sequence-number\u0026#34;: 1, \u0026#34;snapshot-id\u0026#34;: 1284014949645635555, \u0026#34;timestamp-ms\u0026#34;: 1702262809304, \u0026#34;summary\u0026#34;: { \u0026#34;operation\u0026#34;: \u0026#34;append\u0026#34;, \u0026#34;spark.app.id\u0026#34;: \u0026#34;local-1702262387758\u0026#34;, \u0026#34;added-data-files\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;added-records\u0026#34;: \u0026#34;100\u0026#34;, \u0026#34;added-files-size\u0026#34;: \u0026#34;2261\u0026#34;, \u0026#34;changed-partition-count\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;total-records\u0026#34;: \u0026#34;100\u0026#34;, \u0026#34;total-files-size\u0026#34;: \u0026#34;2261\u0026#34;, \u0026#34;total-data-files\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;total-delete-files\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;total-position-deletes\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;total-equality-deletes\u0026#34;: \u0026#34;0\u0026#34; }, \u0026#34;manifest-list\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/metadata/snap-1284014949645635555-1-cb1e6fc2-203d-4ca6-96ac-2bb13d0b4502.avro\u0026#34;, \u0026#34;schema-id\u0026#34;: 0 } ], \u0026#34;statistics\u0026#34;: [], \u0026#34;snapshot-log\u0026#34;: [ { \u0026#34;timestamp-ms\u0026#34;: 1702262809304, \u0026#34;snapshot-id\u0026#34;: 1284014949645635555 } ], \u0026#34;metadata-log\u0026#34;: [ { \u0026#34;timestamp-ms\u0026#34;: 1702262797607, \u0026#34;metadata-file\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/metadata/v1.metadata.json\u0026#34; } ] } 从里面的内容我们可以看出，这个文件存储了如下信息：\n文件存储位置 location 当前以及历史表结构信息 current-schema-id, schemas 每个版本记录了包含的字段名称，类型以及是否不能为空。 分区信息 partition-specs 分区使用到的字段，以及如何转化的函数 当前版本以及历史版本信息 current-snapshot-id, snapshots 在snapshot结构中，记录了snapshot文件的位置，表结构信息，文件变更的一些统计信息（例如增加文件的数量，增加的记录条数，总记录条数，文件大小等等） metadata/snap-[snapshotId]-[attemptId]-[commitUUID].avro 我们使用如下命令来查看avro的内容： 1 java -jar avro-tools-1.11.1.jar tojson metadata/snap-1284014949645635555-1-cb1e6fc2-203d-4ca6-96ac-2bb13d0b4502.avro 文件内容如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 { \u0026#34;manifest_path\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/metadata/cb1e6fc2-203d-4ca6-96ac-2bb13d0b4502-m0.avro\u0026#34;, \u0026#34;manifest_length\u0026#34;: 7056, \u0026#34;partition_spec_id\u0026#34;: 0, \u0026#34;content\u0026#34;: 0, \u0026#34;sequence_number\u0026#34;: 1, \u0026#34;min_sequence_number\u0026#34;: 1, \u0026#34;added_snapshot_id\u0026#34;: 1284014949645635555, \u0026#34;added_data_files_count\u0026#34;: 2, \u0026#34;existing_data_files_count\u0026#34;: 0, \u0026#34;deleted_data_files_count\u0026#34;: 0, \u0026#34;added_rows_count\u0026#34;: 100, \u0026#34;existing_rows_count\u0026#34;: 0, \u0026#34;deleted_rows_count\u0026#34;: 0, \u0026#34;partitions\u0026#34;: { \u0026#34;array\u0026#34;: [ { \u0026#34;contains_null\u0026#34;: false, \u0026#34;contains_nan\u0026#34;: { \u0026#34;boolean\u0026#34;: false }, \u0026#34;lower_bound\u0026#34;: { \u0026#34;bytes\u0026#34;: \u0026#34;4\\u0000\\u0000\\u0000\u0026#34; }, \u0026#34;upper_bound\u0026#34;: { \u0026#34;bytes\u0026#34;: \u0026#34;5\\u0000\\u0000\\u0000\u0026#34; } } ] } } 这个文件记录了manifest的文件记录，以及一些统计信息\nmetadata/[commitUUID]-m[manifestCount].avro 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 { \u0026#34;status\u0026#34;: 1, \u0026#34;snapshot_id\u0026#34;: { \u0026#34;long\u0026#34;: 1284014949645635555 }, \u0026#34;sequence_number\u0026#34;: null, \u0026#34;file_sequence_number\u0026#34;: null, \u0026#34;data_file\u0026#34;: { \u0026#34;content\u0026#34;: 0, \u0026#34;file_path\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/data/ts_year=2022/00000-39-ed797eca-366a-46f0-9e07-e2c1cd94da03-00002.parquet\u0026#34;, \u0026#34;file_format\u0026#34;: \u0026#34;PARQUET\u0026#34;, \u0026#34;partition\u0026#34;: { \u0026#34;ts_year\u0026#34;: { \u0026#34;int\u0026#34;: 52 } }, \u0026#34;record_count\u0026#34;: 50, \u0026#34;file_size_in_bytes\u0026#34;: 1140, \u0026#34;column_sizes\u0026#34;: { \u0026#34;array\u0026#34;: [ { \u0026#34;key\u0026#34;: 1, \u0026#34;value\u0026#34;: 118 }, { \u0026#34;key\u0026#34;: 2, \u0026#34;value\u0026#34;: 150 }, { \u0026#34;key\u0026#34;: 3, \u0026#34;value\u0026#34;: 70 } ] }, \u0026#34;value_counts\u0026#34;: { \u0026#34;array\u0026#34;: [ { \u0026#34;key\u0026#34;: 1, \u0026#34;value\u0026#34;: 50 }, { \u0026#34;key\u0026#34;: 2, \u0026#34;value\u0026#34;: 50 }, { \u0026#34;key\u0026#34;: 3, \u0026#34;value\u0026#34;: 50 } ] }, \u0026#34;null_value_counts\u0026#34;: { \u0026#34;array\u0026#34;: [ { \u0026#34;key\u0026#34;: 1, \u0026#34;value\u0026#34;: 0 }, { \u0026#34;key\u0026#34;: 2, \u0026#34;value\u0026#34;: 0 }, { \u0026#34;key\u0026#34;: 3, \u0026#34;value\u0026#34;: 0 } ] }, \u0026#34;nan_value_counts\u0026#34;: { \u0026#34;array\u0026#34;: [] }, \u0026#34;lower_bounds\u0026#34;: { \u0026#34;array\u0026#34;: [ { \u0026#34;key\u0026#34;: 1, \u0026#34;value\u0026#34;: \u0026#34;3\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\u0026#34; }, { \u0026#34;key\u0026#34;: 2, \u0026#34;value\u0026#34;: \u0026#34;name100\u0026#34; }, { \u0026#34;key\u0026#34;: 3, \u0026#34;value\u0026#34;: \u0026#34;\\u0000\\u0014\\u0083Ü\\rñ\\u0005\\u0000\u0026#34; } ] }, \u0026#34;upper_bounds\u0026#34;: { \u0026#34;array\u0026#34;: [ { \u0026#34;key\u0026#34;: 1, \u0026#34;value\u0026#34;: \u0026#34;d\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\u0026#34; }, { \u0026#34;key\u0026#34;: 2, \u0026#34;value\u0026#34;: \u0026#34;name99\u0026#34; }, { \u0026#34;key\u0026#34;: 3, \u0026#34;value\u0026#34;: \u0026#34;\\u0000\\u0014\\u0083Ü\\rñ\\u0005\\u0000\u0026#34; } ] }, \u0026#34;key_metadata\u0026#34;: null, \u0026#34;split_offsets\u0026#34;: { \u0026#34;array\u0026#34;: [ 4 ] }, \u0026#34;equality_ids\u0026#34;: null, \u0026#34;sort_order_id\u0026#34;: { \u0026#34;int\u0026#34;: 0 } } } { \u0026#34;status\u0026#34;: 1, \u0026#34;snapshot_id\u0026#34;: { \u0026#34;long\u0026#34;: 1284014949645635555 }, \u0026#34;sequence_number\u0026#34;: null, \u0026#34;file_sequence_number\u0026#34;: null, \u0026#34;data_file\u0026#34;: { \u0026#34;content\u0026#34;: 0, \u0026#34;file_path\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/data/ts_year=2023/00000-39-ed797eca-366a-46f0-9e07-e2c1cd94da03-00001.parquet\u0026#34;, \u0026#34;file_format\u0026#34;: \u0026#34;PARQUET\u0026#34;, \u0026#34;partition\u0026#34;: { \u0026#34;ts_year\u0026#34;: { \u0026#34;int\u0026#34;: 53 } }, \u0026#34;record_count\u0026#34;: 50, \u0026#34;file_size_in_bytes\u0026#34;: 1121, \u0026#34;column_sizes\u0026#34;: { \u0026#34;array\u0026#34;: [ { \u0026#34;key\u0026#34;: 1, \u0026#34;value\u0026#34;: 106 }, { \u0026#34;key\u0026#34;: 2, \u0026#34;value\u0026#34;: 150 }, { \u0026#34;key\u0026#34;: 3, \u0026#34;value\u0026#34;: 69 } ] }, \u0026#34;value_counts\u0026#34;: { \u0026#34;array\u0026#34;: [ { \u0026#34;key\u0026#34;: 1, \u0026#34;value\u0026#34;: 50 }, { \u0026#34;key\u0026#34;: 2, \u0026#34;value\u0026#34;: 50 }, { \u0026#34;key\u0026#34;: 3, \u0026#34;value\u0026#34;: 50 } ] }, \u0026#34;null_value_counts\u0026#34;: { \u0026#34;array\u0026#34;: [ { \u0026#34;key\u0026#34;: 1, \u0026#34;value\u0026#34;: 0 }, { \u0026#34;key\u0026#34;: 2, \u0026#34;value\u0026#34;: 0 }, { \u0026#34;key\u0026#34;: 3, \u0026#34;value\u0026#34;: 0 } ] }, \u0026#34;nan_value_counts\u0026#34;: { \u0026#34;array\u0026#34;: [] }, \u0026#34;lower_bounds\u0026#34;: { \u0026#34;array\u0026#34;: [ { \u0026#34;key\u0026#34;: 1, \u0026#34;value\u0026#34;: \u0026#34;\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\u0026#34; }, { \u0026#34;key\u0026#34;: 2, \u0026#34;value\u0026#34;: \u0026#34;name1\u0026#34; }, { \u0026#34;key\u0026#34;: 3, \u0026#34;value\u0026#34;: \u0026#34;\\u0000ô\\u0096h¼\\r\\u0006\\u0000\u0026#34; } ] }, \u0026#34;upper_bounds\u0026#34;: { \u0026#34;array\u0026#34;: [ { \u0026#34;key\u0026#34;: 1, \u0026#34;value\u0026#34;: \u0026#34;2\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\u0026#34; }, { \u0026#34;key\u0026#34;: 2, \u0026#34;value\u0026#34;: \u0026#34;name9\u0026#34; }, { \u0026#34;key\u0026#34;: 3, \u0026#34;value\u0026#34;: \u0026#34;\\u0000ô\\u0096h¼\\r\\u0006\\u0000\u0026#34; } ] }, \u0026#34;key_metadata\u0026#34;: null, \u0026#34;split_offsets\u0026#34;: { \u0026#34;array\u0026#34;: [ 4 ] }, \u0026#34;equality_ids\u0026#34;: null, \u0026#34;sort_order_id\u0026#34;: { \u0026#34;int\u0026#34;: 0 } } } 该文件记录了存储文件的位置，以及每个文件的统计信息，例如最大最小值，每个为空/不为空的数量等。在某些查询条件下，这样可以加快查询时的过滤速度，因为不再需要读取存储文件。 从这里可以看出iceberg的数据文件管理时文件级别的，分区管理，字段统计也是到文件级别，与Hive的目录级别不同。\n在iceberg官网上，列举了几个重要的功能：\nSchema evolution Hidden partitioning Partition layout evolution Time travel 更新字段 我们下面通过几个变更来看一下这几个功能，例如更改表结构，更改分区字段 首先我们做一次行级别的字段更新操作：\n1 MERGE INTO local.db.tb01 t USING (select id, name from values (1, \u0026#39;update_name1\u0026#39;), (50,\u0026#39;update_name50\u0026#39;) TAB (id, name)) u on t.id = u.id WHEN MATCHED THEN UPDATE SET t.name = u.name; 这时我们看一下新的v3.metadata.json文件，我这里只贴出来有关键更改的部份\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 \u0026#34;current-snapshot-id\u0026#34;: 7996194920797103527, \u0026#34;snapshots\u0026#34;: [ { \u0026#34;sequence-number\u0026#34;: 1, \u0026#34;snapshot-id\u0026#34;: 1284014949645635555, \u0026#34;timestamp-ms\u0026#34;: 1702262809304, \u0026#34;summary\u0026#34;: { \u0026#34;operation\u0026#34;: \u0026#34;append\u0026#34;, \u0026#34;spark.app.id\u0026#34;: \u0026#34;local-1702262387758\u0026#34;, \u0026#34;added-data-files\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;added-records\u0026#34;: \u0026#34;100\u0026#34;, \u0026#34;added-files-size\u0026#34;: \u0026#34;2261\u0026#34;, \u0026#34;changed-partition-count\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;total-records\u0026#34;: \u0026#34;100\u0026#34;, \u0026#34;total-files-size\u0026#34;: \u0026#34;2261\u0026#34;, \u0026#34;total-data-files\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;total-delete-files\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;total-position-deletes\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;total-equality-deletes\u0026#34;: \u0026#34;0\u0026#34; }, \u0026#34;manifest-list\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/metadata/snap-1284014949645635555-1-cb1e6fc2-203d-4ca6-96ac-2bb13d0b4502.avro\u0026#34;, \u0026#34;schema-id\u0026#34;: 0 }, { \u0026#34;sequence-number\u0026#34;: 2, \u0026#34;snapshot-id\u0026#34;: 7996194920797103527, \u0026#34;parent-snapshot-id\u0026#34;: 1284014949645635555, \u0026#34;timestamp-ms\u0026#34;: 1702277078925, \u0026#34;summary\u0026#34;: { \u0026#34;operation\u0026#34;: \u0026#34;overwrite\u0026#34;, \u0026#34;spark.app.id\u0026#34;: \u0026#34;local-1702262387758\u0026#34;, \u0026#34;added-data-files\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;deleted-data-files\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;added-records\u0026#34;: \u0026#34;50\u0026#34;, \u0026#34;deleted-records\u0026#34;: \u0026#34;50\u0026#34;, \u0026#34;added-files-size\u0026#34;: \u0026#34;1164\u0026#34;, \u0026#34;removed-files-size\u0026#34;: \u0026#34;1121\u0026#34;, \u0026#34;changed-partition-count\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;total-records\u0026#34;: \u0026#34;100\u0026#34;, \u0026#34;total-files-size\u0026#34;: \u0026#34;2304\u0026#34;, \u0026#34;total-data-files\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;total-delete-files\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;total-position-deletes\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;total-equality-deletes\u0026#34;: \u0026#34;0\u0026#34; }, \u0026#34;manifest-list\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/metadata/snap-7996194920797103527-1-4bf081db-c14d-4cbc-9689-b6770adca787.avro\u0026#34;, \u0026#34;schema-id\u0026#34;: 0 } ], \u0026#34;snapshot-log\u0026#34;: [ { \u0026#34;timestamp-ms\u0026#34;: 1702262809304, \u0026#34;snapshot-id\u0026#34;: 1284014949645635555 }, { \u0026#34;timestamp-ms\u0026#34;: 1702277078925, \u0026#34;snapshot-id\u0026#34;: 7996194920797103527 } ], \u0026#34;metadata-log\u0026#34;: [ { \u0026#34;timestamp-ms\u0026#34;: 1702262797607, \u0026#34;metadata-file\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/metadata/v1.metadata.json\u0026#34; }, { \u0026#34;timestamp-ms\u0026#34;: 1702262809304, \u0026#34;metadata-file\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/metadata/v2.metadata.json\u0026#34; } ] 首先current-snapshot-id更改为最新的版本，其次snapshots中多了这次更新的操作\n接下来再看下snapshot文件, snapshot文件中包含了两行，\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 { \u0026#34;manifest_path\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/metadata/4bf081db-c14d-4cbc-9689-b6770adca787-m1.avro\u0026#34;, \u0026#34;manifest_length\u0026#34;: 7008, \u0026#34;partition_spec_id\u0026#34;: 0, \u0026#34;content\u0026#34;: 0, \u0026#34;sequence_number\u0026#34;: 2, \u0026#34;min_sequence_number\u0026#34;: 2, \u0026#34;added_snapshot_id\u0026#34;: 7996194920797103527, \u0026#34;added_data_files_count\u0026#34;: 1, \u0026#34;existing_data_files_count\u0026#34;: 0, \u0026#34;deleted_data_files_count\u0026#34;: 0, \u0026#34;added_rows_count\u0026#34;: 50, \u0026#34;existing_rows_count\u0026#34;: 0, \u0026#34;deleted_rows_count\u0026#34;: 0, \u0026#34;partitions\u0026#34;: { \u0026#34;array\u0026#34;: [ { \u0026#34;contains_null\u0026#34;: false, \u0026#34;contains_nan\u0026#34;: { \u0026#34;boolean\u0026#34;: false }, \u0026#34;lower_bound\u0026#34;: { \u0026#34;bytes\u0026#34;: \u0026#34;5\\u0000\\u0000\\u0000\u0026#34; }, \u0026#34;upper_bound\u0026#34;: { \u0026#34;bytes\u0026#34;: \u0026#34;5\\u0000\\u0000\\u0000\u0026#34; } } ] } } { \u0026#34;manifest_path\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/metadata/4bf081db-c14d-4cbc-9689-b6770adca787-m0.avro\u0026#34;, \u0026#34;manifest_length\u0026#34;: 7071, \u0026#34;partition_spec_id\u0026#34;: 0, \u0026#34;content\u0026#34;: 0, \u0026#34;sequence_number\u0026#34;: 2, \u0026#34;min_sequence_number\u0026#34;: 1, \u0026#34;added_snapshot_id\u0026#34;: 7996194920797103527, \u0026#34;added_data_files_count\u0026#34;: 0, \u0026#34;existing_data_files_count\u0026#34;: 1, \u0026#34;deleted_data_files_count\u0026#34;: 1, \u0026#34;added_rows_count\u0026#34;: 0, \u0026#34;existing_rows_count\u0026#34;: 50, \u0026#34;deleted_rows_count\u0026#34;: 50, \u0026#34;partitions\u0026#34;: { \u0026#34;array\u0026#34;: [ { \u0026#34;contains_null\u0026#34;: false, \u0026#34;contains_nan\u0026#34;: { \u0026#34;boolean\u0026#34;: false }, \u0026#34;lower_bound\u0026#34;: { \u0026#34;bytes\u0026#34;: \u0026#34;4\\u0000\\u0000\\u0000\u0026#34; }, \u0026#34;upper_bound\u0026#34;: { \u0026#34;bytes\u0026#34;: \u0026#34;5\\u0000\\u0000\\u0000\u0026#34; } } ] } } 我们分别看一下这两个manifest文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 -- m0.avro { \u0026#34;status\u0026#34;: 0, \u0026#34;snapshot_id\u0026#34;: { \u0026#34;long\u0026#34;: 1284014949645635555 }, \u0026#34;sequence_number\u0026#34;: { \u0026#34;long\u0026#34;: 1 }, \u0026#34;file_sequence_number\u0026#34;: { \u0026#34;long\u0026#34;: 1 }, \u0026#34;data_file\u0026#34;: { \u0026#34;content\u0026#34;: 0, \u0026#34;file_path\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/data/ts_year=2022/00000-39-ed797eca-366a-46f0-9e07-e2c1cd94da03-00002.parquet\u0026#34;, ... } } { \u0026#34;status\u0026#34;: 2, \u0026#34;snapshot_id\u0026#34;: { \u0026#34;long\u0026#34;: 7996194920797103527 }, \u0026#34;sequence_number\u0026#34;: { \u0026#34;long\u0026#34;: 1 }, \u0026#34;file_sequence_number\u0026#34;: { \u0026#34;long\u0026#34;: 1 }, \u0026#34;data_file\u0026#34;: { \u0026#34;content\u0026#34;: 0, \u0026#34;file_path\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/data/ts_year=2023/00000-39-ed797eca-366a-46f0-9e07-e2c1cd94da03-00001.parquet\u0026#34;, ... } } ---- m1.avro { \u0026#34;status\u0026#34;: 1, \u0026#34;snapshot_id\u0026#34;: { \u0026#34;long\u0026#34;: 7996194920797103527 }, \u0026#34;sequence_number\u0026#34;: null, \u0026#34;file_sequence_number\u0026#34;: null, \u0026#34;data_file\u0026#34;: { \u0026#34;content\u0026#34;: 0, \u0026#34;file_path\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/data/ts_year=2023/00000-47-8b27a8c6-3477-4aa3-aba8-72cb57d77a5a-00001.parquet\u0026#34;, ... } } 这里有个关键字段status，它的值有三个: 0 , 1, 2. 分别表示EXISTING, ADDED, DELETED. (ManifestEntry类中的枚举值) 通过这个值我们再来看这两个文件中的三个JSON结构\nstatus: 0 , file_path = xxx status: 2 , file_path = xxx status: 1 , file_path = xxx 根据枚举值的定义我们可以知道，三个文件中，我们有一个需要保留，一个需要删除，并且有一个新增文件。 我们再来看文件以及我们想一下我们这次的变动：对一个分区下的两条记录做了字段更新。从文件变动我们可以知道，这次的变动新生成了一个文件，那么原来的文件就需要标记为删除。而没有修改过的分区文件应该保留。 Time Travel 我们上面对表进行过一次更改，我们现在如果直接查询得到的结果是更改之后的记录，现在我们想查询更改之前的记录。\n1 select * from local.db.tb01.snapshots 首先我们可以根据这个SQL查询出现存的所有snapshot版本， 然后我们可以使用这个SQL来查询指定版本的数据，我们还可以根据时间，tag来查询，具体语法参考这里\n1 select * from local.db.tb01.snapshots VERSION AS OF \u0026lt;SNAPSHOT_ID\u0026gt;; Schema evolution 我们对表结构进行一下更改\n1 2 3 4 ALTER TABLE local.db.tb01 ADD COLUMNS ( new_col string comment \u0026#39;new added col for test\u0026#39; ); 这时有新增了一个v4.metadata.json文件，文件的变更为schemas部分的变更。将当前snapshot的schema版本标记为最新的schema. 我们再进行一下记录的更新\n1 2 MERGE INTO local.db.tb01 t USING (select id, name, ew_col from values (2, \u0026#39;schema_update2\u0026#39;, \u0026#39;new added\u0026#39;), (99,\u0026#39;update_name50\u0026#39;, \u0026#39;new added\u0026#39;) TAB (id, name, ew_col)) u on t.id = u.id WHEN MATCHED THEN UPDATE SET t.name = u.name , t.ew_col = u.ew_col ; 更新完的文件结构如下： 这次让我们猜测一下manifest中的变动, 这次我们更新了两个分区内的文件，之前的文件都需要被标记为删除，新产生的两个文件都应该被标记为新增。 让我们直接看一下82b5d4d8-8e28-4e01-ae54-45106e8af0b8这三个manifest文件 首先是m0\n1 2 3 4 5 6 7 8 { \u0026#34;status\u0026#34;: 2, \u0026#34;data_file\u0026#34;: { \u0026#34;content\u0026#34;: 0, \u0026#34;file_path\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/data/ts_year=2023/00000-47-8b27a8c6-3477-4aa3-aba8-72cb57d77a5a-00001.parquet\u0026#34;, ... } } 其次是m1\n1 2 3 4 5 6 7 8 { \u0026#34;status\u0026#34;: 2, \u0026#34;data_file\u0026#34;: { \u0026#34;content\u0026#34;: 0, \u0026#34;file_path\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/data/ts_year=2022/00000-39-ed797eca-366a-46f0-9e07-e2c1cd94da03-00002.parquet\u0026#34;, ... } } 最后是m2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \u0026#34;status\u0026#34;: 1, \u0026#34;data_file\u0026#34;: { \u0026#34;content\u0026#34;: 0, \u0026#34;file_path\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/data/ts_year=2022/00000-7-0f9c9bf6-db10-47d7-9e69-ba2b9f90bb85-00002.parquet\u0026#34;, ... } } { \u0026#34;status\u0026#34;: 1, \u0026#34;data_file\u0026#34;: { \u0026#34;content\u0026#34;: 0, \u0026#34;file_path\u0026#34;: \u0026#34;/Desktop/iceberg/spark-3.5.0-bin-hadoop3/warehouse/db/tb01/data/ts_year=2023/00000-7-0f9c9bf6-db10-47d7-9e69-ba2b9f90bb85-00001.parquet\u0026#34;, ... } 结果与我们预期的相符：两个分区内分别新增了一个文件，而上一次更新的两个文件被标记为删除。\n注意：这里只记录增量的更改，也就是记录了从上一次的变动到这一次变动之间的更改\n通过某个snapshot文件，我们可以得知这个版本的数据使用的表结构是什么，最终使用到的数据文件有哪些，通过这些我们可以得到这个时刻的完整数据。并且可以通过manifest中的统计信息帮助在某些情况下的加速查询。\nReference [# Iceberg Table Spec ](https://iceberg.apache.org/spec/) # Iceberg 原理分析 ","permalink":"https://www.liunaijie.top/coding/big_data/iceberg/iceberg/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e本文将记录一下iceberg表的文件存储结构, 数据写入流程, 查询流程的等. 基于Spark引擎.\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch1 id=\"准备工作\"\u003e准备工作\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003ejava8\u003c/li\u003e\n\u003cli\u003espark binary\u003c/li\u003e\n\u003cli\u003eiceberg jar, 并放到spark binary的\u003ccode\u003ejars\u003c/code\u003e文件夹下\n由于在Spark 3.3之后才支持Time Travel功能，所以我们使用Spark 3.5并下载相应的\u003ccode\u003eiceberg-spark-runtime-3.5_2.12-1.4.2\u003c/code\u003e jar包，放入到spark的jars文件夹下.\niceberg的meta信息使用avro格式存储，我们可以使用这个命令来查看文件内容\u003ccode\u003ejava -jar avro-tools-1.11.1.jar tojson xxx.avro\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"正式测试\"\u003e正式测试\u003c/h1\u003e\n\u003ch2 id=\"创建catalog\"\u003e创建Catalog\u003c/h2\u003e\n\u003cp\u003e这里使用\u003ccode\u003etype=hadoop\u003c/code\u003e创建一个名为\u003ccode\u003elocal\u003c/code\u003e的Catalog，文件存储位置为当前路径下的\u003ccode\u003ewarehouse\u003c/code\u003e目录\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e./bin/spark-sql \\\n--conf spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions \\\n    --conf spark.sql.catalog.spark_catalog=org.apache.iceberg.spark.SparkSessionCatalog \\\n    --conf spark.sql.catalog.spark_catalog.type=hive \\\n    --conf spark.sql.catalog.local=org.apache.iceberg.spark.SparkCatalog \\\n    --conf spark.sql.catalog.local.type=hadoop \\\n    --conf spark.sql.catalog.local.warehouse=$PWD/warehouse\n\u003c/code\u003e\u003c/pre\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003elocal\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etb01\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003ebigint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ets\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eUSING\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eiceberg\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ePARTITIONED\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eBY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eyear\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ets\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e这张表中包含三个字段，设置了两个不能为空，并且分区字段通过\u003ccode\u003ets\u003c/code\u003e这个字段计算而来。\n下面插入一些数据\u003c/p\u003e","title":"Iceberg"},{"content":"Purpose Now there has a lot of media company, but they won the data, means they can delete your video at any time and tell you: you broke some rules. So I am thinking about create a new platform base on block chain, IPFS. there is no admin, no one can delete your video.\nSome Feature People need save video first to earn some COIN. when they have earn enough COIN, they can upload and share their videos(The cost depends on the size of the data). When people view your video, give Thumbs up, save, donate. the data saver, the data uploader can earn the COIN. No administer. The ownership is clear, you have the data ownership that you uploaded. videos can\u0026rsquo;t be deleted after they are uploaded, not even by the author. Shortcoming How to avoid pornography, violence. Reference ","permalink":"https://www.liunaijie.top/publish/a-media-platform-base-on-web3-ipfs/","summary":"\u003ch1 id=\"purpose\"\u003ePurpose\u003c/h1\u003e\n\u003cp\u003eNow there has a lot of media company, but they won the data, means they can delete your video at any time and tell you: you broke some rules.\nSo I am thinking about create a new platform base on block chain, IPFS. there is no admin, no one can delete your video.\u003c/p\u003e\n\u003ch1 id=\"some-feature\"\u003eSome Feature\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003ePeople need save video first to earn some \u003ccode\u003eCOIN\u003c/code\u003e. when they have earn enough \u003ccode\u003eCOIN\u003c/code\u003e, they can upload and share their videos(The cost depends on the size of the data).\u003c/li\u003e\n\u003cli\u003eWhen people view your video, give Thumbs up, save, donate. the data saver, the data uploader can earn the \u003ccode\u003eCOIN\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eNo administer.\u003c/li\u003e\n\u003cli\u003eThe ownership is clear, you have the data ownership that you uploaded.\u003c/li\u003e\n\u003cli\u003evideos can\u0026rsquo;t be deleted after they are uploaded, not even by the author.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"shortcoming\"\u003eShortcoming\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eHow to avoid pornography, violence.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"reference\"\u003eReference\u003c/h1\u003e","title":"A media platform base on web3, IPFS"},{"content":"最近买了台相机, 出去拍了一些照片, 然后突然想到AI来做照片的处理,优化等. 所以找了一些课程来学习一下图像处理的基础知识. 目前从这些课程中学习: https://www.bilibili.com/video/BV1Kh411X7Qv?p=3 https://www.bilibili.com/video/BV1R84y1f79o?p=1 https://www.bilibili.com/video/BV1tT4y1Y7Ak/?spm_id_from=333.788\u0026amp;vd_source=f7b0753424ba1b445914c36a2cbf1439\n基础概念 像素 一张图片在计算机中使用二维数组表示array[m][n]，二维数组的的大小m*n就表示照片的像素 相同的照片尺寸下，一张图片的像素越高，则显示的细节越多。 以这个照片为例，左侧图片的像素为2*2，右侧照片像素为4*4, 当放大某个细节时，右侧照片能给出更多的细节。 灰度值 二维数组中填充值的范围，对于黑白照片，灰度值的范围是0-255. 白色为255，黑色为0. array[m][n]=k, 0\u0026lt;=k\u0026lt;=255\n直方图 查看图片中灰度值的分布情况，横坐标是灰度值，纵坐标表示该灰度值出现的频率。 要注意的是，一个照片只有一个直方图，但一个直方图并不对应唯一的一张照片\n使用直方图可以直观的展示出图像中各个灰度值的分布情况，占比情况。\n图像增强 灰度变换 代数运算 空间域滤波 频域滤波 灰度变换 简单，常用的空间域图像增强方法 对输入图像像素的灰度级进行变换 $s=f(r)$, r/s 输入/输出灰度级 f(): 灰度变换函数，这个函数可以是线性变换, 也可以是非线性变换.\n线性变换 $s = Ar+B$ 当A\u0026gt;1时, 相当于做灰度拉伸, 变换完的图像会比原来的图片亮. 当A\u0026lt;1时, 相当于做灰度压缩, 变换完的图像会比原来的图片暗.\n在线性变换中, 还可以进行分段线性变换 $$ s= \\begin{cases} f1(x), \\quad 0 \u0026lt;r\u0026lt;a \\ f2(x), \\quad a\\leq r\u0026lt; b \\ f3(r), \\quad b\\leq r\u0026lt; N \\end{cases} $$\n可以对感兴趣的灰度区域进行突出, 对不感兴趣的灰度区域进行抑制.\n非线性变换 对数变换 $s = c * log(1+r)$ 在灰度级比较小(暗)时做拉伸, 在灰度值大(亮)时做压缩, 可以使暗的图像更加亮\n幂次变换 $s = c * r^n$ 在n\u0026gt;1时 在灰度值比较大(亮)时做拉伸,在灰度值小(暗)时做压缩 在n\u0026lt;1时 在灰度级比较小(暗)时做拉伸, 在灰度值大(亮)时做压缩\n直方图均衡 假设我们使用函数f()来对图像做灰度变换, 那么变换公式为: $D_B=f(D_A), D_A:变换前的灰度值,D_B变换后的灰度值$ 我们使用$H(D)$表示灰度直方图, 那么在使用f()做变化之后, 变换后图像的灰度直方图为: $$H_B(D_B)=\\frac{H_A(D_A)}{f\\prime(D_A)}$$ 灰度变换后图像直方图是:变换前直方图与变化函数导数之比\n直方图均衡是希望将图像的\n每个灰度级都拥有像素 直方图分布均匀 如果要达到这个要求, 那么就需要使得 $$H_B(D_B)=\\frac{A_0}{D_m} \\quad \\quad A_0代表图像像素总数,D_m代表灰度级$$ 而我们又知道 $$H_B(D_B)=\\frac{H_A(D_A)}{f\\prime(D_A)}$$ 所以我们可以推导出f()的表达式, 即: $$D_B=f(D_A)=\\frac{D_m}{A_0}* \\sum_{0}^{D_A}H_A(D_A)$$ 代数运算 加法运算 减法运算 乘法运算 加法运算 两幅或多幅图像相加 $C(x,y)=A(x,y)+B(x,y)$\n可以用来去除叠加性噪声\n减法运算 两幅图像相减 $C(x,y)=A(x,y)-B(x,y)$\n可以用来\n分割特定区域 检测场景变化 (通过前后图像相减, 得到变化的值) 乘法运算 两幅图像相乘 $C(x,y)=A(x,y)*B(x,y)$\n可以用来获取图像中特点的部分\n空间域滤波 $$y(j,i)=\\sum_{m}\\sum_{n}h(m,n)x(j+m,i+n)$$ 均值滤波器: $$h(m,n) = \\left[ \\begin{matrix} 1 \u0026amp; 1 \u0026amp; 1 \\ 1 \u0026amp; 1 \u0026amp; 1 \\ 1 \u0026amp; 1 \u0026amp; 1 \\ \\end{matrix} \\right] * \\frac{1}{9} $$ 高斯低通滤波器: $$h(m,n) = \\left[ \\begin{matrix} 1 \u0026amp; 2 \u0026amp; 1 \\ 2 \u0026amp; 4 \u0026amp; 2 \\ 1 \u0026amp; 2 \u0026amp; 1 \\ \\end{matrix} \\right] * \\frac{1}{16} $$ 可以使图像平滑\n中值滤波器 先邻域内像素(包括原像素)灰度排序, 然后取中间值 它可以\n使突出的点更接近它周边的点 消除孤立的亮度或暗点 去除噪声的同时, 比较好的保留边缘 能够有效去除脉冲噪声 高通滤波 使图像锐化\n突出图像的细节特征 增强图像模糊的边缘 增强高频 突出边缘 一阶\nRobert算子 Prewitt算子 Sobel算子 二阶 Laplace算子 一阶导数可以检测图像中的某像素点是否在边缘上 二阶导数可以判断一个边缘像素点在亮的一侧还是在暗的一侧\n","permalink":"https://www.liunaijie.top/coding/image_process/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/","summary":"\u003cp\u003e最近买了台相机, 出去拍了一些照片, 然后突然想到AI来做照片的处理,优化等. 所以找了一些课程来学习一下图像处理的基础知识.\n目前从这些课程中学习:\n\u003ca href=\"https://www.bilibili.com/video/BV1Kh411X7Qv?p=3\"\u003ehttps://www.bilibili.com/video/BV1Kh411X7Qv?p=3\u003c/a\u003e\n\u003ca href=\"https://www.bilibili.com/video/BV1R84y1f79o?p=1\"\u003ehttps://www.bilibili.com/video/BV1R84y1f79o?p=1\u003c/a\u003e\n\u003ca href=\"https://www.bilibili.com/video/BV1tT4y1Y7Ak/?spm_id_from=333.788\u0026amp;vd_source=f7b0753424ba1b445914c36a2cbf1439\"\u003ehttps://www.bilibili.com/video/BV1tT4y1Y7Ak/?spm_id_from=333.788\u0026amp;vd_source=f7b0753424ba1b445914c36a2cbf1439\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"基础概念\"\u003e基础概念\u003c/h1\u003e\n\u003ch3 id=\"像素\"\u003e像素\u003c/h3\u003e\n\u003cp\u003e一张图片在计算机中使用二维数组表示\u003ccode\u003earray[m][n]\u003c/code\u003e，二维数组的的大小\u003ccode\u003em*n\u003c/code\u003e就表示照片的像素\n相同的照片尺寸下，一张图片的像素越高，则显示的细节越多。\n以这个照片为例，左侧图片的像素为\u003ccode\u003e2*2\u003c/code\u003e，右侧照片像素为\u003ccode\u003e4*4\u003c/code\u003e, 当放大某个细节时，右侧照片能给出更多的细节。\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202309112132448.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003ch3 id=\"灰度值\"\u003e灰度值\u003c/h3\u003e\n\u003cp\u003e二维数组中填充值的范围，对于黑白照片，灰度值的范围是0-255. 白色为255，黑色为0.\n\u003ccode\u003earray[m][n]=k,  0\u0026lt;=k\u0026lt;=255\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"直方图\"\u003e直方图\u003c/h3\u003e\n\u003cp\u003e查看图片中灰度值的分布情况，横坐标是灰度值，纵坐标表示该灰度值出现的频率。\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202309112133842.png\" alt=\"\"\u003e\n\u003cstrong\u003e要注意的是，一个照片只有一个直方图，但一个直方图并不对应唯一的一张照片\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e使用直方图可以直观的展示出图像中各个灰度值的分布情况，占比情况。\u003c/p\u003e\n\u003ch2 id=\"图像增强\"\u003e图像增强\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e灰度变换\u003c/li\u003e\n\u003cli\u003e代数运算\u003c/li\u003e\n\u003cli\u003e空间域滤波\u003c/li\u003e\n\u003cli\u003e频域滤波\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"灰度变换\"\u003e灰度变换\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e简单，常用的空间域图像增强方法\u003c/li\u003e\n\u003cli\u003e对输入图像像素的灰度级进行变换\n$s=f(r)$,  r/s 输入/输出灰度级\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ef(): 灰度变换函数，这个函数可以是线性变换, 也可以是非线性变换.\u003c/p\u003e\n\u003ch4 id=\"线性变换\"\u003e线性变换\u003c/h4\u003e\n\u003cp\u003e$s = Ar+B$\n当A\u0026gt;1时, 相当于做灰度拉伸, 变换完的图像会比原来的图片亮.\n当A\u0026lt;1时, 相当于做灰度压缩, 变换完的图像会比原来的图片暗.\u003c/p\u003e\n\u003cp\u003e在线性变换中, 还可以进行\u003cstrong\u003e分段线性变换\u003c/strong\u003e\n$$\ns=\n\\begin{cases}\nf1(x), \\quad 0 \u0026lt;r\u0026lt;a \\\nf2(x), \\quad a\\leq r\u0026lt; b \\\nf3(r), \\quad b\\leq r\u0026lt; N\n\\end{cases}\n$$\u003c/p\u003e\n\u003cp\u003e可以对感兴趣的灰度区域进行突出, 对不感兴趣的灰度区域进行抑制.\u003c/p\u003e\n\u003ch4 id=\"非线性变换\"\u003e非线性变换\u003c/h4\u003e\n\u003ch5 id=\"对数变换\"\u003e对数变换\u003c/h5\u003e\n\u003cp\u003e$s = c * log(1+r)$\n在灰度级比较小(暗)时做拉伸, 在灰度值大(亮)时做压缩, 可以使暗的图像更加亮\u003c/p\u003e","title":"图像处理入门-基础概念"},{"content":"\n写入流程：\n先将记录写到WAL Log中（磁盘） 将数据写到内存中的MemTable，MemTable使用树或其他可以有序的结构进行存储 当Memtable数据满了，将MemTable变成Immutable Memtable即不可变数据，将这个数据落地，并新建Memtable来接收数据 在level0层，接收的是Immutable Memtable落地的数据块，这一层每个SSTable里数据有序，但整层是无序的，并且还可能重复 定时触发Campaction操作 即将level0层的数据块合并，写到level1层，将level1层的数据块合并写到level2层。。。 从level1层之后每一层的数据全局有序，唯一。 每一层的数据块大小不一致，越往下容量越大 ","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/lsm-tree/","summary":"\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202309112128645.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e写入流程：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e先将记录写到WAL Log中（磁盘）\u003c/li\u003e\n\u003cli\u003e将数据写到内存中的MemTable，MemTable使用树或其他可以有序的结构进行存储\u003c/li\u003e\n\u003cli\u003e当Memtable数据满了，将MemTable变成Immutable Memtable即不可变数据，将这个数据落地，并新建Memtable来接收数据\u003c/li\u003e\n\u003cli\u003e在level0层，接收的是Immutable Memtable落地的数据块，这一层每个SSTable里数据有序，但整层是无序的，并且还可能重复\u003c/li\u003e\n\u003cli\u003e定时触发Campaction操作\n即将level0层的数据块合并，写到level1层，将level1层的数据块合并写到level2层。。。\n从level1层之后每一层的数据全局有序，唯一。\n每一层的数据块大小不一致，越往下容量越大\u003c/li\u003e\n\u003c/ol\u003e","title":"LSM-Tree"},{"content":"前段时间看了一个web3的视频, 对区块链有了兴趣, 想了解一下这是什么内容, 底层原理等. 看了一段时间的材料, 用这篇文章总结一下目前的看法. 推荐课程: 北京大学肖臻老师《区块链技术与应用》公开课, 这个课程感觉是目前对比特币技术原理讲的最清楚的一门课了.\nWeb3是什么 回顾互联网的发展历史, 可以这样来进行划分:\n门户网站, 这时用户看到的信息是由门户网站的编辑来维护, 每个人看到的信息都是一样的, 信息的维护由专门的人来进行维护. 信息的所有权在门户网站. 互联网, 这时发展出来各种网络分享平台, 用户上传信息到平台上, 与其他人进行分享. 这里的信息由用户自己创造, 发布. 但是信息的所有权并不在用户手里, 而是在平台方. 基于区块链的信息共享平台, 由于区块链是一个公用的信息存储介质, 所以用户自己拥有数据的所有权. 区块链是什么 区块链是一个数据结构, 与链表相似 这里使用比特币的头节点结构来解释区块链的运行原理. 在头节点里存储了以下几个字段:\nprevious_block_hash (存储了上一个区块链的哈希值, 从而可以构成链表) version (当前节点协议的版本) nonce (随机数) timestamp (生成这个节点的时间) difficulty (生成这个节点的难度) merkle_root (对body内容构建merkle tree后根节点的值) Body中可以根据我们的实际应用场景存储一些不同的内容 在这里并没有存储当前Block的ID, 我们需要根据header中的内容进行哈希计算后得到. curBlockId= f(header)\n一个节点的生成规则是: 对当前节点的头部信息做哈希后得到的值能满足某个值(这个值由difficulty决定) 用公式表达为: hash(header) \u0026lt; N 这里的nonce就是在其他信息都固定的情况下来调整最终结果的字段. 这里还有一个可以修改的值为: merkle_root. 在body中我们可以接受很多个消息, 将消息取哈希后, 再相邻的两两节点取哈希, 最终得到ROOT节点, 将这个值存储到header中. market tree 在比特币的链中，数据结构分为head和body。body存储交易信息，head中存储了由body中交易信息构建的market tree头节点 在轻节点中不需要存储交易信息，但当交易发生后进行验证时，需要转账方提供交易的信息，然后轻节点计算出哈希表后向其他全节点获取交易链路上其他节点的哈希值，向上计算后得到一个根哈希值，验证与链中的头节点是否一致，如何一致则说明交易已被写入到链中\n难度值和随机数的意义 我们使用哈希函数来计算当前Block的ID, 难度值是限制哈希函数得到的结果必须有difficulty个0开头. 其中由于version, preId, timestamp, difficulty, body hash的值都是固定的, 所以我们需要改变nonce从而改变哈希值的结果, 达到以N个0开头的结果\n为什么说区块链是不可逆的 哈希值 去中心化 由于哈希计算对微小的改动也会得到不一样的结果, 所以当我们对某个Block中的body进行修改后, body hash就会被改变, body hash被改变后, curId也会被改变, 从而切断了关联关系 并且由于区块链是去中心化的, 我们即便通过修改nonce完成了计算, 使得curId符合规范, 但是这个时间其他节点可能也已经完成了下一个节点的计算, 由于区块链的最长原则, 大家都只认最长节点不承认你修改过后的节点 权益激励 区块链这样的数据结构, 产生下一个区块要消耗算力去计算, 我们为什么要去干这个事情呢, 我们把需要记录的信息发送出去让其他人给我记录不就好了吗? 白嫖不香吗? 为了激励大家来进行计算产生区块, 都会给一定的权益来激励用户.\n比特币对区块链的应用 中本聪在2008年发布了比特币的白皮书: 《Bitcoin: A Peer-to-Peer Electronic Cash System》 bitcoin bitcoin_zh 文中详细说明了如何使用区块链来进行记账, 从而将比特币作为一种电子货币. Block的body中进行记账 比特币会对产生Block的人进行激励, 奖励比特币\n挖矿是什么 将计算nonce的过程叫做挖坑\n矿池是什么 我们假设nonce的范围是0-99, 那么如果单机运算, 我们的电脑需要计算100次才能得到正确结果, 假如我们有100台计算机, 我们将计算任务分发到这100台计算机上, 那么每台计算机只需要计算1次就能得到结果. 矿池就是将大家的算力集中起来进行计算, 完成计算后按照某种规则再进行分成.\n比特币如何进行初始化的或者说是如何发展起来的 我们去看比特币的创世链就可以看出, 第一个块中只有一个交易信息, 就是在计算完成后, 中本聪向某个地址转了50个比特币. 在后续的块中，交易信息上很少甚至没有的，这时的挖矿难度也比较低\n比特币的稀缺性 比特币的发行只有出块奖励一种方式，并且出块奖励会每隔一段时间进行减半.\n比特币的匿名性 比特币的内部交易是无法追踪到实体世界中的个人，但可以通过转账关系来确定某些账户的关联关系 如果需要将比特币进行提现，那么必然需要与实体世界进行关联，这时就可能被关联到个人信息\n权益算法 IPFS ","permalink":"https://www.liunaijie.top/publish/%E6%AF%94%E7%89%B9%E5%B8%81%E4%B8%8E%E5%8C%BA%E5%9D%97%E9%93%BE/","summary":"\u003cp\u003e前段时间看了一个web3的视频, 对区块链有了兴趣, 想了解一下这是什么内容, 底层原理等.\n看了一段时间的材料, 用这篇文章总结一下目前的看法.\n推荐课程:  \u003ca href=\"https://www.bilibili.com/video/BV1Vt411X7JF/\"\u003e北京大学肖臻老师《区块链技术与应用》公开课\u003c/a\u003e, 这个课程感觉是目前对比特币技术原理讲的最清楚的一门课了.\u003c/p\u003e\n\u003ch1 id=\"web3是什么\"\u003eWeb3是什么\u003c/h1\u003e\n\u003cp\u003e回顾互联网的发展历史, 可以这样来进行划分:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e门户网站, 这时用户看到的信息是由门户网站的编辑来维护, 每个人看到的信息都是一样的, 信息的维护由专门的人来进行维护. 信息的所有权在门户网站.\u003c/li\u003e\n\u003cli\u003e互联网, 这时发展出来各种网络分享平台, 用户上传信息到平台上, 与其他人进行分享. 这里的信息由用户自己创造, 发布. 但是信息的所有权并不在用户手里, 而是在平台方.\u003c/li\u003e\n\u003cli\u003e基于区块链的信息共享平台, 由于区块链是一个公用的信息存储介质, 所以用户自己拥有数据的所有权.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"区块链是什么\"\u003e区块链是什么\u003c/h1\u003e\n\u003cp\u003e区块链是一个数据结构, 与链表相似\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308061427569.png\" alt=\"\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308061428506.png\" alt=\"\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308061429816.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e这里使用比特币的头节点结构来解释区块链的运行原理.\n在头节点里存储了以下几个字段:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eprevious_block_hash (存储了上一个区块链的哈希值, 从而可以构成链表)\u003c/li\u003e\n\u003cli\u003eversion (当前节点协议的版本)\u003c/li\u003e\n\u003cli\u003enonce (随机数)\u003c/li\u003e\n\u003cli\u003etimestamp (生成这个节点的时间)\u003c/li\u003e\n\u003cli\u003edifficulty (生成这个节点的难度)\u003c/li\u003e\n\u003cli\u003emerkle_root (对body内容构建merkle tree后根节点的值)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBody中可以根据我们的实际应用场景存储一些不同的内容\n在这里并没有存储当前Block的ID, 我们需要根据header中的内容进行哈希计算后得到.\n\u003ccode\u003ecurBlockId= f(header)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e一个节点的生成规则是: 对当前节点的头部信息做哈希后得到的值能满足某个值(这个值由difficulty决定)\n用公式表达为: \u003ccode\u003ehash(header) \u0026lt; N\u003c/code\u003e\n这里的nonce就是在其他信息都固定的情况下来调整最终结果的字段.\n这里还有一个可以修改的值为: merkle_root.\n在body中我们可以接受很多个消息, 将消息取哈希后, 再相邻的两两节点取哈希, 最终得到ROOT节点, 将这个值存储到header中.\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308061429737.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003ch2 id=\"market-tree\"\u003emarket tree\u003c/h2\u003e\n\u003cp\u003e在比特币的链中，数据结构分为head和body。body存储交易信息，head中存储了由body中交易信息构建的market tree头节点\n在轻节点中不需要存储交易信息，但当交易发生后进行验证时，需要转账方提供交易的信息，然后轻节点计算出哈希表后向其他全节点获取交易链路上其他节点的哈希值，向上计算后得到一个根哈希值，验证与链中的头节点是否一致，如何一致则说明交易已被写入到链中\u003c/p\u003e","title":"比特币与区块链"},{"content":"继上一篇分析完Spark的提交流程之后, 这次继续分析下SparkContext的源码.\n创建 当Spark通过反射调用用户提交类的主函数时, 用户的主函数内会完成SparkContext的创建. 还是以JavaWordCount为例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public static void main(String[] args) throws Exception { ... SparkSession spark = SparkSession .builder() .appName(\u0026#34;JavaWordCount\u0026#34;) .getOrCreate(); JavaRDD\u0026lt;String\u0026gt; lines = spark.read().textFile(args[0]).javaRDD(); ... List\u0026lt;Tuple2\u0026lt;String, Integer\u0026gt;\u0026gt; output = counts.collect(); for (Tuple2\u0026lt;?,?\u0026gt; tuple : output) { System.out.println(tuple._1() + \u0026#34;: \u0026#34; + tuple._2()); } spark.stop(); } 在这里是手动创建了SparkSession, SparkContext由SparkSession间接完成创建.\n主要代码分析 SparkContext维护了DAGScheduler和TaskScheduler, 在创建SparkContext时会完成这两个类的创建及初始化.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 try { _conf = config.clone() _conf.validateSettings() _conf.set(\u0026#34;spark.app.startTime\u0026#34;, startTime.toString) ... _listenerBus = new LiveListenerBus(_conf) _resourceProfileManager = new ResourceProfileManager(_conf, _listenerBus) // Initialize the app status store and listener before SparkEnv is created so that it gets // all events. val appStatusSource = AppStatusSource.createSource(conf) _statusStore = AppStatusStore.createLiveStore(conf, appStatusSource) listenerBus.addToStatusQueue(_statusStore.listener.get) // Create the Spark execution environment (cache, map output tracker, etc) _env = createSparkEnv(_conf, isLocal, listenerBus) SparkEnv.set(_env) ... _statusTracker = new SparkStatusTracker(this, _statusStore) _progressBar = if (_conf.get(UI_SHOW_CONSOLE_PROGRESS)) { Some(new ConsoleProgressBar(this)) } else { None } _ui = if (conf.get(UI_ENABLED)) { Some(SparkUI.create(Some(this), _statusStore, _conf, _env.securityManager, appName, \u0026#34;\u0026#34;, startTime)) } else { // For tests, do not enable the UI None } ... _hadoopConfiguration = SparkHadoopUtil.get.newConfiguration(_conf) ... _executorMemory = SparkContext.executorMemoryInMb(_conf) ... _shuffleDriverComponents = ShuffleDataIOUtils.loadShuffleDataIO(config).driver() _shuffleDriverComponents.initializeApplication().asScala.foreach { case (k, v) =\u0026gt; _conf.set(ShuffleDataIOUtils.SHUFFLE_SPARK_CONF_PREFIX + k, v) } // We need to register \u0026#34;HeartbeatReceiver\u0026#34; before \u0026#34;createTaskScheduler\u0026#34; because Executor will // retrieve \u0026#34;HeartbeatReceiver\u0026#34; in the constructor. (SPARK-6640) _heartbeatReceiver = env.rpcEnv.setupEndpoint( HeartbeatReceiver.ENDPOINT_NAME, new HeartbeatReceiver(this)) // Initialize any plugins before the task scheduler is initialized. _plugins = PluginContainer(this, _resources.asJava) // Create and start the scheduler val (sched, ts) = SparkContext.createTaskScheduler(this, master) _schedulerBackend = sched _taskScheduler = ts _dagScheduler = new DAGScheduler(this) _heartbeatReceiver.ask[Boolean](TaskSchedulerIsSet) val _executorMetricsSource = if (_conf.get(METRICS_EXECUTORMETRICS_SOURCE_ENABLED)) { Some(new ExecutorMetricsSource) } else { None } // create and start the heartbeater for collecting memory metrics _heartbeater = new Heartbeater( () =\u0026gt; SparkContext.this.reportHeartBeat(_executorMetricsSource), \u0026#34;driver-heartbeater\u0026#34;, conf.get(EXECUTOR_HEARTBEAT_INTERVAL)) _heartbeater.start() // start TaskScheduler after taskScheduler sets DAGScheduler reference in DAGScheduler\u0026#39;s // constructor _taskScheduler.start() _applicationId = _taskScheduler.applicationId() _applicationAttemptId = _taskScheduler.applicationAttemptId() _conf.set(\u0026#34;spark.app.id\u0026#34;, _applicationId) _applicationAttemptId.foreach { attemptId =\u0026gt; _conf.set(APP_ATTEMPT_ID, attemptId) _env.blockManager.blockStoreClient.setAppAttemptId(attemptId) } if (_conf.get(UI_REVERSE_PROXY)) { val proxyUrl = _conf.get(UI_REVERSE_PROXY_URL).getOrElse(\u0026#34;\u0026#34;).stripSuffix(\u0026#34;/\u0026#34;) System.setProperty(\u0026#34;spark.ui.proxyBase\u0026#34;, proxyUrl + \u0026#34;/proxy/\u0026#34; + _applicationId) } _ui.foreach(_.setAppId(_applicationId)) _env.blockManager.initialize(_applicationId) FallbackStorage.registerBlockManagerIfNeeded(_env.blockManager.master, _conf) ... _cleaner = if (_conf.get(CLEANER_REFERENCE_TRACKING)) { Some(new ContextCleaner(this, _shuffleDriverComponents)) } else { None } _cleaner.foreach(_.start()) val dynamicAllocationEnabled = Utils.isDynamicAllocationEnabled(_conf) _executorAllocationManager = if (dynamicAllocationEnabled) { schedulerBackend match { case b: ExecutorAllocationClient =\u0026gt; Some(new ExecutorAllocationManager( schedulerBackend.asInstanceOf[ExecutorAllocationClient], listenerBus, _conf, cleaner = cleaner, resourceProfileManager = resourceProfileManager)) case _ =\u0026gt; None } } else { None } _executorAllocationManager.foreach(_.start()) setupAndStartListenerBus() postEnvironmentUpdate() postApplicationStart() // After application started, attach handlers to started server and start handler. _ui.foreach(_.attachAllHandler()) // Attach the driver metrics servlet handler to the web ui after the metrics system is started. _env.metricsSystem.getServletHandlers.foreach(handler =\u0026gt; ui.foreach(_.attachHandler(handler))) // Make sure the context is stopped if the user forgets about it. This avoids leaving // unfinished event logs around after the JVM exits cleanly. It doesn\u0026#39;t help if the JVM // is killed, though. logDebug(\u0026#34;Adding shutdown hook\u0026#34;) // force eager creation of logger _shutdownHookRef = ShutdownHookManager.addShutdownHook( ShutdownHookManager.SPARK_CONTEXT_SHUTDOWN_PRIORITY) { () =\u0026gt; logInfo(\u0026#34;Invoking stop() from shutdown hook\u0026#34;) try { stop() } catch { case e: Throwable =\u0026gt; logWarning(\u0026#34;Ignoring Exception while stopping SparkContext from shutdown hook\u0026#34;, e) } } // Post init _taskScheduler.postStartHook() if (isLocal) { _env.metricsSystem.registerSource(Executor.executorSourceLocalModeOnly) } _env.metricsSystem.registerSource(_dagScheduler.metricsSource) _env.metricsSystem.registerSource(new BlockManagerSource(_env.blockManager)) _env.metricsSystem.registerSource(new JVMCPUSource()) _executorMetricsSource.foreach(_.register(_env.metricsSystem)) _executorAllocationManager.foreach { e =\u0026gt; _env.metricsSystem.registerSource(e.executorAllocationManagerSource) } appStatusSource.foreach(_env.metricsSystem.registerSource(_)) _plugins.foreach(_.registerMetrics(applicationId)) } catch { ... } 通过SparkContext.createTaskScheduler(this, master)创建了SchedulerBackend与TaskScheduler. 之后又创建了DAGScheduler. 先来看TaskScheduler的创建过程:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 private def createTaskScheduler( sc: SparkContext, master: String): (SchedulerBackend, TaskScheduler) = { import SparkMasterRegex._ ... master match { case \u0026#34;local\u0026#34; =\u0026gt; checkResourcesPerTask(1) val scheduler = new TaskSchedulerImpl(sc, MAX_LOCAL_TASK_FAILURES, isLocal = true) val backend = new LocalSchedulerBackend(sc.getConf, scheduler, 1) scheduler.initialize(backend) (backend, scheduler) case LOCAL_N_REGEX(threads) =\u0026gt; def localCpuCount: Int = Runtime.getRuntime.availableProcessors() // local[*] estimates the number of cores on the machine; local[N] uses exactly N threads. val threadCount = if (threads == \u0026#34;*\u0026#34;) localCpuCount else threads.toInt if (threadCount \u0026lt;= 0) { throw new SparkException(s\u0026#34;Asked to run locally with $threadCount threads\u0026#34;) } checkResourcesPerTask(threadCount) val scheduler = new TaskSchedulerImpl(sc, MAX_LOCAL_TASK_FAILURES, isLocal = true) val backend = new LocalSchedulerBackend(sc.getConf, scheduler, threadCount) scheduler.initialize(backend) (backend, scheduler) case LOCAL_N_FAILURES_REGEX(threads, maxFailures) =\u0026gt; def localCpuCount: Int = Runtime.getRuntime.availableProcessors() // local[*, M] means the number of cores on the computer with M failures // local[N, M] means exactly N threads with M failures val threadCount = if (threads == \u0026#34;*\u0026#34;) localCpuCount else threads.toInt checkResourcesPerTask(threadCount) val scheduler = new TaskSchedulerImpl(sc, maxFailures.toInt, isLocal = true) val backend = new LocalSchedulerBackend(sc.getConf, scheduler, threadCount) scheduler.initialize(backend) (backend, scheduler) case SPARK_REGEX(sparkUrl) =\u0026gt; val scheduler = new TaskSchedulerImpl(sc) val masterUrls = sparkUrl.split(\u0026#34;,\u0026#34;).map(\u0026#34;spark://\u0026#34; + _) val backend = new StandaloneSchedulerBackend(scheduler, sc, masterUrls) scheduler.initialize(backend) (backend, scheduler) case LOCAL_CLUSTER_REGEX(numWorkers, coresPerWorker, memoryPerWorker) =\u0026gt; checkResourcesPerTask(coresPerWorker.toInt) // Check to make sure memory requested \u0026lt;= memoryPerWorker. Otherwise Spark will just hang. val memoryPerWorkerInt = memoryPerWorker.toInt if (sc.executorMemory \u0026gt; memoryPerWorkerInt) { throw new SparkException( \u0026#34;Asked to launch cluster with %d MiB/worker but requested %d MiB/executor\u0026#34;.format( memoryPerWorkerInt, sc.executorMemory)) } // For host local mode setting the default of SHUFFLE_HOST_LOCAL_DISK_READING_ENABLED // to false because this mode is intended to be used for testing and in this case all the // executors are running on the same host. So if host local reading was enabled here then // testing of the remote fetching would be secondary as setting this config explicitly to // false would be required in most of the unit test (despite the fact that remote fetching // is much more frequent in production). sc.conf.setIfMissing(SHUFFLE_HOST_LOCAL_DISK_READING_ENABLED, false) val scheduler = new TaskSchedulerImpl(sc) val localCluster = LocalSparkCluster( numWorkers.toInt, coresPerWorker.toInt, memoryPerWorkerInt, sc.conf) val masterUrls = localCluster.start() val backend = new StandaloneSchedulerBackend(scheduler, sc, masterUrls) scheduler.initialize(backend) backend.shutdownCallback = (backend: StandaloneSchedulerBackend) =\u0026gt; { localCluster.stop() } (backend, scheduler) case masterUrl =\u0026gt; val cm = getClusterManager(masterUrl) match { case Some(clusterMgr) =\u0026gt; clusterMgr case None =\u0026gt; throw new SparkException(\u0026#34;Could not parse Master URL: \u0026#39;\u0026#34; + master + \u0026#34;\u0026#39;\u0026#34;) } try { val scheduler = cm.createTaskScheduler(sc, masterUrl) val backend = cm.createSchedulerBackend(sc, masterUrl, scheduler) cm.initialize(scheduler, backend) (backend, scheduler) } catch { case se: SparkException =\u0026gt; throw se case NonFatal(e) =\u0026gt; throw new SparkException(\u0026#34;External scheduler cannot be instantiated\u0026#34;, e) } } } 这里其实是对我们任务提交类型的判断, 从而选择不同的实现类. 而后续的DAGScheduler创建, 传入了SparkContext与TaskScheduler参数, 在DAGScheduler内部做了TaskScheduler与DAGScheduler的绑定 taskScheduler.setDAGScheduler(this) SparkContext初始化时, 相当于完成了基础的准备工作.\n后续当用户的action算子触发计算时, 会调用dagScheduler来做任务的划分与分配. 在JavaWordCount这个例子中, 当调用collect算子时, 最终会调用到SparkContext类中的runJob方法.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def runJob[T, U: ClassTag]( rdd: RDD[T], func: (TaskContext, Iterator[T]) =\u0026gt; U, partitions: Seq[Int], resultHandler: (Int, U) =\u0026gt; Unit): Unit = { if (stopped.get()) { throw new IllegalStateException(\u0026#34;SparkContext has been shutdown\u0026#34;) } val callSite = getCallSite val cleanedFunc = clean(func) logInfo(\u0026#34;Starting job: \u0026#34; + callSite.shortForm) if (conf.getBoolean(\u0026#34;spark.logLineage\u0026#34;, false)) { logInfo(\u0026#34;RDD\u0026#39;s recursive dependencies:\\n\u0026#34; + rdd.toDebugString) } dagScheduler.runJob(rdd, cleanedFunc, partitions, callSite, resultHandler, localProperties.get) progressBar.foreach(_.finishAll()) rdd.doCheckpoint() } DAGScheduler 通过上面的代码可以知道, 这里调用了dagScheduler来提交任务.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def runJob[T, U]( rdd: RDD[T], func: (TaskContext, Iterator[T]) =\u0026gt; U, partitions: Seq[Int], callSite: CallSite, resultHandler: (Int, U) =\u0026gt; Unit, properties: Properties): Unit = { val start = System.nanoTime val waiter = submitJob(rdd, func, partitions, callSite, resultHandler, properties) ThreadUtils.awaitReady(waiter.completionFuture, Duration.Inf) waiter.completionFuture.value.get match { case scala.util.Success(_) =\u0026gt; logInfo(\u0026#34;Job %d finished: %s, took %f s\u0026#34;.format (waiter.jobId, callSite.shortForm, (System.nanoTime - start) / 1e9)) case scala.util.Failure(exception) =\u0026gt; logInfo(\u0026#34;Job %d failed: %s, took %f s\u0026#34;.format (waiter.jobId, callSite.shortForm, (System.nanoTime - start) / 1e9)) // SPARK-8644: Include user stack trace in exceptions coming from DAGScheduler. val callerStackTrace = Thread.currentThread().getStackTrace.tail exception.setStackTrace(exception.getStackTrace ++ callerStackTrace) throw exception } } 在DAGScheduler里又调用了submitJob\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def submitJob[T, U]( rdd: RDD[T], func: (TaskContext, Iterator[T]) =\u0026gt; U, partitions: Seq[Int], callSite: CallSite, resultHandler: (Int, U) =\u0026gt; Unit, properties: Properties): JobWaiter[U] = { ... val jobId = nextJobId.getAndIncrement() ... val func2 = func.asInstanceOf[(TaskContext, Iterator[_]) =\u0026gt; _] val waiter = new JobWaiter[U](this, jobId, partitions.size, resultHandler) eventProcessLoop.post(JobSubmitted( jobId, rdd, func2, partitions.toArray, callSite, waiter, Utils.cloneProperties(properties))) waiter } 向eventProcessLoop发送了JobSubmitted的消息, 消息内包含了任务的基础信息. 这里的调用采用了消息传递, 而不是直接的方法调用.\n1 2 3 4 5 private def doOnReceive(event: DAGSchedulerEvent): Unit = event match { case JobSubmitted(jobId, rdd, func, partitions, callSite, listener, properties) =\u0026gt; dagScheduler.handleJobSubmitted(jobId, rdd, func, partitions, callSite, listener, properties) ... } 当DagScheduler收到消息后, 做模式匹配, 我们上面提交的JobSubmitter消息会调用handleJobSubmitter方法来处理.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 private[scheduler] def handleJobSubmitted(jobId: Int, finalRDD: RDD[_], func: (TaskContext, Iterator[_]) =\u0026gt; _, partitions: Array[Int], callSite: CallSite, listener: JobListener, properties: Properties): Unit = { var finalStage: ResultStage = null try { // New stage creation may throw an exception if, for example, jobs are run on a // HadoopRDD whose underlying HDFS files have been deleted. finalStage = createResultStage(finalRDD, func, partitions, jobId, callSite) } catch { ... } // Job submitted, clear internal data. barrierJobIdToNumTasksCheckFailures.remove(jobId) val job = new ActiveJob(jobId, finalStage, callSite, listener, properties) clearCacheLocs() ... val jobSubmissionTime = clock.getTimeMillis() jobIdToActiveJob(jobId) = job activeJobs += job finalStage.setActiveJob(job) val stageIds = jobIdToStageIds(jobId).toArray val stageInfos = stageIds.flatMap(id =\u0026gt; stageIdToStage.get(id).map(_.latestInfo)) listenerBus.post( SparkListenerJobStart(job.jobId, jobSubmissionTime, stageInfos, Utils.cloneProperties(properties))) submitStage(finalStage) } 根据传入的RDD获取最后一步的Stage信息, 最后调用submitStage方法. 先来看下如何获取的finalStage\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 private def createResultStage( rdd: RDD[_], func: (TaskContext, Iterator[_]) =\u0026gt; _, partitions: Array[Int], jobId: Int, callSite: CallSite): ResultStage = { val (shuffleDeps, resourceProfiles) = getShuffleDependenciesAndResourceProfiles(rdd) val resourceProfile = mergeResourceProfilesForStage(resourceProfiles) checkBarrierStageWithDynamicAllocation(rdd) checkBarrierStageWithNumSlots(rdd, resourceProfile) checkBarrierStageWithRDDChainPattern(rdd, partitions.toSet.size) val parents = getOrCreateParentStages(shuffleDeps, jobId) val id = nextStageId.getAndIncrement() val stage = new ResultStage(id, rdd, func, partitions, parents, jobId, callSite, resourceProfile.id) stageIdToStage(id) = stage updateJobIdStageIdMaps(jobId, stage) stage } 其实我们知道Spark里根据是否需要做Shuffle来划分Stage, 那么这里就会根据一个RDD的所有依赖做划分, 这个切分就是在这里根据RDD的dependency信息做的. 当切分完成后, 会创建一个ResultStage表示这是最后一个Stage. 这个Stage里会有一个parents的Stage信息.\n我们再来看下submitStage的代码部分\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 private def submitStage(stage: Stage): Unit = { val jobId = activeJobForStage(stage) if (jobId.isDefined) { logDebug(s\u0026#34;submitStage($stage (name=${stage.name};\u0026#34; + s\u0026#34;jobs=${stage.jobIds.toSeq.sorted.mkString(\u0026#34;,\u0026#34;)}))\u0026#34;) if (!waitingStages(stage) \u0026amp;\u0026amp; !runningStages(stage) \u0026amp;\u0026amp; !failedStages(stage)) { val missing = getMissingParentStages(stage).sortBy(_.id) logDebug(\u0026#34;missing: \u0026#34; + missing) if (missing.isEmpty) { logInfo(\u0026#34;Submitting \u0026#34; + stage + \u0026#34; (\u0026#34; + stage.rdd + \u0026#34;), which has no missing parents\u0026#34;) submitMissingTasks(stage, jobId.get) } else { for (parent \u0026lt;- missing) { submitStage(parent) } waitingStages += stage } } } else { abortStage(stage, \u0026#34;No active job for stage \u0026#34; + stage.id, None) } } 当收到finialStage后, 可以看到做的事情是先获取Parent Stage. 当Parent Stage为空时才会提交自身的Stage, 不然会先计算Parent Stage. Stage是有依赖关系的, 所有当计算最后一个Stage时需要先完成之前所有Stage的计算. 注意当有上游依赖时, 循环提交完成后还向 waitingStages添加了自身的Stage.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 private def submitMissingTasks(stage: Stage, jobId: Int): Unit = { logDebug(\u0026#34;submitMissingTasks(\u0026#34; + stage + \u0026#34;)\u0026#34;) ... // Figure out the indexes of partition ids to compute. val partitionsToCompute: Seq[Int] = stage.findMissingPartitions() ... runningStages += stage // SparkListenerStageSubmitted should be posted before testing whether tasks are // serializable. If tasks are not serializable, a SparkListenerStageCompleted event // will be posted, which should always come after a corresponding SparkListenerStageSubmitted // event. stage match { case s: ShuffleMapStage =\u0026gt; outputCommitCoordinator.stageStart(stage = s.id, maxPartitionId = s.numPartitions - 1) // Only generate merger location for a given shuffle dependency once. if (s.shuffleDep.shuffleMergeAllowed) { if (!s.shuffleDep.isShuffleMergeFinalizedMarked) { prepareShuffleServicesForShuffleMapStage(s) } else { // Disable Shuffle merge for the retry/reuse of the same shuffle dependency if it has // already been merge finalized. If the shuffle dependency was previously assigned // merger locations but the corresponding shuffle map stage did not complete // successfully, we would still enable push for its retry. s.shuffleDep.setShuffleMergeAllowed(false) logInfo(s\u0026#34;Push-based shuffle disabled for $stage (${stage.name}) since it\u0026#34; + \u0026#34; is already shuffle merge finalized\u0026#34;) } } case s: ResultStage =\u0026gt; outputCommitCoordinator.stageStart( stage = s.id, maxPartitionId = s.rdd.partitions.length - 1) } val taskIdToLocations: Map[Int, Seq[TaskLocation]] = try { stage match { case s: ShuffleMapStage =\u0026gt; partitionsToCompute.map { id =\u0026gt; (id, getPreferredLocs(stage.rdd, id))}.toMap case s: ResultStage =\u0026gt; partitionsToCompute.map { id =\u0026gt; val p = s.partitions(id) (id, getPreferredLocs(stage.rdd, p)) }.toMap } } catch { case NonFatal(e) =\u0026gt; stage.makeNewStageAttempt(partitionsToCompute.size) listenerBus.post(SparkListenerStageSubmitted(stage.latestInfo, Utils.cloneProperties(properties))) abortStage(stage, s\u0026#34;Task creation failed: $e\\n${Utils.exceptionString(e)}\u0026#34;, Some(e)) runningStages -= stage return } stage.makeNewStageAttempt(partitionsToCompute.size, taskIdToLocations.values.toSeq) // If there are tasks to execute, record the submission time of the stage. Otherwise, // post the even without the submission time, which indicates that this stage was // skipped. if (partitionsToCompute.nonEmpty) { stage.latestInfo.submissionTime = Some(clock.getTimeMillis()) } listenerBus.post(SparkListenerStageSubmitted(stage.latestInfo, Utils.cloneProperties(properties))) // TODO: Maybe we can keep the taskBinary in Stage to avoid serializing it multiple times. // Broadcasted binary for the task, used to dispatch tasks to executors. Note that we broadcast // the serialized copy of the RDD and for each task we will deserialize it, which means each // task gets a different copy of the RDD. This provides stronger isolation between tasks that // might modify state of objects referenced in their closures. This is necessary in Hadoop // where the JobConf/Configuration object is not thread-safe. var taskBinary: Broadcast[Array[Byte]] = null var partitions: Array[Partition] = null try { // For ShuffleMapTask, serialize and broadcast (rdd, shuffleDep). // For ResultTask, serialize and broadcast (rdd, func). var taskBinaryBytes: Array[Byte] = null // taskBinaryBytes and partitions are both effected by the checkpoint status. We need // this synchronization in case another concurrent job is checkpointing this RDD, so we get a // consistent view of both variables. RDDCheckpointData.synchronized { taskBinaryBytes = stage match { case stage: ShuffleMapStage =\u0026gt; JavaUtils.bufferToArray( closureSerializer.serialize((stage.rdd, stage.shuffleDep): AnyRef)) case stage: ResultStage =\u0026gt; JavaUtils.bufferToArray(closureSerializer.serialize((stage.rdd, stage.func): AnyRef)) } partitions = stage.rdd.partitions } if (taskBinaryBytes.length \u0026gt; TaskSetManager.TASK_SIZE_TO_WARN_KIB * 1024) { logWarning(s\u0026#34;Broadcasting large task binary with size \u0026#34; + s\u0026#34;${Utils.bytesToString(taskBinaryBytes.length)}\u0026#34;) } taskBinary = sc.broadcast(taskBinaryBytes) } catch { // In the case of a failure during serialization, abort the stage. case e: NotSerializableException =\u0026gt; abortStage(stage, \u0026#34;Task not serializable: \u0026#34; + e.toString, Some(e)) runningStages -= stage // Abort execution return case e: Throwable =\u0026gt; abortStage(stage, s\u0026#34;Task serialization failed: $e\\n${Utils.exceptionString(e)}\u0026#34;, Some(e)) runningStages -= stage // Abort execution return } val tasks: Seq[Task[_]] = try { val serializedTaskMetrics = closureSerializer.serialize(stage.latestInfo.taskMetrics).array() stage match { case stage: ShuffleMapStage =\u0026gt; stage.pendingPartitions.clear() partitionsToCompute.map { id =\u0026gt; val locs = taskIdToLocations(id) val part = partitions(id) stage.pendingPartitions += id new ShuffleMapTask(stage.id, stage.latestInfo.attemptNumber, taskBinary, part, stage.numPartitions, locs, properties, serializedTaskMetrics, Option(jobId), Option(sc.applicationId), sc.applicationAttemptId, stage.rdd.isBarrier()) } case stage: ResultStage =\u0026gt; partitionsToCompute.map { id =\u0026gt; val p: Int = stage.partitions(id) val part = partitions(p) val locs = taskIdToLocations(id) new ResultTask(stage.id, stage.latestInfo.attemptNumber, taskBinary, part, stage.numPartitions, locs, id, properties, serializedTaskMetrics, Option(jobId), Option(sc.applicationId), sc.applicationAttemptId, stage.rdd.isBarrier()) } } } catch { case NonFatal(e) =\u0026gt; abortStage(stage, s\u0026#34;Task creation failed: $e\\n${Utils.exceptionString(e)}\u0026#34;, Some(e)) runningStages -= stage return } if (tasks.nonEmpty) { logInfo(s\u0026#34;Submitting ${tasks.size} missing tasks from $stage (${stage.rdd}) (first 15 \u0026#34; + s\u0026#34;tasks are for partitions ${tasks.take(15).map(_.partitionId)})\u0026#34;) val shuffleId = stage match { case s: ShuffleMapStage =\u0026gt; Some(s.shuffleDep.shuffleId) case _: ResultStage =\u0026gt; None } taskScheduler.submitTasks(new TaskSet( tasks.toArray, stage.id, stage.latestInfo.attemptNumber, jobId, properties, stage.resourceProfileId, shuffleId)) } else { // Because we posted SparkListenerStageSubmitted earlier, we should mark // the stage as completed here in case there are no tasks to run markStageAsFinished(stage, None) stage match { case stage: ShuffleMapStage =\u0026gt; logDebug(s\u0026#34;Stage ${stage} is actually done; \u0026#34; + s\u0026#34;(available: ${stage.isAvailable},\u0026#34; + s\u0026#34;available outputs: ${stage.numAvailableOutputs},\u0026#34; + s\u0026#34;partitions: ${stage.numPartitions})\u0026#34;) markMapStageJobsAsFinished(stage) case stage : ResultStage =\u0026gt; logDebug(s\u0026#34;Stage ${stage} is actually done; (partitions: ${stage.numPartitions})\u0026#34;) } submitWaitingChildStages(stage) } } 这段代码上面的部分是如何去创建Task, 当tasks不为空是会调用taskScheduler.submitTask来提交Task. Task的信息是通过sparkContext.broadcast来广播到每个executor上的. 注意当有上游依赖时,finialStage还在waitingStages中.\nTaskScheduler 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 override def submitTasks(taskSet: TaskSet): Unit = { val tasks = taskSet.tasks logInfo(\u0026#34;Adding task set \u0026#34; + taskSet.id + \u0026#34; with \u0026#34; + tasks.length + \u0026#34; tasks \u0026#34; + \u0026#34;resource profile \u0026#34; + taskSet.resourceProfileId) this.synchronized { val manager = createTaskSetManager(taskSet, maxTaskFailures) val stage = taskSet.stageId val stageTaskSets = taskSetsByStageIdAndAttempt.getOrElseUpdate(stage, new HashMap[Int, TaskSetManager]) stageTaskSets.foreach { case (_, ts) =\u0026gt; ts.isZombie = true } stageTaskSets(taskSet.stageAttemptId) = manager schedulableBuilder.addTaskSetManager(manager, manager.taskSet.properties) if (!isLocal \u0026amp;\u0026amp; !hasReceivedTask) { starvationTimer.scheduleAtFixedRate(new TimerTask() { override def run(): Unit = { if (!hasLaunchedTask) { logWarning(\u0026#34;Initial job has not accepted any resources; \u0026#34; + \u0026#34;check your cluster UI to ensure that workers are registered \u0026#34; + \u0026#34;and have sufficient resources\u0026#34;) } else { this.cancel() } } }, STARVATION_TIMEOUT_MS, STARVATION_TIMEOUT_MS) } hasReceivedTask = true } backend.reviveOffers() } 创建完TaskSetManager后, 调用了SchedulerBackend.reviverOffers. SchedulerBackend的实现类为CoarseGrainedSchedulerBackend\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 override def reviveOffers(): Unit = Utils.tryLogNonFatalError { driverEndpoint.send(ReviveOffers) } override def receive: PartialFunction[Any, Unit] = { ... case ReviveOffers =\u0026gt; makeOffers() ... } private def makeOffers(): Unit = { // Make sure no executor is killed while some task is launching on it val taskDescs = withLock { // Filter out executors under killing val activeExecutors = executorDataMap.filterKeys(isExecutorActive) val workOffers = activeExecutors.map { case (id, executorData) =\u0026gt; buildWorkerOffer(id, executorData) }.toIndexedSeq scheduler.resourceOffers(workOffers, true) } if (taskDescs.nonEmpty) { launchTasks(taskDescs) } } private def launchTasks(tasks: Seq[Seq[TaskDescription]]): Unit = { for (task \u0026lt;- tasks.flatten) { val serializedTask = TaskDescription.encode(task) if (serializedTask.limit() \u0026gt;= maxRpcMessageSize) { Option(scheduler.taskIdToTaskSetManager.get(task.taskId)).foreach { taskSetMgr =\u0026gt; try { var msg = \u0026#34;Serialized task %s:%d was %d bytes, which exceeds max allowed: \u0026#34; + s\u0026#34;${RPC_MESSAGE_MAX_SIZE.key} (%d bytes). Consider increasing \u0026#34; + s\u0026#34;${RPC_MESSAGE_MAX_SIZE.key} or using broadcast variables for large values.\u0026#34; msg = msg.format(task.taskId, task.index, serializedTask.limit(), maxRpcMessageSize) taskSetMgr.abort(msg) } catch { case e: Exception =\u0026gt; logError(\u0026#34;Exception in error callback\u0026#34;, e) } } } else { val executorData = executorDataMap(task.executorId) // Do resources allocation here. The allocated resources will get released after the task // finishes. executorData.freeCores -= task.cpus task.resources.foreach { case (rName, rInfo) =\u0026gt; assert(executorData.resourcesInfo.contains(rName)) executorData.resourcesInfo(rName).acquire(rInfo.addresses) } logDebug(s\u0026#34;Launching task ${task.taskId} on executor id: ${task.executorId} hostname: \u0026#34; + s\u0026#34;${executorData.executorHost}.\u0026#34;) executorData.executorEndpoint.send(LaunchTask(new SerializableBuffer(serializedTask))) } } } 这里将task编码后, 发送到每个executor上.\nExecutor 在executor上, 当接受到LauncherTask类型的消息时\n1 2 3 4 5 6 7 8 9 10 11 12 override def receive: PartialFunction[Any, Unit] = { .. case LaunchTask(data) =\u0026gt; if (executor == null) { exitExecutor(1, \u0026#34;Received LaunchTask command but executor was null\u0026#34;) } else { val taskDesc = TaskDescription.decode(data.value) logInfo(\u0026#34;Got assigned task \u0026#34; + taskDesc.taskId) taskResources(taskDesc.taskId) = taskDesc.resources executor.launchTask(this, taskDesc) } } 反序列化化Task信息, 然后交到线程池中执行. 当任务完成后, TaskSetManager中的方法会将信息发送给DagScheduler.\n1 2 3 4 def handleSuccessfulTask(tid: Long, result: DirectTaskResult[_]): Unit = { sched.dagScheduler.taskEnded(tasks(index), Success, result.value(), result.accumUpdates, result.metricPeaks, info) } 在DAGScheduler中,\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def taskEnded( task: Task[_], reason: TaskEndReason, result: Any, accumUpdates: Seq[AccumulatorV2[_, _]], metricPeaks: Array[Long], taskInfo: TaskInfo): Unit = { eventProcessLoop.post( CompletionEvent(task, reason, result, accumUpdates, metricPeaks, taskInfo)) } private[scheduler] def handleTaskCompletion(event: CompletionEvent): Unit = { event.reason match { case Success =\u0026gt; ... task match { ... case smt: ShuffleMapTask =\u0026gt; val shuffleStage = stage.asInstanceOf[ShuffleMapStage] shuffleStage.pendingPartitions -= task.partitionId val status = event.result.asInstanceOf[MapStatus] val execId = status.location.executorId logDebug(\u0026#34;ShuffleMapTask finished on \u0026#34; + execId) if (executorFailureEpoch.contains(execId) \u0026amp;\u0026amp; smt.epoch \u0026lt;= executorFailureEpoch(execId)) { logInfo(s\u0026#34;Ignoring possibly bogus $smt completion from executor $execId\u0026#34;) } else { // The epoch of the task is acceptable (i.e., the task was launched after the most // recent failure we\u0026#39;re aware of for the executor), so mark the task\u0026#39;s output as // available. mapOutputTracker.registerMapOutput( shuffleStage.shuffleDep.shuffleId, smt.partitionId, status) } if (runningStages.contains(shuffleStage) \u0026amp;\u0026amp; shuffleStage.pendingPartitions.isEmpty) { if (!shuffleStage.shuffleDep.isShuffleMergeFinalizedMarked \u0026amp;\u0026amp; shuffleStage.shuffleDep.getMergerLocs.nonEmpty) { checkAndScheduleShuffleMergeFinalize(shuffleStage) } else { processShuffleMapStageCompletion(shuffleStage) } } } } 这里有一句processShuffleMapStageCompletion(shuffleStage), 当有上游依赖时ResultStage会被放到waitingStages, 还未被执行.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 private def processShuffleMapStageCompletion(shuffleStage: ShuffleMapStage): Unit = { markStageAsFinished(shuffleStage) logInfo(\u0026#34;looking for newly runnable stages\u0026#34;) logInfo(\u0026#34;running: \u0026#34; + runningStages) logInfo(\u0026#34;waiting: \u0026#34; + waitingStages) logInfo(\u0026#34;failed: \u0026#34; + failedStages) mapOutputTracker.incrementEpoch() clearCacheLocs() if (!shuffleStage.isAvailable) { // Some tasks had failed; let\u0026#39;s resubmit this shuffleStage. // TODO: Lower-level scheduler should also deal with this logInfo(\u0026#34;Resubmitting \u0026#34; + shuffleStage + \u0026#34; (\u0026#34; + shuffleStage.name + \u0026#34;) because some of its tasks had failed: \u0026#34; + shuffleStage.findMissingPartitions().mkString(\u0026#34;, \u0026#34;)) submitStage(shuffleStage) } else { markMapStageJobsAsFinished(shuffleStage) submitWaitingChildStages(shuffleStage) } } private def submitWaitingChildStages(parent: Stage): Unit = { logTrace(s\u0026#34;Checking if any dependencies of $parent are now runnable\u0026#34;) logTrace(\u0026#34;running: \u0026#34; + runningStages) logTrace(\u0026#34;waiting: \u0026#34; + waitingStages) logTrace(\u0026#34;failed: \u0026#34; + failedStages) val childStages = waitingStages.filter(_.parents.contains(parent)).toArray waitingStages --= childStages for (stage \u0026lt;- childStages.sortBy(_.firstJobId)) { submitStage(stage) } } 这里会将Stage从waitingStages中拿出来, 然后重新提交.\n","permalink":"https://www.liunaijie.top/publish/spark%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E4%BA%8Csparkcontext/","summary":"\u003cp\u003e继上一篇分析完Spark的提交流程之后, 这次继续分析下SparkContext的源码.\u003c/p\u003e\n\u003ch1 id=\"创建\"\u003e创建\u003c/h1\u003e\n\u003cp\u003e当Spark通过反射调用用户提交类的主函数时, 用户的主函数内会完成SparkContext的创建.\n还是以\u003ccode\u003eJavaWordCount\u003c/code\u003e为例\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eSparkSession\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSparkSession\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ebuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eappName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;JavaWordCount\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetOrCreate\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eJavaRDD\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elines\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"na\"\u003etextFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"na\"\u003ejavaRDD\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTuple2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecounts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecollect\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTuple2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e_1\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;: \u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e_2\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e在这里是手动创建了SparkSession, SparkContext由SparkSession间接完成创建.\u003c/p\u003e","title":"Spark源码解析-(二)SparkContext"},{"content":"本文以Spark3.4版本，提交任务方式为Yarn Cluster，以JavaWordCount这个应用程序为例来分析一下一个Spark任务的提交过程。 过程中会对代码做一些删减，主要目的是了解从用户提交任务开始到一个任务如何开始运行. 本文主要记录两种提交任务的方式，spark-submit.sh与SparkLauncher.\nSpark-submit.sh 以需要执行JavaWordCount为例，启动命令为：\n1 2 3 4 5 6 ./bin/spark-submit \\ --master yarn \\ --deploy-mode cluster \\ --class org.apache.spark.examples.JavaWordCount \\ /path/to/examples.jar \\ /tmp/file1.txt 我们指定了在yarn上以cluster模式启动JavaWordCount程序， 指定了jar包位置，以及要读取的文件\nspark-submit 1 2 3 ...... exec \u0026#34;${SPARK_HOME}\u0026#34;/bin/spark-class org.apache.spark.deploy.SparkSubmit \u0026#34;$@\u0026#34; 这个脚本最后调用了spark-class脚本，第一个参数为SparkSubmit的全类名，再加上我们本来的参数\nspark-class 这个脚本做了这几件事：\n查找spark的jar包 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Find Spark jars. if [ -d \u0026#34;${SPARK_HOME}/jars\u0026#34; ]; then SPARK_JARS_DIR=\u0026#34;${SPARK_HOME}/jars\u0026#34; else SPARK_JARS_DIR=\u0026#34;${SPARK_HOME}/assembly/target/scala-$SPARK_SCALA_VERSION/jars\u0026#34; fi if [ ! -d \u0026#34;$SPARK_JARS_DIR\u0026#34; ] \u0026amp;\u0026amp; [ -z \u0026#34;$SPARK_TESTING$SPARK_SQL_TESTING\u0026#34; ]; then echo \u0026#34;Failed to find Spark jars directory ($SPARK_JARS_DIR).\u0026#34; 1\u0026gt;\u0026amp;2 echo \u0026#34;You need to build Spark with the target \\\u0026#34;package\\\u0026#34; before running this program.\u0026#34; 1\u0026gt;\u0026amp;2 exit 1 else LAUNCH_CLASSPATH=\u0026#34;$SPARK_JARS_DIR/*\u0026#34; fi # Add the launcher build dir to the classpath if requested. if [ -n \u0026#34;$SPARK_PREPEND_CLASSES\u0026#34; ]; then LAUNCH_CLASSPATH=\u0026#34;${SPARK_HOME}/launcher/target/scala-$SPARK_SCALA_VERSION/classes:$LAUNCH_CLASSPATH\u0026#34; fi 调用SparkLauncher里面的Main进行参数注入 1 2 3 4 build_command() { \u0026#34;$RUNNER\u0026#34; -Xmx128m $SPARK_LAUNCHER_OPTS -cp \u0026#34;$LAUNCH_CLASSPATH\u0026#34; org.apache.spark.launcher.Main \u0026#34;$@\u0026#34; printf \u0026#34;%d\\0\u0026#34; $? } 执行被修改过的命令 1 2 CMD=(\u0026#34;${CMD[@]:0:$LAST}\u0026#34;) exec \u0026#34;${CMD[@]}\u0026#34; 经过修改后最终的命令为：\n1 2 3 4 5 6 7 8 java -cp ....(一些参数修改) org.apache.spark.deploy.SparkSubmit \\ --master yarn \\ --deploy-mode cluster \\ --class org.apache.spark.examples.JavaWordCount \\ /path/to/examples.jar \\ /tmp/file1.txt 可以看到这里最终会去调用SparkSubmit这个类\nSparkSubmit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 override def main(args: Array[String]): Unit = { val submit = new SparkSubmit() { self =\u0026gt; override def doSubmit(args: Array[String]): Unit = { try { // 调用 doSubmit方法 super.doSubmit(args) } catch { case e: SparkUserAppException =\u0026gt; exitFn(e.exitCode) } } } submit.doSubmit(args) } private[spark] class SparkSubmit extends Logging { def doSubmit(args: Array[String]): Unit = { // Initialize logging if it hasn\u0026#39;t been done yet. Keep track of whether logging needs to // be reset before the application starts. val uninitLog = initializeLogIfNecessary(true, silent = true) val appArgs = parseArguments(args) if (appArgs.verbose) { logInfo(appArgs.toString) } // action默认为submit，则会到submit方法 appArgs.action match { case SparkSubmitAction.SUBMIT =\u0026gt; submit(appArgs, uninitLog) case SparkSubmitAction.KILL =\u0026gt; kill(appArgs) case SparkSubmitAction.REQUEST_STATUS =\u0026gt; requestStatus(appArgs) case SparkSubmitAction.PRINT_VERSION =\u0026gt; printVersion() } } ... private def submit(args: SparkSubmitArguments, uninitLog: Boolean): Unit = { doRunMain() def doRunMain(): Unit = { ... runMain(args, uninitLog) } } } 在Main方法中调用伴生类中的doSubmit方法，在doSubmit方法中先进行了参数解析，然后模式匹配，调用不同类型的方法。默认的action为submit，所以会调用到submit方法，而submit方法中又会调用到runMain方法中去.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 private def runMain(args: SparkSubmitArguments, uninitLog: Boolean): Unit = { val (childArgs, childClasspath, sparkConf, childMainClass) = prepareSubmitEnvironment(args) val loader = getSubmitClassLoader(sparkConf) for (jar \u0026lt;- childClasspath) { addJarToClasspath(jar, loader) } var mainClass: Class[_] = null try { mainClass = Utils.classForName(childMainClass) } catch { } val app: SparkApplication = if (classOf[SparkApplication].isAssignableFrom(mainClass)) { mainClass.getConstructor().newInstance().asInstanceOf[SparkApplication] } else { new JavaMainApplication(mainClass) } try { app.start(childArgs.toArray, sparkConf) } catch { } finally { } } 在这个方法中，我们可以看到做了这样几件事：\n获取class loader 获取mainClass并进行初始化 调用实例的start方法 我们这里需要关注的点是实例化了那个类，也就是childMainClass是什么，看一下prepareSubmitEnvironment方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 private[deploy] def prepareSubmitEnvironment( args: SparkSubmitArguments, conf: Option[HadoopConfiguration] = None) : (Seq[String], Seq[String], SparkConf, String) = { if (deployMode == CLIENT) { childMainClass = args.mainClass } if (isYarnCluster) { childMainClass = YARN_CLUSTER_SUBMIT_CLASS } // Load any properties specified through --conf and the default properties file for ((k, v) \u0026lt;- args.sparkProperties) { sparkConf.setIfMissing(k, v) } // Ignore invalid spark.driver.host in cluster modes. if (deployMode == CLUSTER) { sparkConf.remove(DRIVER_HOST_ADDRESS) } 这个方法比较复杂，我只摘出来了与这次分析相关或比较重要的几句代码。 首先，如果我们使用的是client模式来提交任务，这里的childMainClass就是我们参数中的class，也就是JavaWordCount的全类名。 如果我们使用的是Yarn Cluster模式，这里的childMainClass则为org.apache.spark.deploy.yarn.YarnClusterApplication. 后续还会将我们参数中的spark配置读取并进行配置。\n再回到runMain这个方法中，\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 private def runMain(args: SparkSubmitArguments, uninitLog: Boolean): Unit = { val (childArgs, childClasspath, sparkConf, childMainClass) = prepareSubmitEnvironment(args) val loader = getSubmitClassLoader(sparkConf) for (jar \u0026lt;- childClasspath) { addJarToClasspath(jar, loader) } var mainClass: Class[_] = null try { mainClass = Utils.classForName(childMainClass) } catch { } val app: SparkApplication = if (classOf[SparkApplication].isAssignableFrom(mainClass)) { mainClass.getConstructor().newInstance().asInstanceOf[SparkApplication] } else { new JavaMainApplication(mainClass) } try { app.start(childArgs.toArray, sparkConf) } catch { } finally { } } 先来分析Client模式，这里得到的childMainClass为我们提交的任务类，在我们的例子中为JavaWordCount. 这个在初始化时会使用JavaMainApplication做一下封装。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 private[deploy] class JavaMainApplication(klass: Class[_]) extends SparkApplication { override def start(args: Array[String], conf: SparkConf): Unit = { val mainMethod = klass.getMethod(\u0026#34;main\u0026#34;, new Array[String](0).getClass) if (!Modifier.isStatic(mainMethod.getModifiers)) { throw new IllegalStateException(\u0026#34;The main method in the given main class must be static\u0026#34;) } val sysProps = conf.getAll.toMap sysProps.foreach { case (k, v) =\u0026gt; sys.props(k) = v } mainMethod.invoke(null, args) } } 当我们调用app.start时，其实就是调用了JavaWordCount这个类的main方法。 可以看到在Client模式下，直接在本地启动了我们的程序，也就是Driver是在本地进行启动。\n再来分析一下Cluster模式下的启动，childMainClass得到的值是YarnClusterApplication.\nYarnClusterApplication 1 2 3 4 5 6 7 8 9 10 11 private[spark] class YarnClusterApplication extends SparkApplication { override def start(args: Array[String], conf: SparkConf): Unit = { // SparkSubmit would use yarn cache to distribute files \u0026amp; jars in yarn mode, // so remove them from sparkConf here for yarn mode. conf.remove(JARS) conf.remove(FILES) conf.remove(ARCHIVES) new Client(new ClientArguments(args), conf, null).run() } } 由于YarnClusterApplication是SparkApplication的子类，所以会直接构建实例，然后调用start方法。 在YarnClusterApplication的start方法中，我们看到是初始化了Client然后调用run方法，接下来我们看下Client的实现\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def run(): Unit = { submitApplication() ... } def submitApplication(): Unit = { ResourceRequestHelper.validateResources(sparkConf) try { launcherBackend.connect() yarnClient.init(hadoopConf) yarnClient.start() // Get a new application from our RM val newApp = yarnClient.createApplication() val newAppResponse = newApp.getNewApplicationResponse() this.appId = newAppResponse.getApplicationId() // The app staging dir based on the STAGING_DIR configuration if configured // otherwise based on the users home directory. // scalastyle:off FileSystemGet val appStagingBaseDir = sparkConf.get(STAGING_DIR) .map { new Path(_, UserGroupInformation.getCurrentUser.getShortUserName) }.getOrElse(FileSystem.get(hadoopConf).getHomeDirectory()) stagingDirPath = new Path(appStagingBaseDir, getAppStagingDir(appId)) // scalastyle:on FileSystemGet new CallerContext(\u0026#34;CLIENT\u0026#34;, sparkConf.get(APP_CALLER_CONTEXT), Option(appId.toString)).setCurrentContext() // Verify whether the cluster has enough resources for our AM verifyClusterResources(newAppResponse) // Set up the appropriate contexts to launch our AM val containerContext = createContainerLaunchContext() val appContext = createApplicationSubmissionContext(newApp, containerContext) // Finally, submit and monitor the application logInfo(s\u0026#34;Submitting application $appId to ResourceManager\u0026#34;) // 提交application yarnClient.submitApplication(appContext) launcherBackend.setAppId(appId.toString) reportLauncherState(SparkAppHandle.State.SUBMITTED) } catch { case e: Throwable =\u0026gt; if (stagingDirPath != null) { cleanupStagingDir() } throw e } } 分析这一段代码后我们可以知道，这里做的事情就是向Yarn集群申请启动了一个Application，也就是Application Master。在spark里就是Driver。 我们看一下这个app的具体信息，createContainerLaunchContext这个方法里面。\nprivate def createContainerLaunchContext(): ContainerLaunchContext = { logInfo(\u0026#34;Setting up container launch context for our AM\u0026#34;) val launchEnv = setupLaunchEnv(stagingDirPath, pySparkArchives) val localResources = prepareLocalResources(stagingDirPath, pySparkArchives) val amContainer = Records.newRecord(classOf[ContainerLaunchContext]) amContainer.setLocalResources(localResources.asJava) amContainer.setEnvironment(launchEnv.asJava) val javaOpts = ListBuffer[String]() javaOpts += s\u0026#34;-Djava.net.preferIPv6Addresses=${Utils.preferIPv6}\u0026#34; // SPARK-37106: To start AM with Java 17, `JavaModuleOptions.defaultModuleOptions` // is added by default. It will not affect Java 8 and Java 11 due to existence of // `-XX:+IgnoreUnrecognizedVMOptions`. javaOpts += JavaModuleOptions.defaultModuleOptions() // Set the environment variable through a command prefix // to append to the existing value of the variable var prefixEnv: Option[String] = None // Add Xmx for AM memory javaOpts += \u0026#34;-Xmx\u0026#34; + amMemory + \u0026#34;m\u0026#34; val tmpDir = new Path(Environment.PWD.$$(), YarnConfiguration.DEFAULT_CONTAINER_TEMP_DIR) javaOpts += \u0026#34;-Djava.io.tmpdir=\u0026#34; + tmpDir // Include driver-specific java options if we are launching a driver if (isClusterMode) { sparkConf.get(DRIVER_JAVA_OPTIONS).foreach { opts =\u0026gt; javaOpts ++= Utils.splitCommandString(opts) .map(Utils.substituteAppId(_, this.appId.toString)) .map(YarnSparkHadoopUtil.escapeForShell) } val libraryPaths = Seq(sparkConf.get(DRIVER_LIBRARY_PATH), sys.props.get(\u0026#34;spark.driver.libraryPath\u0026#34;)).flatten if (libraryPaths.nonEmpty) { prefixEnv = Some(createLibraryPathPrefix(libraryPaths.mkString(File.pathSeparator), sparkConf)) } if (sparkConf.get(AM_JAVA_OPTIONS).isDefined) { logWarning(s\u0026#34;${AM_JAVA_OPTIONS.key} will not take effect in cluster mode\u0026#34;) } } else { // Validate and include yarn am specific java options in yarn-client mode. sparkConf.get(AM_JAVA_OPTIONS).foreach { opts =\u0026gt; if (opts.contains(\u0026#34;-Dspark\u0026#34;)) { val msg = s\u0026#34;${AM_JAVA_OPTIONS.key} is not allowed to set Spark options (was \u0026#39;$opts\u0026#39;).\u0026#34; throw new SparkException(msg) } if (opts.contains(\u0026#34;-Xmx\u0026#34;)) { val msg = s\u0026#34;${AM_JAVA_OPTIONS.key} is not allowed to specify max heap memory settings \u0026#34; + s\u0026#34;(was \u0026#39;$opts\u0026#39;). Use spark.yarn.am.memory instead.\u0026#34; throw new SparkException(msg) } javaOpts ++= Utils.splitCommandString(opts) .map(Utils.substituteAppId(_, this.appId.toString)) .map(YarnSparkHadoopUtil.escapeForShell) } sparkConf.get(AM_LIBRARY_PATH).foreach { paths =\u0026gt; prefixEnv = Some(createLibraryPathPrefix(paths, sparkConf)) } } // For log4j2 configuration to reference javaOpts += (\u0026#34;-Dspark.yarn.app.container.log.dir=\u0026#34; + ApplicationConstants.LOG_DIR_EXPANSION_VAR) val userClass = if (isClusterMode) { Seq(\u0026#34;--class\u0026#34;, YarnSparkHadoopUtil.escapeForShell(args.userClass)) } else { Nil } val userJar = if (args.userJar != null) { Seq(\u0026#34;--jar\u0026#34;, args.userJar) } else { Nil } val primaryPyFile = if (isClusterMode \u0026amp;\u0026amp; args.primaryPyFile != null) { Seq(\u0026#34;--primary-py-file\u0026#34;, new Path(args.primaryPyFile).getName()) } else { Nil } val primaryRFile = if (args.primaryRFile != null) { Seq(\u0026#34;--primary-r-file\u0026#34;, args.primaryRFile) } else { Nil } val amClass = if (isClusterMode) { Utils.classForName(\u0026#34;org.apache.spark.deploy.yarn.ApplicationMaster\u0026#34;).getName } else { Utils.classForName(\u0026#34;org.apache.spark.deploy.yarn.ExecutorLauncher\u0026#34;).getName } if (args.primaryRFile != null \u0026amp;\u0026amp; (args.primaryRFile.endsWith(\u0026#34;.R\u0026#34;) || args.primaryRFile.endsWith(\u0026#34;.r\u0026#34;))) { args.userArgs = ArrayBuffer(args.primaryRFile) ++ args.userArgs } val userArgs = args.userArgs.flatMap { arg =\u0026gt; Seq(\u0026#34;--arg\u0026#34;, YarnSparkHadoopUtil.escapeForShell(arg)) } val amArgs = Seq(amClass) ++ userClass ++ userJar ++ primaryPyFile ++ primaryRFile ++ userArgs ++ Seq(\u0026#34;--properties-file\u0026#34;, buildPath(Environment.PWD.$$(), LOCALIZED_CONF_DIR, SPARK_CONF_FILE)) ++ Seq(\u0026#34;--dist-cache-conf\u0026#34;, buildPath(Environment.PWD.$$(), LOCALIZED_CONF_DIR, DIST_CACHE_CONF_FILE)) // Command for the ApplicationMaster val commands = prefixEnv ++ Seq(Environment.JAVA_HOME.$$() + \u0026#34;/bin/java\u0026#34;, \u0026#34;-server\u0026#34;) ++ javaOpts ++ amArgs ++ Seq( \u0026#34;1\u0026gt;\u0026#34;, ApplicationConstants.LOG_DIR_EXPANSION_VAR + \u0026#34;/stdout\u0026#34;, \u0026#34;2\u0026gt;\u0026#34;, ApplicationConstants.LOG_DIR_EXPANSION_VAR + \u0026#34;/stderr\u0026#34;) // TODO: it would be nicer to just make sure there are no null commands here val printableCommands = commands.map(s =\u0026gt; if (s == null) \u0026#34;null\u0026#34; else s).toList amContainer.setCommands(printableCommands.asJava) // send the acl settings into YARN to control who has access via YARN interfaces val securityManager = new SecurityManager(sparkConf) amContainer.setApplicationACLs( YarnSparkHadoopUtil.getApplicationAclsForYarn(securityManager).asJava) setupSecurityToken(amContainer) setTokenConf(amContainer) amContainer } 我们看一下这段代码，他其实也是在构建启动的命令。我们重点关注下这几句代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 val userClass = if (isClusterMode) { Seq(\u0026#34;--class\u0026#34;, YarnSparkHadoopUtil.escapeForShell(args.userClass)) } else { Nil } val amClass = if (isClusterMode) { Utils.classForName(\u0026#34;org.apache.spark.deploy.yarn.ApplicationMaster\u0026#34;).getName } else { Utils.classForName(\u0026#34;org.apache.spark.deploy.yarn.ExecutorLauncher\u0026#34;).getName } userClass 用户真实要启动的类，在cluster模式下，从参数中解析。 amClass 启动类，在cluster模式下，为ApplicationMaster. 在我们的这个例子中，就会在Yarn中启动一个Application，启动类为ApplicationMaster. 接下来我们要看ApplicationMaster这个类的代码。 还有一点要注意一下，以上所有的代码都是在本地执行的，也就是在执行submit-shell脚本的这个机器上执行的。后续的操作都是在Yarn集群上执行的\nApplicationMaster 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def main(args: Array[String]): Unit = { SignalUtils.registerLogger(log) val amArgs = new ApplicationMasterArguments(args) val sparkConf = new SparkConf() if (amArgs.propertiesFile != null) { Utils.getPropertiesFromFile(amArgs.propertiesFile).foreach { case (k, v) =\u0026gt; sparkConf.set(k, v) } } // Both cases create a new SparkConf object which reads these configs from system properties. sparkConf.getAll.foreach { case (k, v) =\u0026gt; sys.props(k) = v } val yarnConf = new YarnConfiguration(SparkHadoopUtil.newConfiguration(sparkConf)) master = new ApplicationMaster(amArgs, sparkConf, yarnConf) val ugi = sparkConf.get(PRINCIPAL) match { case Some(principal) if master.isClusterMode =\u0026gt; val originalCreds = UserGroupInformation.getCurrentUser().getCredentials() SparkHadoopUtil.get.loginUserFromKeytab(principal, sparkConf.get(KEYTAB).orNull) val newUGI = UserGroupInformation.getCurrentUser() if (master.appAttemptId == null || master.appAttemptId.getAttemptId \u0026gt; 1) { Utils.withContextClassLoader(master.userClassLoader) { val credentialManager = new HadoopDelegationTokenManager(sparkConf, yarnConf, null) credentialManager.obtainDelegationTokens(originalCreds) } } newUGI.addCredentials(originalCreds) newUGI case _ =\u0026gt; SparkHadoopUtil.get.createSparkUser() } ugi.doAs(new PrivilegedExceptionAction[Unit]() { override def run(): Unit = System.exit(master.run()) }) } 这段代码的主要逻辑为构建ApplicationMaster并调用其run方法。根据其返回值做响应。\nfinal def run(): Int = { try { val attemptID = if (isClusterMode) { } else { None } new CallerContext(\u0026#34;APPMASTER\u0026#34;, sparkConf.get(APP_CALLER_CONTEXT), Option(appAttemptId.getApplicationId.toString), attemptID).setCurrentContext() logInfo(\u0026#34;ApplicationAttemptId: \u0026#34; + appAttemptId) val stagingDirPath = new Path(System.getenv(\u0026#34;SPARK_YARN_STAGING_DIR\u0026#34;)) val stagingDirFs = stagingDirPath.getFileSystem(yarnConf) val priority = ShutdownHookManager.SPARK_CONTEXT_SHUTDOWN_PRIORITY - 1 ShutdownHookManager.addShutdownHook(priority) { () =\u0026gt; ... } if (isClusterMode) { runDriver() } else { runExecutorLauncher() } } catch { case e: Exception =\u0026gt; logError(\u0026#34;Uncaught exception: \u0026#34;, e) finish(FinalApplicationStatus.FAILEDApplicationMaster.EXIT_UNCAUGHT_EXCEPTION,\u0026#34;Uncaught exception: \u0026#34; + StringUtils.stringifyException(e)) } finally { try { metricsSystem.foreach { ms =\u0026gt; ms.report() ms.stop() } } catch { case e: Exception =\u0026gt; logWarning(\u0026#34;Exception during stopping of the metric system: \u0026#34;, e) } } exitCode } private def runDriver(): Unit = { addAmIpFilter(None, System.getenv(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV)) userClassThread = startUserApplication() // This a bit hacky, but we need to wait until the spark.driver.port property has // been set by the Thread executing the user class. logInfo(\u0026#34;Waiting for spark context initialization...\u0026#34;) val totalWaitTime = sparkConf.get(AM_MAX_WAIT_TIME) try { val sc = ThreadUtils.awaitResult(sparkContextPromise.future, Duration(totalWaitTime, TimeUnit.MILLISECONDS)) if (sc != null) { val rpcEnv = sc.env.rpcEnv val userConf = sc.getConf val host = userConf.get(DRIVER_HOST_ADDRESS) val port = userConf.get(DRIVER_PORT) registerAM(host, port, userConf, sc.ui.map(_.webUrl), appAttemptId) val driverRef = rpcEnv.setupEndpointRef( RpcAddress(host, port), YarnSchedulerBackend.ENDPOINT_NAME) createAllocator(driverRef, userConf, rpcEnv, appAttemptId, distCacheConf) } else { // Sanity check; should never happen in normal operation, since sc should only be null // if the user app did not create a SparkContext. throw new IllegalStateException(\u0026#34;User did not initialize spark context!\u0026#34;) } resumeDriver() userClassThread.join() } catch { case e: SparkException if e.getCause().isInstanceOf[TimeoutException] =\u0026gt; logError( s\u0026#34;SparkContext did not initialize after waiting for $totalWaitTime ms. \u0026#34; + \u0026#34;Please check earlier log output for errors. Failing the application.\u0026#34;) finish(FinalApplicationStatus.FAILED, ApplicationMaster.EXIT_SC_NOT_INITED, \u0026#34;Timed out waiting for SparkContext.\u0026#34;) } finally { resumeDriver() } } private def startUserApplication(): Thread = { logInfo(\u0026#34;Starting the user application in a separate Thread\u0026#34;) var userArgs = args.userArgs if (args.primaryPyFile != null \u0026amp;\u0026amp; args.primaryPyFile.endsWith(\u0026#34;.py\u0026#34;)) { // When running pyspark, the app is run using PythonRunner. The second argument is the list // of files to add to PYTHONPATH, which Client.scala already handles, so it\u0026#39;s empty. userArgs = Seq(args.primaryPyFile, \u0026#34;\u0026#34;) ++ userArgs } if (args.primaryRFile != null \u0026amp;\u0026amp; (args.primaryRFile.endsWith(\u0026#34;.R\u0026#34;) || args.primaryRFile.endsWith(\u0026#34;.r\u0026#34;))) { // TODO(davies): add R dependencies here } val mainMethod = userClassLoader.loadClass(args.userClass) .getMethod(\u0026#34;main\u0026#34;, classOf[Array[String]]) val userThread = new Thread { override def run(): Unit = { try { if (!Modifier.isStatic(mainMethod.getModifiers)) { logError(s\u0026#34;Could not find static main method in object ${args.userClass}\u0026#34;) finish(FinalApplicationStatus.FAILED, ApplicationMaster.EXIT_EXCEPTION_USER_CLASS) } else { mainMethod.invoke(null, userArgs.toArray) finish(FinalApplicationStatus.SUCCEEDED, ApplicationMaster.EXIT_SUCCESS) logDebug(\u0026#34;Done running user class\u0026#34;) } } catch { case e: InvocationTargetException =\u0026gt; e.getCause match { case _: InterruptedException =\u0026gt; // Reporter thread can interrupt to stop user class case SparkUserAppException(exitCode) =\u0026gt; val msg = s\u0026#34;User application exited with status $exitCode\u0026#34; logError(msg) finish(FinalApplicationStatus.FAILED, exitCode, msg) case cause: Throwable =\u0026gt; logError(\u0026#34;User class threw exception: \u0026#34;, cause) finish(FinalApplicationStatus.FAILED, ApplicationMaster.EXIT_EXCEPTION_USER_CLASS, \u0026#34;User class threw exception: \u0026#34; + StringUtils.stringifyException(cause)) } sparkContextPromise.tryFailure(e.getCause()) } finally { // Notify the thread waiting for the SparkContext, in case the application did not // instantiate one. This will do nothing when the user code instantiates a SparkContext // (with the correct master), or when the user code throws an exception (due to the // tryFailure above). sparkContextPromise.trySuccess(null) } } } userThread.setContextClassLoader(userClassLoader) userThread.setName(\u0026#34;Driver\u0026#34;) userThread.start() userThread } 在ApplicationMaster的run方法中，我们可以看到它做了这样几件事：构建上下文，添加钩子函数， 在我们这个例子中调用runDriver方法。 在runDriver方法中，我们可以看到上面就会调用startUserApplication这个方法，从这个函数名称我们也可以看到，这里才真正调用到了用户程序，使用反射调用到了用户的程序，在用户的程序中会做SparkContext的初始化，如果用户的主程序没有做SparkContext的初始化，在runDriver中也会进行检测，从而抛出异常。用户程序是新启动一个线程来运行，主程序会等待用户程序结束。\nJavaWordCount 我们再来看下我们的这个example程序。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public static void main(String[] args) throws Exception { if (args.length \u0026lt; 1) { System.err.println(\u0026#34;Usage: JavaWordCount \u0026lt;file\u0026gt;\u0026#34;); System.exit(1); } SparkSession spark = SparkSession .builder() .appName(\u0026#34;JavaWordCount\u0026#34;) .getOrCreate(); JavaRDD\u0026lt;String\u0026gt; lines = spark.read().textFile(args[0]).javaRDD(); JavaRDD\u0026lt;String\u0026gt; words = lines.flatMap(s -\u0026gt; Arrays.asList(SPACE.split(s)).iterator()); JavaPairRDD\u0026lt;String, Integer\u0026gt; ones = words.mapToPair(s -\u0026gt; new Tuple2\u0026lt;\u0026gt;(s, 1)); JavaPairRDD\u0026lt;String, Integer\u0026gt; counts = ones.reduceByKey((i1, i2) -\u0026gt; i1 + i2); List\u0026lt;Tuple2\u0026lt;String, Integer\u0026gt;\u0026gt; output = counts.collect(); for (Tuple2\u0026lt;?,?\u0026gt; tuple : output) { System.out.println(tuple._1() + \u0026#34;: \u0026#34; + tuple._2()); } spark.stop(); } 在这里初始化了SparkSession，然后从文件读取，转化，然后调用collect算子后打印结果。 最终关闭SparkSession。\n1 2 3 4 def collect(): Array[T] = withScope { val results = sc.runJob(this, (iter: Iterator[T]) =\u0026gt; iter.toArray) Array.concat(results: _*) } 在这个例子中，是最后的collect这个action算子，最终调用了runJob。 到这里就完成了整个任务的部署。\n总结一下： 当我们执行spark-submit.sh时，会先执行SparkSubmit然后根据master和deploy-mode启动不同的提交类。如果是local mode则直接启动用户的主类，否则启动不同集群模式的类。 在集群提交类中，此例中为YarnClusterApplication. 在这个类中做的事情是在Yarn集群上启动一个Application也就是ApplicationMaster，这个Application启动后会在一个新线程启动user application。user application也就是我们任务的主类。\nSparkLauncher Spark还提供了一种方式，可以将提交任务集成到Java代码中。用户可以使用一个Service来集中化做任务提交，可以方便的管理集群中提交的任务数量等等。\n1 2 3 4 5 6 7 8 9 SparkLauncher launcher = new SparkLauncher(); launcher.setMaster(“yarn”); launcher.setDeployMode(“cluster”); launcher.setMainClass(“...”); launcher.setAppResource(“...”); launcher.addAppArgs(“...”); ... SparkAppHandle.Listener listener = new SparkAppHandle.Listener(){...} launcher.startApplication(listener); 我们可以以一个大概这样的代码就可以提交并启动一个Spark任务。并且添加了Listener，可以对任务的状态进行感知。 我们来看一下这个的具体实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 public SparkAppHandle startApplication(SparkAppHandle.Listener... listeners) throws IOException { LauncherServer server = LauncherServer.getOrCreateServer(); ChildProcAppHandle handle = new ChildProcAppHandle(server); for (SparkAppHandle.Listener l : listeners) { handle.addListener(l); } String secret = server.registerHandle(handle); String loggerName = getLoggerName(); ProcessBuilder pb = createBuilder(); if (LOG.isLoggable(Level.FINE)) { LOG.fine(String.format(\u0026#34;Launching Spark application:%n%s\u0026#34;, join(\u0026#34; \u0026#34;, pb.command()))); } boolean outputToLog = outputStream == null; boolean errorToLog = !redirectErrorStream \u0026amp;\u0026amp; errorStream == null; // Only setup stderr + stdout to logger redirection if user has not otherwise configured output // redirection. if (loggerName == null \u0026amp;\u0026amp; (outputToLog || errorToLog)) { String appName; if (builder.appName != null) { appName = builder.appName; } else if (builder.mainClass != null) { int dot = builder.mainClass.lastIndexOf(\u0026#34;.\u0026#34;); if (dot \u0026gt;= 0 \u0026amp;\u0026amp; dot \u0026lt; builder.mainClass.length() - 1) { appName = builder.mainClass.substring(dot + 1, builder.mainClass.length()); } else { appName = builder.mainClass; } } else if (builder.appResource != null) { appName = new File(builder.appResource).getName(); } else { appName = String.valueOf(COUNTER.incrementAndGet()); } String loggerPrefix = getClass().getPackage().getName(); loggerName = String.format(\u0026#34;%s.app.%s\u0026#34;, loggerPrefix, appName); } if (outputToLog \u0026amp;\u0026amp; errorToLog) { pb.redirectErrorStream(true); } pb.environment().put(LauncherProtocol.ENV_LAUNCHER_PORT, String.valueOf(server.getPort())); pb.environment().put(LauncherProtocol.ENV_LAUNCHER_SECRET, secret); try { Process child = pb.start(); InputStream logStream = null; if (loggerName != null) { logStream = outputToLog ? child.getInputStream() : child.getErrorStream(); } handle.setChildProc(child, loggerName, logStream); } catch (IOException ioe) { handle.kill(); throw ioe; } return handle; } 这段代码中的主要逻辑是调用了ProcessBuilder.start()方法，我们先看一下这个ProcessBuilder创建逻辑：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 private ProcessBuilder createBuilder() throws IOException { List\u0026lt;String\u0026gt; cmd = new ArrayList\u0026lt;\u0026gt;(); cmd.add(findSparkSubmit()); cmd.addAll(builder.buildSparkSubmitArgs()); // Since the child process is a batch script, let\u0026#39;s quote things so that special characters are // preserved, otherwise the batch interpreter will mess up the arguments. Batch scripts are // weird. if (isWindows()) { List\u0026lt;String\u0026gt; winCmd = new ArrayList\u0026lt;\u0026gt;(); for (String arg : cmd) { winCmd.add(quoteForBatchScript(arg)); } cmd = winCmd; } ProcessBuilder pb = new ProcessBuilder(cmd.toArray(new String[cmd.size()])); for (Map.Entry\u0026lt;String, String\u0026gt; e : builder.childEnv.entrySet()) { pb.environment().put(e.getKey(), e.getValue()); } if (workingDir != null) { pb.directory(workingDir); } // Only one of redirectError and redirectError(...) can be specified. // Similarly, if redirectToLog is specified, no other redirections should be specified. checkState(!redirectErrorStream || errorStream == null, \u0026#34;Cannot specify both redirectError() and redirectError(...) \u0026#34;); checkState(getLoggerName() == null || ((!redirectErrorStream \u0026amp;\u0026amp; errorStream == null) || outputStream == null), \u0026#34;Cannot used redirectToLog() in conjunction with other redirection methods.\u0026#34;); if (redirectErrorStream) { pb.redirectErrorStream(true); } if (errorStream != null) { pb.redirectError(errorStream); } if (outputStream != null) { pb.redirectOutput(outputStream); } return pb; } 通过这段代码可以看出它其实也是在构建一段spark-submit命令。 通过ProcessBuilder构建并运行spark-submit命令，然后将其作为子进程进行监控。\n","permalink":"https://www.liunaijie.top/publish/spark%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E4%B8%80%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B/","summary":"\u003cp\u003e本文以Spark3.4版本，提交任务方式为Yarn Cluster，以\u003ccode\u003eJavaWordCount\u003c/code\u003e这个应用程序为例来分析一下一个Spark任务的提交过程。\n过程中会对代码做一些删减，主要目的是了解从用户提交任务开始到一个任务如何开始运行.\n本文主要记录两种提交任务的方式，\u003ccode\u003espark-submit.sh\u003c/code\u003e与\u003ccode\u003eSparkLauncher\u003c/code\u003e.\u003c/p\u003e\n\u003ch1 id=\"spark-submitsh\"\u003eSpark-submit.sh\u003c/h1\u003e\n\u003cp\u003e以需要执行JavaWordCount为例，启动命令为：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./bin/spark-submit \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e--master yarn \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e--deploy-mode cluster \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e--class org.apache.spark.examples.JavaWordCount \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e/path/to/examples.jar \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e/tmp/file1.txt\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e我们指定了在yarn上以cluster模式启动JavaWordCount程序， 指定了jar包位置，以及要读取的文件\u003c/p\u003e\n\u003ch2 id=\"spark-submit\"\u003espark-submit\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e......\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eSPARK_HOME\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e/bin/spark-class org.apache.spark.deploy.SparkSubmit \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$@\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e这个脚本最后调用了\u003ccode\u003espark-class\u003c/code\u003e脚本，第一个参数为\u003ccode\u003eSparkSubmit\u003c/code\u003e的全类名，再加上我们本来的参数\u003c/p\u003e\n\u003ch2 id=\"spark-class\"\u003espark-class\u003c/h2\u003e\n\u003cp\u003e这个脚本做了这几件事：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e查找spark的jar包\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Find Spark jars.  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e -d \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eSPARK_HOME\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e/jars\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eSPARK_JARS_DIR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eSPARK_HOME\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e/jars\u0026#34;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eSPARK_JARS_DIR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eSPARK_HOME\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e/assembly/target/scala-\u003c/span\u003e\u003cspan class=\"nv\"\u003e$SPARK_SCALA_VERSION\u003c/span\u003e\u003cspan class=\"s2\"\u003e/jars\u0026#34;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efi\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e ! -d \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$SPARK_JARS_DIR\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e -z \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$SPARK_TESTING$SPARK_SQL_TESTING\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Failed to find Spark jars directory (\u003c/span\u003e\u003cspan class=\"nv\"\u003e$SPARK_JARS_DIR\u003c/span\u003e\u003cspan class=\"s2\"\u003e).\u0026#34;\u003c/span\u003e 1\u0026gt;\u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;You need to build Spark with the target \\\u0026#34;package\\\u0026#34; before running this program.\u0026#34;\u003c/span\u003e 1\u0026gt;\u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexit\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eLAUNCH_CLASSPATH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$SPARK_JARS_DIR\u003c/span\u003e\u003cspan class=\"s2\"\u003e/*\u0026#34;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efi\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Add the launcher build dir to the classpath if requested.  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e -n \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$SPARK_PREPEND_CLASSES\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eLAUNCH_CLASSPATH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eSPARK_HOME\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e/launcher/target/scala-\u003c/span\u003e\u003cspan class=\"nv\"\u003e$SPARK_SCALA_VERSION\u003c/span\u003e\u003cspan class=\"s2\"\u003e/classes:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$LAUNCH_CLASSPATH\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e调用SparkLauncher里面的Main进行参数注入\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebuild_command\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$RUNNER\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e -Xmx128m \u003cspan class=\"nv\"\u003e$SPARK_LAUNCHER_OPTS\u003c/span\u003e -cp \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$LAUNCH_CLASSPATH\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e org.apache.spark.launcher.Main \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$@\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;%d\\0\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$?\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e执行被修改过的命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eCMD\u003c/span\u003e\u003cspan class=\"o\"\u003e=(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eCMD\u003c/span\u003e\u003cspan class=\"p\"\u003e[@]:\u003c/span\u003e\u003cspan class=\"nv\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$LAST\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eCMD\u003c/span\u003e\u003cspan class=\"p\"\u003e[@]\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e经过修改后最终的命令为：\u003c/p\u003e","title":"Spark源码解析-(一)提交流程"},{"content":"时间语义 Flink中的时间有三种:\n事件时间 Event Time. 事件真实发生的时间. 摄入时间 Ingestion time. 事件接入到Flink系统的时间 处理时间 Processing Time. 事件到到当前算子的时间 举一个夸张点的例子: 有一条记录, 它与11:00:00这个时间点产生. 我们的Flink系统在12:00:00这个时间点接入并进入第一个算子. 在Flink系统中又有很多个算子, 到达最后一个算子的时间为13:00:00. 那么在这种情况下: 事件时间是11:00:00. 这个是不会变的. 对于第一个算子而言, 这时的摄入时间和处理时间都为12:00:00. 对于最后一个算子而言, 这时这条时间的摄入时间为12:00:00. 处理时间为13:00:00 设置时间语义 我们需要在Job中设置执行时采用哪种时间语义.\n1 2 3 4 5 env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime); env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime); env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime); Processing Time \u0026amp; Ingestion Time 这两个时间都由Flink系统自己生成. Processing Time是由每个算子自己生成, 实现起来非常简单, 延迟也是最小的. 但是由于每个时间都是获取的当前算子的时钟, 时钟可能不一致, 并且由于集群中不同机器的执行性能不同, 每个算子也有一定的耗时, 对于第N个算子来说的相同Processing Time, 可能到第N+1个算子上就会有改变. 因此Processing Time在时间窗口下的计算会有不确定性. Ingestion Time是指事件到底Flink Source的时间. 一个事件在整个处理过程中都使用这个时间. 但是Ingestion Time也还是无法解决事件乱序问题.\n这两个时间语义如果对事件进行重新消费, 也不能保证幂等性.\nEvent Time 事件时间是这个事件真实产生的时间, 发生时伴随其他信息一起写入到时间中. 但是由于在网络中的传输或其他问题, 可能导致事件到底Flink系统时发生乱序、迟到等现象. 真实情况中的数据大概如上图所示, 我们可以知道在Flink中进行处理的时间必然是大于等于事件发生的时间, 也就是事件都应该在这条红色虚线以下. 对于红色虚线上的点, 如上图的红色事件, 在12:10收到了12:20的事件, 这是一条未来的事件, 必须要对这条事件进行处理, 比如忽略或者对事件时间进行修改等, 不然会造成后续计算上的错误. 而对于蓝色的事件, 在12:10收到了11:50的事件, 这个事件是历史事件, 如果使用Flink作为批处理系统或者重置Offset后重刷历史, 这个都属于正常事件. 再来看一下事件时间发生在12:10的一系列事件, 它可以在12:10之后的任一时间到达Flink系统\nWatermark 当使用Event Time来进行处理时, 通过上图可知某个时间点的数据会在未来的任意时间到达, 我们需要设置一个界限从而避免无限制的等待, 也就是需要知道我们接入的数据需要何时去触发计算. watermark是一条特殊的记录, 从代码中可以看到它继承自StreamElement\n1 2 3 public final class Watermark extends StreamElement { ... } 如何生成Watermark: 在Flink中, 可以直接在Source算子上生成Watermark, 也可以在其他算子上生成. 推荐是在Source算子上直接生成, 因为这样可以更加准确. 在Source算子中可以调用SourceContext中的方法直接生成Watermark.\n1 2 3 4 5 6 7 8 9 10 11 12 13 public interface SourceFunction\u0026lt;T\u0026gt; extends Function, Serializable { void run(SourceContext\u0026lt;T\u0026gt; ctx) throws Exception; interface SourceContext\u0026lt;T\u0026gt; { void collect(T element); void collectWithTimestamp(T element, long timestamp); void emitWatermark(Watermark mark); } } 亦可在其他算子上调用assignTimestampsAndWatermarks(watermarkStrategy)生成, watermarkStrategy中接口中包含了很多的默认方法, 其中只有一个方法需要实现即 WatermarkGenerator\u0026lt;T\u0026gt; createWatermarkGenerator(WatermarkGeneratorSupplier.Context context); WaermarkGenerator的代码如下\n1 2 3 4 5 6 7 public interface WatermarkGenerator\u0026lt;T\u0026gt; { // 每条事件调用一次 void onEvent(T event, long eventTimestamp, WatermarkOutput output); // 间隔ExecutionConfig setAutoWatermarkInterval(long interval)调用一次该方法 void onPeriodicEmit(WatermarkOutput output); } 通过代码可以看出, 这两个方法都可以实现watermark的生成. 但是watermark如果太多也不是一件很好的事情, 很用可能造成下游算子压力过大. 影响整体性能.\n看一个Flink内部的实现:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class BoundedOutOfOrdernessWatermarks\u0026lt;T\u0026gt; implements WatermarkGenerator\u0026lt;T\u0026gt; { /** The maximum timestamp encountered so far. */ private long maxTimestamp; /** The maximum out-of-orderness that this watermark generator assumes. */ private final long outOfOrdernessMillis; public BoundedOutOfOrdernessWatermarks(Duration maxOutOfOrderness) { ... } @Override public void onEvent(T event, long eventTimestamp, WatermarkOutput output) { maxTimestamp = Math.max(maxTimestamp, eventTimestamp); } @Override public void onPeriodicEmit(WatermarkOutput output) { output.emitWatermark(new Watermark(maxTimestamp - outOfOrdernessMillis - 1)); } } 该实现中, 定义了一个超时时间, 在onEvent中并没有生成Watermark, 只是进行了内部的计算保存了一个当前时刻的最大事件时间, 而在onPeriodicEmit方法中才真正的生成Watermark 从该实现中, 我们可以看到Flink会定时得到一个Watermark, 这个Watermark的时间是当前最大事件时间减去一个容忍时间. 如果我们设置maxOutOfOrderness为10分钟, 在橙色事件(eventTime为12:10)到来时, 就会生成一个12:00的Watermark, 后续再接收到的紫色事件(12:00)则被认为是迟到事件, 不会参与到后续的计算中. 同样在黄色事件(eventTime为12:20)的事件到来时会生成一个12:10的Watermark, 后续再收到的小于12:10的事件都会被认为是迟到事件\n当我们设置的窗口为滚动窗口, 时间大小为10分钟, 容忍时间为10分钟, 时间语义为事件时间时 当黄色事件(eventTime=12:20)的事件到达时会生成一个12:10的Watermark, 这时会触发(12:00-12:10)窗口的计算(因为窗口大小为10分钟), 即计算图中黄色框中部分 当蓝色事件(eventTime=12:30)的事件到达时会生成一个12:20的Watermark, 这时会计算图中蓝色框中的数据, 这部分的数据事件时间都是12:10~12:20. WindowAssigner WindowAssigner的作用是对数据进行窗口的划分 来看下这个抽象类的方法:\n1 2 3 4 5 6 7 8 public abstract Collection\u0026lt;W\u0026gt; assignWindows( T element, long timestamp, WindowAssignerContext context); public abstract boolean isEventTime(); public abstract Trigger\u0026lt;T, W\u0026gt; getDefaultTrigger(StreamExecutionEnvironment env); public abstract TypeSerializer\u0026lt;W\u0026gt; getWindowSerializer(ExecutionConfig executionConfig); 主要的方法为assignWindow, 对传入的element划分到一个或多个窗口内. 看几个主要的实现类:\nTumblingProcessingTimeWindows 1 2 3 4 5 6 7 8 9 10 11 12 public Collection\u0026lt;TimeWindow\u0026gt; assignWindows( Object element, long timestamp, WindowAssignerContext context) { final long now = context.getCurrentProcessingTime(); if (staggerOffset == null) { staggerOffset = windowStagger.getStaggerOffset(context.getCurrentProcessingTime(), size); } long start = TimeWindow.getWindowStartWithOffset( now, (globalOffset + staggerOffset) % size, size); return Collections.singletonList(new TimeWindow(start, start + size)); } 获取当前的处理时间, 然后计算出当前窗口的开始时间start, 返回一个时间窗口\nSlidingProcessingTimeWindows 1 2 3 4 5 6 7 8 9 10 public Collection\u0026lt;TimeWindow\u0026gt; assignWindows( Object element, long timestamp, WindowAssignerContext context) { timestamp = context.getCurrentProcessingTime(); List\u0026lt;TimeWindow\u0026gt; windows = new ArrayList\u0026lt;\u0026gt;((int) (size / slide)); long lastStart = TimeWindow.getWindowStartWithOffset(timestamp, offset, slide); for (long start = lastStart; start \u0026gt; timestamp - size; start -= slide) { windows.add(new TimeWindow(start, start + size)); } return windows; } 获取当前的处理时间, 然后根据size和slide计算出一个元素会处于多少个窗口, 然后计算并设置每个窗口的起止时间.\nFlink中内置的一些窗口类型: Flink里面的时间默认从1970年1月1日0点0分开始计算，可以手动指定offset\n滑动窗口（Sliding Windows） 1 2 3 4 .window(SlidingEventTimeWindows.of(Time.seconds(10), Time.seconds(5))) -- 手动指定offset .window(SlidingProcessingTimeWindows.of(Time.hours(12), Time.hours(1), Time.hours(-8))) 每5秒计算一次，每次计算的窗口大小为10秒\n滚动窗口（Tumbling Windows） 滚动窗口是一种特殊的滑动窗口，步长跟窗口大小一致\n1 .window(TumblingEventTimeWindows.of(Time.seconds(5))) 每5秒计算一次，每次窗口大小为5秒 会话窗口（Session Windows） 进行keyBy之后，这组数据如果超过一定时长后没有新的数据产生则会触发窗口计算，这个窗口内的时间长度无法确定，数据数量也无法确定\n1 2 .keyBy(\u0026lt;key selector\u0026gt;) .window(EventTimeSessionWindows.withGap(Time.minutes(1))) 一个user如果超过1分钟没有数据则触发计算\nTrigger Trigger的作用是来计算窗口内的元素是否需要被计算. 首先来看一下Trigger类的几个主要方法:\n1 2 3 4 5 6 7 8 public abstract TriggerResult onElement(T element, long timestamp, W window, TriggerContext ctx) throws Exception; public abstract TriggerResult onProcessingTime(long time, W window, TriggerContext ctx) throws Exception; public abstract TriggerResult onEventTime(long time, W window, TriggerContext ctx) throws Exception; 这三个方法的作用从名称就可以看出来, 分别是当一条数据到来时调用, 当Processing Time触发时调用, 当Event Time触发时调用. 先看一下返回结果, 返回结果都是TriggerResult这个类. 这个类是一个枚举类, 包含了以下几个值:\nCONTINUE FIRE PURGE FIRE_AND_PURGE 这几个枚举的作用表明了后续的计算方式. 如果是CONTINUE, 则表示不进行处理. 如果是FIRE, 则表示需要进行计算 如果是PURGE, 则表示需要清空当前窗口内的元素. 不会触发计算 如果是FIRE_AND_PURGE, 则表示计算的同时也清空窗口内的元素. Flink内置了以下几个内置的触发器:\nCountTrigger 当事件条数达到设定的阈值后触发 DeltaTrigger 预先给定一个DeltaFunction和阈值, 每条事件到达后都会根据DeltaFunction进行计算, 如果计算结果超过阈值, 则触发计算 ProcessingTimeTrigger 当处理时间超过窗口结束时间时触发 EventTimeTrigger 当事件事件(Watermark)超过窗口结束时间时触发 ContinuousProcessingTimeTrigger 给定一个时间间隔, 按照处理时间连续触发 ContinuousEventTimeTrigger 给定一个时间间隔, 按照事件事件连续触发 PurgingTrigger 包装其他的触发器, 使其触发之后, 清除窗口内的数据和状态 通过代码来看一下具体的实现: 先来看一下CountTrigger的实现:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 @Override public TriggerResult onEventTime(long time, W window, TriggerContext ctx) { return TriggerResult.CONTINUE; } @Override public TriggerResult onProcessingTime(long time, W window, TriggerContext ctx) throws Exception { return TriggerResult.CONTINUE; } private final long maxCount; private final ReducingStateDescriptor\u0026lt;Long\u0026gt; stateDesc = new ReducingStateDescriptor\u0026lt;\u0026gt;(\u0026#34;count\u0026#34;, new Sum(), LongSerializer.INSTANCE); private CountTrigger(long maxCount) { this.maxCount = maxCount; } @Override public TriggerResult onElement(Object element, long timestamp, W window, TriggerContext ctx) throws Exception { ReducingState\u0026lt;Long\u0026gt; count = ctx.getPartitionedState(stateDesc); count.add(1L); if (count.get() \u0026gt;= maxCount) { count.clear(); return TriggerResult.FIRE; } return TriggerResult.CONTINUE; } 可以看到在CountTrigger的onEventTime和onProcessingTime方法中都没有做任何逻辑处理, 直接返回CONTINUE. 在onElement方法中, 做了一个计数器, 当条数超过阈值后, 首先将计数器进行清零, 然后触发计算. 再看一下ProcessingTimeTrigger的代码具体实现:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public TriggerResult onEventTime(long time, TimeWindow window, TriggerContext ctx) throws Exception { return TriggerResult.CONTINUE; } public TriggerResult onElement( Object element, long timestamp, TimeWindow window, TriggerContext ctx) { ctx.registerProcessingTimeTimer(window.maxTimestamp()); return TriggerResult.CONTINUE; } public TriggerResult onProcessingTime(long time, TimeWindow window, TriggerContext ctx) { return TriggerResult.FIRE; } 在onEventTime方法中不做任何处理, 直接返回CONTINUE 在onElement中向context中注册一个ProcessingTimeTimer, 触发的事件为当前window的最大时间 当context中注册的ProcessingTimeTimer到时后, 会调用onProcessingTime方法, 这个方法直接返回FIRE\n自定义触发器 有时官方提供的这些触发器可能无法满足我们的需求, 我们可以自己来实现一些自定义的触发器, 从上面的几个源码中, 我们可以看到主要需要实现的三个方法.onElement, onProcessingTime,onEventTime. 假如我们需要实现一个如下的触发器: 每10s触发一次, 并且如果10s内的数据量超过100条,则进行触发, 触发后重新计时, 按照ProcessingTime处理 这个类似于上面两个CountTrigger与ProcessingTimeTrigger的结合. 可以写出如下的代码:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 public class CustomTrigger\u0026lt;W extends Window\u0026gt; extends Trigger\u0026lt;Object, W\u0026gt; { // 触发的条数 private final long size; // 触发的间隔时长 private final long interval; private static final long serialVersionUID = 1L; // 条数计数器 private final ReducingStateDescriptor\u0026lt;Long\u0026gt; countStateDesc = new ReducingStateDescriptor\u0026lt;\u0026gt;(\u0026#34;count\u0026#34;, new ReduceSum(), LongSerializer.INSTANCE); // 时间计数器，保存下一次触发的时间 private final ReducingStateDescriptor\u0026lt;Long\u0026gt; timeStateDesc = new ReducingStateDescriptor\u0026lt;\u0026gt;(\u0026#34;fire-interval\u0026#34;, new ReduceMin(), LongSerializer.INSTANCE); public CustomTrigger(long size, long interval) { this.size = size; this.interval = interval; } @Override public TriggerResult onElement(Object element, long timestamp, W window, TriggerContext ctx) throws Exception { // 获取当前的条数 ReducingState\u0026lt;Long\u0026gt; count = ctx.getPartitionedState(countStateDesc); // 获取下次的触发时间 ReducingState\u0026lt;Long\u0026gt; fireTimestamp = ctx.getPartitionedState(timeStateDesc); // 每条数据 counter + 1 count.add(1L); if (count.get() \u0026gt;= size) { // 满足条数的触发条件，先清零条数计数器 count.clear(); // 满足条数时也需要清除时间的触发器 ctx.deleteProcessingTimeTimer(fireTimestamp.get()); fireTimestamp.clear(); // fire 触发计算 return TriggerResult.FIRE; } // 如果条数没有达到阈值，并且下次触发时间为空，则注册下次的触发时间 timestamp = ctx.getCurrentProcessingTime(); if (fireTimestamp.get() == null) { long nextFireTimestamp = timestamp + interval; ctx.registerProcessingTimeTimer(nextFireTimestamp); fireTimestamp.add(nextFireTimestamp); } return TriggerResult.CONTINUE; } @Override public TriggerResult onProcessingTime(long time, W window, TriggerContext ctx) throws Exception { // 获取当前的条数 ReducingState\u0026lt;Long\u0026gt; count = ctx.getPartitionedState(countStateDesc); // 获取设置的触发时间 ReducingState\u0026lt;Long\u0026gt; fireTimestamp = ctx.getPartitionedState(timeStateDesc); count.clear(); fireTimestamp.clear(); return TriggerResult.FIRE; } @Override public TriggerResult onEventTime(long time, W window, TriggerContext ctx) throws Exception { return TriggerResult.CONTINUE; } @Override public void clear(W window, TriggerContext ctx) throws Exception { ReducingState\u0026lt;Long\u0026gt; fireTimestamp = ctx.getPartitionedState(timeStateDesc); ReducingState\u0026lt;Long\u0026gt; count = ctx.getPartitionedState(countStateDesc); long timestamp = fireTimestamp.get(); ctx.deleteProcessingTimeTimer(timestamp); fireTimestamp.clear(); count.clear(); } @Override public boolean canMerge() { return true; } @Override public void onMerge(W window, OnMergeContext ctx) { ctx.mergePartitionedState(timeStateDesc); ctx.mergePartitionedState(countStateDesc); } } class ReduceSum implements ReduceFunction\u0026lt;Long\u0026gt; { @Override public Long reduce(Long value1, Long value2) throws Exception { return value1 + value2; } } class ReduceMin implements ReduceFunction\u0026lt;Long\u0026gt; { @Override public Long reduce(Long value1, Long value2) throws Exception { return Math.min(value1, value2); } } 主要的实现的两个方法:onElement, onProcessingTime. 在onElement方法中, 每一条记录进入条数计数器加一, 当超过阈值时清空两个状态变量, 同时取消下次的ProcessingTime触发时间. 如果没有达到阈值, 并且下次下次触发时间还未设置时, 计算得到下次触发时间注册到context中. 在onProcessingTime方法中, 清空两个状态变量后进行触发.\n这里的返回结果都是FIRE, 不会清空窗口内的元素, 如果需要清空可以修改为FIRE_AND_PURGE 或者使用PurgingTrigger类来进行封装. 看一下PurgingTrigger的代码\n1 2 3 4 5 6 7 8 9 10 11 12 private Trigger\u0026lt;T, W\u0026gt; nestedTrigger; private PurgingTrigger(Trigger\u0026lt;T, W\u0026gt; nestedTrigger) { this.nestedTrigger = nestedTrigger; } @Override public TriggerResult onElement(T element, long timestamp, W window, TriggerContext ctx) throws Exception { TriggerResult triggerResult = nestedTrigger.onElement(element, timestamp, window, ctx); return triggerResult.isFire() ? TriggerResult.FIRE_AND_PURGE : triggerResult; } 调用包装的其他触发器, 如果是结果FIRE则返回FIRE_AND_PURGE\nWindowOperator 触发器Trigger只是返回了一个是否要触发计算的结果, 谁来调用了触发器以及进行后续的计算呢? 就是WindowOperator. 在WindowedStream中, 会进行WindowOperator的构建.\n1 2 3 4 5 6 7 8 9 10 11 12 public WindowOperator( WindowAssigner\u0026lt;? super IN, W\u0026gt; windowAssigner, TypeSerializer\u0026lt;W\u0026gt; windowSerializer, KeySelector\u0026lt;IN, K\u0026gt; keySelector, TypeSerializer\u0026lt;K\u0026gt; keySerializer, StateDescriptor\u0026lt;? extends AppendingState\u0026lt;IN, ACC\u0026gt;, ?\u0026gt; windowStateDescriptor, InternalWindowFunction\u0026lt;ACC, OUT, K, W\u0026gt; windowFunction, Trigger\u0026lt;? super IN, ? super W\u0026gt; trigger, long allowedLateness, OutputTag\u0026lt;IN\u0026gt; lateDataOutputTag) { ... } 在WindowOperator类中, 可以看到包含了计算所需要的信息, 窗口如何进行划分, key的选择器, 窗口的计算函数, 触发器等. 在这个类中, 也有三个方法:\n1 2 3 4 5 public void processElement(StreamRecord\u0026lt;IN\u0026gt; element) throws Exception {} public void onEventTime(InternalTimer\u0026lt;K, W\u0026gt; timer) throws Exception {} public void onProcessingTime(InternalTimer\u0026lt;K, W\u0026gt; timer) throws Exception {} 先来看一下processElement方法, 我们将源码简化一下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 public void processElement(StreamRecord\u0026lt;IN\u0026gt; element) throws Exception { // 先调用窗口划分器, 进行窗口的划分 final Collection\u0026lt;W\u0026gt; elementWindows = windowAssigner.assignWindows( element.getValue(), element.getTimestamp(), windowAssignerContext); // if element is handled by none of assigned elementWindows boolean isSkippedElement = true; final K key = this.\u0026lt;K\u0026gt;getKeyedStateBackend().getCurrentKey(); if (windowAssigner instanceof MergingWindowAssigner) { ... } else { for (W window : elementWindows) { // 先判断窗口是否已经过期, 如果过期则不进行后续的处理 if (isWindowLate(window)) { continue; } ... // 调用触发器, 得到是否要计算的结果 TriggerResult triggerResult = triggerContext.onElement(element); if (triggerResult.isFire()) { // 获取窗口的元素 ACC contents = windowState.get(); if (contents == null) { continue; } // 进行计算 emitWindowContents(window, contents); } if (triggerResult.isPurge()) { windowState.clear(); } registerCleanupTimer(window); } } ... } } protected boolean isWindowLate(W window) { return (windowAssigner.isEventTime() \u0026amp;\u0026amp; (cleanupTime(window) \u0026lt;= internalTimerService.currentWatermark())); } private void emitWindowContents(W window, ACC contents) throws Exception { timestampedCollector.setAbsoluteTimestamp(window.maxTimestamp()); processContext.window = window; // 调用函数进行计算 userFunction.process( triggerContext.key, window, processContext, contents, timestampedCollector); } ","permalink":"https://www.liunaijie.top/publish/flink%E5%AD%A6%E4%B9%A0%E4%B8%80/","summary":"\u003ch1 id=\"时间语义\"\u003e时间语义\u003c/h1\u003e\n\u003cp\u003eFlink中的时间有三种:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e事件时间 Event Time.  事件真实发生的时间.\u003c/li\u003e\n\u003cli\u003e摄入时间 Ingestion time. 事件接入到Flink系统的时间\u003c/li\u003e\n\u003cli\u003e处理时间 Processing Time. 事件到到当前算子的时间\n举一个夸张点的例子: 有一条记录, 它与\u003ccode\u003e11:00:00\u003c/code\u003e这个时间点产生. 我们的Flink系统在\u003ccode\u003e12:00:00\u003c/code\u003e这个时间点接入并进入第一个算子. 在Flink系统中又有很多个算子, 到达最后一个算子的时间为\u003ccode\u003e13:00:00\u003c/code\u003e.\n那么在这种情况下: 事件时间是\u003ccode\u003e11:00:00\u003c/code\u003e. 这个是不会变的. 对于第一个算子而言, 这时的摄入时间和处理时间都为\u003ccode\u003e12:00:00\u003c/code\u003e.  对于最后一个算子而言, 这时这条时间的摄入时间为\u003ccode\u003e12:00:00\u003c/code\u003e. 处理时间为\u003ccode\u003e13:00:00\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e设置时间语义\u003c/strong\u003e\n我们需要在Job中设置执行时采用哪种时间语义.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetStreamTimeCharacteristic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTimeCharacteristic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eEventTime\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetStreamTimeCharacteristic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTimeCharacteristic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eProcessingTime\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetStreamTimeCharacteristic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTimeCharacteristic\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eIngestionTime\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"processing-time--ingestion-time\"\u003eProcessing Time \u0026amp; Ingestion Time\u003c/h2\u003e\n\u003cp\u003e这两个时间都由Flink系统自己生成.\nProcessing Time是由每个算子自己生成, 实现起来非常简单, 延迟也是最小的. 但是由于每个时间都是获取的当前算子的时钟, 时钟可能不一致, 并且由于集群中不同机器的执行性能不同, 每个算子也有一定的耗时, 对于第N个算子来说的相同Processing Time, 可能到第N+1个算子上就会有改变. 因此Processing Time在时间窗口下的计算会有不确定性.\nIngestion Time是指事件到底Flink Source的时间. 一个事件在整个处理过程中都使用这个时间. 但是Ingestion Time也还是无法解决事件乱序问题.\u003c/p\u003e\n\u003cp\u003e这两个时间语义如果对事件进行重新消费, 也不能保证幂等性.\u003c/p\u003e\n\u003ch2 id=\"event-time\"\u003eEvent Time\u003c/h2\u003e\n\u003cp\u003e事件时间是这个事件真实产生的时间, 发生时伴随其他信息一起写入到时间中.\n但是由于在网络中的传输或其他问题, 可能导致事件到底Flink系统时发生乱序、迟到等现象.\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/20221204203917.svg\" alt=\"\"\u003e\n真实情况中的数据大概如上图所示, 我们可以知道在Flink中进行处理的时间必然是大于等于事件发生的时间, 也就是事件都应该在这条红色虚线以下.\n对于红色虚线上的点, 如上图的红色事件, 在12:10收到了12:20的事件, 这是一条未来的事件, 必须要对这条事件进行处理, 比如忽略或者对事件时间进行修改等, 不然会造成后续计算上的错误.\n而对于蓝色的事件, 在12:10收到了11:50的事件, 这个事件是历史事件, 如果使用Flink作为批处理系统或者重置Offset后重刷历史, 这个都属于正常事件.\n再来看一下事件时间发生在12:10的一系列事件, 它可以在12:10之后的任一时间到达Flink系统\u003c/p\u003e","title":"Flink学习(一)"},{"content":"数据存储格式 首先是分区目录，这个与Hive上的分区表一致。\n一些基础文件：checksum.txt是校验文件，count.txt明文记录了这个分区下数据量，columns.txt明文记录了这个表的schema结构\n然后是数据文件，ClickHouse采用了列式存储，而且是每一列都会有单独的文件，比如一个表有id,name两列，就会有id.bin, name.bin数据文件，mrk(mrk2) 列字段标记文件，存储了bin文件中数据的偏移量信息，使用二进制格式存储。\nprimary.idx索引文件，记录了索引与mrk2文件直接的关系，索引在内存也保存了一份，查询时不会使用磁盘上的文件（重启时需要加载到内存中）\n分区规则 ClickHouse支持分区，但是与Hive中的分区有所不同。\n对于不同的分区字段有不同的规则：\n没有设置分区 这个时候所有数据存到一个文件夹下，文件名称为all 分区为数字类型 分区文件夹为数字 分区为时间类型 文件夹为yyyyMMdd 格式 分区为其他类型（比如字符串） 对值做哈希后，作为文件夹名称 分区命名规则 ***PartitionId_MinBlockNum_MaxBlockNum_Level***\n文件夹总体的名称分为4部分\nPartitionId是根据字段真实值与上面的规则生成。 Level：这个文件夹被merge的的次数 BlockNum: 在一个表中这个值从1开始累加，每次新生成一个文件夹，这个文件夹的MinBlockNum和MaxBlockNum是相同的值（比如说1），然后这个值加1，第二次生成的文件夹MinBlockNum和MaxBlockNum变成了2，在后续的Merge过程中，两个文件夹merge时，会取两个文件夹中的最小和最大值来作为新文件夹的MinBlockNum和MaxBlockNum。 数据写入过程 来解释一下上面这个图\n首先是表的定义，被写入的这个表定义了一个按月分区的分区规则 partition by toYYYYMM(dt)。\nT1时刻，写入了两条数据，两条数据的月份不一致（5月，6月），所以会写到两个分区文件夹下 T2时刻，写入了三条数据。这三条数据中，两条分别与上一次T1时刻插入的月份一致（5月，6月），还有一条与之前不一致（7月）。这个时候与之前相同月份的数据还会新创建一个文件夹来保存数据，并不会合并到之前已经创建的分区文件夹中。 T3时刻，这个时候后台会将相同时间的文件夹进行合并，这个时候我们有5个文件夹，里面有2个5月，2个6月，1个7月。合并时分区文件夹的命名会进行改变。最后面的level表示这个文件夹被merge的次数，BlockNum会取被merge的两个文件夹中最大最小值。 数据文件的写入过程 刚刚是数据文件夹的写入过程，让我们从文件夹进入到文件，看一下里面的这些文件是如何生成的。\nClickHouse中数据是按列来进行存储的，并且是每一列都有单独的.bin文件.\n在bin文件夹中数据是经过压缩后进行存储的，数据压缩不是将全部的数据进行整体压缩，而是将数据分块，对每一块进行单独的压缩。\n每一个压缩块的大小在64KB到1MB之间\n用这样的一个图来说明一下索引文件(primary.idx)，数据标记文件(mrk2)，数据文件直接的关系(bin)\n表的定义：\n1 2 3 4 5 6 7 8 9 create table merge_tree_test_table_v1 ( seller_id UInt32, clicks UInt16, buyer_id UInt32, date DateTime ) Engine = MergeTree() Order By (seller_id, buyer_id) Partition By (date) settings index_granularity=4096 我将这个表的索引粒度修改为4096，意味着4096条记录会作为一个单位来进行存储。\n数据按照order by的字段来进行排序，然后按照索引粒度来生成索引文件，每4096行会生成一条索引，然后将这些记录压缩后写入到bin文件中，最后在mrk2文件中记录索引与bin文件直接的关系。\n以上面的数据为例，0～4096条的大小不满足64KB，所以需要与40968192条一起放到一个压缩块中，那么在mrk2文件中，04096与4096～8192这两个在bin文件中的压缩文件位置是一样的，但是在解压缩后的位置是不一样的。\nclicks这个字段也会按照相同的规则来生成文件夹和mrk2文件，这样当我们需要走索引查询时可以很容易的找到相应的值。而且每次拿出来的最小块是在1MB左右，与HDFS默认128MB相差了128倍。\n延伸 从这个写入过程可以看出来，ClickHouse数据写入是直接写入到磁盘中，中间没有做内存的缓存，所以如果一批数据在中间出错就会出现问题。- 不能保证原子性 同样，在数据写入时也不会去校验primary key的唯一性，在之前的数据库中我们认为pk是唯一的，但是在ClickHouse中定义的primary key 并不是唯一的，可以存在多个值。- 与传统数据库区别 当插入批次过多，或者每次插入数据量很小时，会对ClickHouse造成很大的压力，有可能会后台merge不过来从而报错，所以在真实业务中可以对插入进行缓存，将streaming变成mini batch - 业务使用建议 其他MergeTree引擎 这些引擎都是在相同分区的文件夹Merge过程中，增加了一些操作。\nReplacingMergeTree\nSummingMergeTree\n数据备份 ReplicatedMergeTree\n","permalink":"https://www.liunaijie.top/coding/big_data/clickhouse/mergetree%E5%BC%95%E6%93%8E%E5%AE%B6%E6%97%8F/","summary":"\u003ch1 id=\"数据存储格式\"\u003e数据存储格式\u003c/h1\u003e\n\u003cp\u003e首先是分区目录，这个与Hive上的分区表一致。\u003c/p\u003e\n\u003cp\u003e一些基础文件：\u003ccode\u003echecksum.txt\u003c/code\u003e是校验文件，\u003ccode\u003ecount.txt\u003c/code\u003e明文记录了这个分区下数据量，\u003ccode\u003ecolumns.txt\u003c/code\u003e明文记录了这个表的\u003ccode\u003eschema\u003c/code\u003e结构\u003c/p\u003e\n\u003cp\u003e然后是数据文件，ClickHouse采用了列式存储，而且是每一列都会有单独的文件，比如一个表有id,name两列，就会有id.bin, name.bin数据文件，\u003ccode\u003emrk(mrk2)\u003c/code\u003e 列字段标记文件，存储了bin文件中数据的偏移量信息，使用二进制格式存储。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eprimary.idx\u003c/code\u003e索引文件，记录了索引与mrk2文件直接的关系，索引在内存也保存了一份，查询时不会使用磁盘上的文件（重启时需要加载到内存中）\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/clickhouse-data-save-pattern.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003ch2 id=\"分区规则\"\u003e分区规则\u003c/h2\u003e\n\u003cp\u003eClickHouse支持分区，但是与Hive中的分区有所不同。\u003c/p\u003e\n\u003cp\u003e对于不同的分区字段有不同的规则：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e没有设置分区\n\u003cul\u003e\n\u003cli\u003e这个时候所有数据存到一个文件夹下，文件名称为\u003ccode\u003eall\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e分区为数字类型\n\u003cul\u003e\n\u003cli\u003e分区文件夹为数字\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e分区为时间类型\n\u003cul\u003e\n\u003cli\u003e文件夹为\u003ccode\u003eyyyyMMdd\u003c/code\u003e 格式\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e分区为其他类型（比如字符串）\n\u003cul\u003e\n\u003cli\u003e对值做哈希后，作为文件夹名称\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"分区命名规则\"\u003e\u003cstrong\u003e分区\u003c/strong\u003e命名规则\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e***PartitionId_MinBlockNum_MaxBlockNum_Level***\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e文件夹总体的名称分为4部分\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePartitionId是根据字段真实值与上面的规则生成。\u003c/li\u003e\n\u003cli\u003eLevel：这个文件夹被merge的的次数\u003c/li\u003e\n\u003cli\u003eBlockNum: 在一个表中这个值从1开始累加，每次新生成一个文件夹，这个文件夹的MinBlockNum和MaxBlockNum是相同的值（比如说1），然后这个值加1，第二次生成的文件夹MinBlockNum和MaxBlockNum变成了2，在后续的Merge过程中，两个文件夹merge时，会取两个文件夹中的最小和最大值来作为新文件夹的MinBlockNum和MaxBlockNum。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"数据写入过程\"\u003e数据写入过程\u003c/h1\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/write-process.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e来解释一下上面这个图\u003c/p\u003e\n\u003cp\u003e首先是表的定义，被写入的这个表定义了一个按月分区的分区规则 \u003ccode\u003epartition by toYYYYMM(dt)\u003c/code\u003e。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eT1时刻，写入了两条数据，两条数据的月份不一致（5月，6月），所以会写到两个分区文件夹下\u003c/li\u003e\n\u003cli\u003eT2时刻，写入了三条数据。这三条数据中，两条分别与上一次T1时刻插入的月份一致（5月，6月），还有一条与之前不一致（7月）。这个时候与之前相同月份的数据还会新创建一个文件夹来保存数据，并不会合并到之前已经创建的分区文件夹中。\u003c/li\u003e\n\u003cli\u003eT3时刻，这个时候后台会将相同时间的文件夹进行合并，这个时候我们有5个文件夹，里面有2个5月，2个6月，1个7月。合并时分区文件夹的命名会进行改变。最后面的level表示这个文件夹被merge的次数，BlockNum会取被merge的两个文件夹中最大最小值。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"数据文件的写入过程\"\u003e数据文件的写入过程\u003c/h2\u003e\n\u003cp\u003e刚刚是数据文件夹的写入过程，让我们从文件夹进入到文件，看一下里面的这些文件是如何生成的。\u003c/p\u003e\n\u003cp\u003eClickHouse中数据是按列来进行存储的，并且是每一列都有单独的\u003ccode\u003e.bin\u003c/code\u003e文件.\u003c/p\u003e\n\u003cp\u003e在bin文件夹中数据是经过压缩后进行存储的，数据压缩不是将全部的数据进行整体压缩，而是将数据分块，对每一块进行单独的压缩。\u003c/p\u003e\n\u003cp\u003e每一个压缩块的大小在\u003ccode\u003e64KB到1MB\u003c/code\u003e之间\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/data-block.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e用这样的一个图来说明一下索引文件(primary.idx)，数据标记文件(mrk2)，数据文件直接的关系(bin)\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/index-mapping.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e表的定义：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ecreate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003etable\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emerge_tree_test_table_v1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003eseller_id\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eUInt32\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003eclicks\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eUInt16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003ebuyer_id\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eUInt32\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"nb\"\u003edate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDateTime\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eEngine\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMergeTree\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eOrder\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eBy\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eseller_id\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ebuyer_id\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ePartition\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eBy\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003edate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003esettings\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eindex_granularity\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e4096\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e我将这个表的索引粒度修改为4096，意味着4096条记录会作为一个单位来进行存储。\u003c/p\u003e","title":"ClickHouse-MergeTree引擎"},{"content":"在MergeTree的写入过程中可以看到，ClickHouse无法保证主键的唯一性。\n如果在数据写入时做主键校验，那么这个时候就需要维护一个主键的列表，然后每次写入时都需要进行判断，这样做的话就降低了吞吐量。\nClickHouse利用了MergeTree需要合并相同分区的特性，实现了在合并过程中进行主键校验的过程。\n例子 1 2 3 4 5 6 7 8 CREATE TABLE table_001 ( id UInt32, name String, age UInt8 ) ENGINE = ReplacingMergeTree() ORDER BY id PARTITION BY age 这个表定义主键为id，分区在age字段上。\n写入两条初始化数据：insert into table_001 values(1,'name1',18),(2,'name2',18);\n这两条数据属于相同分区，但是主键值不一样，我们这个时候进行查询，可以查询到这两条数据。\n然后再写入一条分区相同id相同的数据insert into table_001 values(1,'name3',18);\n当插入完成后进行查询时，还是可以看到这条数据，因为合并文件夹不是立即生效的，而当我们过一段时间后再去进行查询就会看到第一次写入的name1 这一行已经被替换掉了。我们也可以设置替换规则，来决定当遇到多条相同主键数据时的保留策略。\n再来写一条不同分区下的相同id数据: insert into table_001 values(1,'name3',19);\n这条记录的id与之前的重复了，但是它并不会替换之前的值，因为它们属于不同的分区下，在merge过程中并不会被merge到一起，不会触发替换的过程。\n数据替换策略 ReplacingMergeTree的引擎定义中可以传递一个参数，这个参数的类型可以是UInt*，Date或者DateTime类型的字段。\nDDL：\n1 2 3 4 5 6 7 create table replace_table_v1( id String, code String, create_time DateTime ) Engine = ReplacingMergeTree(create_time) Partition By toYYYYMM(create_time) Order By id 当我们向这个表进行插入时，当遇到重复数据时，会保留create_time最大的那一条记录。\n总结 简单梳理一下它的处理逻辑：\n使用Order By排序键作为判断重复数据的唯一键 只有在合并分区的时候才会触发替换重复数据的逻辑 以分区为单位替换重复数据。当分区合并时，同一分区内的重复数据会被替换，而不同分区之间的重复数据不会被替换。 在进行数据去重时，由于分区内的数据已经基于Order By进行了排序，所以很容易找到那些相邻的重复数据。 数据的去重策略有两种： 当没有设置版本去重策略时，保留同一组重复数据中的最后一行 当设置了去重策略后，保留字段最大的那一行。 延伸 ReplacingMergeTree引擎也只能实现相同分区内的主键去重，不能实现全局的主键唯一性，而且还是延迟生效的。 数据去重时，最好指定去重策略，因为保留数据的最后一行有时候可能并不是我们真正想保留的数据。 ","permalink":"https://www.liunaijie.top/coding/big_data/clickhouse/replacingmergetree/","summary":"\u003cp\u003e在MergeTree的写入过程中可以看到，ClickHouse无法保证主键的唯一性。\u003c/p\u003e\n\u003cp\u003e如果在数据写入时做主键校验，那么这个时候就需要维护一个主键的列表，然后每次写入时都需要进行判断，这样做的话就降低了吞吐量。\u003c/p\u003e\n\u003cp\u003eClickHouse利用了MergeTree需要合并相同分区的特性，实现了在合并过程中进行主键校验的过程。\u003c/p\u003e\n\u003ch2 id=\"例子\"\u003e例子\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etable_001\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eUInt32\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \t\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eUInt8\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eENGINE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eReplacingMergeTree\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eORDER\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eBY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ePARTITION\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eBY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e这个表定义主键为id，分区在age字段上。\u003c/p\u003e\n\u003cp\u003e写入两条初始化数据：\u003ccode\u003einsert into table_001 values(1,'name1',18),(2,'name2',18);\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e这两条数据属于相同分区，但是主键值不一样，我们这个时候进行查询，可以查询到这两条数据。\u003c/p\u003e\n\u003cp\u003e然后再写入一条分区相同id相同的数据\u003ccode\u003einsert into table_001 values(1,'name3',18);\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e当插入完成后进行查询时，还是可以看到这条数据，因为合并文件夹不是立即生效的，而当我们过一段时间后再去进行查询就会看到第一次写入的\u003ccode\u003ename1\u003c/code\u003e 这一行已经被替换掉了。我们也可以设置替换规则，来决定当遇到多条相同主键数据时的保留策略。\u003c/p\u003e\n\u003cp\u003e再来写一条不同分区下的相同id数据: \u003ccode\u003einsert into table_001 values(1,'name3',19);\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e这条记录的id与之前的重复了，但是它并不会替换之前的值，因为它们属于不同的分区下，在merge过程中并不会被merge到一起，不会触发替换的过程。\u003c/p\u003e\n\u003ch2 id=\"数据替换策略\"\u003e数据替换策略\u003c/h2\u003e\n\u003cp\u003eReplacingMergeTree的引擎定义中可以传递一个参数，这个参数的类型可以是UInt*，Date或者DateTime类型的字段。\u003c/p\u003e\n\u003cp\u003eDDL：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ecreate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003etable\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ereplace_table_v1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate_time\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDateTime\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eEngine\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eReplacingMergeTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate_time\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ePartition\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eBy\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etoYYYYMM\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecreate_time\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eOrder\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eBy\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e当我们向这个表进行插入时，当遇到重复数据时，会保留create_time最大的那一条记录。\u003c/p\u003e","title":"ClickHouse-ReplacingMergeTree"},{"content":"ClickHouse的备份机制依赖于zookeeper来实现，并且只有MergeTree系列的表可以支持副本。\n副本是表级别的，不是整个服务器级别的，所以在相同的服务器(cluster)上可以同时存在备份表和非备份表。\n副本不依赖与分片，每个分片都有它自己的独立副本。\n修改配置 如果要使用副本，需要在配置文件中设置zookeeper集群的地址。例如：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;zookeeper\u0026gt; \u0026lt;node index=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;host\u0026gt;192.168.10.1\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;2181\u0026lt;/port\u0026gt; \u0026lt;/node\u0026gt; \u0026lt;node index=\u0026#34;2\u0026#34;\u0026gt; \u0026lt;host\u0026gt;192.168.10.2\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;2181\u0026lt;/port\u0026gt; \u0026lt;/node\u0026gt; \u0026lt;node index=\u0026#34;3\u0026#34;\u0026gt; \u0026lt;host\u0026gt;192.168.10.3\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;2181\u0026lt;/port\u0026gt; \u0026lt;/node\u0026gt; \u0026lt;/zookeeper\u0026gt; 对于不同的机器，这个配置不相同。\n1 2 3 4 5 \u0026lt;macros\u0026gt; \u0026lt;layer\u0026gt;05\u0026lt;/layer\u0026gt; \u0026lt;shard\u0026gt;02\u0026lt;/shard\u0026gt; \u0026lt;replica\u0026gt;example05-02-1.yandex.ru\u0026lt;/replica\u0026gt; \u0026lt;/macros\u0026gt; 如果配置文件中没有设置zk，则无法创建复制表，并且任何现有的复制表都将变为只读。\n在zk中存储元数据的路径是在创建表时指定的。\nDDL 1 2 3 4 5 6 7 8 9 CREATE TABLE test_table ( EventDate DateTime, CounterID UInt32, UserID UInt32, ver UInt16 ) ENGINE = ReplicatedReplacingMergeTree(\u0026#39;/clickhouse/tables/{layer}-{shard}/test_table\u0026#39;, \u0026#39;{replica}\u0026#39;, ver) PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID)) Replicated*MergeTree的参数\nzoo_path — 在ZooKeeper中元数据的存储路径. replica_name — 该节点在ZooKeeper中的名称. other_parameters — Parameters of an engine which is used for creating the replicated version, for example, version in ReplacingMergeTree. 这里给的例子是创建了一个ReplacingMergeTree的备份表，Replace的规则是字段ver。这个表的元数据存储在zk的位置是：/clickhouse/tables/05-02/test_table 。\n数据写入过程 由于ClickHouse是多主架构，所以可以在任意一个阶段进行数据写入，数据写入后会将元信息存储到zk中，包括（哪个节点写入了数据，数据存储的位置等）。其他节点检测到变换后会通过元信息向写入数据的阶段来拉取数据。\n其他操作类型信息同步流程 Optimize Table Alert Delete Alert Table ","permalink":"https://www.liunaijie.top/coding/big_data/clickhouse/replicatedmergetree/","summary":"\u003cp\u003eClickHouse的备份机制依赖于zookeeper来实现，并且只有MergeTree系列的表可以支持副本。\u003c/p\u003e\n\u003cp\u003e副本是表级别的，不是整个服务器级别的，所以在相同的服务器(cluster)上可以同时存在备份表和非备份表。\u003c/p\u003e\n\u003cp\u003e副本不依赖与分片，每个分片都有它自己的独立副本。\u003c/p\u003e\n\u003ch2 id=\"修改配置\"\u003e修改配置\u003c/h2\u003e\n\u003cp\u003e如果要使用副本，需要在配置文件中设置zookeeper集群的地址。例如：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;zookeeper\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;node\u003c/span\u003e \u003cspan class=\"na\"\u003eindex=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;host\u0026gt;\u003c/span\u003e192.168.10.1\u003cspan class=\"nt\"\u003e\u0026lt;/host\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;port\u0026gt;\u003c/span\u003e2181\u003cspan class=\"nt\"\u003e\u0026lt;/port\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;/node\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;node\u003c/span\u003e \u003cspan class=\"na\"\u003eindex=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;2\u0026#34;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;host\u0026gt;\u003c/span\u003e192.168.10.2\u003cspan class=\"nt\"\u003e\u0026lt;/host\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;port\u0026gt;\u003c/span\u003e2181\u003cspan class=\"nt\"\u003e\u0026lt;/port\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;/node\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;node\u003c/span\u003e \u003cspan class=\"na\"\u003eindex=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;3\u0026#34;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;host\u0026gt;\u003c/span\u003e192.168.10.3\u003cspan class=\"nt\"\u003e\u0026lt;/host\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;port\u0026gt;\u003c/span\u003e2181\u003cspan class=\"nt\"\u003e\u0026lt;/port\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;/node\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;/zookeeper\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e对于不同的机器，这个配置不相同。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;macros\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;layer\u0026gt;\u003c/span\u003e05\u003cspan class=\"nt\"\u003e\u0026lt;/layer\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;shard\u0026gt;\u003c/span\u003e02\u003cspan class=\"nt\"\u003e\u0026lt;/shard\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;replica\u0026gt;\u003c/span\u003eexample05-02-1.yandex.ru\u003cspan class=\"nt\"\u003e\u0026lt;/replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;/macros\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e如果配置文件中没有设置zk，则无法创建复制表，并且任何现有的复制表都将变为只读。\u003c/p\u003e\n\u003cp\u003e在zk中存储元数据的路径是在创建表时指定的。\u003c/p\u003e\n\u003ch2 id=\"ddl\"\u003eDDL\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etest_table\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eEventDate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDateTime\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eCounterID\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eUInt32\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eUserID\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eUInt32\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003ever\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eUInt16\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eENGINE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eReplicatedReplacingMergeTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/clickhouse/tables/{layer}-{shard}/test_table\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;{replica}\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ever\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ePARTITION\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eBY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etoYYYYMM\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eEventDate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eORDER\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eBY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCounterID\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eEventDate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eintHash32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eUserID\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eReplicated*MergeTree的参数\u003c/strong\u003e\u003c/p\u003e","title":"ClickHouse-ReplicatedMergeTree"},{"content":"假设有这样一种需求，用户只需要查询数据的汇总结果，不关心明细数据，并且数据汇总的维度都是明确的（GROUP BY条件明确，不会随意改变）\n对于这样的查询场景，在ClickHouse中最直接的方法就是使用MergeTree引擎存储数据，然后每次查询通过GROUP BY聚合查询，利用SUM聚合函数汇总结果。\n但是这样存在两个问题：\n存在额外的存储开销：用户不关心明细数据，只关系汇总结果，而我们会一直存储明细数据 额外的查询开销：对于相同的查询，每次都需要走一遍聚合计算 SummingMergeTree引擎可以解决这样的应用场景，它可以按照预先定义的维度进行聚合汇总数据，将同一分组下的多行数据汇总合并成一行，这样即可以减少数据量，也可以减少后期查询的运算量。\n在MergeTree的每个数据分区内，数据会按照ORDER BY表达式排序。主键索引也会按照PRIMARY KEY表达式取值并排序。而且ORDER BY可以替代主键。所以之前一直使用ORDER BY来定义主键。\n如果同时需要定义ORDER BY与PRIMARY KEY，通常只有一种可能，就是明确希望ORDER BY与PRIMARY KEY不同，这种情况只会使用在SummingMergeTree与AggregatingMergeTree时才会出现。因为SummingMergeTree与AggregatingMergeTree都需要根据GROUP BY条件来进行预先聚合，这个时候使用来ORDER BY来定义GROUP BY的字段，所以需要使用PRIMARY KEY来修改主键的定义 示例： 假如我们有一个表，这里面有A，B，C，D，E，F。6个字段，当我们需要按照A，B，C，D字段进行汇总时，则设置为：ORDER BY(A, B, C, D)。但是在查询过程中，我们只会对A字段进行过滤，所以我们只需要对A字段设置主键，这样表的定义就变成了：\n1 2 ORDER BY(A, B, C, D) PRIMARY KEY(A) 如果同时声明PRIMARY KEY与ORDER BY，则需要PRIMARY KEY是ORDER BY的前缀\n定义： 1 ENGINE = SummingMergeTree((col1, col2, ...)) col1, col2为columnar的参数值，这是选填参数，用于设置除主键外其他数值类型字段，以指定被SUM汇总的列字段。如果参数为空，则会将所有非主键的数值类型字段进行SUM汇总。\n总结： 对ORDER BY中字段相同值的记录进行提前聚合。\n","permalink":"https://www.liunaijie.top/coding/big_data/clickhouse/summingmergetree/","summary":"\u003cp\u003e假设有这样一种需求，用户只需要查询数据的汇总结果，不关心明细数据，并且数据汇总的维度都是明确的（GROUP BY条件明确，不会随意改变）\u003c/p\u003e\n\u003cp\u003e对于这样的查询场景，在ClickHouse中最直接的方法就是使用MergeTree引擎存储数据，然后每次查询通过GROUP BY聚合查询，利用SUM聚合函数汇总结果。\u003c/p\u003e\n\u003cp\u003e但是这样存在两个问题：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e存在额外的存储开销：用户不关心明细数据，只关系汇总结果，而我们会一直存储明细数据\u003c/li\u003e\n\u003cli\u003e额外的查询开销：对于相同的查询，每次都需要走一遍聚合计算\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSummingMergeTree引擎可以解决这样的应用场景，它可以按照预先定义的维度进行聚合汇总数据，将同一分组下的多行数据汇总合并成一行，这样即可以减少数据量，也可以减少后期查询的运算量。\u003c/p\u003e\n\u003cp\u003e在MergeTree的每个数据分区内，数据会按照ORDER BY表达式排序。主键索引也会按照PRIMARY KEY表达式取值并排序。而且ORDER BY可以替代主键。所以之前一直使用ORDER BY来定义主键。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e如果同时需要定义ORDER BY与PRIMARY KEY，通常只有一种可能，就是明确希望ORDER BY与PRIMARY KEY不同，这种情况只会使用在SummingMergeTree与AggregatingMergeTree时才会出现。因为SummingMergeTree与AggregatingMergeTree都需要根据GROUP BY条件来进行预先聚合，这个时候使用来ORDER BY来定义GROUP BY的字段，所以需要使用PRIMARY KEY来修改主键的定义\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"示例\"\u003e示例：\u003c/h2\u003e\n\u003cp\u003e假如我们有一个表，这里面有A，B，C，D，E，F。6个字段，当我们需要按照A，B，C，D字段进行汇总时，则设置为：\u003ccode\u003eORDER BY(A, B, C, D)\u003c/code\u003e。但是在查询过程中，我们只会对A字段进行过滤，所以我们只需要对A字段设置主键，这样表的定义就变成了：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eORDER\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eBY\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eD\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003ePRIMARY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eKEY\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e如果同时声明PRIMARY KEY与ORDER BY，则需要PRIMARY KEY是ORDER BY的前缀\u003c/p\u003e\n\u003ch1 id=\"定义\"\u003e定义：\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eENGINE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSummingMergeTree\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003ecol1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecol2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e...))\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003ecol1, col2为columnar的参数值，这是选填参数，用于设置除主键外其他数值类型字段，以指定被SUM汇总的列字段。如果参数为空，则会将所有非主键的数值类型字段进行SUM汇总。\u003c/p\u003e\n\u003ch1 id=\"总结\"\u003e总结：\u003c/h1\u003e\n\u003cp\u003e对ORDER BY中字段相同值的记录进行提前聚合。\u003c/p\u003e","title":"ClickHouse-SummingMergeTree"},{"content":"安装 1 2 3 4 5 docker run -d --name clickhouse-server \\\\ -p 8123:8123 -p 9000:9000 \\\\ -v \u0026lt;CONFIG_PATH\u0026gt;:/etc/clickhouse-server/ \\\\ -v \u0026lt;DATA_PATH\u0026gt;:/var/lib/clickhouse/ yandex/clickhouse-server 拉取并将Clickhouse的8123端口, 9000端口映射到本机.\nClickhouse的默认配置文件路径为/etc/clickhouse-server/ , 默认文件存储位置为/var/lib/clickhouse/\nMySQL连接Clickhouse Clickhouse默认开放了9004端口, mysql client可以通过这个端口查询Clickhouse的数据.\n开启Tabix 在配置文件中, 将Tabix的注释打开.\n1 2 \u0026lt;!-- 这里默认被注释掉, 打开后即可使用Tabix来进行查询 --\u0026gt; \u0026lt;http_server_default_response\u0026gt;\u0026lt;![CDATA[\u0026lt;html ng-app=\u0026#34;SMI2\u0026#34;\u0026gt;\u0026lt;head\u0026gt;\u0026lt;base href=\u0026#34;\u0026lt;http://ui.tabix.io/\u0026gt;\u0026#34;\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;div ui-view=\u0026#34;\u0026#34; class=\u0026#34;content-ui\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;script src=\u0026#34;\u0026lt;http://loader.tabix.io/master.js\u0026gt;\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;]]\u0026gt;\u0026lt;/http_server_default_response\u0026gt; 设置分布式表 由于Clickhouse的分布式表依赖zookeeper, 所以需要先配置zookeeper.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;zookeeper-servers\u0026gt; \u0026lt;node index=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;host\u0026gt;10.0.55.17\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;2181\u0026lt;/port\u0026gt; \u0026lt;/node\u0026gt; \u0026lt;node index=\u0026#34;2\u0026#34;\u0026gt; \u0026lt;host\u0026gt;10.0.10.23\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;2181\u0026lt;/port\u0026gt; \u0026lt;/node\u0026gt; \u0026lt;node index=\u0026#34;3\u0026#34;\u0026gt; \u0026lt;host\u0026gt;10.0.55.16\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;2181\u0026lt;/port\u0026gt; \u0026lt;/node\u0026gt; \u0026lt;/zookeeper-servers\u0026gt; 集群配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 \u0026lt;remote_servers\u0026gt; \u0026lt;clusterA\u0026gt; \u0026lt;shard\u0026gt; \u0026lt;!-- Optional. Shard weight when writing data. Default: 1. --\u0026gt; \u0026lt;weight\u0026gt;1\u0026lt;/weight\u0026gt; \u0026lt;!-- Optional. Whether to write data to just one of the replicas. Default: false (write data to all replicas). --\u0026gt; \u0026lt;internal_replication\u0026gt;false\u0026lt;/internal_replication\u0026gt; \u0026lt;replica\u0026gt; \u0026lt;host\u0026gt;ip001\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;9000\u0026lt;/port\u0026gt; \u0026lt;/replica\u0026gt; \u0026lt;replica\u0026gt; \u0026lt;host\u0026gt;ip002\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;9000\u0026lt;/port\u0026gt; \u0026lt;/replica\u0026gt; \u0026lt;/shard\u0026gt; \u0026lt;shard\u0026gt; \u0026lt;weight\u0026gt;2\u0026lt;/weight\u0026gt; \u0026lt;internal_replication\u0026gt;false\u0026lt;/internal_replication\u0026gt; \u0026lt;replica\u0026gt; \u0026lt;host\u0026gt;ip003\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;9000\u0026lt;/port\u0026gt; \u0026lt;/replica\u0026gt; \u0026lt;replica\u0026gt; \u0026lt;host\u0026gt;ip004\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;9440\u0026lt;/port\u0026gt; \u0026lt;/replica\u0026gt; \u0026lt;/shard\u0026gt; \u0026lt;/clusterA\u0026gt; \u0026lt;clusterB\u0026gt; \u0026lt;shard\u0026gt; \u0026lt;weight\u0026gt;1\u0026lt;/weight\u0026gt; \u0026lt;internal_replication\u0026gt;false\u0026lt;/internal_replication\u0026gt; \u0026lt;replica\u0026gt; \u0026lt;host\u0026gt;ip001\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;9000\u0026lt;/port\u0026gt; \u0026lt;/replica\u0026gt; \u0026lt;/shard\u0026gt; \u0026lt;shard\u0026gt; \u0026lt;weight\u0026gt;1\u0026lt;/weight\u0026gt; \u0026lt;internal_replication\u0026gt;false\u0026lt;/internal_replication\u0026gt; \u0026lt;replica\u0026gt; \u0026lt;host\u0026gt;ip002\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;9000\u0026lt;/port\u0026gt; \u0026lt;/replica\u0026gt; \u0026lt;/shard\u0026gt; \u0026lt;shard\u0026gt; \u0026lt;weight\u0026gt;1\u0026lt;/weight\u0026gt; \u0026lt;internal_replication\u0026gt;false\u0026lt;/internal_replication\u0026gt; \u0026lt;replica\u0026gt; \u0026lt;host\u0026gt;ip003\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;9000\u0026lt;/port\u0026gt; \u0026lt;/replica\u0026gt; \u0026lt;/shard\u0026gt; \u0026lt;shard\u0026gt; \u0026lt;weight\u0026gt;1\u0026lt;/weight\u0026gt; \u0026lt;internal_replication\u0026gt;false\u0026lt;/internal_replication\u0026gt; \u0026lt;replica\u0026gt; \u0026lt;host\u0026gt;ip004\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;9000\u0026lt;/port\u0026gt; \u0026lt;/replica\u0026gt; \u0026lt;/shard\u0026gt;\t\u0026lt;/clusterB\u0026gt; \u0026lt;/remote_servers\u0026gt; 配置的意思:\n创建一个名称为clusterA和clusterB 两个集群, 公用ip001, ip002, ip003, ip004这4台机器.\n在clusterA中, 有2个分片, 每个分片都有一个备份.\n分片1: 权重为1, 总权重为3 (1+2), 也就是每3条记录会有1条写入这个分片. 这个分片下有机器ip001, ip002. 分片2: 权重为2, 每3条记录会有2条记录写入这个分片. 这个分片下有机器ip003, ip004. 在clusterB中, 有4个分片, 每个分片没有备份.\n分片1: 权重为1, 机器为ip001 分片2: 权重为1, 机器为ip002 分片3: 权重为1, 机器为ip003 分片4: 权重为1, 机器为ip004 从这个配置中我们可以看出, 我们可以在相同的机器上配置多个集群\n这个配置我们也可以从主配置文件中抽离, 放到单独的配置文件中.\n1 2 3 4 \u0026lt;!-- config.xml 里 --\u0026gt; ... \u0026lt;remote_servers incl=\u0026#34;clickhouse_remote_servers\u0026#34; /\u0026gt; ... 这句的意思是去读取clickhouse_remote_servers这个节点下的信息, 所以新的集群配置必须在这个节点下. 新建的集群配置文件:\n1 2 3 4 5 6 7 8 9 10 \u0026lt;yandex\u0026gt; \u0026lt;clickhouse_remote_servers\u0026gt; \u0026lt;clusterA\u0026gt; ... \u0026lt;/clusterA\u0026gt; \u0026lt;clusterB\u0026gt; ... \u0026lt;/clusterB\u0026gt; \u0026lt;/clickhouse_remote_servers\u0026gt; \u0026lt;/yandex\u0026gt; 分布式表的创建语句为:\n1 2 3 4 5 6 7 CREATE TABLE [IF NOT EXISTS] [db.]table_name ON CLUSTER clusterName ( name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1], name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2], ... ) ENGINE = Distributed(clusterName, database, table, sharding_key) [SETTINGS name=value, ...] 这个语句将在集群clusterName上创建一个表, 并根据sharding_key做数据分片\n其他配置 主配置文件为: /etc/clickhouse-server/config.xml\n数据存放 path — 文件存放位置 tmp_path — 查询临时结果存放位置. 默认为/var/lib/clickhouse/tmp/ 端口 http_port tcp_port mysql_port — mysql协议的端口 interserver_http_port — 内部数据交互端口, 副本之间通过这个端口进行通信和数据交换 连接 max_connections max_concurrent_queries — MergeTree引擎同时处理的请求最大数量 用户与权限 user_directories/users_xml — Clickhouse默认的用户配置在users.xml中, 可以直接在这个配置文件上进行改动, 或者在users.d文件夹下创建其他用户专属的xml配置文件, 具体设置项很多, 具体可以查看 https://clickhouse.com/docs/en/operations/access-rights/ ","permalink":"https://www.liunaijie.top/coding/big_data/clickhouse/%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/","summary":"\u003ch1 id=\"安装\"\u003e安装\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker run -d --name clickhouse-server \u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e -p 8123:8123 -p 9000:9000 \u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e -v \u0026lt;CONFIG_PATH\u0026gt;:/etc/clickhouse-server/ \u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e -v \u0026lt;DATA_PATH\u0026gt;:/var/lib/clickhouse/ \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eyandex/clickhouse-server\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e拉取并将Clickhouse的8123端口, 9000端口映射到本机.\u003c/p\u003e\n\u003cp\u003eClickhouse的默认配置文件路径为\u003ccode\u003e/etc/clickhouse-server/\u003c/code\u003e , 默认文件存储位置为\u003ccode\u003e/var/lib/clickhouse/\u003c/code\u003e\u003c/p\u003e\n\u003ch1 id=\"mysql连接clickhouse\"\u003eMySQL连接Clickhouse\u003c/h1\u003e\n\u003cp\u003eClickhouse默认开放了9004端口, mysql client可以通过这个端口查询Clickhouse的数据.\u003c/p\u003e\n\u003ch1 id=\"开启tabix\"\u003e开启Tabix\u003c/h1\u003e\n\u003cp\u003e在配置文件中, 将Tabix的注释打开.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e\u0026lt;!-- 这里默认被注释掉, 打开后即可使用Tabix来进行查询 --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;http_server_default_response\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u0026lt;![CDATA[\u0026lt;html ng-app=\u0026#34;SMI2\u0026#34;\u0026gt;\u0026lt;head\u0026gt;\u0026lt;base href=\u0026#34;\u0026lt;http://ui.tabix.io/\u0026gt;\u0026#34;\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;div ui-view=\u0026#34;\u0026#34; class=\u0026#34;content-ui\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;script src=\u0026#34;\u0026lt;http://loader.tabix.io/master.js\u0026gt;\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;]]\u0026gt;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026lt;/http_server_default_response\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"设置分布式表\"\u003e设置分布式表\u003c/h1\u003e\n\u003cp\u003e由于Clickhouse的分布式表依赖zookeeper, 所以需要先配置zookeeper.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;zookeeper-servers\u0026gt;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t \u003cspan class=\"nt\"\u003e\u0026lt;node\u003c/span\u003e \u003cspan class=\"na\"\u003eindex=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t \u003cspan class=\"nt\"\u003e\u0026lt;host\u0026gt;\u003c/span\u003e10.0.55.17\u003cspan class=\"nt\"\u003e\u0026lt;/host\u0026gt;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t \u003cspan class=\"nt\"\u003e\u0026lt;port\u0026gt;\u003c/span\u003e2181\u003cspan class=\"nt\"\u003e\u0026lt;/port\u0026gt;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t \u003cspan class=\"nt\"\u003e\u0026lt;/node\u0026gt;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t \u003cspan class=\"nt\"\u003e\u0026lt;node\u003c/span\u003e \u003cspan class=\"na\"\u003eindex=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;2\u0026#34;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t \u003cspan class=\"nt\"\u003e\u0026lt;host\u0026gt;\u003c/span\u003e10.0.10.23\u003cspan class=\"nt\"\u003e\u0026lt;/host\u0026gt;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t \u003cspan class=\"nt\"\u003e\u0026lt;port\u0026gt;\u003c/span\u003e2181\u003cspan class=\"nt\"\u003e\u0026lt;/port\u0026gt;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t \u003cspan class=\"nt\"\u003e\u0026lt;/node\u0026gt;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t \u003cspan class=\"nt\"\u003e\u0026lt;node\u003c/span\u003e \u003cspan class=\"na\"\u003eindex=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;3\u0026#34;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t \u003cspan class=\"nt\"\u003e\u0026lt;host\u0026gt;\u003c/span\u003e10.0.55.16\u003cspan class=\"nt\"\u003e\u0026lt;/host\u0026gt;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t \u003cspan class=\"nt\"\u003e\u0026lt;port\u0026gt;\u003c/span\u003e2181\u003cspan class=\"nt\"\u003e\u0026lt;/port\u0026gt;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t \u003cspan class=\"nt\"\u003e\u0026lt;/node\u0026gt;\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"nt\"\u003e\u0026lt;/zookeeper-servers\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"集群配置\"\u003e集群配置\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e54\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e55\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e56\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e57\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e58\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e59\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e60\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e61\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e62\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e63\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e64\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e65\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;remote_servers\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;clusterA\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;shard\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c\"\u003e\u0026lt;!-- Optional. Shard weight when writing data. Default: 1. --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;weight\u0026gt;\u003c/span\u003e1\u003cspan class=\"nt\"\u003e\u0026lt;/weight\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c\"\u003e\u0026lt;!-- Optional. Whether to write data to just one of the replicas. Default: false (write data to all replicas). --\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;internal_replication\u0026gt;\u003c/span\u003efalse\u003cspan class=\"nt\"\u003e\u0026lt;/internal_replication\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;host\u0026gt;\u003c/span\u003eip001\u003cspan class=\"nt\"\u003e\u0026lt;/host\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;port\u0026gt;\u003c/span\u003e9000\u003cspan class=\"nt\"\u003e\u0026lt;/port\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;/replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;host\u0026gt;\u003c/span\u003eip002\u003cspan class=\"nt\"\u003e\u0026lt;/host\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;port\u0026gt;\u003c/span\u003e9000\u003cspan class=\"nt\"\u003e\u0026lt;/port\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;/replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;/shard\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;shard\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;weight\u0026gt;\u003c/span\u003e2\u003cspan class=\"nt\"\u003e\u0026lt;/weight\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;internal_replication\u0026gt;\u003c/span\u003efalse\u003cspan class=\"nt\"\u003e\u0026lt;/internal_replication\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;host\u0026gt;\u003c/span\u003eip003\u003cspan class=\"nt\"\u003e\u0026lt;/host\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;port\u0026gt;\u003c/span\u003e9000\u003cspan class=\"nt\"\u003e\u0026lt;/port\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;/replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;host\u0026gt;\u003c/span\u003eip004\u003cspan class=\"nt\"\u003e\u0026lt;/host\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;port\u0026gt;\u003c/span\u003e9440\u003cspan class=\"nt\"\u003e\u0026lt;/port\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;/replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;/shard\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;/clusterA\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026lt;clusterB\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;shard\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;weight\u0026gt;\u003c/span\u003e1\u003cspan class=\"nt\"\u003e\u0026lt;/weight\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;internal_replication\u0026gt;\u003c/span\u003efalse\u003cspan class=\"nt\"\u003e\u0026lt;/internal_replication\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;host\u0026gt;\u003c/span\u003eip001\u003cspan class=\"nt\"\u003e\u0026lt;/host\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;port\u0026gt;\u003c/span\u003e9000\u003cspan class=\"nt\"\u003e\u0026lt;/port\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;/replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;/shard\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;shard\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;weight\u0026gt;\u003c/span\u003e1\u003cspan class=\"nt\"\u003e\u0026lt;/weight\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;internal_replication\u0026gt;\u003c/span\u003efalse\u003cspan class=\"nt\"\u003e\u0026lt;/internal_replication\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;host\u0026gt;\u003c/span\u003eip002\u003cspan class=\"nt\"\u003e\u0026lt;/host\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;port\u0026gt;\u003c/span\u003e9000\u003cspan class=\"nt\"\u003e\u0026lt;/port\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;/replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;/shard\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;shard\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;weight\u0026gt;\u003c/span\u003e1\u003cspan class=\"nt\"\u003e\u0026lt;/weight\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;internal_replication\u0026gt;\u003c/span\u003efalse\u003cspan class=\"nt\"\u003e\u0026lt;/internal_replication\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;host\u0026gt;\u003c/span\u003eip003\u003cspan class=\"nt\"\u003e\u0026lt;/host\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;port\u0026gt;\u003c/span\u003e9000\u003cspan class=\"nt\"\u003e\u0026lt;/port\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;/replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;/shard\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;shard\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;weight\u0026gt;\u003c/span\u003e1\u003cspan class=\"nt\"\u003e\u0026lt;/weight\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;internal_replication\u0026gt;\u003c/span\u003efalse\u003cspan class=\"nt\"\u003e\u0026lt;/internal_replication\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;host\u0026gt;\u003c/span\u003eip004\u003cspan class=\"nt\"\u003e\u0026lt;/host\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;port\u0026gt;\u003c/span\u003e9000\u003cspan class=\"nt\"\u003e\u0026lt;/port\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;/replica\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;/shard\u0026gt;\u003c/span\u003e\t\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026lt;/clusterB\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;/remote_servers\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e配置的意思:\u003c/p\u003e","title":"ClickHouse安装与配置"},{"content":"定义 在生产环境下, 对于大表经常需要对其分表, 将数据分别存储在不同的节点上. ClickHouse的Distribbuted表引擎做的就是这件事情.\nClickHouse中的分布式表并不存储数据, 只是做请求和写入的转发, 类似view的概念.\n如何定义:\n1 2 3 CREATE TABLE table_all ON CLUSTER clusterName ( id UInt64 ) ENGINE = Distributed(clusterName, databaseName, tableName[, sharding_key]) 在定义时支持sharding_key的定义, 这样我们可以自定义数据的分布, 但是这个值必须是数值型, 可以自己是一个数值型字段, 也可以是某个函数的结果\n支持的分片策略:\nNone\n只能写入一个分片, 如果这个集群存在多个分区就会报错.\nrand()\n随机写入, 默认是轮循.\n数值型字段\nhash(字段)\n或者业务方, 自己对数据进行切片后, 将数据写入到对应节点的本地表中. 不通过ClickHouse进行分发.\n数据分发过程 由于ClickHouse是多主架构, 所以数据可以被写入任意节点. ClickHouse会在内部自己进行数据的分片划分.\n从上图可以看出, ClickHouse内部进行了二次的数据分发, 不属于自己节点的数据会有两次的网络传输, 所以有很多时候使用方会进行自己对数据进行切分, 将数据写入到对应节点的本地表上. 从而提高性能.\n","permalink":"https://www.liunaijie.top/coding/big_data/clickhouse/distributed-%E5%88%86%E5%B8%83%E5%BC%8F%E8%A1%A8%E5%BC%95%E6%93%8E/","summary":"\u003ch2 id=\"定义\"\u003e定义\u003c/h2\u003e\n\u003cp\u003e在生产环境下, 对于大表经常需要对其分表, 将数据分别存储在不同的节点上. ClickHouse的\u003ccode\u003eDistribbuted\u003c/code\u003e表引擎做的就是这件事情.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eClickHouse中的分布式表并不存储数据, 只是做请求和写入的转发, 类似view的概念.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如何定义:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etable_all\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eON\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eCLUSTER\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eclusterName\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eUInt64\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eENGINE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDistributed\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eclusterName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edatabaseName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etableName\u003c/span\u003e\u003cspan class=\"p\"\u003e[,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esharding_key\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e在定义时支持\u003ccode\u003esharding_key\u003c/code\u003e的定义, 这样我们可以自定义数据的分布, 但是这个值必须是数值型, 可以自己是一个数值型字段, 也可以是某个函数的结果\u003c/p\u003e\n\u003cp\u003e支持的分片策略:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eNone\u003c/p\u003e\n\u003cp\u003e只能写入一个分片, 如果这个集群存在多个分区就会报错.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003erand()\u003c/p\u003e\n\u003cp\u003e随机写入, 默认是轮循.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e数值型字段\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ehash(字段)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e或者业务方, 自己对数据进行切片后, 将数据写入到对应节点的本地表中. 不通过ClickHouse进行分发.\u003c/p\u003e\n\u003ch1 id=\"数据分发过程\"\u003e数据分发过程\u003c/h1\u003e\n\u003cp\u003e由于ClickHouse是多主架构, 所以数据可以被写入任意节点. ClickHouse会在内部自己进行数据的分片划分.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/clickhouse-distributed-1.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e从上图可以看出, ClickHouse内部进行了二次的数据分发, 不属于自己节点的数据会有两次的网络传输, 所以有很多时候使用方会进行自己对数据进行切分, 将数据写入到对应节点的本地表上. 从而提高性能.\u003c/p\u003e","title":"Clickhouse分布式表引擎"},{"content":"Java中的锁机制主要分为Synchronized和Lock\nSynchronized Synchronized在JVM里的实现是基于Monitor来实现的, Monitor是依赖与底层的操作系统Mutex Lock(互斥锁)来实现的线程同步.\nsynchronized用的锁是存在Java对象头里的.\nJVM基于进入和退出Monitor对象来实现方法同步和代码块同步. 代码块同步是使用monitorenter和monitorexit指令实现的, monitorenter指令是在编译后插入到同步代码块的开始位置, 而monitorexit是插入到方法结束处和异常处.\n任何对象都有一个monitor与之关联, 当且一个monitor被持有后,它将处于锁定状态.\n根据虚拟机规范的要求, 在执行monitorenter指令时, 首先要去尝试获取对象的锁, 如果这个对象没被锁定, 或者当前线程已经拥有了那个对象的锁, 把锁的计数器加1. 相应地, 在执行monitorexit指令时会将锁计数器减1, 当计数器被减到0时, 锁就释放了. 如果获取对象锁失败了, 那当前线程就要阻塞等待,直到对象锁被另一个线程释放为止.\nsynchronized同步快对同一条线程来说是可重入的, 不会出现自己把自己锁死的问题 同步块在已进入的线程执行完之前, 会阻塞后面其他线程的进入. 可重入, 不可中断, 非公平锁 Lock Lock底层是基于AQS(AbstractQueuedSynchronizer)的, AQS是用来构建锁或者其他同步组件的基础框架, 它使用来一个int成员变量表示同步状态, 通过内置的FIFO队列来完成资源获取线程的排队工作.\n使用时必须手动进行上锁, 解锁.\nLock接口有多种实现, 比如ReentrantLock和ReadWriteLock.\nLock可以通过tryLock来获取是否可以获取锁的状态.\n可重入, 可以选择是否公平锁 可以响应在等待锁时的中断 AQS 这个类中几个主要的变量:\nstatus (保存当前的状态) head/tail (保存队列) 主要的几个方法: acquire(int) release(int) acquireShared(int) releaseShared(int) 分别表示独占式的加锁与释放锁的方法 共享锁的加速与释放锁的方法 ","permalink":"https://www.liunaijie.top/coding/java/java%E4%B8%AD%E7%9A%84%E9%94%81/","summary":"\u003cp\u003eJava中的锁机制主要分为\u003ccode\u003eSynchronized\u003c/code\u003e和\u003ccode\u003eLock\u003c/code\u003e\u003c/p\u003e\n\u003ch1 id=\"synchronized\"\u003eSynchronized\u003c/h1\u003e\n\u003cp\u003eSynchronized在JVM里的实现是基于Monitor来实现的, Monitor是依赖与底层的操作系统Mutex Lock(互斥锁)来实现的线程同步.\u003c/p\u003e\n\u003cp\u003esynchronized用的锁是存在Java对象头里的.\u003c/p\u003e\n\u003cp\u003eJVM基于进入和退出Monitor对象来实现方法同步和代码块同步. 代码块同步是使用monitorenter和monitorexit指令实现的, monitorenter指令是在编译后插入到同步代码块的开始位置, 而monitorexit是插入到方法结束处和异常处.\u003c/p\u003e\n\u003cp\u003e任何对象都有一个monitor与之关联, 当且一个monitor被持有后,它将处于锁定状态.\u003c/p\u003e\n\u003cp\u003e根据虚拟机规范的要求, 在执行monitorenter指令时, 首先要去尝试获取对象的锁, 如果这个对象没被锁定, 或者当前线程已经拥有了那个对象的锁, 把锁的计数器加1. 相应地, 在执行monitorexit指令时会将锁计数器减1, 当计数器被减到0时, 锁就释放了. 如果获取对象锁失败了, 那当前线程就要阻塞等待,直到对象锁被另一个线程释放为止.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003esynchronized同步快对同一条线程来说是可重入的, 不会出现自己把自己锁死的问题\u003c/li\u003e\n\u003cli\u003e同步块在已进入的线程执行完之前, 会阻塞后面其他线程的进入.\u003c/li\u003e\n\u003cli\u003e可重入, 不可中断, 非公平锁\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"lock\"\u003eLock\u003c/h1\u003e\n\u003cp\u003eLock底层是基于AQS(AbstractQueuedSynchronizer)的, AQS是用来构建锁或者其他同步组件的基础框架, 它使用来一个int成员变量表示同步状态, 通过内置的FIFO队列来完成资源获取线程的排队工作.\u003c/p\u003e\n\u003cp\u003e使用时必须手动进行上锁, 解锁.\u003c/p\u003e\n\u003cp\u003eLock接口有多种实现, 比如ReentrantLock和ReadWriteLock.\u003c/p\u003e\n\u003cp\u003eLock可以通过tryLock来获取是否可以获取锁的状态.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e可重入, 可以选择是否公平锁\u003c/li\u003e\n\u003cli\u003e可以响应在等待锁时的中断\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"aqs\"\u003eAQS\u003c/h1\u003e\n\u003cp\u003e这个类中几个主要的变量:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003estatus (保存当前的状态)\u003c/li\u003e\n\u003cli\u003ehead/tail (保存队列)\n主要的几个方法:\u003c/li\u003e\n\u003cli\u003eacquire(int)\u003c/li\u003e\n\u003cli\u003erelease(int)\u003c/li\u003e\n\u003cli\u003eacquireShared(int)\u003c/li\u003e\n\u003cli\u003ereleaseShared(int)\n分别表示独占式的加锁与释放锁的方法\n共享锁的加速与释放锁的方法\u003c/li\u003e\n\u003c/ul\u003e","title":"Java中的锁"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/maximum-length-of-subarray-with-positive-product/\n给定一个整数数组nums, 求乘积为正数的最长子数组的长度\n示例1:\n输入: [1, -2, -3, 4]\n输出: 4\n数组本身乘积就是正数\n示例2:\n输入: [0, 1, -2, -3, -4]\n输出: 3\n最长乘积为整数的子数组为[1, -2, -3]\n解题思路 使用动态规划来计算乘积为正数的最长子数组长度.\n使用两个数组positive和negative, 表示在第i个位置时, 乘积为正数的最长子数组长度 和 乘积为负数的最长子数组长度.\n由于数组中可能存在0, 所以对于值为0时还需要特殊处理.\n对于位置i,\n如果nums[i]\u0026gt;0即为正数\n那么nums[i]与前面的数组相乘时不会改变符号. 即使前面乘积为0, 那么nums[i]也可以单独作为子数组, 长度为1.\n所以\npositive[i] = positive[i-1] + 1 对于乘积为负数的最长子数组长度, 如果前面的乘积为0, 那么这时仍然是0. 如果前面不为0, 这时就等于前面的长度加1.\n所以\nnegative[i] = negative[i-1] + 1 (negative[i-1]\u0026gt;0) negative[i] = 0\t(negative[i-1]=0) 如果nums[i]为负数\n那么nums[i]与前面的数组相乘就会改变符号. 所以当前位置的正数长度应该为上一次的负数长度加1, 同时需要判断上次的负数长度是否为0.\npositive[i] = negative[i-1]+1 (negative[i-1]\u0026gt;0) positive[i] = 0 (negative[i-1]=0) 当前位置的负数长度应该为上一次正数长度加1\nnegative[i] = positive[i-1]+1 如果nums[i]=0\n这时乘积为0, 所以\nnegative[i] = positive[i] = 0 最后求positive数组中的最大值\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public int getMaxLen(int[] nums) { int length = nums.length; int[] positive = new int[length]; int[] negative = new int[length]; if (nums[0] \u0026gt; 0) { positive[0] = 1; } else if (nums[0] \u0026lt; 0) { negative[0] = 1; } int maxLength = positive[0]; for (int i = 1; i \u0026lt; length; i++) { if (nums[i] \u0026gt; 0) { positive[i] = positive[i - 1] + 1; negative[i] = negative[i - 1] \u0026gt; 0 ? negative[i - 1] + 1 : 0; } else if (nums[i] \u0026lt; 0) { positive[i] = negative[i - 1] \u0026gt; 0 ? negative[i - 1] + 1 : 0; negative[i] = positive[i - 1] + 1; } else { positive[i] = 0; negative[i] = 0; } maxLength = Math.max(maxLength, positive[i]); } return maxLength; } 优化 动态规划的一个常规优化, 递推方程只与上一次的状态有关, 所以我们只需要临时变量保存上一次的状态\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public int getMaxLen(int[] nums) { int length = nums.length; int positive = nums[0] \u0026gt; 0 ? 1 : 0; int negative = nums[0] \u0026lt; 0 ? 1 : 0; int maxLength = positive; for (int i = 1; i \u0026lt; length; i++) { if (nums[i] \u0026gt; 0) { positive++; negative = negative \u0026gt; 0 ? negative + 1 : 0; } else if (nums[i] \u0026lt; 0) { int newPositive = negative \u0026gt; 0 ? negative + 1 : 0; negative = positive + 1; positive = newPositive; } else { positive = 0; negative = 0; } maxLength = Math.max(maxLength, positive); } return maxLength; } 相关题目","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B9%98%E7%A7%AF%E4%B8%BA%E6%AD%A3%E6%95%B0%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6-leetcode1567/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/maximum-length-of-subarray-with-positive-product/\"\u003ehttps://leetcode-cn.com/problems/maximum-length-of-subarray-with-positive-product/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e给定一个整数数组nums, 求乘积为正数的最长子数组的长度\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例1:\u003c/p\u003e\n\u003cp\u003e输入: [1, -2, -3, 4]\u003c/p\u003e\n\u003cp\u003e输出: 4\u003c/p\u003e\n\u003cp\u003e数组本身乘积就是正数\u003c/p\u003e\n\u003cp\u003e示例2:\u003c/p\u003e\n\u003cp\u003e输入: [0, 1, -2, -3, -4]\u003c/p\u003e\n\u003cp\u003e输出: 3\u003c/p\u003e\n\u003cp\u003e最长乘积为整数的子数组为[1, -2, -3]\u003c/p\u003e\u003c/blockquote\u003e","title":"乘积为正数的最长子数组长度-LeetCode1567"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/maximum-product-subarray/\n给你一个整数数组nums, 请你找出数组中成绩最大的非空连续子数组(该子数组中至少包含一个数字), 并返回该子数组所对应的乘积.\n示例1:\n输入: [2, 3, -2, 4]\n输出: 6\n子数组 [2, 3]得到最大乘积6\n输入 [-2, 0 -,1]\n输出: 0\n解题思路 求子数组乘积的最大值, 由于数组中存在负数, 当最大值遇到负数之后结果就变成了最小值. 所以我们需要保存最大值和最小值.\n如果遇到正数, 则最大值依然是最大值, 如果遇到负数则将最大值和最小值交换, 然后仍然使用最大值(交换之后的最小值)与负数相乘得到最大值.\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public int maxProduct(int[] nums) { int res = Integer.MIN_VALUE; int max = 1, min = 1; for (int num : nums) { if (num \u0026lt; 0) { int temp = min; min = max; max = temp; } min = Math.min(min * num, num); max = Math.max(max * num, num); res = Math.max(max, res); } return res; } 相关题目","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84-leetcode152/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/maximum-product-subarray/\"\u003ehttps://leetcode-cn.com/problems/maximum-product-subarray/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e给你一个整数数组nums, 请你找出数组中成绩最大的非空连续子数组(该子数组中至少包含一个数字), 并返回该子数组所对应的乘积.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例1:\u003c/p\u003e\n\u003cp\u003e输入: [2, 3, -2, 4]\u003c/p\u003e\n\u003cp\u003e输出: 6\u003c/p\u003e\n\u003cp\u003e子数组 [2, 3]得到最大乘积6\u003c/p\u003e\n\u003cp\u003e输入 [-2, 0 -,1]\u003c/p\u003e\n\u003cp\u003e输出: 0\u003c/p\u003e\u003c/blockquote\u003e","title":"乘积最大子数组-LeetCode152"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/maximum-sum-circular-subarray/\n给定一个长度为n的环形整数数组nums, 返回nums的非空子数组的最大和\n环形数组意味着数组的末端和头部是相连的, 所以子数组可以为数组的中间某一段或者首尾两段.\n示例1:\n输入: nums = [1, -1, 3, -2]\n输出: 3\n子数组 [3] 为最大和\n示例2:\n输入: nums = [5, -3, 5]\n输出: 10\n首尾的子数组[5, 5]得到最大和10\n示例3:\n输入: [3, -2, 2, -3]\n输出: 3\n从子数组[3], [3, -2, 2]都可以得到最大和3\n解题思路 最大和的子数组有两种情况:\n在数组的中间某一段 分别在头尾两端 情况1: 这种情况与非环形数组的解法一致, 对于下标n的位置来说, 当前位置的最大子数组之和为\n​\tf(n) = Max(f(n-1)+nums[i], nums[i])\n再来看情况2: 分别在头尾两端.\n假设我们的子数组由A, C构成.\n根据要求可知, A, C组成的子数组为最大子数组的和.\n即 MAX(res) = MAX( A+C )\n而A+C = SUM-B. 即数组总和减去B\nMAX(res) = MAX(A+C) = MAX(SUM-B) = SUM - MIN(B)\n由于总和是不变的, 所以我们求A+C的最大值就转化成了求B的最小值\n有一种特殊情况需要处理, 即当数组全为负数时, MIN(B) = SUM. 这时不符合题意, 这时的答案应该是MAX(nums)\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 public static int maxSubarraySumCircular(int[] nums) { int maxFi = 0, minFi = 0, maxAns = nums[0], minAns = nums[0], sum = 0, max = nums[0]; for (int num : nums) { maxFi = Math.max(maxFi + num, num); maxAns = Math.max(maxAns, maxFi); minFi = Math.min(minFi + num, num); minAns = Math.min(minAns, minFi); sum += num; max = Math.max(max, num); } return Math.max(maxAns, (sum - minAns) == 0 ? max : (sum - minAns)); } 相关题目","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E7%8E%AF%E5%BD%A2%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%92%8C-leetcode918/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/maximum-sum-circular-subarray/\"\u003ehttps://leetcode-cn.com/problems/maximum-sum-circular-subarray/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e给定一个长度为n的环形整数数组nums, 返回nums的非空子数组的最大和\u003c/p\u003e\n\u003cp\u003e环形数组意味着数组的末端和头部是相连的, 所以子数组可以为数组的中间某一段或者首尾两段.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例1:\u003c/p\u003e\n\u003cp\u003e输入: nums = [1, -1, 3, -2]\u003c/p\u003e\n\u003cp\u003e输出: 3\u003c/p\u003e\n\u003cp\u003e子数组 [3] 为最大和\u003c/p\u003e\n\u003cp\u003e示例2:\u003c/p\u003e\n\u003cp\u003e输入: nums = [5, -3, 5]\u003c/p\u003e\n\u003cp\u003e输出: 10\u003c/p\u003e\n\u003cp\u003e首尾的子数组[5, 5]得到最大和10\u003c/p\u003e\n\u003cp\u003e示例3:\u003c/p\u003e\n\u003cp\u003e输入: [3, -2, 2, -3]\u003c/p\u003e\n\u003cp\u003e输出: 3\u003c/p\u003e\n\u003cp\u003e从子数组[3], [3, -2, 2]都可以得到最大和3\u003c/p\u003e\u003c/blockquote\u003e","title":"环形子数组的最大和-LeetCode918"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/jump-game/\n给定一个非负整数数组nums, 你最初位于数组的第一个下标, 数组中的每个元素代表你在该位置可以跳跃的最大长度.\n判断你是否能够到达最后一个下标\n示例1:\n输入: nums=[2, 3, 1, 1, 4]\n输出: true\n可以先从下标0走1步到下标1, 然后从下标1走3步到最后一个下标\n示例2:\n输入: nums = [3, 2, 1, 0, 4]\n输出: false\n无论怎么走, 都会走到下标3的位置, 到了这里无法在继续往前走. 所以不可能到达最后一个坐标\n解题思路 使用额外数组 使用一个额外的数组来存储每个位置是否可达, 遍历完成后判断最后一个位置是否可达.\n遍历数组, 首先判断当前位置是否可达, 如果不可达, 直接返回false.\n如果可达, 将后nums[i]为标记为可达. 如果超过数组长度则直接返回true, 提前终止.\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public static boolean canJump(int[] nums) { if (nums == null || nums.length == 0) { return false; } if (nums.length == 1) { return true; } int[] res = new int[nums.length]; res[0] = 1; for (int i = 0; i \u0026lt; nums.length - 1; i++) { if (res[i] == 0) { return false; } int jumpSize = nums[i]; for (int j = 1; j \u0026lt;= jumpSize; j++) { if ((i + j) \u0026lt; nums.length) { res[i + j] = 1; } else { return true; } } } return res[nums.length - 1] == 1; } 标记历史位置可达的最大位置 遍历数组, 使用变量存储当前位置可以到达的最大下标\n如果当前位置的下标比历史最大下标小, 所以当前位置不可达.\n否则比较历史最大下标与 (i+nums[i])的值, 取最大值作为最大可达下标\n如果最大可达下标超过数组长度, 提前返回true\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 public boolean canJump(int[] nums) { int n = nums.length; int currentMaxAvailableIndex = 0; for (int i = 0; i \u0026lt; n; i++) { if (i \u0026lt;= currentMaxAvailableIndex) { currentMaxAvailableIndex = Math.max(currentMaxAvailableIndex, i + nums[i]); if (currentMaxAvailableIndex \u0026gt;= n - 1) { return true; } } } return false; } 相关题目","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F-leetcode55/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/jump-game/\"\u003ehttps://leetcode-cn.com/problems/jump-game/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e给定一个非负整数数组nums, 你最初位于数组的第一个下标, 数组中的每个元素代表你在该位置可以跳跃的最大长度.\u003c/p\u003e\n\u003cp\u003e判断你是否能够到达最后一个下标\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例1:\u003c/p\u003e\n\u003cp\u003e输入: nums=[2, 3, 1, 1, 4]\u003c/p\u003e\n\u003cp\u003e输出: true\u003c/p\u003e\n\u003cp\u003e可以先从下标0走1步到下标1,  然后从下标1走3步到最后一个下标\u003c/p\u003e\n\u003cp\u003e示例2:\u003c/p\u003e\n\u003cp\u003e输入: nums = [3, 2, 1, 0, 4]\u003c/p\u003e\n\u003cp\u003e输出: false\u003c/p\u003e\n\u003cp\u003e无论怎么走, 都会走到下标3的位置, 到了这里无法在继续往前走. 所以不可能到达最后一个坐标\u003c/p\u003e\u003c/blockquote\u003e","title":"跳跃游戏-LeetCode55"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/jump-game-ii/\n给定一个非负整数数组nums, 最初位于数组的第一个位置. 数组中的每个元素代表你在该位置上可以跳跃的最大长度.\n你的目标是使用最少的跳跃次数到达数组的最后一个位置. 求最少需要跳跃几次, 假设总是可以到达数组的最后一个位置.\n示例1:\n输入: nums = [2, 3, 1, 1, 4]\n输出: 2\n从下标0跳到下标1, 再从下标1跳3步到最后一个位置. 总共跳跃2次\n示例2:\n输入: nums = [2, 3, 0, 1, 4]\n输出: 2\n解题思路 这题与跳跃游戏1大致相同, 跳跃游戏1要求是否能够到达最后一个位置, 这里求到达最后一个位置最少需要几步.\n与之前一样, 使用一个变量存储历史位置可达的最大下标. 然后再添加一个变量表示一次跳跃的结束下标.\n每次更新历史最大可达下标\n当当前位置的下标超过这一次跳跃的结束下标时, 跳跃次数加1, 将下一次跳跃的结束下标置为当前的历史最大可达下标.\n代码实现 1 2 3 4 5 6 7 8 9 10 11 public int jump(int[] nums) { int currentMaxAvailableIndex = 0, end = 0, steps = 0; for (int i = 0; i \u0026lt; nums.length - 1; i++) { currentMaxAvailableIndex = Math.max(currentMaxAvailableIndex, nums[i] + i); if (i == end) { end = currentMaxAvailableIndex; steps++; } } return steps; } 相关题目","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F2-leetcode45/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/jump-game-ii/\"\u003ehttps://leetcode-cn.com/problems/jump-game-ii/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e给定一个非负整数数组nums, 最初位于数组的第一个位置. 数组中的每个元素代表你在该位置上可以跳跃的最大长度.\u003c/p\u003e\n\u003cp\u003e你的目标是使用最少的跳跃次数到达数组的最后一个位置. 求最少需要跳跃几次, 假设总是可以到达数组的最后一个位置.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例1:\u003c/p\u003e\n\u003cp\u003e输入: nums = [2, 3, 1, 1, 4]\u003c/p\u003e\n\u003cp\u003e输出: 2\u003c/p\u003e\n\u003cp\u003e从下标0跳到下标1, 再从下标1跳3步到最后一个位置. 总共跳跃2次\u003c/p\u003e\n\u003cp\u003e示例2:\u003c/p\u003e\n\u003cp\u003e输入: nums = [2, 3, 0, 1, 4]\u003c/p\u003e\n\u003cp\u003e输出: 2\u003c/p\u003e\u003c/blockquote\u003e","title":"跳跃游戏2-LeetCode45"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/maximum-subarray/\n给你一个整数数组nums, 请你找出一个具有最大和的连续子数组(子数组最少包含一个元素), 返回其最大和\n子数组是数组中的一个连续部分\n示例1:\n输入: nums =[-2, 1, -3, 4, -1, 2, 1, -5, 4]\n输出: 6\n连续子数组 [4, -1, 2, 1]的和最大, 为6.\n示例2:\n输入: nums = [1]\n输出: 1\n示例3:\n输入: nums = [5, 4, -1, 7, 8]\n输出: 23\n解题思路 求一个连续子数组的最大和, 先来看在每个位置上如何求连续子数组的最大和.\n在下标n时的连续子数组最大和应该为 上一个位置的最大和加上当前位置的值与当前位置的值的最大值.\n公式为: f(n) = Max( f(n-1)+nums[n], nums[n] )\n然后我们需要的结果为全局的最大值即 res = Max(f(n))\n代码实现 1 2 3 4 5 6 7 8 public int maxSubArray(int[] nums) { int res = nums[0], temp = 0; for (int x : nums) { temp = Math.max(temp + x, x); res = Math.max(res, temp); } return res; } 相关题目","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C-leetcode53/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/maximum-subarray/\"\u003ehttps://leetcode-cn.com/problems/maximum-subarray/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e给你一个整数数组nums, 请你找出一个具有最大和的连续子数组(子数组最少包含一个元素), 返回其最大和\u003c/p\u003e\n\u003cp\u003e子数组是数组中的一个连续部分\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例1:\u003c/p\u003e\n\u003cp\u003e输入: nums =[-2, 1, -3, 4, -1, 2, 1, -5, 4]\u003c/p\u003e\n\u003cp\u003e输出: 6\u003c/p\u003e\n\u003cp\u003e连续子数组 [4, -1, 2, 1]的和最大, 为6.\u003c/p\u003e\n\u003cp\u003e示例2:\u003c/p\u003e\n\u003cp\u003e输入: nums = [1]\u003c/p\u003e\n\u003cp\u003e输出: 1\u003c/p\u003e\n\u003cp\u003e示例3:\u003c/p\u003e\n\u003cp\u003e输入: nums = [5, 4, -1, 7, 8]\u003c/p\u003e\n\u003cp\u003e输出: 23\u003c/p\u003e\u003c/blockquote\u003e","title":"最大子数组和-LeetCode53"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/house-robber/\n你是一个专业的小偷, 计划偷窃沿街的房屋, 每间房内都藏有一定的现金, 影响你偷窃的唯一限制因素是相邻的房屋装有相互连通的防盗系统. 如果两间相邻的房屋在同一晚上被小偷闯入, 系统会自动报警.\n给定一个代表每个访问存放金额的非负整数数组, 计算你在不触发警报装置的情况下, 一夜之内能够偷窃到的最高金额.\n示例1:\n输入: [1, 2, 3, 1]\n输出: 4\n偷窃1号和3号. 得到1+3 = 4.\n示例2:\n输入: [2, 7, 9, 3, 1]\n输出: 12\n偷窃1号, 3号和5号. 得到2+9+1 = 12.\n解题思路 由于不能偷窃两间相邻的房间, 所以在第N个房间时, 可能的情况为:\n由于N-1个房间已经偷窃过了, 所以不能偷窃 N-1个房间没偷, 所以当前房间可以偷. 那么在第N个房间时, 能偷到的最大金额就是这两种情况下的最大值.\n转化为递推公式为:\n1 f(n) = Max(f(n-1), f(n-2) + nums[n]) 边界条件:\n当n=0时, 表示只有一个房间, 那么最大值只能为nums[0]\n当n=1时, 表示有两个房间, 我们只能偷一个, 那么f(1) = Max(nums[0] , nums[1])\nDP数组实现: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public int rob(int[] nums) { if (nums == null) { return 0; } if (nums.length == 1) { return nums[0]; } int[] res = new int[nums.length]; res[0] = nums[0]; res[1] = Math.max(nums[0], nums[1]); for (int i = 2; i \u0026lt; nums.length; i++) { res[i] = Math.max(nums[i] + res[i - 2], res[i - 1]); } return res[nums.length - 1]; } 优化 动态规划的一个优化点, 我们可以不创建数组, 而是存储中间变量, 减少空间复杂度.\n这里计算n时, 只需要n-1和n-2两个值, 所以我们可以定义两个变量来实现\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public int rob2(int[] nums) { if (nums == null || nums.length == 0) { return 0; } if (nums.length == 1) { return nums[0]; } int x = nums[0], y = Math.max(nums[0], nums[1]); for (int i = 2; i \u0026lt; nums.length; i++) { int temp = y; y = Math.max(nums[i] + x, y); x = temp; } return y; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-leetcode198/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/house-robber/\"\u003ehttps://leetcode-cn.com/problems/house-robber/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e你是一个专业的小偷, 计划偷窃沿街的房屋, 每间房内都藏有一定的现金, 影响你偷窃的唯一限制因素是相邻的房屋装有相互连通的防盗系统. 如果两间相邻的房屋在同一晚上被小偷闯入, 系统会自动报警.\u003c/p\u003e\n\u003cp\u003e给定一个代表每个访问存放金额的非负整数数组, 计算你在不触发警报装置的情况下, 一夜之内能够偷窃到的最高金额.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例1:\u003c/p\u003e\n\u003cp\u003e输入: [1, 2, 3, 1]\u003c/p\u003e\n\u003cp\u003e输出: 4\u003c/p\u003e\n\u003cp\u003e偷窃1号和3号. 得到1+3 = 4.\u003c/p\u003e\n\u003cp\u003e示例2:\u003c/p\u003e\n\u003cp\u003e输入: [2, 7, 9, 3, 1]\u003c/p\u003e\n\u003cp\u003e输出: 12\u003c/p\u003e\n\u003cp\u003e偷窃1号, 3号和5号. 得到2+9+1 = 12.\u003c/p\u003e\u003c/blockquote\u003e","title":"打家劫舍—LeetCode198"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/house-robber-ii/\n你是一个专业的小偷, 计划偷窃沿街的房屋, 每间房内都藏有一定的现金. 这个地方所有的房屋都 围成一圈, 这意味着第一个房屋和最后一个房屋是紧挨着的. 同时, 相邻的房屋装有相互连通的防盗系统, 如果两间相邻的房屋在同一晚上被小偷闯入, 系统会自动报警 .\n给定一个代表每个房屋存放金额的非负整数数组, 计算你在不触动警报装置的情况下,今晚能够偷窃到的最高金额.\n示例1:\n输入：nums = [2,3,2]\n输出：3\n你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。\n示例2:\n输入：nums = [1,2,3,1]\n输出：4\n你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）. 偷窃到的最高金额 = 1 + 3 = 4 .\n解题思路 这个题目与打家劫舍问题很相似, 唯一的区别是这里的房间是相连的.\n当房间相连之和, 第一家和最后一家是不能一起偷的.\n我们可以计算[0, n-2]不偷最后一家 和[1, n-1]不偷第一家, 然后求两种情况能获取的最大金额.\n而只偷[0, n-2]或[1, n-1]又转化成了打家劫舍问题1.\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public int rob(int[] nums) { if (nums == null || nums.length == 0) { return 0; } if (nums.length == 1) { return nums[0]; } if (nums.length == 2) { return Math.max(nums[0], nums[1]); } return Math.max(helper(nums, 0, nums.length - 1), helper(nums, 1, nums.length)); } private int helper(int[] nums, int start, int end) { int x = nums[start], y = Math.max(nums[start], nums[start + 1]); for (int i = start + 2; i \u0026lt; end; i++) { int temp = y; y = Math.max(nums[i] + x, y); x = temp; } return y; } 相关题目","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D2-leetcode213/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/house-robber-ii/\"\u003ehttps://leetcode-cn.com/problems/house-robber-ii/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e你是一个专业的小偷, 计划偷窃沿街的房屋, 每间房内都藏有一定的现金. 这个地方所有的房屋都 围成一圈, 这意味着第一个房屋和最后一个房屋是紧挨着的. 同时, 相邻的房屋装有相互连通的防盗系统, 如果两间相邻的房屋在同一晚上被小偷闯入, 系统会自动报警 .\u003c/p\u003e\n\u003cp\u003e给定一个代表每个房屋存放金额的非负整数数组, 计算你在不触动警报装置的情况下,今晚能够偷窃到的最高金额.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例1:\u003c/p\u003e\n\u003cp\u003e输入：nums = [2,3,2]\u003c/p\u003e\n\u003cp\u003e输出：3\u003c/p\u003e\n\u003cp\u003e你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。\u003c/p\u003e\n\u003cp\u003e示例2:\u003c/p\u003e\n\u003cp\u003e输入：nums = [1,2,3,1]\u003c/p\u003e\n\u003cp\u003e输出：4\u003c/p\u003e\n\u003cp\u003e你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）.    偷窃到的最高金额 = 1 + 3 = 4 .\u003c/p\u003e\u003c/blockquote\u003e","title":"打家劫舍2-LeetCode213"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/\n输入一个英文句子, 翻转句子中单词的顺序, 但单词内字符的顺序不变. 标点符号和普通字母一样处理. 例如输入字符串\u0026quot;I am a student.\u0026quot;, 输出应该为\u0026quot;student. a am I\u0026quot;\n示例1:\n输入 : \u0026ldquo;the sky is blue\u0026rdquo;\n输出 : \u0026ldquo;blue is sky the\u0026rdquo;\n示例2:\n输入 : \u0026quot; hello world! \u0026quot;\n输出 : \u0026ldquo;world! hello\u0026rdquo;\n忽略字符串前后的空格\n示例3:\n输入: \u0026ldquo;a good example\u0026rdquo;\n输出: \u0026ldquo;example good a\u0026rdquo;\n如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n解题思路 来理一下几个要求:\n忽略字符串前后的空格 两个单词之间只需要一个空格 只翻转单词顺序, 而不翻转单词内容 双指针 使用两个指针x, y来表示一个单词. 并且由于需要翻转, 所以我们从后向前开始遍历.\n由于要求1, 我们可以先将头尾两端的空格去除掉再进行处理.\n将指针x, y置于已经处理的字符串尾部.\nx向前走, 直到遇到空格. 这时截取x,y之间的内容.\n由于要求2, 中间可能会出现多个空格. 所以如果前面还是空格, 则x继续走.\n令y=x.\n重复步骤2, 3, 4. 终止条件为x\u0026gt;=0\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public String reverseWords(String s) { s = s.trim(); int x = s.length() - 1, y = x; StringBuilder sb = new StringBuilder(); while (x \u0026gt;= 0) { while (x \u0026gt;= 0 \u0026amp;\u0026amp; s.charAt(x) != \u0026#39; \u0026#39;) { x--; } sb.append(s, x + 1, y + 1); sb.append(\u0026#34; \u0026#34;); while (x \u0026gt;= 0 \u0026amp;\u0026amp; s.charAt(x) == \u0026#39; \u0026#39;) { x--; } y = x; } return sb.toString().trim(); } 按照空格切分 由于我们知道, 单词是按照空格进行划分的, 那么我们将字符串按照空格划分为数组.\n然后从尾部开始遍历, 将单词添加到结果中. 要注意一点是, 由于字符串中间可能会出现多个空格, 从而出现空单词的情况, 需要在遍历时进行判断.\n1 2 3 4 5 6 7 8 9 public String reverseWords(String s) { String[] strs = s.trim().split(\u0026#34; \u0026#34;); StringBuilder res = new StringBuilder(); for(int i = strs.length - 1; i \u0026gt;= 0; i--) { if(strs[i].equals(\u0026#34;\u0026#34;)) continue; res.append(strs[i] + \u0026#34; \u0026#34;); } return res.toString().trim(); } 相关题目","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F-leetcode58/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/\"\u003ehttps://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e输入一个英文句子, 翻转句子中单词的顺序, 但单词内字符的顺序不变. 标点符号和普通字母一样处理. 例如输入字符串\u0026quot;I am a student.\u0026quot;, 输出应该为\u0026quot;student. a am I\u0026quot;\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例1:\u003c/p\u003e\n\u003cp\u003e输入 :  \u0026ldquo;the sky is blue\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e输出 : \u0026ldquo;blue is sky the\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e示例2:\u003c/p\u003e\n\u003cp\u003e输入 : \u0026quot;    hello world!   \u0026quot;\u003c/p\u003e\n\u003cp\u003e输出 :  \u0026ldquo;world! hello\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e忽略字符串前后的空格\u003c/p\u003e\n\u003cp\u003e示例3:\u003c/p\u003e\n\u003cp\u003e输入: \u0026ldquo;a good   example\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e输出: \u0026ldquo;example good a\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\u003c/p\u003e\u003c/blockquote\u003e","title":"翻转单词顺序-LeetCode58"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/\n输入一个递增排序的数组和一个数字s, 在数组中查找两个数, 使得它们的和正好是s, 如果有多对数字的和都等于s, 则输出任意一对即可. 示例1: 输入：nums = [2,7,11,15], target = 9 输出：[2,7] 或者 [7,2]\n示例2: 输入：nums = [10,26,30,31,47,60], target = 40 输出：[10,30] 或者 [30,10]\n解题思路 这个题目是LeetCode第一题两数之和类型, 都是从数组中找到两个数, 相加之和为s.\n但是有区别的一点是, 这里的数组是已经升序排序好的. 所以我们可以利用升序的特性来进行优化.\n双指针 我们将两个指针分别置为头尾, 然后判断这两个数之和与S的关系.\n如果和大于S, 则尾指针向前移动一位\n如果和小于S, 则头指针向后移动一位.\n当和等于S时, 找到题解, 返回.\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public int[] twoSum(int[] nums, int target) { int x = 0, y = nums.length - 1; while (x \u0026lt; y) { int temp = nums[x] + nums[y]; if (temp \u0026lt; target) { x++; } else if (temp \u0026gt; target) { y--; } else { return new int[]{nums[x], nums[y]}; } } return null; } 相关题目 #LeetCode\n","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%92%8C%E4%B8%BAs%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84-leetcode57/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/\"\u003ehttps://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e输入一个递增排序的数组和一个数字s, 在数组中查找两个数, 使得它们的和正好是s, 如果有多对数字的和都等于s, 则输出任意一对即可.\n示例1:\n输入：nums = [2,7,11,15], target = 9\n输出：[2,7] 或者 [7,2]\u003c/p\u003e\n\u003cp\u003e示例2:\n输入：nums = [10,26,30,31,47,60], target = 40\n输出：[10,30] 或者 [30,10]\u003c/p\u003e","title":"和为s的两个数组-LeetCode57"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/delete-and-earn/\n给你一个整数数组nums, 可以对他进行一些操作. 每次操作中, 选择任意一个nums[i], 删除它然后获取nums[i]的点数. 同时还需要删除所有 等于nums[i]-1和nums[i]+1的元素. 例如删除3, 那么得到3个点数, 同时需要在数组中删除所有的2和4.\n开始时拥有0个点数, 求你能通过这些操作获取的最大点数.\n示例1:\n输入: nums = [3, 4, 2]\n输出: 6\n删除4和2.得到6点.\n删除4获取4个点数, 同时3也被删除.\n还剩下2, 然后删除2再得到2个点数.\n示例2:\n输入: nums = [2, 2, 3, 3, 3, 4]\n输出: 9\n删除3, 总共可以得到9个点数(3*3). 同时删除2和4.\n最终得到9个点数.\n解题思路 删除nums[i]时, 需要将num[i]-1和nums[i]+1一起删除掉. 并且如果nums[i]在数组中有多个值, 我们可以得到nums[i]多个值的和.\n我们先将题目进行一次转化, 输入[2, 2, 3, 3, 3, 4]\n将nums[i]放到newArray[nums[i]]的位置并进行累积. 这里只有2, 3, 4三个元素. 则分别放到相应的文件然后进行累加. 转化为 [0, 0 ,4, 9, 4].\n然后我们再来看一下这个问题, 我们在newArray中, 得到newArray[i]时, 就无法得到newArray[i-1]和newArray[i+1].\n这个问题与打家劫舍问题类型.\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public int deleteAndEarn(int[] nums) { int max = Integer.MIN_VALUE; for (int num : nums) { if (num \u0026gt; max) { max = num; } } int[] sum = new int[max + 1]; for (int num : nums) { sum[num] = sum[num] + num; } int x = sum[0], y = Math.max(sum[0], sum[1]); for (int i = 2; i \u0026lt; sum.length; i++) { int temp = y; y = Math.max(x + sum[i], y); x = temp; } return y; } 相关题目","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%88%A0%E9%99%A4%E5%B9%B6%E8%8E%B7%E5%8F%96%E7%82%B9%E6%95%B0-leetcode740/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/delete-and-earn/\"\u003ehttps://leetcode-cn.com/problems/delete-and-earn/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e给你一个整数数组nums, 可以对他进行一些操作. 每次操作中, 选择任意一个nums[i], 删除它然后获取nums[i]的点数. 同时还需要删除所有 等于nums[i]-1和nums[i]+1的元素. 例如删除3, 那么得到3个点数, 同时需要在数组中删除所有的2和4.\u003c/p\u003e\n\u003cp\u003e开始时拥有0个点数, 求你能通过这些操作获取的最大点数.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例1:\u003c/p\u003e\n\u003cp\u003e输入: nums = [3, 4, 2]\u003c/p\u003e\n\u003cp\u003e输出: 6\u003c/p\u003e\n\u003cp\u003e删除4和2.得到6点.\u003c/p\u003e\n\u003cp\u003e删除4获取4个点数, 同时3也被删除.\u003c/p\u003e\n\u003cp\u003e还剩下2, 然后删除2再得到2个点数.\u003c/p\u003e\n\u003cp\u003e示例2:\u003c/p\u003e\n\u003cp\u003e输入: nums = [2, 2, 3, 3, 3, 4]\u003c/p\u003e\n\u003cp\u003e输出: 9\u003c/p\u003e\n\u003cp\u003e删除3, 总共可以得到9个点数(3*3). 同时删除2和4.\u003c/p\u003e\n\u003cp\u003e最终得到9个点数.\u003c/p\u003e\u003c/blockquote\u003e","title":"删除并获取点数-LeetCode740"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/min-cost-climbing-stairs/\n给定一个整数数组cost, 其中cost[i]表示从楼梯第i个台阶向上爬需要支付的费用. 每次只能向上爬一个或两个台阶.\n可以从下标0或下标1的台阶开始爬楼梯.\n求到达楼梯顶部的最低花费\n示例1:\n输入 cost = [10, 15, 20]\n输出: 15\n从下标1开始爬, 向上2格. 到达楼梯顶部.\n示例2:\n输入：cost = [1,100,1,1,1,100,1,1,100,1] 输出：6 你将从下标为 0 的台阶开始。\n支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。 支付 1 ，向上爬一个台阶，到达楼梯顶部。 总花费为 6 解题思路 动态规划, 在楼顶时, 可能从n-1或n-2层上来的, 所以到达楼顶的最低花费为 到达n-1层的最小花费加n-1层的cost 和 到达n-2层的最小花费加n-2层的花费的最小值.\nf(n) = min(f(n-1) + cost[n-1], f(n-2) + cost[n-2])\n来看一下边界条件:\n我们可以从下标0或下标1开始爬, 这时不需要额外花费, 所以f(0)=f(1)=0.\n代码实现 1 2 3 4 5 6 7 8 public int minCostClimbingStairs(int[] cost) { int[] res = new int[cost.length + 1]; res[0] = res[1] = 0; for (int i = 2; i \u0026lt;= cost.length; i++) { res[i] = Math.min(cost[i - 1] + res[i - 1], cost[i - 2] + res[i - 2]); } return res[cost.length]; } 相关题目","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF-leetcode746/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/min-cost-climbing-stairs/\"\u003ehttps://leetcode-cn.com/problems/min-cost-climbing-stairs/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e给定一个整数数组cost, 其中\u003ccode\u003ecost[i]\u003c/code\u003e表示从楼梯第i个台阶向上爬需要支付的费用. 每次只能向上爬一个或两个台阶.\u003c/p\u003e\n\u003cp\u003e可以从下标0或下标1的台阶开始爬楼梯.\u003c/p\u003e\n\u003cp\u003e求到达楼梯顶部的最低花费\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例1:\u003c/p\u003e\n\u003cp\u003e输入 cost = [10, 15, 20]\u003c/p\u003e\n\u003cp\u003e输出: 15\u003c/p\u003e\n\u003cp\u003e从下标1开始爬, 向上2格. 到达楼梯顶部.\u003c/p\u003e\n\u003cp\u003e示例2:\u003c/p\u003e\n\u003cp\u003e输入：cost = [1,100,1,1,1,100,1,1,100,1]\n输出：6\n你将从下标为 0 的台阶开始。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。\u003c/li\u003e\n\u003cli\u003e支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。\u003c/li\u003e\n\u003cli\u003e支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。\u003c/li\u003e\n\u003cli\u003e支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。\u003c/li\u003e\n\u003cli\u003e支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。\u003c/li\u003e\n\u003cli\u003e支付 1 ，向上爬一个台阶，到达楼梯顶部。\n总花费为 6\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e","title":"使用最小花费爬楼梯-LeetCode746"},{"content":"前言 我们组内使用Airflow来做日常的任务调度也有一年多的时间了, 今天写这篇文章来对Airflow进行一下记录.\n组件 Airflow需要的几个基础组件为:\nairflow-scheduler\nairflow-webserver\nairflow-worker\nairflow-flower\nmysql(也可以使用其他数据库)\nredis(也可以使用其他消息队列)\n前缀为airflow的是airflow的内部组件, 除此之外还需要数据库和一个消息队列\n我们根据这个架构图一起看下这些组件分别是什么作用:\n首先来解释一个名词 : DAG文件, 在airflow中将一个任务的整体流程称为一个DAG, 这个DAG里面可以有多个子任务. 由于Airflow是使用python编写的, 所以需要将这个DAG的流程定义为一个python文件.\nairflow-scheduler\nairflow的核心组件, 作用是扫描dag存入数据库. 检查任务的依赖状态, 如果可以执行则将任务放到消息队列中\n默认是单节点, 当使用MySQL 8.x版本以上以及Postgres 9.6版本以上可以实现多节点.\nairflow-webserver\nUI页面, 提供可视化操作, 监控、管理dag.\nairflow-worker\n真正干活的节点, 执行任务和上报任务的状态\nairflow-flower\n监控airflow集群的状态\nmysql(也可以使用其他数据库)\n存储调度信息、任务状态等元数据信息\nredis(也可以使用其他消息队列)\nscheduler将需要运行的任务放到消息队列中, worker拉取任务去执行\n支持的执行器(Operators)类型 operator执行器代表如何去运行一个任务. 这里简单介绍一下两种类型:\nBashOperator\n在Bash shell中执行命令, 可以直接执行命令也可以去执行shell脚本\n1 2 3 4 5 bash_task1 = BashOperator( task_id = \u0026#39;bash_task1\u0026#39;, bash_command = \u0026#39;echo 123\u0026#39;, dag = dag ) 命令中也可以使用参数模版\nbash_task2 = BashOperator( task_id=\u0026#39;bash_task2\u0026#39;, bash_command=\u0026#39;echo \u0026#34;run_id={{ run_id }} | dag_run={{ dag_run }}\u0026#34;\u0026#39;, dag=dag ) 如果要去执行shell脚本, 则需要注意在脚本名词后要添加空格\n1 2 3 4 5 6 bash_task3 = BashOperator( task_id=\u0026#39;bash_task3\u0026#39;, # 如果不添加空格, 会报错 bash_command=\u0026#34;/home/batcher/test.sh \u0026#34;, dag=dag ) PythonOperator\n也可以编写python函数来实现一些功能\ndef print_context ( ds , ** kwargs ): pprint ( kwargs ) print ( ds ) return \u0026#39;Whatever you return gets printed in the logs\u0026#39; python_task1 = PythonOperator ( task_id = \u0026#39;python_task1\u0026#39; , provide_context = True , python_callable = print_context , dag = dag ) 这里就是去执行了上面的python函数.\n配置 关键项 dags_folder: 存储dag的文件夹 default_timezone : 时区设置 parallelism : 任务的并行度, 整个集群可以同时运行的任务数量, 包括正在运行的, 等待运行的, 重试的等等. 当任务达到上限后, 其他任务都会排队等待. 相当于消息队列的长度. dag_concurrency : 单个dag运行同时执行的数量 plugins_folder : 自定义插件的位置 webserver expose_config : 是否在UI上展示配置项 ","permalink":"https://www.liunaijie.top/coding/big_data/airflow%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e我们组内使用Airflow来做日常的任务调度也有一年多的时间了, 今天写这篇文章来对Airflow进行一下记录.\u003c/p\u003e\n\u003ch1 id=\"组件\"\u003e组件\u003c/h1\u003e\n\u003cp\u003eAirflow需要的几个基础组件为:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eairflow-scheduler\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eairflow-webserver\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eairflow-worker\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eairflow-flower\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003emysql(也可以使用其他数据库)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eredis(也可以使用其他消息队列)\u003c/p\u003e\n\u003cp\u003e前缀为airflow的是airflow的内部组件, 除此之外还需要数据库和一个消息队列\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"Airflow调度系统"},{"content":"AQE(Adaptive query execution, 自适应查询引擎)引入了3个重要的特性:\n自动分区合并 自动数据倾斜处理 Join策略调整 AQE默认是禁用的, 调整spark.sql.adaptive.enabled参数来进行开启\n自动分区合并 在Shuffle过程中, 由于数据分布不均衡, 导致Reduce阶段存在大量的小分区, 这些小分区的数据量很小, 但是调度的成本很大, 我们希望可以将这些小文件合并成大文件, 从而提高性能.\n那么现在的问题就变成了:\n如何判断一个分区是不是小, 需不需要进行合并?\n合并的终止条件是什么? 我们不能无终止的合并下去. 合并过程:\nAQE按照分区编号从左到右进行扫描, 扫描时记录分区尺寸.\n当相邻分区的尺寸之和大于目标尺寸时, AQE就把这些扫描过的分区进行合并\n继续向右扫描, 采用相同的算法, 按照目标尺寸合并剩余分区, 直至所有分区都处理完毕\nAQE事先并不判断哪些分区足够小, 而是按照分区编号进行扫描, 当扫描量超过目标尺寸时, 就合并一次\n目标尺寸由两个配置项来共同决定\nspark.sql.adaptive.advisoryPartitionSizeInBytes 开发者建议的目标尺寸 spark.sql.adaptive.coalescePartitions.minPartitionNum 合并之后最小的分区数 假设我们Shuffle过后的数据大小为20GB, minPartitionNum设置为200, 这时每个分区的尺寸应该是20GB/200=100MB, advisoryPartitionSizeInBytes设置为200MB. 最终的目标尺寸会选择(100MB, 200MB)的最小值, 也就是100MB. 所以这个目标尺寸是由两个参数来共同决定的\n自动数据倾斜处理 在进行Join时, AQE检测到有数据倾斜时, 会自动进行拆分操作, 把大分区拆分为多个小分区, 从而避免单个任务的数据处理量过大. Spark3.0的AQE只能在Sort Merge Join中自动处理数据倾斜.\nAQE如何判定数据分区是否倾斜, 以及它是如何进行大分区的拆分的:\n处理倾斜的几个参数:\nspark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes 判断数据分区是否倾斜的最低阈值, 默认是256MB spark.sql.adaptive.skewJoin.skewedPartitionFactor 判定数据分区是否倾斜的比例系数, 默认值是5 spark.sql.adaptive.advisoryPartitionSizeInBytes 以字节为单位, 拆分倾斜分区的数据粒度 首先, 只有当分区的尺寸大于skewedPartitionThresholdInBytes时才有资格被判定为倾斜分区.\n然后, AQE统计所有分区大小并进行排序, 取中位数作为放大基数, 尺寸大于中位数的一定倍数时会被判定为倾斜分区. 中位数的放大倍数由参数skewedPartitionFactor控制\n举个🌰:\n假设数据表A有3个分区, 分区大小分为为80MB, 100MB和512MB. 这些分区按大小排序后的中位数是100MB. skewedPartitionFactor的默认值为5, 显然512MB\u0026gt;(100MB*5). 所以这个分区有可能被判定为倾斜分区.\n当使用skewedPartitionThresholdInBytes的默认值时(256MB), 这个分区就会被判定为倾斜分区. 但是如果我们将其修改为600MB, 则这个分区就不会被判定成倾斜分区.\n所以倾斜分区的判定也是同时依赖于两个参数的配置.\n在判定一个分区属于倾斜分区后, 接下来就是进行拆分, 拆分时会使用advisoryPartitionSizeInBytes参数. 当我们将其设置为200MB时, 刚刚512MB的倾斜分区就会被拆分为3个分区(200, 200, 112). 拆分之后数据表就由原来的3个分区变成了5个分区. 每个分区的尺寸都不大于256MB(skewedPartitionThresholdInBytes).\nJoin策略调整 这里讲的策略调整是把引入Shuffle的Join(如Hash Join, Sort Merge Join) 降级成Broadcast Join\n在AQE之前, 可以通过spark.sql.autoBroadcastJoinThreshold配置来设置Broadcast Join的阈值, 这个参数的默认值是10MB, 参与Join的两张表只要有一张数据表的尺寸小于10MB, 就可以将其转化为Broadcast Join.\n这个参数有两个问题:\n可靠性较差, 尽管明确设置了阈值, 而且小表数据量也在阈值内, 但是由于Spark对小表尺寸的误判, 导致没有进行Broadcast Join 预先设置广播阈值是一种静态的优化机制, 没办法在运行时动态的对数据关联进行降级. 一个典型例子是两个大表进行Join, 在逻辑优化阶段不满足广播阈值, 但是在运行时会对一张表对Filter, Filter完后的数据量完全满足广播阈值, 这种情况是无法转化为Broadcast Join的. AQE很好的解决了这两个问题, AQE的Join策略调整是一种动态优化机制. 对于刚才的两张大表, AQE会在数据表完成过滤操作后动态计算剩余数据量, 当数据量满足广播条件时, AQE会重新调整逻辑计划, 在新的计划中将Shuffle Joins转化为Boradcast Join. 同时, 在运行时计算的数据量要比编译时准确的多, 所以AQE的动态Join策略相比静态优化更可靠、更稳定.\n限制\nspark.sql.nonEmptyPartitionForBroadcastJoin 启用动态策略调整还有个前提, 就是要满足nonEmptyPartitionForBroadcastJoin参数的限制, 这个参数默认值是0.2, 大表过滤之后, 非空的数据分区占比要小于0.2, 才能成功触发Broadcast Join.\n","permalink":"https://www.liunaijie.top/coding/big_data/spark/spark-aqe/","summary":"\u003cp\u003eAQE(Adaptive query execution, 自适应查询引擎)引入了3个重要的特性:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e自动分区合并\u003c/li\u003e\n\u003cli\u003e自动数据倾斜处理\u003c/li\u003e\n\u003cli\u003eJoin策略调整\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAQE默认是禁用的, 调整\u003ccode\u003espark.sql.adaptive.enabled\u003c/code\u003e参数来进行开启\u003c/p\u003e\n\u003ch2 id=\"自动分区合并\"\u003e自动分区合并\u003c/h2\u003e\n\u003cp\u003e在Shuffle过程中, 由于数据分布不均衡, 导致Reduce阶段存在大量的小分区, 这些小分区的数据量很小, 但是调度的成本很大, 我们希望可以将这些小文件合并成大文件, 从而提高性能.\u003c/p\u003e\n\u003cp\u003e那么现在的问题就变成了:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e如何判断一个分区是不是小, 需不需要进行合并?\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e合并的终止条件是什么? 我们不能无终止的合并下去.\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308121618290.png\" alt=\"\"\u003e\n合并过程:\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAQE按照分区编号从左到右进行扫描, 扫描时记录分区尺寸.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e当相邻分区的尺寸之和大于\u003cstrong\u003e目标尺寸\u003c/strong\u003e时, AQE就把这些扫描过的分区进行合并\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e继续向右扫描, 采用相同的算法, 按照目标尺寸合并剩余分区, 直至所有分区都处理完毕\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eAQE事先并不判断哪些分区足够小, 而是按照分区编号进行扫描, 当扫描量超过目标尺寸时, 就合并一次\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e目标尺寸由两个配置项来共同决定\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003espark.sql.adaptive.advisoryPartitionSizeInBytes 开发者建议的目标尺寸\u003c/li\u003e\n\u003cli\u003espark.sql.adaptive.coalescePartitions.minPartitionNum 合并之后最小的分区数\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e假设我们Shuffle过后的数据大小为20GB, minPartitionNum设置为200, 这时每个分区的尺寸应该是20GB/200=100MB, advisoryPartitionSizeInBytes设置为200MB. 最终的目标尺寸会选择(100MB, 200MB)的最小值, 也就是100MB. 所以这个目标尺寸是由两个参数来共同决定的\u003c/p\u003e\n\u003ch2 id=\"自动数据倾斜处理\"\u003e自动数据倾斜处理\u003c/h2\u003e\n\u003cp\u003e在进行Join时, AQE检测到有数据倾斜时, 会自动进行拆分操作, 把大分区拆分为多个小分区, 从而避免单个任务的数据处理量过大. Spark3.0的AQE只能在Sort Merge Join中自动处理数据倾斜.\u003c/p\u003e\n\u003cp\u003eAQE如何判定数据分区是否倾斜, 以及它是如何进行大分区的拆分的:\u003c/p\u003e\n\u003cp\u003e处理倾斜的几个参数:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003espark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes 判断数据分区是否倾斜的最低阈值, 默认是256MB\u003c/li\u003e\n\u003cli\u003espark.sql.adaptive.skewJoin.skewedPartitionFactor 判定数据分区是否倾斜的比例系数, 默认值是5\u003c/li\u003e\n\u003cli\u003espark.sql.adaptive.advisoryPartitionSizeInBytes 以字节为单位, 拆分倾斜分区的数据粒度\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e首先, 只有当分区的尺寸大于\u003ccode\u003eskewedPartitionThresholdInBytes\u003c/code\u003e时才有资格被判定为倾斜分区.\u003c/p\u003e","title":"Spark-AQE"},{"content":"广播变量 1 2 3 4 val dict = List(“spark”, “tune”) val words = spark.sparkContext.textFile(“~/words.csv”) val keywords = words.filter(word =\u0026gt; dict.contains(word)) keywords.map((_, 1)).reduceByKey(_ + _).collect 这段代码中的dict变量会被分发到每个task中, 由于每个executor上会运行多个task, 这样就造成了在每个executor上的数据冗余, 并且网络分发也会有消耗, 影响性能.\n我们可以将这个dict变量作为广播变量, 分发到每个executor上, 每个task都从executor上获取数据.\n1 2 3 4 5 val dict = List(“spark”, “tune”) val bc = spark.sparkContext.broadcast(dict) val words = spark.sparkContext.textFile(“~/words.csv”) val keywords = words.filter(word =\u0026gt; bc.value.contains(word)) keywords.map((_, 1)).reduceByKey(_ + _).collect 在广播变量的运行机制下，封装成广播变量的数据，由 Driver 端以 Executors 为粒度分发，每一个 Executors 接收到广播变量之后，将其交给 BlockManager 管理\n广播分布式数据集 在创建广播变量时, 由于变量的创建本来就在Driver上, 所以Driver直接把数据分发到各个Executor就可以了, 但是由于分布式数据集并不在Driver上, 它需要从各个Executor上拉取数据.\n步骤为:\nDriver从所有的Executor拉取这些数据分区, 在本地构建全量数据 — 目前spark有个pr是关于将Driver获取到数据分布, 然后通知各个Executor进行拉取, 避免只有Drvier组装以后再一个个发送效率过低 Driver把汇总好的全量数据分发给各个Executor, Executors 将接收到的全量数据缓存到存储系统的 BlockManager 中 相比于广播变量的创建, 广播分布式数据集的代价更大, 一是广播分布式数据需要Driver从各个Executor上拉取数据, 多了一步网络开销. 二是分布式数据的体量通常比广播变量大.\n如何让Spark SQL选择Broadcast Joins 配置项 spark.sql.autoBroadcastJoinThreshold 默认值为10MB.\n对于参与Join的两张表, 只要任意一张表的尺寸小于10MB, spark就会选择Broadcast Join.\n但是这个size的判断并不是很准,\n在source还未在内存中缓存时, 这时使用文件的大小 在source已经缓存在内存中, 这时可以直接判断数据的大小 下面这段代码可以大致判断出文件在运行时的大小\n1 2 3 4 5 6 7 8 9 10 val df: DataFrame = _ df.cache.count val plan = df.queryExecution.logical val estimated: BigInt = spark .sessionState .executePlan(plan) .optimizedPlan .stats .sizeInBytes 利用API强制广播 Join Hints 1 2 3 4 5 6 7 8 9 10 -- sql hint select /*+ broadcast(t2) */ * from t1 inner join t2 on t1.key = t2.key -- df hint table1.join(table2.hint(\u0026#34;broadcast\u0026#34;), Seq(\u0026#34;key\u0026#34;), \u0026#34;inner\u0026#34;) -- 函数 import org.apache.spark.sql.functions.broadcast table1.join(broadcast(table2), Seq(\u0026#34;key\u0026#34;), \u0026#34;inner\u0026#34;) 如果广播变量大小超过8GB, Spark会直接抛异常终端任务\n并不是所有的Join类型都可以转化为Broadcast Joins\n","permalink":"https://www.liunaijie.top/coding/big_data/spark/broadcast/","summary":"\u003ch1 id=\"广播变量\"\u003e广播变量\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003edict\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e“\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"err\"\u003e”\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"err\"\u003e“\u003c/span\u003e\u003cspan class=\"n\"\u003etune\u003c/span\u003e\u003cspan class=\"err\"\u003e”\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003ewords\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esparkContext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etextFile\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e“\u003c/span\u003e\u003cspan class=\"o\"\u003e~/\u003c/span\u003e\u003cspan class=\"n\"\u003ewords\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecsv\u003c/span\u003e\u003cspan class=\"err\"\u003e”\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003ekeywords\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ewords\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efilter\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eword\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edict\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ekeywords\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"o\"\u003e((\u003c/span\u003e\u003cspan class=\"k\"\u003e_\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)).\u003c/span\u003e\u003cspan class=\"n\"\u003ereduceByKey\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"k\"\u003e_\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003ecollect\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e这段代码中的\u003ccode\u003edict\u003c/code\u003e变量会被分发到每个task中, 由于每个executor上会运行多个task, 这样就造成了在每个executor上的数据冗余, 并且网络分发也会有消耗, 影响性能.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308121611565.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e我们可以将这个dict变量作为广播变量, \u003cstrong\u003e分发到每个executor上\u003c/strong\u003e, 每个task都从executor上获取数据.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003edict\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e“\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"err\"\u003e”\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"err\"\u003e“\u003c/span\u003e\u003cspan class=\"n\"\u003etune\u003c/span\u003e\u003cspan class=\"err\"\u003e”\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003ebc\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esparkContext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebroadcast\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edict\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003ewords\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esparkContext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etextFile\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e“\u003c/span\u003e\u003cspan class=\"o\"\u003e~/\u003c/span\u003e\u003cspan class=\"n\"\u003ewords\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecsv\u003c/span\u003e\u003cspan class=\"err\"\u003e”\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003ekeywords\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ewords\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efilter\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eword\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ebc\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ekeywords\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"o\"\u003e((\u003c/span\u003e\u003cspan class=\"k\"\u003e_\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)).\u003c/span\u003e\u003cspan class=\"n\"\u003ereduceByKey\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"k\"\u003e_\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003ecollect\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e在广播变量的运行机制下，封装成广播变量的数据，由 Driver 端以 Executors 为粒度分发，每一个 Executors 接收到广播变量之后，将其交给 BlockManager 管理\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308121611054.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003ch1 id=\"广播分布式数据集\"\u003e广播分布式数据集\u003c/h1\u003e\n\u003cp\u003e在创建广播变量时, 由于变量的创建本来就在Driver上, 所以Driver直接把数据分发到各个Executor就可以了, 但是由于分布式数据集并不在Driver上, 它需要从各个Executor上拉取数据.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308121611262.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e步骤为:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eDriver从所有的Executor拉取这些数据分区, 在本地构建全量数据\u003c/strong\u003e — 目前spark有个pr是关于将Driver获取到数据分布, 然后通知各个Executor进行拉取, 避免只有Drvier组装以后再一个个发送效率过低\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDriver把汇总好的全量数据分发给各个Executor, Executors 将接收到的全量数据缓存到存储系统的 BlockManager 中\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e相比于广播变量的创建, 广播分布式数据集的代价更大, 一是广播分布式数据需要Driver从各个Executor上拉取数据, 多了一步网络开销. 二是分布式数据的体量通常比广播变量大.\u003c/p\u003e\n\u003ch1 id=\"如何让spark-sql选择broadcast-joins\"\u003e如何让Spark SQL选择Broadcast Joins\u003c/h1\u003e\n\u003ch2 id=\"配置项\"\u003e配置项\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003espark.sql.autoBroadcastJoinThreshold\u003c/code\u003e 默认值为10MB.\u003c/p\u003e","title":"Spark-Broadcast"},{"content":" Spark SQL完整优化流程主要包含两个阶段: Catalyst优化器和Tungsten. 其中Catalyst优化器包含逻辑优化和物理优化两个阶段. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 select name, age, sum(price * volume) revenue from ( select * from tx ) tx inner join ( select name, age, userId from user where age \u0026lt; 30 and gender in (\u0026#39;M\u0026#39;) ) user on tx.userId = user.userId group by 1,2 ; ANTLR4 在编写完SQL或DataFrame后, spark会先使用Antlr来生成逻辑计划树Unresolved Logical Plan Catalyst Catalyst逻辑优化阶段分为两个环节: 逻辑计划解析和逻辑计划优化.\n在逻辑计划解析中, Catalyst把Unresolved Logical Plan转换为Analyzed Logical Plan;\n在逻辑计划优化中, Catalyst基于一些既定的启发式规则(Heuristics Based Rules)把Analyzed Logical Plan转换为Optimized Logical Plan 逻辑计划解析 这一步是把Unresolved Logical Plan转换为Analyzed Logical Plan\n要结合DataFrame的Schema信息, 来确认计划中的表名, 字段名, 字段类型与实际数据是否一致. 如果我们的查询中存在表名, 列名不存在. 会在这一步报错.\n完成确认后, Catalyst会生成Analyzed Logical Plan. 逻辑计划优化 这一步将Analyzed Logical Plan转换成Optimized Logical Plan\n在解析完逻辑计划之后, 我们也可以直接将Analyzed Logical Plan转换为物理计划. 但是这个时候的执行效率可能不是最优的, 我们根据一系列既有规则进行优化, 优化后再转换为物理计划.\n例如上面的Analyzed Logical Plan, 我们在查询中只涉及到user表的4个字段, 但是由于parquet文件中存在5个字段. 我们其实可以将没有用到的email字段舍弃掉.\n对于同样一种计算逻辑, 实现方式可以有多种, 按照不同的顺序对算子做排列组合, 我们可以演化出不同的实现方式. 需要去选择其中最优的哪一个.\nCatalyst的优化规则 优化规则主要可以归纳到3个范畴:\n谓词下推 (Predicate Pushdown) 列剪裁 (Column Pruning) 常量替换 (Constant Folding) 谓词下推 谓词指的是一些过滤条件比如age\u0026lt;30 , 下推指的是把这些谓词沿着执行计划向下, 推到离数据源最近的地方, 从而在源头就减少数据扫描量. 让这些谓词越接近数据源越好 在下推之前, Catalyst还会对谓词本身做一些优化, 比如像OptimizeIn规则, 它会把gender in ‘M‘ 优化为 gender = ‘M’ , 把谓词in替换为等值谓词. 再比如CombineFilters规则, 它会把age\u0026lt;30 和 gender=’M’ 这两个谓词, 捏合成一个谓词: age≠null and gender ≠null and age \u0026lt; 30 and gender = ‘M’\n完成谓词本身的优化之后, Catalyst再用PushDownPredicte优化规则, 把谓词推到逻辑计划树的最下面的数据源上. 下推的谓词能够大幅减少数据扫描量, 降低磁盘IO 2. 列剪裁\n扫描数据源时, 只读取那些与查询相关的字段. 在上面的例子中, 对于email字段, 虽然在数据中存在, 但是并没有查询这个字段, 所以Catalyst会使用ColumnPruning规则, 把email字段这一列剪掉. 对于列式存储的文件可以减少文件扫描数量, 降低IO开销.\n常量替换 对于我们的一些常量表达式, 例如 age \u0026lt; 12+ 18. 会使用ConstantFolding规则, 自动帮我们把条件变成 age\u0026lt;30 Catalyst的优化过程 逻辑计划（Logical Plan）和物理计划（Physical Plan），它们都继承自 QueryPlan。\nQueryPlan 的父类是 TreeNode，TreeNode 就是语法树中对于节点的抽象。TreeNode 有一个名叫 children 的字段，类型是 Seq[TreeNode]，利用 TreeNode 类型，Catalyst 可以很容易地构建一个树结构。除了 children 字段，TreeNode 还定义了很多高阶函数，其中最值得关注的是一个叫做 transformDown 的方法。transformDown 的形参，正是 Catalyst 定义的各种优化规则，方法的返回类型还是 TreeNode。另外，transformDown 是个递归函数，参数的优化规则会先作用（Apply）于当前节点，然后依次作用到 children 中的子节点，直到整棵树的叶子节点。\n从Analyzed Logical Plan到Optimized Logical Plan的转换，就是从一个 TreeNode 生成另一个 TreeNode 的过程\nAnalyzed Logical Plan 的根节点，通过调用 transformDown 方法，不停地把各种优化规则作用到整棵树，直到把所有 27 组规则尝试完毕，且树结构不再发生变化为止。这个时候，生成的 TreeNode 就是 Optimized Logical Plan。\n物理计划 优化Spark Plan 上面得到的Optimized Logical Plan 只是一些逻辑计划, 不具备可操作性.\n例如下面这个计划, 只是声明了join的方式为inner join. 但是并没有说明我们是需要boradcast join, 还是sort merge join或者其他join方式. 在这一步中, Catalyst共有14类优化策略, 其中6类与流计算相关, 剩下的8类使用与所有的场景. Join策略 Catalyst在运行时总共支持5种Join策略, 执行效率从高到低分别是:\nBroadcast Hash Join Shuffle Sort Merge Join Shuffle Hash Join Broadcast Nested Loop Join Shuffle Cartesian Product Join Catalyst在选择Join策略时, 会尝试优先选择执行效率最高的策略. 也就是说, 在选择join策略时, JoinSelection会先判断当前查询是否满足BHJ所要求的先决条件, 如果满足就立即选中BHJ. 如果不满足则依次向下判断是否满足SMJ的先决条件. 依次类推, 最终使用CPJ来兜底.\nJoinSelection在做决策时会依赖两类信息:\n条件型 Join类型 也就是我们的Join key是否是等值连接 内表尺寸 判断表的大小, 信息可以来自与hive表, parquet文件信息, 或者缓存大小, AQE的动态统计信息. Spark3.x版本的AQE对此有优化 指令型 也就是Join Hints. 它允许我们主动声明想使用的Join策略, 并且在做Join策略选择时会优先选择我们的策略. 但并不是一定会选择我们的策略 在上面的查询中, 首先选择BHJ, 但是由于右表user的尺寸太大, 所以退而求其次选择了SMJ. 这时所有条件都满足, 所以最终的Join策略为SMJ. 查询计划树如下所示: 生成Physical Plan Catalyst需要对Spark Plan做进一步的转换, 生成可以操作、可以执行的Physical Plan. 这里有一步Preparation Rules的规则, 完成这些规则后就转换成了Physical Plan. 这些规则可以保证在上一步优化时添加的规则可以被执行.\n例如在上面的查询中添加了Join策略为SortMergeJoin. 但是SortMergeJoin需要选择进行排序, 并且需要根据key做shuffle. 在上一步的计划中并没有声明这些信息. 那么就需要运用这些规则来完善信息.\nEnsureRequirements规则 这一个规则是确保每一个节点的操作都可以满足前提条件. 每一个节点, 都会有4个属性用来描述数据输入和输出的分布状态.\noutputPartitioning 输出数据的分区规则 outputOrdering 输出数据的排序规则 requireChildDistribution 要求输入数据满足某种分区规则 requireChildOrdering 要求输入数据满足某种排序规则 EnsureRequirements规则要求, 子节点的输出数据要满足父节点的输入要求. 上面的图中, 父节点SortMergeJoin有两个子节点, 父节点需要两个子节点按照userId分成200个分区并且排好序. 但是在两个子节点上, 他们输出数据并没有满足这两个条件. 这时就要利用EnsureRuirements规则来将两个子节点满足父节点的输入要求. 它通过添加必要的操作符, 如Shuffle和排序, 来保证父节点SortMergeJoin节点对于输入数据的要求得到满足. 添加必需的节点之后, Physical Plan就已经相当具体, 可以去执行了.\n这时spark可以调用Physical Plan的doExecute方法, 把结构化查询的计算结果, 转换为RDD[InternalRow]. 这里的InternalRow是Tungsten设计的定制化二进制数据结构.\n通过调用RDD[InternalRow]之上的ACTION算子, Spark就可以触发Physical Plan从头至尾依次执行.\n上面查询的Physical Plan最终如下: Physical Plan中, 会有一些星号“”, 这些星号后面还带着括号和数字, 比如“(3)”, “*(1)”. 这种星号标记表示的就是WSCG, 后面的数字代表Stage编号. 因此, 括号中数字相同的操作, 最终都会被捏合成一份代码来执行.\n","permalink":"https://www.liunaijie.top/coding/big_data/spark/catalyst%E7%9A%84%E4%BC%98%E5%8C%96%E8%BF%87%E7%A8%8B/","summary":"\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308121612524.png\" alt=\"\"\u003e\nSpark SQL完整优化流程主要包含两个阶段: Catalyst优化器和Tungsten. 其中Catalyst优化器包含逻辑优化和物理优化两个阶段.\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308121612866.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evolume\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003erevenue\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etx\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etx\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003einner\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ejoin\u003c/span\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003euserId\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003euser\u003c/span\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003ewhere\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eand\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egender\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ein\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;M\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003euser\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eon\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euserId\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euserId\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003egroup\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eby\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"antlr4\"\u003eANTLR4\u003c/h1\u003e\n\u003cp\u003e在编写完SQL或DataFrame后, spark会先使用Antlr来生成逻辑计划树\u003ccode\u003eUnresolved Logical Plan\u003c/code\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308121612334.png\" alt=\"\"\u003e\u003c/p\u003e","title":"Spark-Catalyst的优化过程"},{"content":"DPP(Dynamic Partition Pruning, 动态分区剪裁)是Spark 3.0版本中第二个引人瞩目的特性, 它指的是在星型数仓的数据关联场景中, 可以充分利用过滤之后的维度表, 大幅削减事实表的数据扫描量, 从整体上提升关联计算的执行性能.\n分区剪裁 对partition字段的过滤条件会只扫描符合条件的一类文件夹. 不会扫描全部的文件.\n动态分区剪裁 将维度表中的结果发送到事实表中, 事实表根据这个子集做过滤, 从而减少数据扫描量, 提升I/O效率.\n需要满足这三个条件才会触发动态分区剪裁\n事实表必须是分区表, 而且分区字段(可以是多个)必须包含Join Key 仅支持等值Join, 对于不等值Join是不支持的. 维度表过滤之后的数据集要小于广播阈值 在对维度表过滤完之后, 会把这份数据封装为广播变量, 然后\n发送给事实表中, 来减少事实表的数据扫描量. 发送给后续的Reduce Task来进行关联操作. 小结 没啥用, 因为需要限制Join Key为分区字段.\n","permalink":"https://www.liunaijie.top/coding/big_data/spark/dpp%E7%89%B9%E6%80%A7%E8%AF%A5%E6%80%8E%E4%B9%88%E7%94%A8/","summary":"\u003cp\u003eDPP(Dynamic Partition Pruning, 动态分区剪裁)是Spark 3.0版本中第二个引人瞩目的特性, 它指的是在星型数仓的数据关联场景中, 可以充分利用过滤之后的维度表, 大幅削减事实表的数据扫描量, 从整体上提升关联计算的执行性能.\u003c/p\u003e\n\u003ch1 id=\"分区剪裁\"\u003e分区剪裁\u003c/h1\u003e\n\u003cp\u003e对partition字段的过滤条件会只扫描符合条件的一类文件夹. 不会扫描全部的文件.\u003c/p\u003e\n\u003ch1 id=\"动态分区剪裁\"\u003e动态分区剪裁\u003c/h1\u003e\n\u003cp\u003e将维度表中的结果发送到事实表中, 事实表根据这个子集做过滤, 从而减少数据扫描量, 提升I/O效率.\u003c/p\u003e\n\u003cp\u003e需要满足这三个条件才会触发动态分区剪裁\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e事实表必须是分区表, 而且分区字段(可以是多个)必须包含Join Key\u003c/li\u003e\n\u003cli\u003e仅支持等值Join, 对于不等值Join是不支持的.\u003c/li\u003e\n\u003cli\u003e维度表过滤之后的数据集要小于广播阈值\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在对维度表过滤完之后, 会把这份数据封装为广播变量, 然后\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e发送给事实表中, 来减少事实表的数据扫描量.\u003c/li\u003e\n\u003cli\u003e发送给后续的Reduce Task来进行关联操作.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"小结\"\u003e小结\u003c/h1\u003e\n\u003cp\u003e没啥用, 因为需要限制Join Key为分区字段.\u003c/p\u003e","title":"Spark-DPP特性"},{"content":"有哪些位置会发生OOM 首先我们要明确OOM是发生在Driver端还是Executor.\n如果在Executor上, 是在哪个区域.\nDriver端的OOM Driver的主要职责是任务调度, 同时参与非常少量的任务计算.\nDriver端的内存并没有明细的划分, 是整体的一块. 所以OOM问题只可能来自它设计的计算任务, 主要有两类:\n创建小规模的分布式数据集: 通过parallelize、createDataFrame等API创建数据集 收集计算结果: 通过take、show、collect等算子把结果收集到Driver端 所以Driver端的OOM只会有这两类原因:\n创建的数据集超过内存上限 收集的结果集超过内存上限 第一类原因不言而喻就是我们创建的数据集太大, 这类错误可以明显的在代码中找到进行修改.\n而对于第二类原因, 有很多是间接调用了collect从而导致的OOM. 这类错误在代码中就没有那么明确的可以找到.\n比如说我们对一个数据集进行broadcast操作, 在这个过程中就需要Driver从每个Executor的数据分片上把部分数据拉取到Driver端来构建全量数据集. 所以这个时候如果总大小超过Driver端内存就会报出OOM错误. 这个时候在日志中可以看到这样的错误:\n1 java.lang.OutOfMemoryError: Not enough memory to build and broadcast 如何修改配置 对于这两种情况, 都可以通过spark.driver.memory 配置项增大Driver的内存来避免OOM.\n但是我们可以看下能否通过优化代码来解决这类问题\n例如是否需要构建大数据量的数据集. 以及预估要广播变量的数据集大小, 从而可以更准确的调整内存大小\n1 2 3 4 5 6 7 8 9 val df: DataFrame = _ df.cache.count val plan = df.queryExecution.logical val estimated: BigInt = spark .sessionState .executePlan(plan) .optimizedPlan .stats .sizeInBytes Executor端的OOM Executor的内存主要分为4个区域:\nReserved Memory 大小固定为300MB, 这部分是spark系统自己使用的内存 Storage Memory 缓存内存区域, 数据集如果超过Storage Memory大小, 要么会直接抛弃(Memory_Only), 要么会缓存到磁盘(Memory_And_Disk)上 User Memory 存储用户自定义的数据结构 Execution Memory 我们可以看出Reserved Memory和Storage Memory是不会出现内存溢出的问题的. 如果在Executor端出现OOM那么只有可能出现在User Memory或者Execution Memory上.\nUser Memory 存储用户自定义的数据结构, 例如定义的一些变量值. 这些变量值会分发到每一个task上, 在同一个Executor上会有多个变量的副本, 这些副本都存储在User Memory区域中.\n配置项 该区域大小计算公式为: spark.executor.memory * （ 1 - spark.memory.fraction)\n所以我们可以调高每个Executor的memory大小, 或者调低(执行内存+缓存内存)的比例\nExecution Memory 执行内存区域, 这个区域出错的概率比其他区域都高.\n这个区域不仅于内存空间大小、数据分布有关, 还与Executor线程池和运行时调度有关.\n来看一下数据倾斜的例子: 我们现在的配置为: 2个CPU core, 每个core有两个线程, 内存大小为1GB. spark.executor.cores为3, spark.executor.memory为900MB.\n在默认配置下, Execution Memory和Storage Memory为180MB( spark.memory.fraction=0.6, spark.memory.storageFraction=0.5. 还有300MB为Reserved Memory). Execution Memory的上限为360MB(没有RDD缓存时, 即占用了全部的Storage Memory).\n节点在Reduce阶段拉取数据分片, 3个Reduce Rask对应的数据分片大小分别为100MB和300MB.\n由于Executor线程池大小为3, 因此每个Reduce Task最多可以获取360/3=120MB的内存. 对于Task1, Task2可以顺利完成任务, 但是Task3的数据分片远超内存上限, 从而造成OOM. ","permalink":"https://www.liunaijie.top/coding/big_data/spark/oom%E8%AF%8A%E6%96%AD/","summary":"\u003ch1 id=\"有哪些位置会发生oom\"\u003e有哪些位置会发生OOM\u003c/h1\u003e\n\u003cp\u003e首先我们要明确OOM是发生在Driver端还是Executor.\u003c/p\u003e\n\u003cp\u003e如果在Executor上, 是在哪个区域.\u003c/p\u003e\n\u003ch1 id=\"driver端的oom\"\u003eDriver端的OOM\u003c/h1\u003e\n\u003cp\u003eDriver的主要职责是任务调度, 同时参与非常少量的任务计算.\u003c/p\u003e\n\u003cp\u003eDriver端的内存并没有明细的划分, 是整体的一块. 所以OOM问题只可能来自它设计的计算任务, 主要有两类:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建小规模的分布式数据集: 通过parallelize、createDataFrame等API创建数据集\u003c/li\u003e\n\u003cli\u003e收集计算结果: 通过take、show、collect等算子把结果收集到Driver端\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以Driver端的OOM只会有这两类原因:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建的数据集超过内存上限\u003c/li\u003e\n\u003cli\u003e收集的结果集超过内存上限\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第一类原因不言而喻就是我们创建的数据集太大, 这类错误可以明显的在代码中找到进行修改.\u003c/p\u003e\n\u003cp\u003e而对于第二类原因, 有很多是间接调用了collect从而导致的OOM. 这类错误在代码中就没有那么明确的可以找到.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308121616745.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e比如说我们对一个数据集进行broadcast操作, 在这个过程中就需要Driver从每个Executor的数据分片上把部分数据拉取到Driver端来构建全量数据集. 所以这个时候如果总大小超过Driver端内存就会报出OOM错误. 这个时候在日志中可以看到这样的错误:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ejava.lang.OutOfMemoryError: Not enough memory to build and broadcast\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"如何修改配置\"\u003e如何修改配置\u003c/h2\u003e\n\u003cp\u003e对于这两种情况, 都可以通过\u003ccode\u003espark.driver.memory\u003c/code\u003e 配置项增大Driver的内存来避免OOM.\u003c/p\u003e\n\u003cp\u003e但是我们可以看下能否通过优化代码来解决这类问题\u003c/p\u003e\n\u003cp\u003e例如是否需要构建大数据量的数据集. 以及预估要广播变量的数据集大小, 从而可以更准确的调整内存大小\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003edf\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eDataFrame\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003e_\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003edf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecache\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eplan\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edf\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equeryExecution\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elogical\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003eestimated\u003c/span\u003e\u003cspan class=\"k\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eBigInt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003espark\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esessionState\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexecutePlan\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eplan\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eoptimizedPlan\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estats\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esizeInBytes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"executor端的oom\"\u003eExecutor端的OOM\u003c/h1\u003e\n\u003cp\u003eExecutor的内存主要分为4个区域:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReserved Memory 大小固定为300MB, 这部分是spark系统自己使用的内存\u003c/li\u003e\n\u003cli\u003eStorage Memory 缓存内存区域, 数据集如果超过Storage Memory大小, 要么会直接抛弃(Memory_Only), 要么会缓存到磁盘(Memory_And_Disk)上\u003c/li\u003e\n\u003cli\u003eUser Memory 存储用户自定义的数据结构\u003c/li\u003e\n\u003cli\u003eExecution Memory\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我们可以看出Reserved Memory和Storage Memory是不会出现内存溢出的问题的. 如果在Executor端出现OOM那么只有可能出现在User Memory或者Execution Memory上.\u003c/p\u003e","title":"Spark-OOM诊断"},{"content":"Map阶段的输出是什么 Map阶段最终生成的数据会以中间文件的形式物化到磁盘中, 这些文件存储在spark.local.dir设置的文件目录中. 中间文件包含两种类型:\n后缀为data的数据文件\n存储的内容是Map阶段生成的待分发数据\n后缀为index的索引文件\n记录的是数据文件中不同分区(Reduce阶段的分区)的偏移地址. 分区数量与Reduce阶段的并行度保持一致.\nMap阶段的每个Task都会生成这样的一组文件, 因此中间文件的数量与Map阶段的并行度保持一致.\n数据生成过程 计算目标分区 在Spark中, 每条数据的分区是由Key的哈希值决定的\n写入缓存区或溢写到文件 GroupByKey的实现 计算完目标分区后, Map Task会把每条记录和它的目标分区, 放到一个特殊的数据结构PartitionedPairBuffer里, 这个数据结构本质上是一个数组形式的缓存结构.\n每条数据都会占用数组中相邻的两个元素空间, 第一个元素存储(目标分区, Key), 第二个元素存储值.\n这个数组的长度不可能无限大来存储所有Map端的元素. 所以Spark有一种机制, 来保障在数据总量超过可用内存的情况下, 依然能够完成计算. 这种机制就是: 排序、溢出、归并.\n举个例子:\n假如我们的PartitionedPairBuffer 的数组长度为8, 也就是说可以存储4个元素. 而我们的Map端共有16个元素, 那么就会需要4批才能完成计算. 在处理第二批的数据时, Spark会将第一批的数据溢写到磁盘的临时文件上.\n在溢写时, 会对PartitionedPairBuffer 中已有的数据, 按照目标分区以及Key进行排序后再进行写入, 所以临时文件中的数据是有序的.\n在处理第四批的时, 这时已经是最后一批, 所以这次不再需要溢写到临时文件. 现在的数据分布在3个临时文件中, 还有缓存在PartitionedPairBuffer中.\n最后, 会从这两个输入源中(临时文件, 缓存区)生成最终的数据文件和索引文件. 并且由于每个文件都是有序的, 所以在合并时使用了归并算法.\n主要步骤为:\n对于分片中的数据记录, 逐一计算其目标分区, 并将其填充到PartitionedPairBuffer PartitionedPairBuffer 填满后, 如果后续还有未处理的数据, 则对Buffer中的数据按(Partition ID, Key)进行排序, 将Buffer中的文件溢出到临时文件, 同时清空缓存区 重复步骤1, 2. 直到分片内的所有数据都被处理 对所有临时文件和PartitionedPairBuffer归并排序, 最终生成数据文件和索引文件 ReduceByKey ReduceByKey的计算步骤与GroupByKey的一样, 都是先填充内存数据结构, 然后排序溢出, 最后归并排序.\n不一样的地方是, ReduceByKey采用了一种PartitionedAppendOnlyMap 的数据结构来填充数据记录, 这个数据结构是一种Map, 而Map的值是可以累加, 可以更新的. 所以非常适合用于聚合类的计算场景, 如计数、求和、均值计算、极值计算等.\n相比PartitionedPairBuffer, PartitionedAppendOnlyMap的存储效率要高很多, 溢出数据到磁盘文件的频率也要低很多. 因此最终合并的数据文件也会小很多.\n依靠高效的内存存储结构、更少的磁盘文件、更小的文件尺寸. 大幅降低来Shuffle过程中的磁盘和网络开销.\nReduce阶段流程 Reduce阶段需要主动从Map端中间文件中拉取数据.\n每个Map Task都会生成上图这样的文件, 文件中的分区数与Reduce阶段的并行度一致. 也就是说每个Map Task生成的数据文件, 都包含所有Reduce Task所需的部分数据.\n因此, 任何一个Reduce Task都需要从所有的Map Task拉取属于自己的那部分数据. 索引文件用于帮助判定哪部分数据属于哪个Reduce Task.\nReduce Task通过网络拉取中间文件的过程, 实际上就是不同Stages之间数据分发的过程.\nReduce Task将拉取到的数据块填充到读缓存区, 然后按照任务的计算逻辑不停的消费、处理缓存区中的数据记录.\n总结 对于Shuffle, 它需要消耗所有的硬件资源\n无论是PartitionedPairBuffer、PartitionedAppendOnlyMap这些内存数据结构, 还是读写缓冲区, 都需要消耗内存资源 由于内存空间有限, 因此溢写的临时文件会引入大量的磁盘I/O, 而且Map阶段输出的中间文件也会消耗磁盘 Reduce阶段的数据拉取, 需要消耗网络I/O. 其次, 消耗的不同硬件资源之间很难达到平衡.\n","permalink":"https://www.liunaijie.top/coding/big_data/spark/shuffle%E8%BF%87%E7%A8%8B/","summary":"\u003ch1 id=\"map阶段的输出是什么\"\u003eMap阶段的输出是什么\u003c/h1\u003e\n\u003cp\u003eMap阶段最终生成的数据会以中间文件的形式物化到磁盘中, 这些文件存储在\u003ccode\u003espark.local.dir\u003c/code\u003e设置的文件目录中. 中间文件包含两种类型:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e后缀为data的数据文件\u003c/p\u003e\n\u003cp\u003e存储的内容是Map阶段生成的待分发数据\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e后缀为index的索引文件\u003c/p\u003e\n\u003cp\u003e记录的是数据文件中不同分区(Reduce阶段的分区)的偏移地址. 分区数量与Reduce阶段的并行度保持一致.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMap阶段的每个Task都会生成这样的一组文件, 因此中间文件的数量与Map阶段的并行度保持一致.\u003c/p\u003e\n\u003ch1 id=\"数据生成过程\"\u003e数据生成过程\u003c/h1\u003e\n\u003ch2 id=\"计算目标分区\"\u003e计算目标分区\u003c/h2\u003e\n\u003cp\u003e在Spark中, 每条数据的分区是由Key的哈希值决定的\u003c/p\u003e\n\u003ch2 id=\"写入缓存区或溢写到文件\"\u003e写入缓存区或溢写到文件\u003c/h2\u003e\n\u003ch3 id=\"groupbykey的实现\"\u003eGroupByKey的实现\u003c/h3\u003e\n\u003cp\u003e计算完目标分区后, Map Task会把每条记录和它的目标分区, 放到一个特殊的数据结构\u003ccode\u003ePartitionedPairBuffer\u003c/code\u003e里, 这个数据结构本质上是一个数组形式的缓存结构.\u003c/p\u003e\n\u003cp\u003e每条数据都会占用数组中相邻的两个元素空间, 第一个元素存储(目标分区, Key), 第二个元素存储值.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308121617362.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e这个数组的长度不可能无限大来存储所有Map端的元素. 所以Spark有一种机制, 来保障在数据总量超过可用内存的情况下, 依然能够完成计算. 这种机制就是: \u003cstrong\u003e排序、溢出、归并.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e举个例子:\u003c/p\u003e\n\u003cp\u003e假如我们的\u003ccode\u003ePartitionedPairBuffer\u003c/code\u003e 的数组长度为8, 也就是说可以存储4个元素. 而我们的Map端共有16个元素, 那么就会需要4批才能完成计算. 在处理第二批的数据时, Spark会将第一批的数据溢写到磁盘的临时文件上.\u003c/p\u003e\n\u003cp\u003e在溢写时, 会对\u003ccode\u003ePartitionedPairBuffer\u003c/code\u003e 中已有的数据, 按照目标分区以及Key进行排序后再进行写入, 所以\u003ccode\u003e临时文件中的数据是有序的\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e在处理第四批的时, 这时已经是最后一批, 所以这次不再需要溢写到临时文件. 现在的数据分布在3个临时文件中, 还有缓存在PartitionedPairBuffer中.\u003c/p\u003e\n\u003cp\u003e最后, 会从这两个输入源中(临时文件, 缓存区)生成最终的数据文件和索引文件. 并且由于每个文件都是有序的, 所以在合并时使用了归并算法.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308121617650.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e主要步骤为:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e对于分片中的数据记录, 逐一计算其目标分区, 并将其填充到PartitionedPairBuffer\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePartitionedPairBuffer\u003c/code\u003e 填满后, 如果后续还有未处理的数据, 则对Buffer中的数据按(Partition ID, Key)进行排序, 将Buffer中的文件溢出到临时文件, 同时清空缓存区\u003c/li\u003e\n\u003cli\u003e重复步骤1, 2. 直到分片内的所有数据都被处理\u003c/li\u003e\n\u003cli\u003e对所有临时文件和\u003ccode\u003ePartitionedPairBuffer\u003c/code\u003e归并排序, 最终生成数据文件和索引文件\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"reducebykey\"\u003eReduceByKey\u003c/h3\u003e\n\u003cp\u003eReduceByKey的计算步骤与GroupByKey的一样, 都是先填充内存数据结构, 然后排序溢出, 最后归并排序.\u003c/p\u003e","title":"Spark-Shuffle过程"},{"content":"在Spark SQL中, Catalyst优化器负责把查询语句最终转换为可以执行的Physical Plan.\nSpark在Physical Plan的基础上还会再利用Tungsten(钨丝计划)进行一次优化\nTungsten主要围绕内核引擎做了两方面的改进:\n数据结构设计 全阶段代码生成(WSCG, Whole Stage Code Generation) Tungsten在数据结构方面的设计 相比Spark Core, Tungsten在数据结构方面做了两个较大的改进, 一个是紧凑的二进制格式Unsafe Row, 另一个是内存管理.\nUnsafe Row: 二进制数据结构 Unsafe Row是一种字节数组, 它可以用来存储下图所示Schema为(userId, name, age, gender)的用户数据条目 总的来说, 所有字段都会按照Schema中的顺序安放在数组中. 其中, 定长字段的值会直接安插到字节中, 而变长字段会先在Schema的相应位置插入偏移地址, 再把字段长度和字段值存储到靠后的元素中.\n优点:\n节省存储空间 使用JVM的对象存储时, 有对象头信息, 哈希码等其他额外的开销.\n降低对象数量, 提高垃圾回收效率\n以JVM的对象存储, 每条记录都需要创建一个对象, 这样会造成频繁GC, 降低了系统性能\nUnsafeRow以字节数组的存储方式来消除存储开销, 并且仅用一个数组对象就完成来一条数据的封装, 显著降低了GC压力\n基于内存页的内存管理??? 为了统计管理Off Head和On Heap内存空间, Tungsten定义了统一的128位内存地址, 简称Tungsten地址.\nTungsten地址分为两部分: 前64位预留给Java Object, 后64位是偏移地址Offset.\n虽然Off Heap和On Heap都是128位内存地址, 但是Off Heap和On Heap两块内存空间在寻址方式上截然不同.\n对于On Heap空间的Tungsten地址来说, 前64位存储的是JVM堆内对象的引用或者说指针, 后64位Offset存储的是数据在该对象内的偏移地址. — 有指针不就找到对象了吗? 为什么还加一个数据的偏移地址.\n而对于Off Heap, 由于Spark通过Java Unsafe API直接管理操作系统内存, 不存在内存对象的概念, 因此前64位存储的是null值, 后64位则用于在堆外空间中直接寻址操作系统的内存空间.\n可以看出, 在Tungsten模式下, 管理On Heap会比Off Heap更加复杂, 这是因为在On Heap内存空间寻址堆内数据必需经过两步:\n通过前64位的Object引用来定位JVM对象 结合Offset提供的偏移地址在堆内内存空间中找到所需的数据 JVM对象地址与偏移量的关系, 就好比是数组的起始地址与数组元素偏移地址之间的关系. 给定起始地址和偏移地址之后, 系统就可以迅速地寻址到数据元素.\n如何理解WSCG 在Tungsten之前是如何计算的 内存计算的第二层含义: 在同一个Stage内部, 把多个RDD的compute函数捏合成一个, 然后把这个函数一次性的作用到输入数据上. 不过这种捏合方式采用的是迭代器嵌套的方式, 只是将多个函数嵌套, 并没有真正的融合为一个函数. 在Tungsten出现以前, Spark在运行时采用火山迭代模型来执行计算.\n迭代器嵌套的计算模式会涉及两种操作: 一个是内存数据的随机存取, 另一个是虚函数调用. 这两种操作都会降低CPU的缓存命中率, 影响CPU的工作效率.\n来举一个例子: 这个语句, 如果按照火山迭代模型来执行计算, 那么对于数据源重的每条数据, 语法树当中的每个操作符都需要完成如下步骤:\n从内存中读取父操作符的输出结果作为输入数据 调用hasNext, next方法获取元素后, 以操作符逻辑处理数据. 将处理后的结果以统一的标准形式输出到内存, 供下游算子消费 WSCG WSCG 指的是基于同一 Stage 内操作符之间的调用关系，生成一份“手写代码”，真正把所有计算融合为一个统一的函数\n利用WSCG可以将上面的代码转换为如下类似的流程: 直接将4步流程转换成1步, 从而提高了性能. 数据只需计算1次即可, 也无需中间的缓存.\nWSCG 机制的工作过程就是基于一份“性能较差的代码”，在运行时动态地(On The Fly)重构出一份“性能更好的代码”\nWSCG是如何在运行时动态生成代码的 在刚刚的市民表查询例子中, 语法树从左到右有Scan, Filter, Project和Aggregate4个节点. 由于Aggregate会引入Shuffle切割Stage. 所以这4个节点会产生两个Stage.\nWSCG是在同一个Stage内部生成手写代码. 所以我们来看前三个操作法Scan, Filter和Project构成的Stage\n从中我们知道, Spark Plan在转换成Physical Plan之前, 会应用一系列的Preparation Rules. 这其中很重要的一环就是CollapseCodegenStages规则, 它的作用就是尝试为每一个Stage生成“手写代码”\n总的来说, 手写代码的生成过程分为两个步骤:\n从父节点到子节点, 递归调用doProduce, 生成代码框架 从子节点到父节点, 递归调用doConsume, 向框架填充每一个操作符的运算逻辑 用刚刚的Stage为例, 看下这个代码生成的过程: 首先, 在Stage顶端节点也就是Project之上, 添加WholeStageCodeGen节点.\nWholeStageCodeGen节点通过调用doExecute来触发整个代码生成过程的计算.\ndoExecute 会递归调用子节点的doProduce函数, 直到遇到Shuffle Boundary为止. — 这里Shuffle Boundary指的是Shuffle边界, 要么是数据源, 要么是上一个Stage的输出.\n在叶子节点(也就是Scan)调用的Produce函数会先把手写代码的框架生成出来, 图中右侧蓝色部分的代码.\n然后, Scan中的doProduce函数会反向递归调用每个父节点的doConsume函数. 不同操作符在执行doConsume函数的过程中, 会把关系表达式转化成Java代码, 然后把这份代码潜入到刚刚的代码框架里. 比如图中橘黄色的doConsume生成的if语句, 其中包含了判断地区是否为北京的条件. 以及紫色的doConsume生成来获取必需字段userId的Java代码\n就这样, Tungsten利用CollapseCodegenStages规则, 经过两次递归调用把Catalyst输出的Spark Plan加工成了一份“手写代码”. 并把这份手写代码交付给DAGScheduler, DAGScheduler再去协调TaskScheduler和SchedulerBackend, 完成分布式任务调度.\n","permalink":"https://www.liunaijie.top/coding/big_data/spark/tungsten/","summary":"\u003cp\u003e在Spark SQL中, Catalyst优化器负责把查询语句最终转换为可以执行的Physical Plan.\u003c/p\u003e\n\u003cp\u003eSpark在Physical Plan的基础上还会再利用Tungsten(钨丝计划)进行一次优化\u003c/p\u003e\n\u003cp\u003eTungsten主要围绕内核引擎做了两方面的改进:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e数据结构设计\u003c/li\u003e\n\u003cli\u003e全阶段代码生成(WSCG, Whole Stage Code Generation)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"tungsten在数据结构方面的设计\"\u003eTungsten在数据结构方面的设计\u003c/h1\u003e\n\u003cp\u003e相比Spark Core, Tungsten在数据结构方面做了两个较大的改进, 一个是紧凑的二进制格式Unsafe Row, 另一个是内存管理.\u003c/p\u003e\n\u003ch2 id=\"unsafe-row-二进制数据结构\"\u003eUnsafe Row: 二进制数据结构\u003c/h2\u003e\n\u003cp\u003eUnsafe Row是一种字节数组, 它可以用来存储下图所示Schema为(userId, name, age, gender)的用户数据条目\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308121619599.png\" alt=\"\"\u003e\n总的来说, 所有字段都会按照Schema中的顺序安放在数组中. 其中, 定长字段的值会直接安插到字节中, 而变长字段会先在Schema的相应位置插入偏移地址, 再把字段长度和字段值存储到靠后的元素中.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e优点:\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e节省存储空间\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e使用JVM的对象存储时, 有对象头信息, 哈希码等其他额外的开销.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e降低对象数量, 提高垃圾回收效率\u003c/p\u003e\n\u003cp\u003e以JVM的对象存储, 每条记录都需要创建一个对象, 这样会造成频繁GC, 降低了系统性能\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eUnsafeRow以字节数组的存储方式来消除存储开销, 并且仅用一个数组对象就完成来一条数据的封装, 显著降低了GC压力\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"基于内存页的内存管理\"\u003e基于内存页的内存管理???\u003c/h2\u003e\n\u003cp\u003e为了统计管理Off Head和On Heap内存空间, Tungsten定义了统一的128位内存地址, 简称Tungsten地址.\u003c/p\u003e\n\u003cp\u003eTungsten地址分为两部分: 前64位预留给Java Object, 后64位是偏移地址Offset.\u003c/p\u003e\n\u003cp\u003e虽然Off Heap和On Heap都是128位内存地址, 但是Off Heap和On Heap两块内存空间在寻址方式上截然不同.\u003c/p\u003e\n\u003cp\u003e对于On Heap空间的Tungsten地址来说, 前64位存储的是JVM堆内对象的引用或者说指针, 后64位Offset存储的是数据在该对象内的偏移地址. — 有指针不就找到对象了吗? 为什么还加一个数据的偏移地址.\u003c/p\u003e","title":"Spark-Tungsten"},{"content":"不同的缓存级别 Spark的cache支持多种缓存级别, 比如MEMORY_AND_DISC_SER_2、MEMORY_ONLY等等. 这些值是这几部分构成的:\n存储介质: 内存还是磁盘, 还是两者都有 存储形式: 存储对象值还是序列化的字节数组, 带SER字样的表示以序列化方式存储, 不带SER表示采用对象值 副本数量: 拷贝数量, 没有数字默认为1份副本 Spark对RDD.cache函数默认使用MEMORY_ONLY, 对DataFrame.cache默认使用MEMORY_AND_DISK.\n缓存的计算过程 在MEMORY_AND_DISK模式下, Spark会优先尝试把数据集全部缓存到内存, 内存不足的情况下, 再把剩余的数据落盘到本地.\nMEMORY_ONLY则不管内存是否充足, 一股脑的把数据缓存到内存. 无论是RDD还是DataFrame, 它们的数据分片都是以迭代器Iterator的形式存储的. 因此, 要把数据缓存下来, 就要把迭代器展开成实实在在的数据值, 这一步叫做Unroll. 展开的对象暂存在一个叫做ValuesHolder的数据结构里, 然后转化为MemoryEntry. 这里转化的实现方式是toArray, 因此它不产生额外的内存开销, 这一步叫做Transfer. 最终, MemoryEntry和与之对应的BlockID, 以K, V的形式存储到哈希字典(LinkedHashMap)中 当分布式数据集所有的数据分片都从Unroll到Transfer, 再到注册哈希字典后, 数据在内存的缓存过程就结束了\n缓存的销毁过程 将数据缓存进内存时, 如果发现内存不足, 则需要根据LRU算法来驱逐(Eviction)一些数据分片 由于Spark在存储MemoryEntry时使用了LinkedHashMap的数据结构, 所有可以很容易的找到最近最少使用的Block(链表头部).\nSpark当试图缓存一个数据分片, 却发现可用内存不足时, 会对LinkedHashMap从头扫描, 当扫描过的MemoryEntry尺寸之和大于要写入的数据分片时, 将这些数据给删除掉.\n在进行缓存清楚时, 同属一个RDD的MemoryEntry不会被选中\n在缓存清除的过程中, Spark遵循两个基本原则\nLRU, 按照元素的访问顺序, 优先清除那些“最近最少访问”的MemoryEntry 同属一个RDD的MemoryEntry不会被清除 数据丢失 在Memory_Only的模式下, 尽管有缓存销毁这个环境, 但是总会“驱无可驱”, 这个时候, Memory_Only就会放弃剩余的数据分片, 造成数据丢失.\nCache的注意事项 cache是惰性操作, 在调用cache只会, 需要用Action算子触发缓存的物化过程.\n假如我们使用了take, show, first这几个action算子, Spark并不会缓存所有的元素, 只会缓存用到的几个元素, 例如take算子只缓存take的20条记录.\n我们需要使用count这类的全局操作算子. 才能保证cache的完整性.\nCache Manager要求两个查询的Analyzed Logical Plan必须完全一致, 才能对DataFrame的缓存进行复用.\n缓存清理 可以手动调用unpersist来清理弃用的缓存数据, 它支持同步、异步两种模式\n异步模式: 调用unpersist() 或是 unpersist(false)\n同步模式: 调用unpersist(true)\n在异步模式下，Driver 把清理缓存的请求发送给各个 Executors 之后，会立即返回，并且继续执行用户代码，比如后续的任务调度、广播变量创建等等。\n在同步模式下，Driver 发送完请求之后，会一直等待所有 Executors 给出明确的结果（缓存清除成功还是失败）。各个 Executors 清除缓存的效率、进度各不相同，Driver 要等到最后一个 Executor 返回结果，才会继续执行 Driver 侧的代码\n","permalink":"https://www.liunaijie.top/coding/big_data/spark/%E9%81%BF%E5%85%8Dcache%E6%BB%A5%E7%94%A8/","summary":"\u003ch1 id=\"不同的缓存级别\"\u003e不同的缓存级别\u003c/h1\u003e\n\u003cp\u003eSpark的cache支持多种缓存级别, 比如MEMORY_AND_DISC_SER_2、MEMORY_ONLY等等. 这些值是这几部分构成的:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e存储介质: 内存还是磁盘, 还是两者都有\u003c/li\u003e\n\u003cli\u003e存储形式: 存储对象值还是序列化的字节数组, 带SER字样的表示以序列化方式存储, 不带SER表示采用对象值\u003c/li\u003e\n\u003cli\u003e副本数量: 拷贝数量, 没有数字默认为1份副本\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpark对RDD.cache函数默认使用MEMORY_ONLY, 对DataFrame.cache默认使用MEMORY_AND_DISK.\u003c/p\u003e\n\u003ch1 id=\"缓存的计算过程\"\u003e缓存的计算过程\u003c/h1\u003e\n\u003cp\u003e在MEMORY_AND_DISK模式下, Spark会优先尝试把数据集全部缓存到内存, 内存不足的情况下, 再把剩余的数据落盘到本地.\u003c/p\u003e\n\u003cp\u003eMEMORY_ONLY则不管内存是否充足, 一股脑的把数据缓存到内存.\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308121545329.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e无论是RDD还是DataFrame, 它们的数据分片都是以迭代器Iterator的形式存储的. 因此, 要把数据缓存下来, 就要把迭代器展开成实实在在的数据值, 这一步叫做Unroll.\u003c/li\u003e\n\u003cli\u003e展开的对象暂存在一个叫做ValuesHolder的数据结构里, 然后转化为MemoryEntry. 这里转化的实现方式是toArray, 因此它不产生额外的内存开销, 这一步叫做Transfer.\u003c/li\u003e\n\u003cli\u003e最终, MemoryEntry和与之对应的BlockID, 以K, V的形式存储到哈希字典(\u003cstrong\u003eLinkedHashMap\u003c/strong\u003e)中\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e当分布式数据集所有的数据分片都从Unroll到Transfer, 再到注册哈希字典后, 数据在内存的缓存过程就结束了\u003c/p\u003e\n\u003ch1 id=\"缓存的销毁过程\"\u003e缓存的销毁过程\u003c/h1\u003e\n\u003cp\u003e将数据缓存进内存时, 如果发现\u003cstrong\u003e内存不足\u003c/strong\u003e, 则需要根据\u003cstrong\u003eLRU\u003c/strong\u003e算法来驱逐(\u003cstrong\u003eEviction\u003c/strong\u003e)一些数据分片\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308121546100.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e由于Spark在存储MemoryEntry时使用了LinkedHashMap的数据结构, 所有可以很容易的找到最近最少使用的Block(链表头部).\u003c/p\u003e\n\u003cp\u003eSpark当试图缓存一个数据分片, 却发现可用内存不足时, 会对LinkedHashMap\u003cstrong\u003e从头扫描\u003c/strong\u003e, 当扫描过的MemoryEntry尺寸之和大于要写入的数据分片时, 将这些数据给删除掉.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e在进行缓存清楚时, 同属一个RDD的MemoryEntry不会被选中\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e在缓存清除的过程中, Spark遵循两个基本原则\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eLRU, 按照元素的访问顺序, 优先清除那些“最近最少访问”的MemoryEntry\u003c/li\u003e\n\u003cli\u003e同属一个RDD的MemoryEntry不会被清除\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"数据丢失\"\u003e数据丢失\u003c/h1\u003e\n\u003cp\u003e在Memory_Only的模式下, 尽管有缓存销毁这个环境, 但是总会“驱无可驱”, 这个时候, Memory_Only就会放弃剩余的数据分片, 造成数据丢失.\u003c/p\u003e\n\u003ch1 id=\"cache的注意事项\"\u003eCache的注意事项\u003c/h1\u003e\n\u003cp\u003ecache是惰性操作, 在调用cache只会, 需要用Action算子触发缓存的物化过程.\u003c/p\u003e","title":"Spark-避免Cache滥用"},{"content":"https://spark.apache.org/docs/latest/configuration.html\n查看应用的配置 打开Spark UI, 点击Environment tab, 就可以看到设置的参数\n设置 Deploy 参数名称 默认值 参数说明 spark.submit.deployMode none client或者cluster. client模式下提交的进程就是Driver, cluster模式下会新启一个机器作为Driver Driver 参数名称 默认值 参数说明 spark.app.name none 这个application的名称, 会显示在UI和log里, 重复也没关系 spark.driver.cores 1 driver的核数, 只在cluster模式下生效 spark.driver.memory 1g driver的内存大小, 如果在client模式下, 需要在启动之前设置 spark.driver.maxResultSize 1g 限制单个action下所有分区返回的序列化结果总大小, 至少为1M. 或者为0则不进行限制, 但是可能会造成Driver OOM异常 Executor 参数名称 默认值 参数说明 spark.executor.memory 1g executor的内存大小 spark.executor.memoryOverhead executorMemory * spark.executor.memoryOverheadFactor, with minimum of 384 spark.executor.memoryOverheadFactor 0.1 Runtime 参数名称 默认值 参数说明 spark.driver.extraClassPath none spark.driver.defaultJavaOptions none spark.driver.extraJavaOptions none spark.driver.extraLibraryPath none spark.driver.userClassPathFirst false spark.executor.extraClassPath none spark.executor.defaultJavaOptions none spark.executor.extraJavaOptions none spark.executor.extraLibraryPath none spark.executor.userClassPathFirst false spark.files spark.jars Shuffle Behavior 参数名称 默认值 参数说明 spark.reducer.maxSizeInFlight 48m spark.reducer.maxReqsInFlight Int.MaxValue spark.reducer.maxBlocksInFlightPerAddress Int.MaxValue spark.shuffle.compress true spark.shuffle.file.buffer 32k spark.shuffle.io.maxRetries 3 spark.shuffle.io.backLog -1 spark.shuffle.io.connectionTimeout value of spark.network.timeout spark.shuffle.service.enabled false spark.shuffle.service.removeShuffle false spark.shuffle.sort.bypassMergeThreshold 200 spark.shuffle.spill.compress true spark.files.io.connectionTimeout value of spark.network.timeout spark.shuffle.checksum.enabled true spark.shuffle.checksum.algorithm ADLER32 spark.shuffle.service.fetch.rdd.enabled Compression and Serialization 参数名称 默认值 参数说明 spark.broadcast.compress true 是否对广播变量做压缩,压缩格式使用spark.io.compression.codec spark.rdd.compress false 是否对序列化的RDD分区做压缩 ,压缩格式使用spark.io.compression.codec spark.io.compression.codec lz4 内部数据压缩格式, Spark默认提供了四种方式: lz4, lzf, snappy, zstd spark.io.compression.lz4.blockSize 32k lz4压缩算法的区块大小 spark.io.compression.snappy.blockSize 32k snappy压缩算法的区块大小 spark.io.compression.zstd.level 1 zstd压缩级别 spark.io.compression.zstd.bufferSize 32k zstd压缩算法的参数 spark.kryoserializer.buffer.max 64m spark.kryoserializer.buffer 64k spark.serializer org.apache.spark.serializer.JavaSerializer 对象序列化方法, 默认值比较慢, 推荐使用org.apache.spark.serializer.KryoSerializer and configuring Kryo serialization Memory Management 参数名称 默认值 参数说明 spark.memory.fraction 0.6 Execution + Storage Memory占用的比例 spark.memory.storageFraction 0.5 Storage Memory的占用比例 spark.memory.offHeap.enabled false 是否使用堆外内存, 大小为spark.memory.offHeap.size spark.memory.offHeap.size 0 堆外内存的大小 Execution Behavior 参数名称 默认值 参数说明 spark.broadcast.blockSize 4m Size of each piece of a block for TorrentBroadcastFactory spark.broadcast.checksum true 使用需要使用checksum来进行数据校验 spark.executor.cores 1 executor的核数 spark.default.parallelism 默认的并行度 spark.executor.heartbeatInterval 10s 每个executor与Driver的心跳间隔, 此参数要小于spark.network.timeout Network 参数名称 默认值 参数说明 spark.rpc.message.maxSize 128 RPC通信的消息大小, MB为单位 spark.network.timeout 120s 超时时间 spark.rpc.io.connectionTimeout value of spark.network.timeout Scheduling 参数名称 默认值 参数说明 spark.task.cpus 1 每个Task使用的核数 Dynamic Allocation 参数名称 默认值 参数说明 spark.dynamicAllocation.enabled false 是否启用动态资源分配 spark.dynamicAllocation.initialExecutors spark.dynamicAllocation.minExecutors Executor的初始数量 spark.dynamicAllocation.maxExecutors infinity 最大的executor数量 spark.dynamicAllocation.minExecutors 0 最小的executor数量 Spark SQL 参数名称 默认值 参数说明 spark.sql.adaptive.enabled true 是否开启自适应执行 spark.sql.adaptive.coalescePartitions.enabled true 是否开启自动分区合并 spark.sql.adaptive.advisoryPartitionSizeInBytes value of spark.sql.adaptive.shuffle.targetPostShuffleInputSize shuffle时每个partition的数据量大小, 作用在合并小文件以及处理数据倾斜 spark.sql.adaptive.coalescePartitions.minPartitionSize 1MB shuffle partition的最小值 spark.sql.adaptive.autoBroadcastJoinThreshold 广播表的阈值, 表大小小于这个值时会进行广播 spark.sql.adaptive.skewJoin.enabled true 开启后, 会对倾斜分区做拆分, 拆分后再进行join spark.sql.adaptive.skewJoin.skewedPartitionFactor 5 如何判断一个分区是否倾斜, 需要这个分区是中位数的N倍以上 spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes 256MB 倾斜分区的大小还要大于这个值 spark.sql.autoBroadcastJoinThreshold 10MB 小表自动广播的阈值 spark.sql.broadcastTimeout 300 broadcast join时的超时时间(秒) ","permalink":"https://www.liunaijie.top/coding/big_data/spark/spark%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/","summary":"\u003cp\u003e\u003ca href=\"https://spark.apache.org/docs/latest/configuration.html\"\u003ehttps://spark.apache.org/docs/latest/configuration.html\u003c/a\u003e\u003c/p\u003e","title":"Spark-参数配置"},{"content":"内存相关配置项设置并行度, 并行度用spark.default.parallelism和spark.sql.shuffle.partitions 两个参数确定.\n对于没有明确分区规则的RDD, 使用spark.default.parallelism来定义并行度 对于数据关联或聚合操作中可以使用spark.sql.shuffle.partitions来指定Reduce端的分区数量 什么是并行度: 指的是分布式数据集被划分为多少份, 从而用于分布式计算. 并行度的出发点是数据, 它明确了数据划分的粒度. 并行度越高, 数据的粒度越细, 数据分片越多, 数据越分散.\n并行计算任务: 指的是在任意时刻整个集群能够同时计算的任务数量. 并行计算任务的出发点是计算任务, 是CPU. 由CPU有关的三个参数共同决定. — 具体说来，Executor 中并行计算任务数的上限是 spark.executor.cores 与 spark.task.cpus 的商，暂且记为 #Executor-tasks，整个集群的并行计算任务数自然就是 #Executor-tasks 乘以集群内 Executors 的数量，记为 #Executors。因此，最终的数值是：#Executor-tasks * #Executors。\n并行度决定了数据粒度, 数据粒度决定了分区大小, 分区大小决定每个计算任务的内存消耗.\nCPU相关配置项 CPU的配置项主要包括 spark.cores.max、spark.executor.cores 和 spark.task.cpus 这三个参数.\nspark.cores.max — 限制整个job可以申请到的最大CPU数量, 当不设置时默认使用spark.deploy.defaultCores这个参数(默认为Integer.MAX_VALUE, 也就是不限制) spark.executor.cores — 设置单个executor可以使用的CPU资源, executor的数量可以通过($spark.cores.max / spark.executor.cores$)来确定 spark.task.cpus — 设置单个task消耗的CPU核数, 一个executor上并行执行的task数量可以通过($spark.executor.cores / spark.task.cpus$)来确定 内存相关配置项 Spark管理的内存分为堆内内存和堆外内存.\n堆外内存又分为两个区域, Execution Memory和Storage Memory. 要想启用堆外内存, 需要将参数spark.memory.offHeap.enabled设置为true .然后再用spark.memory.offHeap.size 参数来指定堆外内存的大小\n堆内内存也分为四个区域, 分别是Reserved Memory, User Memory, Execution Memory 和 Storage Memory\n内存的基础配置项主要是5个:\nspark.executor.memory — 单个Executor中的堆内内存总大小 spark.memory.offHeap.size — 单个Executor中堆外内存总大小(当spark.memory.offHeap.enable为true才生效) spark.memory.fraction — 堆内内存中, (用于缓存RDD和执行计算的内存之和)占可用内存的比例 spark.memory.storageFraction — 用于缓存RDD的内存占比, 执行内存占比为$(1-spark.memory.storageFraction)$ spark.rdd.compress — RDD缓存是否压缩, 默认不压缩 如何选择使用堆内内存或者是堆外内存 堆外内存虽然更好的进行内存占用统计, 不需要垃圾回收机制, 不需要序列化与反序列化. 但是终归还是有缺点, 不然我们就无脑的使用堆外内存了.\n我们来看一个例子: 这个表有4个字段\nint类型的userId String类型的姓名 int类型的年龄 Char类型的性别 当我们需要用字节数组来存储这条记录时, 由于无法事先知道String类型的长度, 所以只能在存储位置使用真正存储位置的offset来代替, 在offset位置的第一位表示String的长度, 从而完成这条记录的存储. Spark的堆外内存也是使用这种方式来存储应用的数据. 这种方式比JVM的存储更加紧凑, 从而节省来空间. 但是当我们的Schema变得复杂后, 维护这样一条记录的指针和偏移地址变得越来越多, 让字段的访问效率大打折扣, 而且指针多了之后, 内存泄漏的风险也变大了. Spark直接管理堆外内存的成本就变得非常高.\n对于需要处理的数据集，如果数据模式比较扁平，而且字段多是定长数据类型，就更多地使用堆外内存。相反地，如果数据模式很复杂，嵌套结构或变长字段很多，就更多采用 JVM 堆内内存会更加稳妥\nUser Memory与Spark可用内存如何分配 现在Spark的spark.memory.fraction参数默认为0.6 , 也就是默认会有60%的内存归Spark调用, 剩余的40%为User Memory.\nUser Memory主要存储开发者自定义的数据结构或Spark内部元数据.\n如果应用中自定义数据结构不多, 可以适当调大spark.memory.fraction参数, 从而提高Spark用于分布式计算和缓存分布式数据集的内存大小.\nExecution Memory与Storage Memory如何平衡 统一内存管理模式下, 这两部分会互相占用. 当Execution Memory占用Storage Memory后, 需要执行完成后才会被释放, 而当Storage Memory占用Execution Memory时, 当Execution Memory需要则需要理解释放掉.\n如果应用是“缓存密集型”的, 即需要反复遍历同一份分布式数据, 这个时候将数据缓存下来则可以提高效率. 即可以提高spark.memory.storageFraction\n但是, 还需要注意这两个之间的平衡.\n当Storage Memory调大之后, 意味着Execution Memory变小了. 那么在执行关联, 排序, 聚合等需要消耗执行内存的任务时, 就会变慢.\n由于Execution Memory变小, 在堆内创建新对象时, 由内存不足造成的垃圾回收也会影响执行效率.\n还有一种方法是在进行缓存是将数据进行压缩, 这样相同的内存空间下就可以存储更多的数据, 可以修改spark.rdd.compress参数, 默认情况下是不使用压缩的\n磁盘相关配置项 spark.local.dir 这个参数可以运行开发者设置存储_RDD cache落盘数据块_和_Shuffle中间文件_的磁盘目录\nShuffle类配置项 Shuffle分为Map和Reduce两个阶段. Map阶段按照Reducer的分区规则, 将中间数据写入到磁盘中, 然后Reduce阶段从各个Map节点拉取数据, 根据计算规则进行计算.\nspark.shuffle.file.buffer 和 spark.reducer.maxSizeInFlight 两个参数可以分别控制Map端和Reduce端的读写缓冲区大小.\nMap阶段, 由于是先将数据写到内存(写缓存区)中, 当内存不足时再写到磁盘, 所以可以调大内存(写缓冲区)来减少I/O次数, 从而提高整体性能. 这个时候就需要调大spark.shuffle.file.buffer 参数.\nReduce阶段, Spark通过网络从不同Map节点的磁盘中拉取中间文件, 然后以数据块的形式暂存到Reduce节点的读缓冲区. 读缓冲区越大, 可以暂存的数据块也就越多, 拉取数据所需的网络请求次数也就越少, 单次请求的网络吞吐越高, 网络I/O的效率也就越高. 这个时候可以调节spark.reducer.maxSizeInFlight 来调大读缓冲区的大小, 提高性能.\n跳过排序\nspark从1.6版本开始, Spark统一采用Sort shuffle manager来管理Shuffle操作, 这时不管计算是否真的需要排序, 都会在Map阶段和Reduce阶段进行排序.\n所以在不需要聚合，也不需要排序的计算场景中，我们就可以通过设置 spark.shuffle.sort.bypassMergeThreshold 的参数，来改变 Reduce 端的并行度（默认值是 200）。当 Reduce 端的分区数小于这个设置值的时候，我们就能避免 Shuffle 在计算过程引入排序。\n","permalink":"https://www.liunaijie.top/coding/big_data/spark/%E9%85%8D%E7%BD%AE%E9%A1%B9/","summary":"\u003cp\u003e内存相关配置项设置并行度, 并行度用\u003ccode\u003espark.default.parallelism\u003c/code\u003e和\u003ccode\u003espark.sql.shuffle.partitions\u003c/code\u003e 两个参数确定.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e对于没有明确分区规则的RDD, 使用\u003ccode\u003espark.default.parallelism\u003c/code\u003e来定义并行度\u003c/li\u003e\n\u003cli\u003e对于数据关联或聚合操作中可以使用\u003ccode\u003espark.sql.shuffle.partitions\u003c/code\u003e来指定Reduce端的分区数量\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e什么是并行度\u003c/strong\u003e: 指的是分布式数据集被划分为多少份, 从而用于分布式计算. 并行度的出发点是数据, 它明确了数据划分的粒度. 并行度越高, 数据的粒度越细, 数据分片越多, 数据越分散.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e并行计算任务\u003c/strong\u003e: 指的是在任意时刻整个集群能够同时计算的任务数量. 并行计算任务的出发点是计算任务, 是CPU. 由CPU有关的三个参数共同决定. — 具体说来，Executor 中并行计算任务数的上限是 spark.executor.cores 与 spark.task.cpus 的商，暂且记为 \u003ccode\u003e#Executor-tasks\u003c/code\u003e，整个集群的并行计算任务数自然就是 \u003ccode\u003e#Executor-tasks\u003c/code\u003e 乘以集群内 Executors 的数量，记为 \u003ccode\u003e#Executors\u003c/code\u003e。因此，最终的数值是：\u003ccode\u003e#Executor-tasks * #Executors\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e并行度决定了数据粒度, 数据粒度决定了分区大小, 分区大小决定每个计算任务的内存消耗.\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"cpu相关配置项\"\u003eCPU相关配置项\u003c/h2\u003e\n\u003cp\u003eCPU的配置项主要包括 \u003ccode\u003espark.cores.max\u003c/code\u003e、\u003ccode\u003espark.executor.cores\u003c/code\u003e 和 \u003ccode\u003espark.task.cpus\u003c/code\u003e 这三个参数.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003espark.cores.max — 限制整个job可以申请到的最大CPU数量, 当不设置时默认使用\u003ccode\u003espark.deploy.defaultCores\u003c/code\u003e这个参数(默认为Integer.MAX_VALUE, 也就是不限制)\u003c/li\u003e\n\u003cli\u003espark.executor.cores — 设置单个executor可以使用的CPU资源, executor的数量可以通过($spark.cores.max / spark.executor.cores$)来确定\u003c/li\u003e\n\u003cli\u003espark.task.cpus — 设置单个task消耗的CPU核数, 一个executor上并行执行的task数量可以通过($spark.executor.cores / spark.task.cpus$)来确定\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"内存相关配置项\"\u003e内存相关配置项\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308121607765.png\" alt=\"\"\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308121607158.png\" alt=\"\"\u003e\nSpark管理的内存分为堆内内存和堆外内存.\u003c/p\u003e\n\u003cp\u003e堆外内存又分为两个区域, \u003ccode\u003eExecution Memory\u003c/code\u003e和\u003ccode\u003eStorage Memory\u003c/code\u003e. 要想启用堆外内存, 需要将参数\u003ccode\u003espark.memory.offHeap.enabled\u003c/code\u003e设置为\u003ccode\u003etrue\u003c/code\u003e .然后再用\u003ccode\u003espark.memory.offHeap.size\u003c/code\u003e 参数来指定堆外内存的大小\u003c/p\u003e","title":"Spark-配置项"},{"content":"执行内存抢占规则， 在同一个 Executor 中，当有多个（记为 N）线程尝试抢占执行内存时，需要遵循 2 条基本原则\n执行内存总大小（记为 M）为两部分之和，一部分是 Execution Memory 初始大小，另一部分是 Storage Memory 剩余空间 每个线程分到的可用内存有一定的上下限，下限是 M/N/2，上限是 M/N，也就是均值 并行度、并发度与执行内存的关系 并行度 明确了数据的划分粒度, 并行度越高, 数据的粒度越细, 数据分片越多, 数据越分散.\n并行度可以通过两个参数来设置: 分别是 spark.default.parallelism 和 spark.sql.shuffle.partitions. 前者用于设置 RDD 的默认并行度, 后者在 Spark SQL 开发框架下, 指定了 Shuffle Reduce 阶段默认的并行度.\n并发度 ****一个Executor内部可以同时运行的最大任务数量.\n由Executor的线程池大小(spark.executor.cores)除以每个任务执行期间需要消耗的线程数(spark.task.cpus)得到. spark.task.cpus默认是1, 通常不会调整, 所以并发度基本由spark.executor.cores参数决定\n就Executor的线程池来说, 尽管线程本身可以复用, 但每个线程同一时间只能计算一个任务, 每个任务负责处理一个数据分片. 因此, 在运行时, 线程、任务与分区是一一对应的关系.\n分布式任务由Driver分发给Executor后, Executor将Task封装为TaskRunner, 然后将其交给可回收缓存线程池(newCachedThreadPool). 线程池中的线程领取到TaskRunner之后, 向Execution Memory申请内存, 开始执行任务.\n执行内存 堆内执行内存的初始值:\nspark.executor.memory * spark.memory.fraction * (1- spark.memory.storageFraction)\nexecutor的内存 * 执行内存和缓存内存占总内存系数 * (1-缓存内存系数)\n堆外执行内存:\nspark.memory.offHeap.size * (1-spark.memory.storageFraction)\n堆外内存大小 * (1 - 缓存内存系数)\n在统一内存管理模式下, 当Storage Memory没有被RDD缓存占满的情况下, 执行任务可以动态大的抢占Storage Memory. 可分配的执行内存总量会随着缓存任务和执行任务的此消彼长而动态变化. 但无论怎么变, 可用的执行内存总量, 都不会低于配置项设定的初始值.\n如何提升CPU效率 CPU低效原因之一: 线程挂起 在给定执行内存总量M和线程总数N的情况下, 为了保证每个线程都有机会拿到适量的内存去处理数据, Spark用HashMap的数据结构, 以(K, V)的方式来记录每个线程消耗的内存大小, 并确保所有的Value值都不超过M/N. 但是在某些极端情况下, 有些线程申请不到所需的内存空间, 能拿到的内存合计还不到M/N/2. 这个时候Spark就会把线程挂起, 直到其他线程释放了足够的内存空间为止.\n即便能保证每个线程能拿到的内存上限是M/N, 也就是内存总量对线程数取平均值. 但是由于以下3方面的变化, 造成了有些线程连M/N/2的资源都拿不到\n动态变化的执行内存总量M\nM的下限是Execution Memory初始值, 上限是Execution Memory + Storage Memory. 在应用刚开始时, 由于没有RDD缓存占用Storage Memory, 所以取这个上限, 但是随着RDD缓存的填充, M的值就会下降\n动态变化的并发度N‘\n上下限公式中计算用的N不是线程总数N, 而是当前的并发度N’. 尽管一个Executor中有N个CPU线程 但是这个N个线程不一定都在干活. 在Spark任务调度的过程中, 这个N个线程不一定可以同时拿到分布式任务, 所以先拿到任务的线程就可以申请更多的内存.\n分布式数据集的数据分布\n每个Task申请多少内存取决于需要处理的数据分片多大, 如果分片过大, 那么就需要申请大内存, 如果内存不足, 就造成了线程挂起. 如果分布式数据集的并行度设置得当, 因任务调度滞后而导致的线程挂起问题就会得当缓解.\nCPU低效原因之二: 调度开销 对于每一个分布式任务, Driver会将其封装为TaskDescription, 然后分发给各个Executor. TaskDescription包含着与任务运行有关的所有信息, 如任务ID、要处理的数据分片ID、开发者添加的本地文件和Jar包、任务属性、序列化的任务代码等等. Executor接受到TaskDescription后, 需要首先对TaskDescription反序列化才能读取任务信息, 然后将任务代码再反序列化得到可执行代码, 最后结合其他任务信息创建TaskRunner.\n每个任务的调度都需要Executor消耗CPU去执行上述一系列的操作步骤. 数据分片与线程、执行任务一一对应, 当数据过于分散, 任务调度上的开销就与数据处理的开销在相同数量级.\n因此，在给定 Executor 线程池和执行内存大小的时候，我们可以参考上面的算法，去计算一个能够让数据分片平均大小在（M/N/2, M/N）之间的并行度，这往往是个不错的选择\n","permalink":"https://www.liunaijie.top/coding/big_data/spark/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%88%A9%E7%94%A8cpu/","summary":"\u003ch1 id=\"执行内存抢占规则\"\u003e执行内存抢占规则，\u003c/h1\u003e\n\u003cp\u003e在同一个 Executor 中，当有多个（记为 N）线程尝试抢占执行内存时，需要遵循 2 条基本原则\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e执行内存总大小（记为 M）为两部分之和，一部分是 Execution Memory 初始大小，另一部分是 Storage Memory 剩余空间\u003c/li\u003e\n\u003cli\u003e每个线程分到的可用内存有一定的上下限，下限是 M/N/2，上限是 M/N，也就是均值\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"并行度并发度与执行内存的关系\"\u003e并行度、并发度与执行内存的关系\u003c/h1\u003e\n\u003ch3 id=\"并行度\"\u003e\u003cstrong\u003e并行度\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003e明确了数据的划分粒度, 并行度越高, 数据的粒度越细, 数据分片越多, 数据越分散.\u003c/p\u003e\n\u003cp\u003e并行度可以通过两个参数来设置: 分别是 spark.default.parallelism 和 spark.sql.shuffle.partitions. 前者用于设置 RDD 的默认并行度, 后者在 Spark SQL 开发框架下, 指定了 Shuffle Reduce 阶段默认的并行度.\u003c/p\u003e\n\u003ch3 id=\"并发度\"\u003e\u003cstrong\u003e并发度\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003e****一个Executor内部可以同时运行的最大任务数量.\u003c/p\u003e\n\u003cp\u003e由Executor的线程池大小(spark.executor.cores)除以每个任务执行期间需要消耗的线程数(spark.task.cpus)得到. spark.task.cpus默认是1, 通常不会调整, 所以并发度基本由spark.executor.cores参数决定\u003c/p\u003e\n\u003cp\u003e就Executor的线程池来说, 尽管线程本身可以复用, 但每个线程同一时间只能计算一个任务, 每个任务负责处理一个数据分片. 因此, \u003cstrong\u003e在运行时, 线程、任务与分区是一一对应的关系.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e分布式任务由Driver分发给Executor后, Executor将Task封装为TaskRunner, 然后将其交给可回收缓存线程池(newCachedThreadPool). 线程池中的线程领取到TaskRunner之后, 向Execution Memory申请内存, 开始执行任务.\u003c/p\u003e\n\u003ch3 id=\"执行内存\"\u003e执行内存\u003c/h3\u003e\n\u003cp\u003e堆内执行内存的初始值:\u003c/p\u003e\n\u003cp\u003espark.executor.memory * spark.memory.fraction * (1- spark.memory.storageFraction)\u003c/p\u003e\n\u003cp\u003eexecutor的内存 * 执行内存和缓存内存占总内存系数 * (1-缓存内存系数)\u003c/p\u003e","title":"Spark-如何高效利用CPU"},{"content":"Spark支持多种Join形式:\nInner Join 内连接, 取相同的部分 Left Join 左连接, 左表为主 Right Join 右连接 Anti Join 剔除可以和右表Join上的左表部分. 相当于not in. Semi Join 相当于In 到目前为止, 数据关联总共有3中Join的实现方式, 分别是:\n嵌套循环连接(NLJ, Nested Loop Join) 排序归并连接(SMJ, Shuffle Sort Merge Join) 哈希连接(HJ, Hash Join) NLJ的工作原理: 使用两层循环, 将体量较大的表做外层循环, 体量较小的表做内层循环\nNLJ的计算复杂度为O(M*N).\nSMJ的工作原理 SMJ的思路是先排序, 再归并. 两张表先根据Join Key做排序, 然后使用两个游标对排好序的表进行归并关联.\nSMJ的计算复杂度为O(M+N), 但是这个是依赖与排好序的基础上.\nHJ的工作原理 将内表扫描的复杂度降至O(1).\n首先将内表基于既定的哈希函数构建哈希表, 然后外表扫描时使用相同的哈希函数去哈希表中查找.\n所以总体的复杂度为O(M)\n分布式环境下的Join 分布式环境中的数据关联在计算环境依然遵循着NLJ, SMJ和HJ这三种实现方式, 只不过是增加了网络分发这一变数.\n在Spark的分布式计算环境中, 数据在网络中的分发主要有两种形式, 分别是Shuffle和广播.\n如果使用Shuffle的方式来完成分发, 那么外表和内表都需要按照Join Key在集群中做全量的数据分发.\n如果采用广播机制的话, Spark只需要将内表封装到广播变量, 然后在全网进行分发. 结合Shuffle、广播这两种网络分发形式和NLJ, SMJ, HJ这三种计算方式, 对于分布式环境下的数据关联, 组合起来可以有6种Join策略, 分别是:\nCPJ: Cartesian Product Join\nSMJ: Shuffle Sort Merge Join\n支持所有的连接类型\nSHJ: Shuffle Hash Join\n支持所有的连接类型\n外表大小至少是内表的3倍 内表数据分片的平均大小要小于广播变量阈值 参数spark.sql.join.preferSortMergeJoin=false BNLJ: Broadcast Nested Loop Join\nBHJ: Broadcast Hash Join\n连接类型不能是全连接(full outer join) 小表要能够放到广播变量里 从执行性能上, 5中策略从上到下由弱变强.\n相比SMJ, HJ不要求参与Join的两张表有序, 只要小表可以放进内存, 就可以在遍历大表时完成关联计算.\nSpark如何选择Join策略 等值Join 按照 BHJ \u0026gt; SMJ \u0026gt; SHJ 的顺序依次选择Join策略\nBHJ效率最高, 但是需要满足两个条件\n连接类型不能是全连接 小表足够小, 能够放到广播变量里 SHJ尽管效率比SMJ高, 但是不稳定, 原因是:\nSHJ需要将两个表都根据Join Key进行重分区, 然后将两个表的相同key分发到相同executor上, 但是这里不能保证小表足够小, 有可能是两个大表, 从而造成OOM.\n而SMJ没有这么多附加条件, 它可以借助磁盘来完成排序和存储.\n所以Spark会优先选择SMJ而不是SHJ.\n并且如果在spark.sql.join.preferSortMergeJoin=true(默认为true)的情况下, Spark也不会去尝试SHJ.\n不等值Join 不等值Join只能使用NLJ来实现, 因此Spark SQL可以选的策略只剩下BNLJ和CPJ. 选择顺序为BNLJ \u0026gt; CPJ.\nBNLJ的前提是内表足够小, 可以放到广播变量中, 否则只能去选择CPJ. ","permalink":"https://www.liunaijie.top/coding/big_data/spark/%E4%B8%8D%E5%90%8C%E5%9C%BA%E6%99%AF%E4%B8%8B-%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9join%E7%AD%96%E7%95%A5/","summary":"\u003cp\u003eSpark支持多种Join形式:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInner Join 内连接, 取相同的部分\u003c/li\u003e\n\u003cli\u003eLeft Join 左连接, 左表为主\u003c/li\u003e\n\u003cli\u003eRight Join 右连接\u003c/li\u003e\n\u003cli\u003eAnti Join 剔除可以和右表Join上的左表部分. 相当于not in.\u003c/li\u003e\n\u003cli\u003eSemi Join 相当于In\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e到目前为止, 数据关联总共有3中Join的实现方式, 分别是:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e嵌套循环连接(NLJ, Nested Loop Join)\u003c/li\u003e\n\u003cli\u003e排序归并连接(SMJ, Shuffle Sort Merge Join)\u003c/li\u003e\n\u003cli\u003e哈希连接(HJ, Hash Join)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"nlj的工作原理\"\u003eNLJ的工作原理:\u003c/h3\u003e\n\u003cp\u003e使用两层循环, 将体量较大的表做外层循环, 体量较小的表做内层循环\u003c/p\u003e\n\u003cp\u003eNLJ的计算复杂度为O(M*N).\u003c/p\u003e\n\u003ch3 id=\"smj的工作原理\"\u003eSMJ的工作原理\u003c/h3\u003e\n\u003cp\u003eSMJ的思路是先排序, 再归并. 两张表先根据Join Key做排序, 然后使用两个游标对排好序的表进行归并关联.\u003c/p\u003e\n\u003cp\u003eSMJ的计算复杂度为O(M+N), 但是这个是依赖与排好序的基础上.\u003c/p\u003e\n\u003ch3 id=\"hj的工作原理\"\u003eHJ的工作原理\u003c/h3\u003e\n\u003cp\u003e将内表扫描的复杂度降至O(1).\u003c/p\u003e\n\u003cp\u003e首先将内表基于既定的哈希函数构建哈希表, 然后外表扫描时使用相同的哈希函数去哈希表中查找.\u003c/p\u003e\n\u003cp\u003e所以总体的复杂度为O(M)\u003c/p\u003e\n\u003ch2 id=\"分布式环境下的join\"\u003e分布式环境下的Join\u003c/h2\u003e\n\u003cp\u003e分布式环境中的数据关联在计算环境依然遵循着NLJ, SMJ和HJ这三种实现方式, 只不过是增加了网络分发这一变数.\u003c/p\u003e\n\u003cp\u003e在Spark的分布式计算环境中, 数据在网络中的分发主要有两种形式, 分别是Shuffle和广播.\u003c/p\u003e\n\u003cp\u003e如果使用Shuffle的方式来完成分发, 那么外表和内表都需要按照Join Key在集群中做全量的数据分发.\u003c/p\u003e\n\u003cp\u003e如果采用广播机制的话, Spark只需要将内表封装到广播变量, 然后在全网进行分发.\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/202308121549891.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e结合Shuffle、广播这两种网络分发形式和NLJ, SMJ, HJ这三种计算方式, 对于分布式环境下的数据关联, 组合起来可以有6种Join策略, 分别是:\u003c/p\u003e","title":"Spark-如何选择Join策略"},{"content":"在2.0版本之前, Spark SQL仅仅支持启发式、静态的优化过程, 启发式的优化又叫RBO(Rule Based Optimization, 基于规则的优化), 它基于一些规则和策略实现, 如谓词下推、列剪枝. 这些规则和策略来源于数据库领域已有的应用经验. 启发式的优化是一种经验主义.\n经验主义的弊端是对待相似的问题和场景都使用同一种套路.\n在2.2版本中推出了CBO(Cost Based Optimization, 基于成本的优化), 特点是“实事求是”, 基于数据表的统计信息(如表大小、数据列分布)来选择优化策略. CBO支持的统计信息很丰富, 比如数据表的行数、每列的基数(Cardinality)、空间值、最大值、最小值和直方图等等. 因为有统计数据做支持, 所以CBO选择的优化策略往往优于RBO选择的优化规则.\n但是CBO也有三个方面的缺点: 窄、慢、静.\n窄 : 指的是适用面太窄, CBO仅支持注册到Hive Metastore的数据表 慢: 指的是统计信息的搜集效率比较低. 对于注册到Hive Metastore的数据表, 开发者需要调用ANALYZE TABLE COMPUTE STATISTICS语句收集统计信息, 而各类信息的收集会消耗大量时间 静: 指的是静态优化, 这一点与RBO一样, CBO结合各类统计信息指定执行计划, 一旦执行计划交付运行, CBO的使命就算完成了. 也就是说如果在运行时数据分布发送动态变化, CBO先前制定的执行计划并不会跟着调整、适配 AQE是什么 Spark在3.0推出了AQE(Adaptive Query Execution, 自适应查询执行). AQE是Spark SQL的一种动态优化机制, 在运行时, 每当Shuffle Map阶段执行完毕, AQE都会结合这个阶段的统计信息, 基于既定的规则动态的调整、修正尚未执行的逻辑计划和物理计划, 来完成对原始查询语句的运行时优化.\nAQE的优化机制触发的时机是Shuffle Map阶段执行完毕. 也就是说, AQE优化的频次与执行计划中Shuffle的次数一致. 如果查询语句没有引入Shuffle操作, 那么Spark SQL是不会触发AQE的.\nAQE依赖的统计信息是什么: AQE赖以优化的统计信息与CBO不同, 这些统计信息并不是关于某张表或是哪个列, 而是Shuffle Map阶段输出的中间文件. 每个Map Task都会输出以data为后缀的数据文件, 还有以index为结尾的索引文件, 这些文件统称为中间文件. 每个data文件的大小、空文件数量与占比、每个Reduce Task对于的分区大小, 所有这些基于中间文件的统计值构成了AQE进行优化的信息来源.\nAQE还会从运行时获取统计信息, 在条件允许的情况下, 优化决策会分别作用到逻辑计划和物理计划.\nAQE既定的规则和策略主要有4个, 分为1个逻辑优化规则和3个物理优化策略 如何用好AQE 首先回顾一下AQE动态优化的过程:\nJoin策略调整 : 如果某张表在过滤之后, 尺寸小于广播变量阈值, 这张表参与的数据关联就会从Shuffle Sort Merge Join降级(Demote)为执行效率更高的Broadcast Hash Join. 自动分区合并 : 在Shuffle之后, Reduce Task数据分布参差不齐, AQE将自动合并过小的数据分区 自动倾斜处理 : 结合配置项, AQE自动拆分Reduce阶段过大的数据分区, 降低单个Reduce Task的工作负载 Join策略调整 这个特性设计了一个逻辑规则和一个物理策略, 它们分别是DemoteBroadcastHashJoin和OptimizeLocalShuffleReader.\nDemoteBroadcastHashJoin规则的作用, 是把Shuffle Joins降级为Broadcast Joins. 需要注意的是, 这个规则仅适用于Shuffle Sort Merge Join这种关联机制, 其他机制如Shuffle Hash Join、Shuffle Nested Loop Join都不支持. 对于参与Join的两张表来说, 在它们分别完成了Shuffle Map阶段的计算之后, DemoteBroadcastJoin会判断中间文件是否满足如下条件\n中间文件尺寸总和小于广播阈值 spark.sql.autoBroadcastJoinThreshold 空文件占比小于配置项 spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin 只要有任意一张表的统计信息满足这两个条件, Shuffle Sort Merge Join就会降级为Broadcast Hash Join.\nAQE依赖的统计信息来自于Shuffle Map阶段生成的中间文件, 这意味着AQE在开始优化之前, Shuffle操作就已经执行过半了.\nOptimizeLocalShuffleReader物理策略可以在大表已经完成Shuffle Map阶段后, 不再进行网络分发, 将Reduce Task改为就地读取本地节点的中间文件, 完成与小表的关联操作.\nOptimizeLocalShuffleRead物理策略的生效由一个配置项spark.sql.adaptive.localShuffleRead.enable 决定, 默认值为True.\n自动分区合并 在Reduce阶段, 当Reduce Task从全网把数据拉回, AQE按照分区编号的顺序, 依次把小于目标尺寸的分区合并在一起.\n目标分区尺寸由以下两个参数共同决定:\nspark.sql.adaptive.advisoryPartitionSizeInBytes 由开发者指定分区合并后的推荐尺寸 spark.sql.adaptive.coalescePartitions.minPartitionNum 最小分区数量, 分区合并后, 分区数不能小于该值 在Shuffle Map阶段完成之后, AQE优化机制被触发, CoalesceShufflePartitions策略“无条件”地被添加到新的物理计划中. 读取配置项、计算目标分区大小、依序合并相邻分区这些计算逻辑, 在Tungsten WSCG的作用下融合进“手写代码”于Reduce阶段执行.\n自动倾斜处理 于自动分区合并相反, 自动倾斜处理的操作是“拆”, 在Reduce阶段, 当Reduce Task所需处理的分区尺寸大于一定阈值时, 利用OptimizeSkewedJoin策略, AQE会把大分区拆分成多个小分区.\n倾斜分区和拆分粒度由以下配置项决定:\nspark.sql.adaptive.skewJoin.skewedPartitionFactor 判断倾斜的膨胀系数 spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes 判断倾斜的最低阈值 spark.sql.adaptive.advisoryPartitionSizeInBytes 以字节为单位, 定义拆分粒度 自动倾斜处理的拆分操作也是在Reduce阶段执行的. 在同一个Executor内部, 本该由一个Task去处理的大分区, 被AQE拆分成多个小分区并交由多个Task去计算. 这样Task之间的计算负载就可以得到平衡. 但是, 这并没有解决Executors之间的负载均衡问题.\n这里的拆分只是将一次执行的大任务分成多个小任务, 但是这些任务还都是在一个Executor上执行的, 从总体来看, 还是存在单个Executor的倾斜问题.\n问题:\n对于Join的两张表, 如果表1有倾斜, 表2不存在倾斜, 那么只需要对表1进行拆分, 但是这时为了保证关联关系不被破坏, 还需要对表2对应的数据分区做复制.\n如果两张表都存在倾斜. 这时将表1拆分为2份, 表2拆分为2份. 为了不破坏逻辑上的关联关系\n表1、表2拆分出来的分区还要各自复制一份.\n当左表拆除M个分区, 右表拆分出N个分区, 那么每张表都需要保持M*N份分区数据, 才能保证关联逻辑的一致性. 当M, N逐渐变大时, AQE处理数据倾斜所需要的计算开销将会面临失控的风险\n总的来说, 当应用中的数据倾斜比较简单, 比如虽然有倾斜但数据分布相对均匀, 或是关联计算中只有一边有倾斜, 我们完全可以依赖AQE的自动倾斜处理机制. 但是, 在应用中倾斜十分复杂时就需要衡量AQE的自动倾斜处理与手动处理倾斜之间的关系.\nAQE小结 AQE是Spark SQL的一种动态优化策略, 它的诞生解决了RBO、CBO, 这些启发式、静态优化机制的局限性.\nAQE在Shuffle Map阶段执行完毕, 都会结合这个阶段的统计信息, 根据既定的规则和策略动态的调整、修正尚未执行的逻辑计划和物理计划, 从而完成对原始查询语句的运行时优化. 因此, 只有当查询语句会引入Shuffle操作时, Spark SQL才会触发AQE.\nAQE支持的三种优化特性分别是Join策略调整、自动分区合并和自动倾斜处理\n关于Join策略调整, DemoteBroadcastHashJoin规则仅仅适用于Shuffle Sort Merge Join这种关联机制, 对于其他Shuffle Joins类型, AQE暂不支持把它们转化为Broadcast Joins. 其次, 为了确保AQE的Join策略调整正常运行, 要确保spark.sql.adaptive.localShuffleReader.enabled配置为开启状态\n关于自动分区合并, 在Shuffle Map阶段完成之后, 结合分区推荐尺寸与分区数量限制, AQE会自动帮我们完成分区合并的计算过程\n关于AQE的自动倾斜处理, 它只能以Task为粒度缓解数据倾斜, 并不能解决不同Executors之间的负载均衡问题.\n","permalink":"https://www.liunaijie.top/coding/big_data/spark/%E6%80%8E%E4%B9%88%E7%94%A8%E5%A5%BDaqe%E7%9A%84%E4%B8%89%E4%B8%AA%E7%89%B9%E6%80%A7/","summary":"\u003cp\u003e在2.0版本之前, Spark SQL仅仅支持启发式、静态的优化过程, 启发式的优化又叫RBO(Rule Based Optimization, 基于规则的优化), 它基于一些规则和策略实现, 如谓词下推、列剪枝. 这些规则和策略来源于数据库领域已有的应用经验. \u003cstrong\u003e启发式的优化是一种经验主义.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e经验主义的弊端是对待相似的问题和场景都使用同一种套路.\u003c/p\u003e\n\u003cp\u003e在2.2版本中推出了CBO(Cost Based Optimization, 基于成本的优化), 特点是“实事求是”, 基于数据表的统计信息(如表大小、数据列分布)来选择优化策略. CBO支持的统计信息很丰富, 比如数据表的行数、每列的基数(Cardinality)、空间值、最大值、最小值和直方图等等. 因为有统计数据做支持, 所以CBO选择的优化策略往往优于RBO选择的优化规则.\u003c/p\u003e\n\u003cp\u003e但是CBO也有三个方面的缺点: 窄、慢、静.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e窄 : 指的是适用面太窄, CBO仅支持注册到Hive Metastore的数据表\u003c/li\u003e\n\u003cli\u003e慢: 指的是统计信息的搜集效率比较低. 对于注册到Hive Metastore的数据表, 开发者需要调用ANALYZE TABLE COMPUTE STATISTICS语句收集统计信息, 而各类信息的收集会消耗大量时间\u003c/li\u003e\n\u003cli\u003e静: 指的是静态优化, 这一点与RBO一样, CBO结合各类统计信息指定执行计划, 一旦执行计划交付运行, CBO的使命就算完成了. 也就是说如果在运行时数据分布发送动态变化, CBO先前制定的执行计划并不会跟着调整、适配\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"aqe是什么\"\u003eAQE是什么\u003c/h1\u003e\n\u003cp\u003eSpark在3.0推出了AQE(Adaptive Query Execution, 自适应查询执行). AQE是Spark SQL的一种动态优化机制, 在运行时, 每当Shuffle Map阶段执行完毕, AQE都会结合这个阶段的统计信息, 基于既定的规则动态的调整、修正尚未执行的逻辑计划和物理计划, 来完成对原始查询语句的运行时优化.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAQE的优化机制触发的时机是Shuffle Map阶段执行完毕. 也就是说, AQE优化的频次与执行计划中Shuffle的次数一致.\u003c/strong\u003e 如果查询语句没有引入Shuffle操作, 那么Spark SQL是不会触发AQE的.\u003c/p\u003e\n\u003ch2 id=\"aqe依赖的统计信息是什么\"\u003eAQE依赖的统计信息是什么:\u003c/h2\u003e\n\u003cp\u003eAQE赖以优化的统计信息与CBO不同, 这些统计信息并不是关于某张表或是哪个列, 而是\u003cstrong\u003eShuffle Map阶段输出的中间文件\u003c/strong\u003e. 每个Map Task都会输出以data为后缀的数据文件, 还有以index为结尾的索引文件, 这些文件统称为中间文件. 每个data文件的大小、空文件数量与占比、每个Reduce Task对于的分区大小, 所有这些基于中间文件的统计值构成了AQE进行优化的信息来源.\u003c/p\u003e","title":"Spark-怎么用好AQE的三个特性"},{"content":"Reserved Memory 堆内内存可以划分为\nReserved Memory, User Memory Storage Memory Execution Memory 其中Reserved Memory固定为300MB.\nUser Memory 再看一下之前在广播变量里提到的一段代码\n1 2 3 4 val dict = List(“spark”, “tune”) val words = spark.sparkContext.textFile(“~/words.csv”) val keywords = words.filter(word =\u0026gt; dict.contains(word)) keywords.map((_, 1)).reduceByKey(_ + _).collect 这里的dict变量, 会被分发到每个Executor上, 每个Executor上会同时存在N份(N为当前Executor上并行执行的task数量). 这些数据被存储到了堆内内存的User Memory区域\n当使用广播变量将这个变量进行分发后, 这个数据就只会在Executor上存储一份. 并且这部分数据也不再存储到User Memory中, 转到了Storage Memory的存储区域\n估算公式\nUser Memroy = 应用内自定义数据结构的对象总大小 * Executor的线程池大小\n计算公式:\n(spark.executor.memory - 300MB) * ( 1- spark.memory.fraction )\nStorage Memory Spark存储系统主要有3个对象\nShuffle中间文件 RDD缓存 广播变量 它们都由Executor上的BlockManager进行管理, 对于数据在内存和磁盘中的存储, BlockManager利用MemoryStore和DiskStore进行抽象和封装\n广播变量所携带的数据内容会物化到MemoryStore中, 以Executor为粒度为所有Task提供唯一的一份数据拷贝.\n广播变量消耗的就是 Storage Memory 内存区域\n估算公式\nStorage Memory = ( 所有broadcast变量的大小 + 数据缓存大小 ) / Executor数量\n计算公式:\n(spark.executor.memory - 300MB) * spark.memory.fraction * spark.memory.storageFraction\nExecution Memory 估算公式\nExecution Memory = 线程数 * dataSet大小 / 并行度\n计算公式:\n(spark.executor.memory - 300MB) * spark.memory.fraction * ( 1 - spark.memory.storageFraction )\n","permalink":"https://www.liunaijie.top/coding/big_data/spark/%E6%9C%80%E5%A4%A7%E5%8C%96%E5%86%85%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%88%E7%8E%87/","summary":"\u003ch1 id=\"reserved-memory\"\u003eReserved Memory\u003c/h1\u003e\n\u003cp\u003e堆内内存可以划分为\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eReserved Memory,\u003c/li\u003e\n\u003cli\u003eUser Memory\u003c/li\u003e\n\u003cli\u003eStorage Memory\u003c/li\u003e\n\u003cli\u003eExecution Memory\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e其中Reserved Memory固定为300MB.\u003c/p\u003e\n\u003ch1 id=\"user-memory\"\u003eUser Memory\u003c/h1\u003e\n\u003cp\u003e再看一下之前在广播变量里提到的一段代码\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-scala\" data-lang=\"scala\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003edict\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e“\u003c/span\u003e\u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"err\"\u003e”\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"err\"\u003e“\u003c/span\u003e\u003cspan class=\"n\"\u003etune\u003c/span\u003e\u003cspan class=\"err\"\u003e”\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003ewords\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003espark\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esparkContext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etextFile\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e“\u003c/span\u003e\u003cspan class=\"o\"\u003e~/\u003c/span\u003e\u003cspan class=\"n\"\u003ewords\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecsv\u003c/span\u003e\u003cspan class=\"err\"\u003e”\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eval\u003c/span\u003e \u003cspan class=\"n\"\u003ekeywords\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ewords\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efilter\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eword\u003c/span\u003e \u003cspan class=\"k\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edict\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtains\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ekeywords\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"o\"\u003e((\u003c/span\u003e\u003cspan class=\"k\"\u003e_\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e)).\u003c/span\u003e\u003cspan class=\"n\"\u003ereduceByKey\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"k\"\u003e_\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003ecollect\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e这里的\u003ccode\u003edict\u003c/code\u003e变量, 会被分发到每个Executor上, 每个Executor上会同时存在N份(N为当前Executor上并行执行的task数量). 这些数据被存储到了堆内内存的\u003ccode\u003eUser Memory\u003c/code\u003e区域\u003c/p\u003e\n\u003cp\u003e当使用广播变量将这个变量进行分发后, 这个数据就只会在Executor上存储一份. 并且这部分数据也不再存储到User Memory中, 转到了Storage Memory的存储区域\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e估算公式\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eUser Memroy = 应用内自定义数据结构的对象总大小 * Executor的线程池大小\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e计算公式:\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e(spark.executor.memory - 300MB) * ( 1- spark.memory.fraction )\u003c/p\u003e\n\u003ch1 id=\"storage-memory\"\u003eStorage Memory\u003c/h1\u003e\n\u003cp\u003eSpark存储系统主要有3个对象\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eShuffle中间文件\u003c/li\u003e\n\u003cli\u003eRDD缓存\u003c/li\u003e\n\u003cli\u003e广播变量\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e它们都由Executor上的\u003ccode\u003eBlockManager\u003c/code\u003e进行管理, 对于数据在内存和磁盘中的存储, BlockManager利用\u003ccode\u003eMemoryStore\u003c/code\u003e和\u003ccode\u003eDiskStore\u003c/code\u003e进行抽象和封装\u003c/p\u003e\n\u003cp\u003e广播变量所携带的数据内容会物化到MemoryStore中, 以Executor为粒度为所有Task提供唯一的一份数据拷贝.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e广播变量消耗的就是 Storage Memory 内存区域\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e估算公式\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eStorage Memory = ( 所有broadcast变量的大小 + 数据缓存大小 ) / Executor数量\u003c/p\u003e","title":"Spark-最大化内存的使用效率"},{"content":"一段代码在Spark中的执行过程 假如我们的Spark的资源调度是基于Yarn的, 并且有这样一段代码, 我们来分析一下它从提交开始到返回结果的执行过程\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 select name, age, sum(price * volume) revenue from ( select * from tx ) tx inner join ( select name, age, userId from user where age \u0026lt; 30 and gender in (\u0026#39;M\u0026#39;) ) user on tx.userId = user.userId group by 1,2 ; 提交任务 这里的提交一般有两种方式, 一种是client模式, 一种是cluster模式\nclient 这种模式的意思是将提交作业的机器作为Driver来管理任务\ncluster 这种模式会在Yarn集群中选择一个机器来作为Driver\n在生产环境下我们一般都会使用Cluster模式来提交任务\n分解任务 在Driver上根据我们的代码逻辑, 将作业进行Stage切分, 然后将任务派发到Executor上\n生成逻辑计划 首先使用Altur4来将我们的代码转换成逻辑树, 如果我们写的代码有问题, 比如少写了一个括号, 少写了一个关键字等等可能会造成无法构建逻辑树时, 会在这里抛出错误.\n假如我们在查询字段中少写了一个逗号, 造成了as这样的语义, 也是在这样生成的\n得到Unresolved Logical Plan\n然后使用Catalyst进行优化 结合Schema信息, 来确定计划中的表名, 字段名, 字段类型是否与实际数据一致 如果我们查询一个不存在的字段, 或者字段类型转换错误等错误会在这里抛出\n得到Analyzed Logical Plan\n根据既定规则进行优化\n列剪裁 谓词下推 常量替换 我们可能仅仅需要表中的几个字段, 对于列式存储的数据, 我们可以只查询这几列, 从而减少数据扫描量, 降低IO, 提升效率\n谓词下推指的是可以将过滤条件下推到可以下推的最下一层, 比如这里的条件过滤, 可以在扫描文件时一起进行过滤, 从而减少源文件大小. 但是要注意的是要保证下推之后不能对结果有影响.\n得到Optimized Logical Plan, 至此逻辑计划已经生成, 下面是物理计划\n生成可以执行的物理计划\n逻辑计划生成之后, 只是说明了这个任务需要怎么执行, 但是没有说如何去执行. 上面的Optimized Logical Plan说明了两个表需要进行Inner Join, 但是并没有说明需要shuffle还是broadcast, 需要SMJ还是HJ或者NLJ等等.\n所以首先根据既定的规则, 将逻辑计划转换为可以执行的物理计划, 规则有下面这些\n再次生成物理计划\n上一步将逻辑计划转换成了可以执行的物理计划, 但是有些物理计划要想执行需要满足一系列的先决条件, 这一步就是检查物理计划的执行条件是否全部满足, 如果不满足则进行优化.\n完成之后就生成了最终去执行的物理计划\nTungsten优化 物理计划生成之后可以之间使用, 但是使用Tungsten可以再进行一轮优化. Tungsten主要优化两个方面:\n数据结构设计 全阶段代码生成(Whole Stage Code Generation, WSCG) 数据结构设计主要是使用更加紧凑的二进制来进行数据存储\n主要看一下WSCG, 这一步是在Stage中将可以合并的算子进行合并.\n还以上面的代码为例, 上面对用户表进行了扫描, 过滤, 然后构建一个投影(Project), 之后再进行Shuffle, 由于Shuffle切分Stage. 所以在第一个Stage就包括这几步:\nWSCG可以优化成这样:\n将这三步揉合到一起, 从而只需要扫描和计算一次.\n调度和执行 Driver根据配置中的executor数量, 内存, CPU等配置向Yarn申请所需要的Executor. 并将最终的物理计划进行划分, 封装成Task分发到Executor上.\nExecutor中的线程池拿到Task之后开始运行任务.\nDriver会监控Executor的执行情况, 如果遇到可以重试的错误会将这个任务再次分发到其他节点进行执行.\n","permalink":"https://www.liunaijie.top/publish/%E4%B8%80%E6%AE%B5%E4%BB%A3%E7%A0%81%E5%9C%A8spark%E4%B8%AD%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/","summary":"\u003ch1 id=\"一段代码在spark中的执行过程\"\u003e一段代码在Spark中的执行过程\u003c/h1\u003e\n\u003cp\u003e假如我们的Spark的资源调度是基于Yarn的, 并且有这样一段代码, 我们来分析一下它从提交开始到返回结果的执行过程\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evolume\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003erevenue\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etx\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etx\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003einner\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ejoin\u003c/span\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003euserId\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003euser\u003c/span\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003ewhere\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eand\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egender\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ein\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;M\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003euser\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eon\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euserId\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euserId\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003egroup\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eby\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"提交任务\"\u003e提交任务\u003c/h1\u003e\n\u003cp\u003e这里的提交一般有两种方式, 一种是client模式, 一种是cluster模式\u003c/p\u003e","title":"一段代码在Spark中的执行过程"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/\n给定一个存储字母的m*n二维数组和一个字符串单词word. 如果word存在与二维数组中, 返回true, 否则返回flase\n单词必须按照字母顺序, 通过相邻的单元格内的字母构成, 其他\u0026quot;相邻\u0026quot;单元格是那些水平相邻或垂直相邻的单元格. 同一个单元格内的字母不允许被重复使用.\n例如, 在下面的3*4的矩阵中包含单词\u0026quot;ABCCED\u0026quot;\n示例1:\n输入: borad = [ [\u0026ldquo;A\u0026rdquo;, \u0026ldquo;B\u0026rdquo;, \u0026ldquo;C\u0026rdquo;, \u0026ldquo;E\u0026rdquo;], [\u0026ldquo;S\u0026rdquo;, \u0026ldquo;F\u0026rdquo;, \u0026ldquo;C\u0026rdquo;, \u0026ldquo;S\u0026rdquo;], [\u0026ldquo;A\u0026rdquo;, \u0026ldquo;D\u0026rdquo;, \u0026ldquo;E\u0026rdquo;, \u0026ldquo;E\u0026rdquo;], [\u0026ldquo;A\u0026rdquo;, \u0026ldquo;D\u0026rdquo;, \u0026ldquo;E\u0026rdquo;, \u0026ldquo;E\u0026rdquo;]], word = \u0026ldquo;ABCCED\u0026rdquo;\n输出: true\n示例2:\n输入：board = [[\u0026ldquo;a\u0026rdquo;,\u0026ldquo;b\u0026rdquo;],[\u0026ldquo;c\u0026rdquo;,\u0026ldquo;d\u0026rdquo;]], word = \u0026ldquo;abcd\u0026rdquo; 输出：false\n解题思路 由于单词必须按照字母顺序, 所以我们首先需要在二维数组中找到字符串开头的字母.\n然后从这个位置开始上下左右判断与字符串第二个字母是否一致, 如果一致则继续判断与字符串下一个字母进行匹配.\n如果当前字母已经是字符串最后一个字母, 则返回true.\n题目中要求, 同一个单元格内的字母不允许被重复使用, 所以我们在判断当前单元格内字母与字符串中某个字母匹配之后, 需要将当前单元格内字符替换为一个不相关的元素, 在退出当前节点判断后再将当前节点字符还原.\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 public boolean exist(char[][] board, String word) { char[] chars = word.toCharArray(); for (int i = 0; i \u0026lt; board.length; i++) { for (int j = 0; j \u0026lt; board[0].length; j++) { if (dfs(board, i, j, chars, 0)) { return true; } } } return false; } private boolean dfs(char[][] board, int i, int j, char[] chars, int k) { // 如果下标越界，两个值不相等，返回false if (i \u0026lt; 0 || j \u0026lt; 0 || i \u0026gt;= board.length || j \u0026gt;= board[0].length || board[i][j] != chars[k]) { return false; } // 如果两个值匹配，并且该值是字符串最后一个元素，那么可以直接返回true，因为已经判断完了 if (k == chars.length - 1) { return true; } // 将该位置的元素修改为无关变量，避免重复字符问题 board[i][j] = \u0026#39;\\0\u0026#39;; // 向上， 下，左，右进行匹配，匹配下一个字符 boolean res = dfs(board, i - 1, j, chars, k + 1) || dfs(board, i + 1, j, chars, k + 1) || dfs(board, i, j - 1, chars, k + 1) || dfs(board, i, j + 1, chars, k + 1); // 再将刚刚替换成无关变量的元素替换回来 board[i][j] = chars[k]; return res; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84-leetcode12/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/\"\u003ehttps://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e给定一个存储字母的m*n二维数组和一个字符串单词word. 如果word存在与二维数组中, 返回true, 否则返回flase\u003c/p\u003e\n\u003cp\u003e单词必须按照字母顺序, 通过相邻的单元格内的字母构成, 其他\u0026quot;相邻\u0026quot;单元格是那些水平相邻或垂直相邻的单元格. 同一个单元格内的字母不允许被重复使用.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e例如, 在下面的3*4的矩阵中包含单词\u0026quot;ABCCED\u0026quot;\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode.com/uploads/2020/11/04/word2.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e示例1:\u003c/p\u003e\n\u003cp\u003e输入: borad = [ [\u0026ldquo;A\u0026rdquo;, \u0026ldquo;B\u0026rdquo;, \u0026ldquo;C\u0026rdquo;, \u0026ldquo;E\u0026rdquo;], [\u0026ldquo;S\u0026rdquo;, \u0026ldquo;F\u0026rdquo;, \u0026ldquo;C\u0026rdquo;, \u0026ldquo;S\u0026rdquo;], [\u0026ldquo;A\u0026rdquo;, \u0026ldquo;D\u0026rdquo;, \u0026ldquo;E\u0026rdquo;, \u0026ldquo;E\u0026rdquo;], [\u0026ldquo;A\u0026rdquo;, \u0026ldquo;D\u0026rdquo;, \u0026ldquo;E\u0026rdquo;, \u0026ldquo;E\u0026rdquo;]], word = \u0026ldquo;ABCCED\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e输出: true\u003c/p\u003e\n\u003cp\u003e示例2:\u003c/p\u003e\n\u003cp\u003e输入：board = [[\u0026ldquo;a\u0026rdquo;,\u0026ldquo;b\u0026rdquo;],[\u0026ldquo;c\u0026rdquo;,\u0026ldquo;d\u0026rdquo;]], word = \u0026ldquo;abcd\u0026rdquo;\n输出：false\u003c/p\u003e\u003c/blockquote\u003e","title":"矩阵中的路径-剑指Offer LeetCode12"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/\n给定二叉树的根节点root和一个整数目标targetSum, 找出所有从根节点到叶子节点路径总和等于给定目标和的路径\n叶子节点是指没有子节点的节点\n示例1:\n输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22 输出：[[5,4,11,2], [5,8,4,5]]\n有两条路径加起来之和等于22\n示例2:\n输入：root = [1,2,3], targetSum = 5 输出：[]\n没有符合条件的路径\n解题思路 DFS\n每次遍历时, 将当前节点加入到路径中, 并将总和减去当前节点的值\n判断当前节点是否是叶子节点, 如果是则判断和是否已经等于0, 如果等于0, 则表示当前路径符合要求. 否则回到上一层\n回到上一层时, 将路径中减去当前节点, 并将总和再加上当前节点.\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new LinkedList\u0026lt;\u0026gt;(); LinkedList\u0026lt;Integer\u0026gt; path = new LinkedList\u0026lt;\u0026gt;(); public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; pathSum(TreeNode root, int target) { dfs(root, target); return res; } private void dfs(TreeNode node, int target) { if (node == null) { return; } // 保存当前路径 path.addLast(node.val); // 将目标值减去当前节点的值 target -= node.val; // 如果是叶子节点，并且目标值为0也就是满足条件后，将当前路径放到结果集合中 if (node.left == null \u0026amp;\u0026amp; node.right == null \u0026amp;\u0026amp; target == 0) { res.add(new LinkedList\u0026lt;\u0026gt;(path)); } // 遍历左节点 dfs(node.left, target); // 遍历右节点 dfs(node.right, target); // 将当前节点的值从路径中移除 path.removeLast(); } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84-leetcode34/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/\"\u003ehttps://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e给定二叉树的根节点root和一个整数目标targetSum, 找出所有\u003cstrong\u003e从根节点到叶子节点\u003c/strong\u003e路径总和等于给定目标和的路径\u003c/p\u003e\n\u003cp\u003e叶子节点是指没有子节点的节点\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例1:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n输出：[[5,4,11,2], [5,8,4,5]]\u003c/p\u003e\n\u003cp\u003e有两条路径加起来之和等于22\u003c/p\u003e\n\u003cp\u003e示例2:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e输入：root = [1,2,3], targetSum = 5\n输出：[]\u003c/p\u003e\n\u003cp\u003e没有符合条件的路径\u003c/p\u003e\u003c/blockquote\u003e","title":"二叉树中和为某一值的路径- 剑指Offer LeetCode34"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/\n地上有一个m行n列的二维矩阵, 从坐标[0, 0]到[m-1, n-1]. 一个机器人从坐标[0, 0]的格子开始移动, 每次可以向左, 右, 上, 下移动一格.\n不能移动到方格外, 也不能移动到行坐标和列坐标的数位之和大于K的格子. 例如当K=18时, 机器人可以进入方格[35, 37], 因为3+5+3+7=18. 但是不能进入[35, 38], 因为3+5+3+8=19. 求机器人能够到达多少个格子.\n解题思路 求能够到达多少个格子, 那么就要使用额外的数组来存储当前格子是否被访问过, 否则就会造成重复计数的情况.\n并且每个格子都可以往上下左右四个方向移动, 我们从左上角[0, 0]移动, 所以每次只需要判断向右和向下的可达数量, 不需要再向左, 向上移动\nDFS遍历\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 private int m, n, k; private boolean[][] visited; public int movingCount(int m, int n, int k) { if (m \u0026lt;= 0 || n \u0026lt;= 0 || k \u0026lt; 0) { return 0; } this.m = m; this.n = n; this.k = k; this.visited = new boolean[m][n]; return dfs(0, 0, 0, 0); } // sumI表示 坐标i的数位之和 // sumJ表示 坐标j的数位之和 private int dfs(int i, int j, int sumI, int sumJ) { // 判断当前是否会造成数组越界 // 判断当前是否满足小于K的情况 // 判断当前节点是否访问过 if (i \u0026gt;= m || j \u0026gt;= n || k \u0026lt; sumI + sumJ || visited[i][j]) { return 0; } // 将当前节点标记为已访问 visited[i][j] = true; // 结果为当前节点的1 再加上 向右, 向下的结果 return 1 + dfs(i + 1, j, sums(i + 1), sumJ) + dfs(i, j + 1, sumI, sums(j + 1)); } private int sums(int x) { int s = 0; while (x != 0) { s += x % 10; x = x / 10; } return s; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4--leetcode13/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/\"\u003ehttps://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e地上有一个m行n列的二维矩阵, 从坐标[0, 0]到[m-1, n-1]. 一个机器人从坐标[0, 0]的格子开始移动, 每次可以向左, 右, 上, 下移动一格.\u003c/p\u003e\n\u003cp\u003e不能移动到方格外, 也不能移动到行坐标和列坐标的数位之和大于K的格子. 例如当K=18时, 机器人可以进入方格[35, 37], 因为3+5+3+7=18. 但是不能进入[35, 38], 因为3+5+3+8=19. 求机器人能够到达多少个格子.\u003c/p\u003e","title":"机器人的运动路径- 剑指Offer LeetCode13"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/\n输入一个非负整数数组, 把数组里所有数字拼接起来排出一个数, 打印能拼接出的数字中最小的一个.\n示例1:\n输入: [10, 2]\n输出: \u0026ldquo;102\u0026rdquo;. 两个数字的排列可能为102, 210. 由于102小, 所以结果为102.\n示例2:\n输入: [3, 30, 34, 5, 9]\n输出: ”3033459“\n解题思路 我们以两个数字转化为的字符串(x, y)为例\n当 x + y \u0026gt; y + x 时, x应该大于y, 即x应该在y的后面 当 x + y \u0026lt; y + x时, y应该大于x, 即y应该在x的后面 可以看出, 这个问题可以转化为自定义排序的问题. 再来验证一下是否对多个值通用:\n输入数组: [3, 30, 34, 5 ,9].\n首先判断3, 30, 由于 330 \u0026gt; 303, 所以30在前面, 结果为[30, 3, 34, 5 ,9]\n然后判断3, 34, 由于334\u0026lt; 343, 所以3在前面, 结果为[30, 3, 34, 5 ,9]\n判断34, 5, 由于345\u0026lt; 534, 所以34在前面, 结果为[30, 3, 34, 5 ,9]\n最后判断5, 9. 由于59\u0026lt; 95, 所以5在前面, 结果为[30, 3, 34, 5 ,9]. 与答案一致.\n代码实现: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public String minNumber(int[] nums) { String[] strs = new String[nums.length]; for (int i = 0; i \u0026lt; nums.length; i++) { strs[i] = String.valueOf(nums[i]); } quickSort(strs, 0, strs.length - 1); StringBuilder res = new StringBuilder(); for (String s : strs) { res.append(s); } return res.toString(); } // 使用快排 private void quickSort(String[] strs, int left, int right) { if (left \u0026gt;= right) return; int i = left, j = right; String tmp = strs[i]; while (i \u0026lt; j) { // 如果 j + left \u0026gt; left + j, 那么left就应该做左侧, j在右侧。所以j--, 比较下一个值 while ((strs[j] + strs[left]).compareTo(strs[left] + strs[j]) \u0026gt;= 0 \u0026amp;\u0026amp; i \u0026lt; j) { j--; } // 如果 i + left \u0026lt; left + i, 那么i应该在左侧, left在右侧。所以i++, 比较下一个值 while ((strs[i] + strs[left]).compareTo(strs[left] + strs[i]) \u0026lt;= 0 \u0026amp;\u0026amp; i \u0026lt; j) { i++; } // 找到两个要交换的值，将其交换 tmp = strs[i]; strs[i] = strs[j]; strs[j] = tmp; } strs[i] = strs[left]; strs[left] = tmp; quickSort(strs, left, i - 1); quickSort(strs, i + 1, right); } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0-leetcode45/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/\"\u003ehttps://leetcode-cn.com/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e输入一个非负整数数组, 把数组里所有数字拼接起来排出一个数, 打印能拼接出的数字中最小的一个.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例1:\u003c/p\u003e\n\u003cp\u003e输入: [10, 2]\u003c/p\u003e\n\u003cp\u003e输出: \u0026ldquo;102\u0026rdquo;. 两个数字的排列可能为102, 210. 由于102小, 所以结果为102.\u003c/p\u003e\n\u003cp\u003e示例2:\u003c/p\u003e\n\u003cp\u003e输入: [3, 30, 34, 5, 9]\u003c/p\u003e\n\u003cp\u003e输出: ”3033459“\u003c/p\u003e\u003c/blockquote\u003e","title":"把数组排成最小的数-剑指Offer LeetCode45"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/\n给定一颗二叉搜索树, 请找出其中第K大节点的值\n示例1:\n输入: 层序遍历 = [3, 1, 4, null ,2] , k = 1\n​\t3\n​\t/\t\\\n​\t1\t4\n​\t\\\n​\t2\n输出: 4, 最大的节点为4\n示例2:\n输入: 层序遍历 = [ 5, 3, 6, 2, 4, null, null ,1], k = 3\n​\t5\n​\t/\t\\\n​\t3\t6\n​\t/\t\\\n​\t2\t4\n​\t/\n1\n输出: 4. 倒数第3个最大节点为4.\n解题思路 中序遍历 我们可以利用二叉搜索树中序遍历有序的特性, 先遍历一次有序的数组, 然后取倒数第K个元素\n代码实现: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public int kthLargest(TreeNode root, int k) { List\u0026lt;Integer\u0026gt; list = new LinkedList\u0026lt;\u0026gt;(); Stack\u0026lt;TreeNode\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); while (root != null || !stack.isEmpty()) { while (root != null) { stack.push(root); root = root.left; } root = stack.pop(); list.add(root.val); root = root.right; } return list.get(list.size() - 1 - (k - 1)); } 倒序的中序遍历 中序遍历的顺序为: 左节点, 根节点, 右节点. 所以可以得到升序的数组\n如果我们将顺序修改为: 右节点, 根节点, 左节点. 那么就可以得到降序的数组, 同时我们只需要得到倒数第K个节点, 所以可以在遍历中判断当前是否满足条件, 如果满足条件可以提前返回不需要遍历整颗树\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 int res, k; public int kthLargest2(TreeNode root, int k) { this.k = k; dfs(root); return res; } private void dfs(TreeNode root) { if (root == null) { return; } // 先遍历右节点 dfs(root.right); if (k == 0) { return; } k = k - 1; // 当k等于0时, 返回当前节点 if (k == 0) { res = root.val; } // 最后遍历左节点 dfs(root.left); } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%AC%ACk%E5%A4%A7%E8%8A%82%E7%82%B9--leetcode54/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/\"\u003ehttps://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e给定一颗二叉搜索树, 请找出其中第K大节点的值\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例1:\u003c/p\u003e\n\u003cp\u003e输入:  层序遍历 = [3, 1, 4, null ,2] , k = 1\u003c/p\u003e\n\u003cp\u003e​\t\t\t  3\u003c/p\u003e\n\u003cp\u003e​\t\t/\t\t\t\\\u003c/p\u003e\n\u003cp\u003e​\t1\t\t\t\t4\u003c/p\u003e\n\u003cp\u003e​\t\t\\\u003c/p\u003e\n\u003cp\u003e​\t\t\t2\u003c/p\u003e\n\u003cp\u003e输出: 4, 最大的节点为4\u003c/p\u003e\n\u003cp\u003e示例2:\u003c/p\u003e\n\u003cp\u003e输入: 层序遍历 =  [ 5, 3, 6, 2, 4, null, null ,1], k = 3\u003c/p\u003e\n\u003cp\u003e​\t\t\t\t\t\t5\u003c/p\u003e\n\u003cp\u003e​\t\t\t\t/\t\t\t\t\t\\\u003c/p\u003e\n\u003cp\u003e​\t\t\t   3\t\t\t\t\t\t6\u003c/p\u003e\n\u003cp\u003e​\t\t\t/\t\\\u003c/p\u003e\n\u003cp\u003e​\t\t2\t\t4\u003c/p\u003e\n\u003cp\u003e​\t/\u003c/p\u003e\n\u003cp\u003e1\u003c/p\u003e\n\u003cp\u003e输出: 4. 倒数第3个最大节点为4.\u003c/p\u003e\u003c/blockquote\u003e","title":"二叉搜索树的第K大节点-剑指Offer LeetCode54"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/\n从若干幅扑克牌中随机抽5张牌, 判断是不是一个顺子, 即这五张牌是不是连续的. 2~10为数字本身, A为1, J为11, Q为12, K为13. 大小王为0, 并且可以看出任意数字\n示例1:\n输入: [1,2,3,4,5]\n输出: true\n示例2:\n输入: [0,0,1,2,5]\n输出: true. 由于两个0可以代替为3和4, 所以可以构成顺子\n解题思路 给定5张牌, 判断这5张牌是不是顺子, 那么这里除了大小王(0)之外不能有重复. 并且去掉大小王之后max-min应该小于5. 这样才可以构成顺子\n代码实现: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public boolean isStraight(int[] nums) { // 首先对数组排序 Arrays.sort(nums); int index = 0; for (int i = 0; i \u0026lt; nums.length - 1; i++) { // 大小王则跳过 if (nums[i] == 0) { index++; // 如果前后两个重复则可以直接判断不是顺子 } else if (nums[i] == nums[i + 1]) { return false; } } // 由于已经排序, 所以最后一个值是最大值 return nums[4] - nums[index] \u0026lt; 5; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90-leetcode61/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/\"\u003ehttps://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e从若干幅扑克牌中随机抽5张牌, 判断是不是一个顺子, 即这五张牌是不是连续的. 2~10为数字本身, A为1, J为11, Q为12, K为13. \u003cstrong\u003e大小王为0, 并且可以看出任意数字\u003c/strong\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例1:\u003c/p\u003e\n\u003cp\u003e输入: [1,2,3,4,5]\u003c/p\u003e\n\u003cp\u003e输出:  true\u003c/p\u003e\n\u003cp\u003e示例2:\u003c/p\u003e\n\u003cp\u003e输入: [0,0,1,2,5]\u003c/p\u003e\n\u003cp\u003e输出: true. 由于两个0可以代替为3和4, 所以可以构成顺子\u003c/p\u003e\u003c/blockquote\u003e","title":"扑克牌中的顺子-剑指Offer LeetCode61"},{"content":"Git commit是一次文件提交. 而Git Tag则是对某个时间点的提交进行标记, 例如版本1, 版本2等等.\n基本命令 列出标签 1 2 3 4 git tag # 列出符合 1.0.*的所有标签 git tag -l \u0026#34;v1.0.*\u0026#34; 创建标签 轻量标签 git tag \u0026lt;tag_name\u0026gt; git tag v1.1 附注标签 git tag -a \u0026lt;tag_name\u0026gt; \u0026#34;\u0026lt;commit_info\u0026gt;\u0026#34; git tag -a v1.1 \u0026#34;这是1.1版本\u0026#34; 对历史的commit打标签 git tag -a \u0026lt;tag_name\u0026gt; \u0026lt;commit_id\u0026gt; 查看标签 git show \u0026lt;tag_name\u0026gt; 推送标签 git push origin \u0026lt;tag_name\u0026gt; 推送所有的标签 git push origin --tags 删除标签 git tag -d \u0026lt;tag_name\u0026gt; # 此操作不会删除远程标签 删除远程标签 git push origin --delete \u0026lt;tag_name\u0026gt; 检出标签 git checkout \u0026lt;tag_name\u0026gt; # 只检出不会创建新的分支, 通常不推荐这样做 git checkout -b \u0026lt;new_branch_name\u0026gt; \u0026lt;tag_name\u0026gt; # 从这个tag检出, 并创建一个新分支 ","permalink":"https://www.liunaijie.top/coding/devops/git/git-tag/","summary":"\u003cp\u003eGit commit是一次文件提交.\n而Git Tag则是对某个时间点的提交进行标记, 例如版本1, 版本2等等.\u003c/p\u003e\n\u003ch1 id=\"基本命令\"\u003e基本命令\u003c/h1\u003e\n\u003ch2 id=\"列出标签\"\u003e列出标签\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit tag\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 列出符合 1.0.*的所有标签\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit tag -l \u003cspan class=\"s2\"\u003e\u0026#34;v1.0.*\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"创建标签\"\u003e创建标签\u003c/h2\u003e\n\u003ch3 id=\"轻量标签\"\u003e轻量标签\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit tag \u0026lt;tag_name\u0026gt;\ngit tag v1.1\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"附注标签\"\u003e附注标签\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit tag -a \u0026lt;tag_name\u0026gt; \u0026#34;\u0026lt;commit_info\u0026gt;\u0026#34;\ngit tag -a v1.1 \u0026#34;这是1.1版本\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"对历史的commit打标签\"\u003e对历史的commit打标签\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit tag -a \u0026lt;tag_name\u0026gt; \u0026lt;commit_id\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"查看标签\"\u003e查看标签\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit show \u0026lt;tag_name\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"推送标签\"\u003e推送标签\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit push origin \u0026lt;tag_name\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"推送所有的标签\"\u003e推送所有的标签\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit push origin --tags\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"删除标签\"\u003e删除标签\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit tag -d \u0026lt;tag_name\u0026gt; # 此操作不会删除远程标签\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"删除远程标签\"\u003e删除远程标签\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit push origin --delete \u0026lt;tag_name\u0026gt; \n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"检出标签\"\u003e检出标签\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit checkout \u0026lt;tag_name\u0026gt; # 只检出不会创建新的分支, 通常不推荐这样做\ngit checkout -b \u0026lt;new_branch_name\u0026gt; \u0026lt;tag_name\u0026gt; # 从这个tag检出, 并创建一个新分支\n\u003c/code\u003e\u003c/pre\u003e","title":"GitTag"},{"content":"Class Loader 站在Java虚拟机的角度来看，只存在两种不同的类加载器：\n一种是启动类加载器(Bootstrap ClassLoader)，这个类加载器使用C++语言实现，是虚拟机自身的一部分；\n另外一种就是其他所有的类加载器，这些类加载器都由Java语言实现，独立存在于虚拟机外部，并且全都继承自抽象类java.lang.ClassLoader。\n站在Java开发人员的角度来看，类加载器就应当划分得更细致一些。自JDK 1.2以来，Java一直保 持着三层类加载器、双亲委派的类加载架构，尽管这套架构在Java模块化系统出现后有了一些调整变动，但依然未改变其主体结构。\n启动类加载器(Bootstrap Class Loader) 这个类负责加载存放在\u0026lt;JAVA_HOME\u0026gt;/lib 目录下， 或者被参数-Xbootclasspath所指定的路径中存放的，并且是Java虚拟机能够识别的类库(按照文件名识别，名字不符合的类库即使放到lib目录下也不会被加载)加载到虚拟机内存中。\n启动类加载器无法被Java程序直接引用，用户在编写自定义加载器时，如果需要把加载请求委派给引导类加载器去处理，那直接使用null代替即可。\n扩展类加载器(Extension Class Loader) 这个类加载器是在类sun.misc.Launcher$ExtClassLoader 中以Java代码的形式实现的，它负责加载\u0026lt;JAVA_HOME\u0026gt;/lib/ext目录下，或者被java.ext.dirs系统变量所指定的路径中所有的类库。\n这是一种Java系统类库的扩展机制，运行用户将具有通用性的类库放置到ext目录里以扩展Java SE的功能，在JDK9之后，这种扩展机制被模块化带来的天然扩展能力所取代。\n由于扩展类加载器是由Java代码实现的，开发者可以直接在程序中使用扩展类加载器来加载Class文件。\n应用程序类加载器(Application Class Loader) 这个类加载器由sun.misc.Launcher$AppClassLoader来实现。由于应用程序类加载器是ClassLoader类中的getSystemClassLoader()方法的返回值，所以有些场合中也称它为“系统类加载器”。它负责加载用户类路径(ClassPath)上所有的类库，开发者同样可以直接在代码中使用这个类加载器。如果应用程序中没有 自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。\n三次类加载模型\n双亲委派模型 双亲委派模型要求除了顶层的启动类加载器外，其他的类加载器都应有自己的父类加载器。它并不是一个具有强制性约束力的模型，而是推荐的一种最佳实践。\n工作流程：\n当一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一层的类加载器都是如此，因此所有的加载请求最终都会传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求时(它的搜索范围中没有找到所需的类)，子加载器才会尝试自己去完成加载。\n使用双亲委派模型来组织类加载器之间的关系，一个显而易见的好处是Java中的类随着它的类加载器一起具备类一种带有优先级的层次关系。对于保证Java程序的稳定运行极为重要。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 protected synchronized Class\u0026lt;?\u0026gt; loadClass(String name, boolean resolve) throws ClassNotFoundException { // 首先，检查请求的类是否已经被加载过了 Class c = findLoadedClass(name); if (c == null) { try { if (parent != null) { c = parent.loadClass(name, false); } else { c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { // 如果父类加载器抛出ClassNotFoundException // 说明父类加载器无法完成加载请求 } if (c == null) { // 在父类加载器无法加载时 // 再调用本身的findClass方法来进行类加载 c = findClass(name); } } if (resolve) { resolveClass(c); } return c; } ","permalink":"https://www.liunaijie.top/coding/java/java-class-loader/","summary":"\u003ch1 id=\"class-loader\"\u003eClass Loader\u003c/h1\u003e\n\u003cp\u003e站在Java虚拟机的角度来看，只存在两种不同的类加载器：\u003c/p\u003e\n\u003cp\u003e一种是启动类加载器(Bootstrap ClassLoader)，这个类加载器使用C++语言实现，是虚拟机自身的一部分；\u003c/p\u003e\n\u003cp\u003e另外一种就是其他所有的类加载器，这些类加载器都由Java语言实现，独立存在于虚拟机外部，并且全都继承自抽象类java.lang.ClassLoader。\u003c/p\u003e\n\u003cp\u003e站在Java开发人员的角度来看，类加载器就应当划分得更细致一些。自JDK 1.2以来，Java一直保\n持着三层类加载器、双亲委派的类加载架构，尽管这套架构在Java模块化系统出现后有了一些调整变动，但依然未改变其主体结构。\u003c/p\u003e","title":"Java Class Loader"},{"content":"类加载机制 定义 Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最 终形成可以被虚拟机直接使用的Java类型，这个过程被称作虚拟机的类加载机制。\n类的生命周期 加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的，类型的加载过程必须按 照这种顺序按部就班地开始，而解析阶段则不一定:它在某些情况下可以在初始化阶段之后再开始， 这是为了支持Java语言的运行时绑定特性(也称为动态绑定或晚期绑定)。\n加载 在加载阶段，Java虚拟机需要完成以下三件事情：\n通过一个类的全限定名来获取定义此类的二进制字节流 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据结构的访问入口。 对于第一条规则，并没有明确指明二进制字节流要从哪里获取、如何获取。所以有了一些除了从常规的Class文件中读取外的其他几种方式\n从ZIP压缩包中读取 从网络中读取 运行时计算生成，这种场景使用的最多的就是动态代理技术。 从其他文件生成 从数据库中读取 从加密文件中获取，防止Class文件被反编译的保护措施，通过加载时揭秘Class文件 \u0026hellip;\u0026hellip; 对于第二条规则，方法区中的数据存储格式也是完全由虚拟机自行定义，《Java虚拟机规范》未规定此区域的具体数据结构\n加载阶段与连接阶段的部分动作(如一部分字节码文件格式验证动作)是交叉进行的，加载阶段 尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的一部 分，这两个阶段的开始时间仍然保持着固定的先后顺序。\n在整个类加载过程中，非数组类的加载过程(准确地说，是加载阶段中获取类的二进 制字节流的动作)是开发人员可控性最强的阶段。加载阶段既可以使用Java虚拟机里内置的引导类加 载器来完成，也可以由用户自定义的类加载器去完成，开发人员通过定义自己的类加载器去控制字节 流的获取方式(重写一个类加载器的findClass()或loadClass()方法)，实现根据自己的想法来赋予应用 程序获取运行代码的动态性。\n对于数组类而言，情况就有所不同，数组类本身不通过类加载器创建，它是由Java虚拟机直接在内存中动态构造出来的。但数组类与类加载器仍然有很密切的关系，因为数组类的元素类型(Element Type，指的是数组去掉所有维度的类型)最终还是要靠类加载器来完成加载，一个数组类(下面简称为C)创建过程遵循以下规则:\n如果数组的组件类型(Component Type，指的是数组去掉一个维度的类型，注意和前面的元素类 型区分开来)是引用类型，那就递归采用本节中定义的加载过程去加载这个组件类型，数组C将被标 识在加载该组件类型的类加载器的类名称空间上(这点很重要，一个类型必须与类加载器一起确定唯一性)。 如果数组的组件类型不是引用类型(例如int[]数组的组件类型为int)，Java虚拟机将会把数组C 标记为与引导类加载器关联。 数组类的可访问性与它的组件类型的可访问性一致，如果组件类型不是引用类型，它的数组类的 可访问性将默认为p ublic，可被所有的类和接口访问到。 类加载器 对于任意一个类，都必须由加载它的类加载器和这个类本身一起共同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。在比较两个类是否“相等”时，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个Class文件，被同一个Java虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等。这里的相等，包括代表类的Class对象的equals()、isAssignableFrom()、isInstance() 方法。\n验证 验证是连接阶段的第一步，这一阶段的目的是确保Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求，保证这些信息被当作代码运行后不会危害虚拟机自身的安全。\n由于Class文件不一定由Java源码编译而来，无法保证Class文件的正确性以及安全性。所以验证字节码是Java虚拟机保护自身的一项必要措施。\n验证阶段的工作量在虚拟机的类加载过程中占了相当大的比重。从整体来看，验证阶段大致上会完成下面四个阶段的检验动作：文件格式验证，元数据验证，字节码验证和符号引用验证。\n文件格式验证\n第一阶段要验证字节流是否符号Class文件格式的规范，并且是否能被当前版本的虚拟机处理。这一阶段可能包括下面这些验证点：\n是否以魔数是否以魔数0xCAFEBABE开头。 主、次版本号是否在当前Java虚拟机接受范围之内。 指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。 \u0026hellip;\u0026hellip; 该阶段的主要目的是保证输入的字节流能正确地解析并存储于方法区之内，格式上符合一个Java类型信息的要求。这个阶段的验证是基于二进制字节流进行的，只有通过了这个阶段的验证之后，这段字节流才被运行进入Java虚拟机内存的方法区中进行存储，所以后面的三个验证阶段全部是基于方法区的存储结构上进行的，不会再直接读取、操作字节流了。\n元数据验证\n第二阶段是对字节码描述的信息进行语义分析，以保证其描述的信息符合《Java语言规范》的要求，这个阶段可能包含的验证点如下：\n这个类是否有父类(除了java.lang.Object之外，其他的类都应该有父类)。 这个类的父类是否继承类不允许被继承的类(被final修饰的类) 如果这个类不是抽象类，是否实现类其父类或接口之中要求实现的所有方法 类中的字段、方法是否与父类产生矛盾(例如覆盖了父类的final字段，或者出现不符合规则的方 法重载，例如方法参数都一致，但返回值类型却不同等)。 \u0026hellip;\u0026hellip; 这个阶段的主要目的是对类的元数据信息进行语义校验，保证不存在与《Java语言规范》定义相悖的元数据信息。\n字节码验证\n第三阶段是整个验证过程中最复杂的一个阶段，主要目的是通过数据流分析和控制流分析，确定程序语义是合法的、符合逻辑的，并且保证被校验的类在运行时不会做出危害虚拟机安全的行为，例如：\n保证任何跳转指令都不会跳转到方法体以外的字节码指令上 保证方法体中的类型转化总是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据结构，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的。 \u0026hellip;\u0026hellip; 如果一个类型中有方法体的字节码没有通过字节码验证，那它肯定是有问题的；但如果一个方法体通过类字节码验证，也仍然不能保证它一定就说安全的。\n引用验证\n最后一个阶段的校验行为发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在连接的第三阶段—解析阶段发生。\n符号引用验证可以看作是对类自身以外(常量池中的各种符号引用)的各类信息进行匹配性校验，通俗来说就是，该类依赖的某些外部类、方法、字段等资源是否缺少或者被禁止访问。本阶段通常需要校验下列内容:\n符号引用中通过字符串描述的全限定名是否能找到对应的类。 在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。 符号引用中的类、字段、方法的可访问性(private、protected、public、)是否可被当前类访问。 \u0026hellip;\u0026hellip; 符号引用验证的主要目的是确保解析行为能正常执行，如果无法通过符号引用验证，Java虚拟机 将 会 抛 出 一 个 java.lang.IncompatibleClassChangeError 的 子 类 异 常，典型的如：NoSuchMethodError等。\n验证阶段对于虚拟机的类加载机制来说，是一个非常重要，但却不是必须要执行的阶段。\n准备 准备阶段是正式为类中定义的变量(静态变量)分配内存并设置类变量初始值的阶段。\n1 2 public static int val1 = 123; public static final int val2 = 123; 对于这里的两个变量，在准备阶段val2的值为123，val1的值为0。val1的赋值需要到类的初始化阶段才会被执行。\n解析 解析阶段是Java虚拟机将常量池内的符号引用替换为直接引用的过程。\n符号引用( Symbolic References)：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义的定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标不一定是已经加载到虚拟机内存当中的内容。 直接引用( Direct Reference)：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能直接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用不能在不同虚拟同一个符号引用在不同虚 拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机 的内存中存在。 类或接口的解析 字段解析 方法解析 接口方法解析 初始化 初始化阶段就是执行类构造器\u0026lt;clinit\u0026gt;()方法的过程。\u0026lt;clinit\u0026gt;()并不是程序员在Java代码中直接编写的方法，它是Javac编译器的自动生成物。\nJava虚拟机会通过加锁来确保类的\u0026lt;clinit\u0026gt;方法仅被执行一次。\n类的初始化何时会被触发呢?JVM 规范枚举了下述多种触发情况:\n当虚拟机启动时，初始化用户指定的主类; 当遇到用以新建目标类实例的 new 指令时，初始化 new 指令的目标类; 当遇到调用静态方法的指令时，初始化该静态方法所在的类; 当遇到访问静态字段的指令时，初始化该静态字段所在的类; 子类的初始化会触发父类的初始化; 如果一个接口定义了 default 方法，那么直接实现或者间接实现该接口的类的初始化，会触发该接口的初始化; 使用反射API对某个类进行反射调用时，初始化这个类; 当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类。 ","permalink":"https://www.liunaijie.top/coding/java/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/","summary":"\u003ch1 id=\"类加载机制\"\u003e类加载机制\u003c/h1\u003e\n\u003ch1 id=\"定义\"\u003e定义\u003c/h1\u003e\n\u003cp\u003eJava虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最 终形成可以被虚拟机直接使用的Java类型，这个过程被称作虚拟机的类加载机制。\u003c/p\u003e\n\u003ch1 id=\"类的生命周期\"\u003e类的生命周期\u003c/h1\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/20211121102047.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的，类型的加载过程必须按 照这种顺序按部就班地开始，而解析阶段则不一定:它在某些情况下可以在初始化阶段之后再开始， 这是为了支持Java语言的运行时绑定特性(也称为动态绑定或晚期绑定)。\u003c/p\u003e","title":"Java类加载机制"},{"content":"经典垃圾收集器 Serial收集器 Serial收集器是最基础、历史最悠久的收集器. 这个收集器是一个单线程工作的收集器, 在他进行垃圾收集时, 必须暂停其他所有工作线程, 直到它收集结束.\n它是HotSpot虚拟机运行在客户端模式下的默认新生代收集器, 它简单高效, 额外内存消耗最少.\nParNew收集器 ParNew收集器实际上是Serial收集器的多线程并行版本, 除了使用多线程进行垃圾收集之外,其他与Serial完全一致.\n除了Serial收集器外, 目前只有它能与CMS收集器配合工作, 所有还有很多服务端模式下的虚拟机在使用它.\nParallel Scavenge收集器 是一款新生代收集器, 基于标记-复制算法实现, 并且可以并行处理.\nParallel Scavenge收集器的目标是达到一个可控制的吞吐量.\n吞吐量 = 运行用户代码时间/ (运行用户代码时间+运行垃圾收集时间)\n高吞吐量可以最高效率的利用处理器资源,尽快完成程序的运算任务,主要适合在后台运算而不需要太多交互的分析任务.\nSerial Old收集器 Serial Old是Serial收集器的老年代版本,同样是一个单线程收集器,使用标记-整理算法.\n在服务端模式下,主要有两个用途:\n与Parallel Scavenge收集器搭配使用 作为CMS收集器发生失败时的后备方案. Parallel Old收集器 是Parallel Scavenge的老年代版本, 支持多线程并发收集, 基于标记-整理算法.\nCMS(Concurrent Mark Sweep)收集器 是一种以获取最短回收停顿时间为目标的收集器. CMS收集器是基于标记-清除算法实现的, 它的运作过程主要分为以下四个步骤:\n初始标记(CMS initial mark) 并发标记(CMS concurrent mark) 重新标记(CMS remark) 并发清除(CMS concurrent sweep) 其中初始标记、重新标记这两个步骤仍然需要“Stop The World”.\n初始标记: 标记一下GC Roots能直接关联到的对象, 速度很快. 并发标记: 从GC Roots的直接关联对象开始遍历整个对象图的过程, 这个过程耗时很长但是不需要停顿用户线程, 可以与垃圾收集器线程一起并发运行. 重新标记阶段: 为了修正并发标记期间, 因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录, 这个阶段的停顿时间通常会比初始标记阶段稍长一 些, 但也远比并发标记阶段的时间短. 并发清除阶段: 清理删除掉标记阶段判断的已经死亡的对象, 由于不需要移动存活对象, 所有这个阶段也是可以与用户线程同时并发. 由于在整个过程中耗时最长的并发标记和并发清除阶段中, 垃圾收集器可以与用户线程一起工作, 所有从总体上来说, CMS收集器的内存回收过程是与用户线程一起并发执行的.\n主要优点是: 并发收集、低停顿.\n缺点是:\n对处理器资源非常敏感, CMS默认启动的回收线程数是 (处理器核心数量+3)/4. 当处理器在4核以上时,表现才会好, 并且核数越多性能越好. 但是当核数不足4个时,对用户线程的影响就会变得很大. 无法处理“浮动垃圾”, 在CMS的并发标记和并发清理阶段, 用户线程还是在继续运行, 也就还会有新的垃圾对象产生. 但这一部分垃圾对象是出现在标记过程结束之后, CMS无法在当次处理掉它们, 只好留代下一次收集时再清理掉. 在垃圾收集阶段用户还需要持续运行, 就需要预留足够的内存空间提供给用户线程使用, 因此CMS收集器不能像其他收集器那样等待老年代几乎完全被填满了再进行收集, 需要预留一部分空间供并发收集时的程序运行使用. 如果CMS运行期间预留的内存无法满足程序分配新对象的虚脱, 就会出现一次“并发失败”(Concurrent Mode Failure). 这个适合虚拟机需要启动后备预案: 冻结用户线程的执行, 临时启用Serial Old收集器来重新进行老年代的垃圾收集. 可以通过参数XX:CMSInitiatingOccupancyFraction来设置CMS的触发百分比, 这个参数不宜设置的过大. 不然会出现并发失败错误. 由于基于标记-清除算法实现, 意味着收集结束会有大量的空间碎片产生. 空间碎片过多时, 会给大对象分配带来麻烦. 从而触发Full GC. — CMS收集器提供了一个-XX:+UseCMS-CompactAtFullCollection开关参数(默认是开启的,此参数从(JDK9开始废弃, 因为JDK9开始使用G1),用于在CMS收集器不得不进行FullGC时开启内存碎片的合并整理过程,由于这个内存整理必须移动存活对象,(在Shenandoah和ZGC出现前)是无法并发的。这样空间碎片问题是解决了, 但停顿时间又会变长, 因此虚拟机设计者们还提供了另外一个参数-XX:CMSFullGCsBefore-Compaction(此参数从JDK9开始废弃,因为JDK9开始使用G1)，这个参数的作用是要求CMS收集器在执行过若干次(数量由参数值决定)不整理空间的FullGC之后,下一次进入FullGC前会先进行碎片整理(默认值为0,表示每次进入FullGC时都进行碎片整理) Garbage First收集器(G1) G1是垃圾收集器技术发展历史上的里程碑式的成果, 它开创了收集器面向局部收集的设计思路和基于Region的内存布局格式. 从JDK9开始成功服务端模式下默认的垃圾收集器.\n停顿时间模型(Pause Prediction Model): 能够支持指定在一个长度为M毫秒的时间片段内, 消耗在垃圾收集器上的时间大概率不超过N毫秒.\nG1可以面向堆内存任意部分来组成回收集(Collection Set, 简称CSet)进行回收, 衡量标准不再是它属于哪个分代, 而是哪块内存中存放的垃圾数量最多, 回收收益最大, 这就是G1收集器的Mixed GC模式.\nG1开创的基于Region的堆内存布局是它能够实现这个目标的关键. 虽然G1也仍遵循分代收集理论, 但是其堆内存的布局与其他收集器有非常明显的差异: G1不再坚持固定大小以及固定数量的分区区域划分, 而是把连续的Java堆划分为多个大小相等的独立区域(Region), 每一个Region都可以根据需要, 扮演新生代的Eden空间, Survivor空间, 或者是老年代空间. 收集器能够根据扮演不同角色的Region采用不同的策略去处理, 这样无论是新创建的对象还是对象已经存活了一段时间、熬过多次收集的旧对象都能获取很好的收集效果.\nRegion中还有一类特殊的Humongous区域, 专门用来存储大对象. G1认为只要大小超过了一个Region容量一半的对象即可判定为大对象. 每个Region的大小可以通过参数XX:G1Heap RegionSize设定, 取值范围为1MB~32MB, 且应为2的N次幂. 而对于那些超过了整个Region容量的超级大对象, 将会被存放在N个连续的Humongous Region之中, G1的大多数行为都把Humongous Region作为老年代的一部分来进行看待. 虽然G1仍然保留新生代和老年代的概念, 但新生代和老年代不再是固定的了, 他们都是一系列区域(不需要连续)的动态集合. G1收集器之所以能够建立可预测的停顿时间模型, 是因为它将Region作为单次回收的最小单元, 每次收集到的内存空间都是Region大小的整数倍, 这样可以有计划的避免在整个Java堆中进行全区域的垃圾收集. — 更具体的处理思路是G1收集器去追踪各个Region里面垃圾堆积的“价值”大小, 价值即回收所需的空间大小以及回收所需时间的经验值, 然后在后台维护一个优先级列表. 每次根据用户设定运行的收集停顿时间(使用参数-XX:M axGCPauseMillis指定,默认值是200毫秒), 优先处理回收价值收益最大的那些Region. 这也就是“Garbage First”名字的由来. 这种使用Region划分内存空间, 以及具有优先级的区域回收方式, 保证了G1收集器在有限的时间内获取尽可能高的收集效率.\n问题: 在Java堆分为多个独立的Region后, Region里面存在的跨Region引用对象如何解决: 使用记忆集避免全堆作为GC Roots扫描, 但在G1收集器上记忆集的应用要复杂很多. 它的每个Region都维护自己的记忆集, 这些记忆集记录下别的Region指向自己的指针, 并标记这些指针分别在哪些卡页的范围之内. G1的记忆集在存储结构的本质上是一种“双向”的卡表结构, 比原来的卡表实现起来更复杂, 同时由于Region数量比传统收集器的分代数量明显多得多, 因为G1收集器要比其他垃圾收集器有着更高的内存占有负担. — G1至少要耗费大约相当于Java堆容量10%~20%的额外内存来维持收集器工作. 并发标记阶段如何保证收集线程与用户线程互不干扰地运行: 首先要解决的是用户线程改变对象引用关系时, 必须保证其不能打破原有的对象图结构, 导致标记结构出现错误. CMS收集器采用增量更新算法实现, 而G1收集器则是通过原始快照(SATB)算法来实现的. 新对象分配问题: G1为每一个Region设计了两个名为TAMS(Top at Mark Start)的指针, 把Region中的一部分空间划分处理用于并发回收过程中的新对象分配, 并发回收时新分配的对象地址都必须要在这两个指针位置以上. G1收集器默认在这个地址以上的对象是被隐式标记果的, 即默认他们是存活的, 不纳入回收范围. 与CMS中 的“Concurrent M ode Failure”失败会导致Full GC类似, 如果内存回收的速度赶不上内存分配的速度, G1收集器也要被迫冻结用户线程执行, 导致Full GC而产生长时间“Stop The World” 如何建立可靠的停顿预测模型: 用户通过-XX:MaxGCPauseMillis参数指定的停顿时间只意味着垃圾收集发生之前的期望值, 但G1收集器要怎么做才能满足用户的期望呢? G1收集器的停顿预测模型是以衰减均值(Decay ing Average)为理论基础来实现的, 在垃圾收集过程中, G1收集器会记录每个Region的回收耗时、每个Region记忆集里的脏卡数量等各个可测量的步骤花费的成本, 并分析得出平均值、标准偏差、置信度等统计信息. 这里强调的“衰减平均值”是指它会比普通的平均值更容易受到新数据的影响，平均值代表整体平均状态，但衰减平均值更准确地代表“最近的”平均状态. 换句话说, Region的统计状态越新越能决定其回收的价值. 然后通过这些信息预测现在开始回收的话, 由哪些Region组成回收集才可以在不超过期望停顿时间的约束下获得最高的收益 G1收集器的运作过程大致可以划分为以下4个步骤:\n初始标记(Initial Marking) 标记GC Roots能直接关联到的对象, 并且修改TAMS指针的值, 让下一阶段用户线程并发时, 能正确的在可用的Region中分配对象. 这个阶段需要停顿线程, 但耗时很短 并发标记(Concurrent Marking) 从GC Root开始对堆中对象进行可达性分析, 递归扫描整个堆内的对象图, 找出要回收的对象, 这个阶段耗时较长, 但可与用户线程并发执行. 当对象图扫描完成以后, 还要重新处理SATB记录下的在并发过程中有引用变动的对象. 最终标记(Finial Marking) 对用户线程做另一个短暂的暂停, 用于处理并发阶段结束后仍遗留下来的最后那少量的STAB记录 筛选回收(Live Data Counting and Evacuation) 复责更新Region的统计数据, 对各个Region的回收价值和成本进行排序, 根据用户所期望的停顿时间来制定回收计划, 可以自由选择任意多个Region构成回收集, 然后把决定回收的那一部分Region中的存活对象复制到空的Region中, 再清理掉整个旧Region的全部空间. 这里的操作涉及存活对象的移动, 是必须暂停用户线程, 由多条收集器线程并行完成的. Shenandoah收集器 不仅支持并发的垃圾标记, 还支持并发的对象清理后的整理工作. 与G1有着相似的堆内存布局, 在初始标记、并发标记等许多阶段的处理思路上高度一致.\n与G1至少有三个明显的不同之处:\n支持并发的整理算法, G1的回收阶段是可以多线程并行, 但是不能与用户线程并发, 而Shenandoah则可以与用户线程并发. Shenandoah(目前)是默认不使用分代收集的, 也就是没有新生代和老年代的存在. 摒弃了在G1中耗费大量内存和计算资源去维护的记忆集, 该用名为“连接矩阵”的全局数据结构来记录跨Region的引用关系. 连接矩阵可以简单理解为一张二维表格, 如果Region N有对象指向Region M, 就在表格N行M列中打上一个标记. 工作过程可以大致划分为9个阶段:\n初始标记(Initial Marking) 与G1一样, 首先标记与GC Roots直接关联的对象, 这个阶段是“Stop The World”的, 停顿时间与堆大小无关, 至于GC Roots的数量相关. 并发标记(Concurrent Marking) 与G1一样, 遍历对象图, 标记出全部可达的对象, 这个阶段与用户线程并发执行, 时间长短取决于堆中存活对象的数量以及对象图的结构复杂程度. 最终标记(Finial Marking) 与G1一样, 处理剩余的SATB扫描, 并在这个阶段统计出回收价值最高的Region, 将这些Region构成一组回收集(Collection Set). 最终标记也会有一小段短暂的停顿. 并发清理 (Concurrent Cleanup) 清理那些整个区域连一个存活对象都没有找到的Region(这类Region称为 Immediate Garbage Region) 并发回收(Concurrent Evacuation) 在这个阶段, Shenandoah要把回收集里面存活对象先复制一份到其他未被使用的Region之中. — 复制对象这件事情如果将用户线程冻结起来再做那是相当简单的, 但如果两者必须同时并发进行的话, 就变得复杂起来了. 困难点是在移动对象的同时, 用户线程仍然可能不停对被移动的对象进行读写访问, 移动对象是一次性的行为, 但移动之后整个内存中所有执向该对象的引用都还是就对象的地址, 这是很难一瞬间全部改变过来的. Shenandoah将会通过读屏障和被称为“Brooks Pointers”的转发指针来解决. 并发回收阶段的运行时间长短取决与回收集的大小 初始引用更新(Initial Update Reference) 并发回收阶段复制对象结束后, 还需要把堆中所有指向旧对象的引用修正到复制后的新地址, 这个操作称为引用更新. 引用更新的初始化阶段实际上并未做什么具体的处理, 设立这个阶段只是为了建立一个线程集合点, 确保所有并发回收阶段中进行的收集器线程都已完成分配给它们的对象移动任务而已. 初始引用更新时间很短, 会产生一个非常短暂的停顿. 并发引用更新(Concurrent Update Reference) 真正开始进行引用更新操作, 这个阶段是与用户线程一起并发的, 时间长短取决于内存中涉及的引用数量的多少. 并发引用更新与并发标记不同, 它不再需要沿着对象图来搜索, 只需要按照内存物理地址的顺序, 线性地搜索出引用类型, 把旧值改为新值即可. 最终引用更新(Finial Update Reference) 解决来堆中的引用更新后, 还要修正存在与GC Roots中的引用, 这个阶段是最后一次停顿, 停顿时间只与GC Roots的数量相关. 并发清理(Concurrent Cleanup) 经过并发回收和引用更新之后, 整个回收集中所有的Region中再无存活对象, 这些Region都变成来Immediate Garbage Regions了, 最后再调用一次并发清理过程来回收这些Region的内存空间, 供以后新对象分配使用. Brooks Pointer - 用以支持并行整理的核心概念 此前, 要做类似的并发操作, 通常是在被移动对象原有的内存上设置保护陷阱(Memory Protection Trap), 一旦用户程序f到归属于旧对象的内存空间就会产生自陷中段, 进入预设好的异常处理器中, 再由其中的代码逻辑把访问转发到复制的新对象上. 这种方案虽然能够实现对象移动与用户线程并发, 但是如果没有操作系统层面的直接支持, 这种方案将导致用户态频繁切换到核心态, 代价非常大.\nBrooks提出的新方案不需要用到内存保护陷阱, 而是在原有对象布局结构的最前面统一增加一个新的引用字段, 在正常不处于并发移动的情况下, 该引用指向对象自己. 当对象拥有了一份新的副本时, 只需要修改一处指针的值, 即旧对象转发指针的引用位置, 使其指向新对象, 便可将所有对该对象的访问转发到新的副本上. 这样只要就对象的内存依然存在, 未被清理掉, 虚拟机内存中所有通过旧引用地址访问的代码便仍然可用, 都会被自动转发到新对象上继续工作.\n缺点是每次对象访问都会带来一次额外的转向开销, 但是它比起内存保护陷阱的方案已经好了很多.\nShenandoah收集器通过CAS操作来保证并发时对象的访问正确性. 并且同时设置了读、写屏障.\nZGC收集器 在JDK11加入的低延迟垃圾收集器, ZGC收集器是一款基于Region内存布局的, (暂时)不设分代的, 使用了读屏障, 染色指针和内存多重映射等技术来实现可并发的标记-整理算法的, 以低延迟为首要目标的一款垃圾收集器.\nZGC也采用基于Region的堆内存布局, 但不同的是, ZGC的Region具有动态性—动态创建和销毁, 以及动态的区域容量大小. 在x86硬件平台下, ZGC的Region可以具有大中小三类容量:\n小型Region : 容量固定为2MB, 用于放置xiao y 中型Region : 容量固定为32MB, 用于放置大于等于256KB但小于4MB的对象 大型Region : 容量不固定, 可以动态变化, 但必须是2MB的整数倍, 用于放置4MB或以上的大对象. 每个大型Region中只会存放一个大对象, 所以它的实际容量完全有可能小于中型Region. 大型Region在ZGC的实现中不会被重分配. 染色指针 从前, 如果我们要在对象上存储一些额外的, 只供收集器或者虚拟机本身使用的数据, 通常会在对象头中增加额外的存储字段, 如对象的哈希码、分代年龄、锁记录等就是这样存储的. 这种记录方式在有对象访问的场景下是很自然流畅的, 不会有什么额外负担. 但是如果对象存在被移动的可能性, 这种请问无法保证对象访问能够成功. 我们希望通过一些不会去访问对象, 但又能够得到该对象的某些信息.\n可以通过指针或者与对象内存无关的地方得到这些信息或者能够看出对象被移动过.\nZGC的染色指针把标记信息记在引用对象的指针上, 染色指针是一种直接将少量额外的信息存储在指针上的技术, ZGC将64位指针中的高1922位提取出来存储4个标志信息. 通过这些标志位、虚拟机可以直接从指针中看到其引用对象的三色标记状态、是否进入来重分配集(即被移动过)、是否只能通过finalize()方法才能被访问到. 由于占用了4个标记位, 导致了ZGC能够管理的内存不可以超过4TB(2的42次幂), 并且不能支持32位平台.不能支持压缩指针 — 为什么使用1922位 : 在Linux下64位指针的高18位不能用来寻址.\n染色指针的三个优势:\n染色指针可以大幅减少在垃圾收集过程中内存屏障的使用数量, 设置内存屏障, 尤其是写屏障的目的通常是为了记录对象引用的变动情况, 如果将这些信息直接维护在指针中, 显然可以省去一些专门的记录操作. ZGC到目前为止都没有使用到任何写屏障, 只使用了读屏障(一部分是染色指针的功劳, 一部分是ZGC还不支持分代收集, 天然没有跨代引用的问题). 染色指针可以作为一种可扩展的存储结构用来记录更多与对象标记、重定位过程相关的数据, 以便日后进一步提高性能. — 现在Linux下的64位指针还有前18位并未使用, 它们虽然不能用来寻址, 却可以通过其他手段用于信息记录. 如果开发了这18位, 既可以腾出已用的4个标志位, 将ZGC可支持的最大堆内存从4TB拓展到64TB, 也可以利用其余位置再存储更多的标志, 譬如存储一些追踪信息来让垃圾收集器在移动对象时能将低频次使用的对象移动到不常访问的内存区域. 染色指针可以使得一旦某个Region的存活对象被移走之后, 这个Region立即就能被释放和重用, 而不必等待整个堆中所有指向该Region的引用都被修正才能清理. — 由于其“自愈”特性 ZGC的运作过程 ZGC的运作过程大致可以划分位以下四个大的阶段, 全部四个阶段都是可以并发执行的, 仅是两个阶段中间会存在短暂的停顿小阶段, 这些小阶段譬如初始化GC Root直接关联对象的Mark Start与之前其他收集器并无差异.\n并发标记 (Concurrent Mark) : 与G1、Shenandoah一样,并发标记是遍历对象图做可达性分析的阶段, 前后也要经过类似与G1, Shenandoah的初始标记、最终标记的短暂停顿, 而且这些停顿阶段所做的事情在目标上也是相类似的. 与G1、Shenandoah不同的是, ZGC的标记是在指针上而不是对象上进行的, 标记阶段会更新染色指针中的Mark0、Mark1标志位. 并发预备重分配(Concurrent Prepare For Relocate) : 这个阶段需要根据特定的查询条件统计得出本次收集过程要清理哪些Region, 将这些Region组成重分配集(Relocation Set). ZGC划分Region的目的并非为了像G1那样做收益优先的增量回收. 相反, ZGC每次回收都会扫描所有的Region, 用范围更大的扫描成本换取省去G1中记忆集的维护成本. 因此, ZGC的重分配集只是决定了里面的存活对象会被重新复制到其他的Region中, 里面的Region会被释放, 而不是说回收行为就只是针对这个集合中的Region进行, 因为标记过程是针对全堆的. 此外, 在JDK12中的ZGC开始支持的类卸载以及弱引用的处理, 也是在这个阶段完成的. 并发重分配 (Concurrent Relocate) : 重分配是ZGC执行过程中的核心阶段, 这个过程要把重分配集中的存活对象复制到新的Region上, 并为重分配集中的每个Region维护一个转发表(Forward Table), 记录从旧对象到新对象的转向关系. 得益于染色指针的支持, ZGC收集器能仅从引用上就明确得知一个对象释放处于重分配集之中, 如果用户线程此时并发访问了位于重分配集中的对象, 这次访问将会被预置的内存屏障所截获, 然后立即根据Region上的转发表记录将访问转发到新复制的对象上, 并同时修正更新该引用的值, 使其直接指向新对象, ZGC将这种行为称为指针的“自愈”(Self Healing)能力. 这样做的好处是只有第一次访问就对象会陷入转发, 也就是只慢一次, 对比Shenandoah的Brooks转发指针, 那是每次对象访问都必须付出的固定开销, 简单地说就是每次都慢, 因此ZGC对用户程序的运行时负载要比Shenandoah来的要低一些. 还有另外一个直接的好处是由于染色指针的存在, 一旦重分配集中某个Region的存活对象都复制完毕后, 这个Region就可以立即释放用于新对象的分配 (但是转发表还得留着不能释放掉). 哪怕堆中还有很多指向这个对象的未更新指针也没有关系, 这些旧指针一旦被使用, 它们都是可以自愈的. 并发重映射(Concurrent Remap) : 重映射所做的就是修正整个堆中指向重分配集中旧对象的所有引用, ZGC的并发重映射并不是一个必须要“迫切”去完成的任务, 因为即便是旧引用, 它也是可以自愈的, 最多只是第一次使用时多一次转发和修正操作(因为转发表还存在). 重映射清理这些旧引用的主要目的是为了不变慢, 并且清理结束后还可以释放转发表. ZGC很巧妙的把并发重映射阶段要做的工作, 合并到下一次垃圾收集循环中的并发标记阶段里完成, 反正它们都是要遍历所有对象的, 这样合并就节省了一次遍历对象图的开销. 一旦所有指针都被修正之后, 原来记录新旧对象关系之间的转发表就可以释放掉了. ZGC的对象分配速率不能太高, 在对象分配速率太高时, 新对象只能被当作存活对象来看待, 就产生了大量的浮动垃圾, 导致每一次完整额并发收集周期变长, 回收到的内存空间持续小于期间并发产生的浮动垃圾所占的空间, 堆中剩余可腾挪的空间就越来越小了.\n这时, 与其说可达性分析是遍历对象图来标记对象, 还不如说是遍历“引用图”来标记“引用”.\n","permalink":"https://www.liunaijie.top/coding/java/gc-%E7%BB%8F%E5%85%B8%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/","summary":"\u003ch1 id=\"经典垃圾收集器\"\u003e经典垃圾收集器\u003c/h1\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/20211121102320.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003ch1 id=\"serial收集器\"\u003eSerial收集器\u003c/h1\u003e\n\u003cp\u003eSerial收集器是最基础、历史最悠久的收集器. 这个收集器是一个单线程工作的收集器, 在他进行垃圾收集时, 必须暂停其他所有工作线程, 直到它收集结束.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/20211121102351.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e它是HotSpot虚拟机运行在客户端模式下的默认新生代收集器, 它简单高效, 额外内存消耗最少.\u003c/p\u003e","title":"GC-经典垃圾收集器"},{"content":"垃圾回收算法 从如何判定对象消亡的角度出发, 垃圾收集算法可以划分为“引用计数器垃圾收集”(Reference Counting GC)和“追踪式垃圾收集”(Tracing GC)两大类. 这两类也常被称作“直接垃圾收集“和”间接垃圾收集“. 但是引用计数式垃圾收集算法在主流Java虚拟机中均为涉及.\n分代收集理论 分代收集理论建立在两个分代假说之上:\n弱分代假说(Weak Generational Hypothesis) 绝大多数对象都是朝生夕灭的. 强分代假说(Strong Generational Hypothesis) 熬过越多次垃圾收集过程的对象就越难以消亡. 这两个假说奠定了多款常用垃圾收集器的设计原则: 收集器应该将Java堆划分出不同的区域, 然后将回收对象依据其年龄(对象熬过垃圾收集过程的次数)分配到不同的区域之中. — 如果一个区域中大多数对象都是朝生夕灭,难以熬过垃圾收集过程的话,那 么把它们集中放在一起,每次回收时只关注如何保留少量存活而不是去标记那些大量将要被回收的对象, 就能以较低代价回收到大量的空间;如果剩下的都是难以消亡的对象,那把它们集中放在一块, 虚拟机便可以使用较低的频率来回收这个区域,这就同时兼顾了垃圾收集的时间开销和内存的空间有效利用 一般会把Java堆划分为新生代(Young Generation)和老年代(Old Generation)两个区域, 在新生代中,每次垃圾收集时都有大批对象死去,而每次回收后存活的少量对象,将会逐步晋升到老年代中存放.\n当对新生代区域进行一次回收时,新生代中的对象完全有可能被老年代所引用,为了找出该区域的存活对象,需要在原有的GC Roots之外再额外遍历整个老年代中所有对象,这样才能确保结果准确. 反过来回收老年代时也需要引用整个新生代. 这样会对内存带来很大的性能负担. 但我们根据经验可以在原有但假说之上再添加一条:\n跨代引用假说(Intergenerational Reference Hypothesis) : 跨代引用相对于同代引用来说仅占极少数. 依据这条假说, 我们就不应再为了少量的跨代引用去扫描整个老年代,也不必浪费空间专门记录每一个对象是否存在及存在哪些跨代引用, 只需在新生代上建立一个全局的数据结构(称为 记忆集 Remembered Set), 这个结构把老年代划分为若干小块, 标识出老年代的哪一块内存会存在跨代引用. 当进行垃圾回收时, 只需要将存在跨代引用的这一小块内存中的对象加入GC Roots中即可. — 这种方法需要对象在改变引用关系时维护记录数据的正确性.\n几种垃圾回收的名词:\n部分收集(Partial GC) 新生代收集(Minor GC/Young GC) : 只针对新生代进行收集 老年代收集(Major GC/Old GC) : 只针对老年代进行收集 混合收集(Mixed GC) : 收集整个新生代和部分老年代. 目前只有G1收集器有这种行为. 整堆收集(Full GC): 收集整个Java堆和方法区 标记-清除算法 该算法分为标记和清除两个阶段\n标记出所有需要回收的对象, 标记完成后回收掉所有被标记的对象 也可以反过来, 标记时标记要保留的对象, 回收时回收没被标记过的对象.\n该算法简单, 后续的算法也大多基于此算法改进. 该算法的主要缺点有两个:\n执行效率不稳定, 如果Java堆中包含大量对象,并且大部分是需要回收的,这时就必须进行大量的标记和清除工作, 标记和清除过程的效率随对象数量增加而降低. 内存空间的碎片化问题, 清除后会造成大量不连续的内存碎片, 这会导致在分配较大对象时无法找到足够的连续内存而又一次触发垃圾回收 标记-复制算法 将可用内存按容量划分为大小相等的两块,每次只使用其中的一块,当这一块的内存用完时,将还存活的对象复制到另一块中去, 然后再将刚刚这块内存一次清除掉, 在复制对象时也可以解决空间碎片的问题.\n该算法的缺点是:\n如果内存中大多数对象都是存活的, 这种算法会产生大量内存间复制的开销. 内存空间缩减为了原来的一半, 空间浪费太多. 优化的半区复制分代策略 将新生代划分为一块较大的Eden空间和两块较小的Survivor空间, 每次分配内存只使用Eden和其中一块Survivor. 当发送垃圾搜集时, 将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上. 然后直接清理掉Eden和刚刚用到的Survivor空间.\nHotSpot虚拟机默认Eden和Survivor的大小比例为8:1. 每次新生代中可用内存空间为整个新生代容量的90%. 只有10%的空间(一个Survivor)被浪费了.\n但是我们无法确定一个Survivor空间(10%)能否满足存活对象所需占有的空间. 当Survivor空间不足以容纳一次Minor GC之后存活的对象时, 就需要依赖其他内存区域(大多是老年代)进行分配担保.\n标记-整理算法 标记-复制算法在对象存活率较高时需要进行较多的复制操作, 导致效率降低. 关键的是, 如果不想浪费50%的空间, 就需要有额外的空间进行分配担保, 以应对被使用的内存中所有对象都100%存活的极端情况. 所以这种算法不能在老年代中使用.\n标记-整理算法: 标记过程与之前一样, 后续的步骤不是直接对可回收对象进行整理, 而是让所有存活的对象都向内存空间一端移动, 然后直接清理掉边界以外的内存.\n标记-清除算法与标记-整理算法的本质差异在于前者是一种非移动式的回收算法, 而后者是移动式的.\n是否移动回收后的存活对象是一项优缺点并存的风险决策:\n如果移动存活对象,尤其是在老年代这种每次回收都有大量对象存活区域,移动存活对象并更新所有引用这些对象的地方将会是一种极为负重的操作,而且这种对象移动操作必须全程暂停用户应用程序才能进行 如果跟标记-清除算法不考虑移动和整理存活对象的话, 空间碎片化问题只能依赖更为复制的方案(譬如, 分区空闲分配链表)来解决,这样会影响应用程序的吞吐量. 基于以上两点, 是否移动对象都存在弊端, 移动则内存回收时会更复杂, 不移动则内存分配时会更复杂. 从垃圾收集的停顿时间来看, 不移动对象停顿时间会更短, 甚至可以不需要停顿,但是从整个程序的吞吐量来看,移动对象会更划算. HotSpot虚拟机里面关注吞吐量的ParallelScavenge收集器是基于标记-整理算法的, 而关注延迟的CM S收集器则是基于标记-清除算法的.\n经典垃圾收集器 GC-经典垃圾收集器\n","permalink":"https://www.liunaijie.top/coding/java/gc-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/","summary":"\u003ch1 id=\"垃圾回收算法\"\u003e垃圾回收算法\u003c/h1\u003e\n\u003cp\u003e从如何判定对象消亡的角度出发, 垃圾收集算法可以划分为“引用计数器垃圾收集”(Reference Counting GC)和“追踪式垃圾收集”(Tracing GC)两大类. 这两类也常被称作“直接垃圾收集“和”间接垃圾收集“. 但是引用计数式垃圾收集算法在主流Java虚拟机中均为涉及.\u003c/p\u003e","title":"GC-垃圾回收算法"},{"content":"垃圾收集器 垃圾收集需要完成三件事情:\n哪些地方的内存需要回收? 如何判断能否回收? 如何回收? 哪些内存需要回收 程序计数器, 虚拟机栈, 本地方法栈这3个区域随线程而生, 随线程而灭, 栈中的栈帧随着方法的进入和退出而有条不紊的执行着出栈和入栈操作. 每一个栈帧中分配多少内存基本上在类结构确定下来时就已知了. 因此这几个区域的内存分配和回收都具备确定性, 在这几个区域内不需要过多考虑如何回收的问题, 当方法结束或者线程结束时, 内存就跟着回收了.\n而Java堆和方法区这两个区域则有很显著的不确定性: 一个接口的多个实现类需要的内存可能会不一样, 一个方法所执行的不同条件分支所需要的内存也可能不一样, 只有处于运行期间, 我们才能知道程序究竟会创建哪些对象. 创建多少个对象, 这部分内存的分配和回收是动态的. 垃圾收集器所关注的正是这部分内存该如何管理.\n如何判断能否回收(如何判定对象已死) Java堆里面存放这几乎所有的对象实例, 垃圾收集器在对Java堆进行回收前, 需要先确定这对象哪些还“存活”, 哪些已经“死去”.\n引用计数算法(Reference Counting) 在对象中添加一个引用计数器, 每当有一个地方引用它时, 计数器值加1; 当引用失效时, 计数器值就减去1; 任何时刻计数器为0的对象就说不可能再被使用的. 虽然占用了一些额外的内存空间来进行计数, 但是原理简单, 判定效率高, 在大多数情况下都是一个不错的算法.\n在Java中没有选用引用计数法来管理内存, 主要原因是, 在例外情况下需要配合大量额外处理才能保证正确的工作, 譬如单纯的引用计数就难以解决对象之间的相互循环引用问题.\n例子\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class ReferenceCountingGC { public Object instance = null; public static void testGC () { ReferenceCountingGC objA = new ReferenceCountingGC(); ReferenceCountingGC ****objB = new ReferenceCountingGC(); objA.instance = objB; objB.instance = objA; objA = null; objB = null; System.gc(); } } 这个例子中: 对象objA和objB都有字段instance, 赋值令 objA.instance = objB及 objB.instance = objA. 除此之外, 这两个对象再无其他任何引用. 由于它们的引用计数器都不为零, 引用计数算法就无法回收它们.\nobjA.instance = objB. 这时objB的引用计数器加1; objB.instance = objA. 这时objA的引用计数器加1.\n当回收objA时, 由于计数器为1, 无法删除, 引用对象为B. 当回收objB时, 同样计数器为1, 也无法删除, 引用对象为A.\n可达性分析算法(Reachability Analysis) 当前主流的程序语言内存管理子系统都是通过可达性分析算法来判定对象是否存活的.\n基本思路是通过一系列称为GC Roots的根对象作为起始节点集, 从这些节点开始, 根据引用关系向下搜索, 搜索过程所走的路径称为“引用链”(Reference Chain), 如果某个对象到GC Roots间没有任何引用链相连, 用图论的话说就是GC Roots到这个对象不可达时, 证明这个对象是不可能再被使用的.\n这里的obj5, obj6, obj7直接虽然互有关联, 但是它们到GC Roots是不可达的, 因此它们将被判定为可回收的对象.\n固定可以作为GC Roots的对象包括以下几种:\n在虚拟机栈(栈帧的本地变量表)中引用的对象 譬如各个线程被调用的方法堆栈中使用到的参数, 局部变量, 临时变量等 在方法区中类静态属性引用的对象 譬如Java类的引用类型静态变量 在方法区中常量引用的对象 譬如字符串常量池里的引用 在本地方法栈中JNI引用的对象 通常所说的Native方法 Java虚拟机内部的引用 如基本数据类型对应的Class对象, 一些常驻的异常对象(NPE, OOM)等, 系统类加载器 所有被同步锁持有的对象 synchronized关键字 反应Java虚拟机内部情况的JMXBean, JVMTI中注册的回调, 本地代码缓存等. 除了这些固定的GC Roots集合以外, 根据用户所选用的垃圾收集器以及当前回收的内存区域不同, 还可以有其他对象临时性的加入, 共同构成完整的GC Roots集合.\n引用 无论是通过引用计数算法判定对象的引用数量, 还是通过可达性分析算法判定对象是否引用链可达, 判定对象是否存活都和“引用”离不开关系\n在JDK1.2之前, Java里面的引用定义是: 如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址, 就称该reference数据是代表某块内存, 某个对象的引用.\n一个对象在这种定义下只有“被引用”或“未被引用”两种状态, 当我们希望描述这样一类对象(当内存空间还足够时, 保留在内存之中, 如果内存空间在进行垃圾回收后仍然非常紧张, 那就可以抛弃这些对象)时就无能为力了.\n在JDK1.2之后, Java对引用的概念进行了扩充, 将引用分为强引用(Strongly Reference), 软引用(Soft Reference), 弱引用(Weak Reference)和虚引用(Phantom Reference)4种, 这4种引用强度依次逐渐减弱.\n强引用 是指在程序代码之中普遍存在的引用赋值. 任何情况下, 只要强引用关系还存在, 垃圾收集器就永远不会回收掉被引用的对象.\n软引用 描述一些还有用, 但非必须的对象. 只被软引用关联着的对象, 在系统将要发生内存溢出异常前, 会把这些对象列进回收范围之内进行第二次回收, 如果这次回收还没有足够的内存, 才会抛出内存溢出异常. 提供了SoftReference类来实现软引用.\n弱引用 用来描述那些非必须对象, 但是它的强度比软引用更弱一些, 被弱引用关联的对象只能生存到下一次垃圾收集发生为止. 当垃圾收集器开始工作时, 无论当前内存是否足够, 都会回收掉被弱引用关联的对象. 提供了WeakReference类实现来弱引用\n虚引用 也被称为“幽灵引用”或者“幻影引用”, 它是最弱的一种引用关系. 一个对象是否有虚引用的存在, 完全不会对其生存时间构成影响, 也无法通过虚引用来取得一个对象实例. 为一个对象设置虚引用关联的唯一目的是为了能在这个对象被收集器回收时收到一个系统通知. 提供了PhantomReference类来实现虚引用.\n二次标记 在可达性分析算法中判定为不可达的对象, 也不一定会真正被回收掉, 要真正回收, 至少要经历两次标记过程.\n如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链, 那它将会被第一次标记. 然后进行一次筛选, 筛选的条件是此对象是否有必要执行finalize方法, 假如对象没有覆盖finalize方法, 或者finalize方法已经被虚拟机调用过, 那么虚拟机将这两种情况都视为“没有必要执行” — finalize方法只会被系统自动调用一次\n如果这个对象被判定为有必要执行finalize方法, 那么虚拟机会去执行finalize方法, 如果对象在finalize方法中重新与引用链上的任何一个对象建立关联. 那么在第二次标记时它将被移出“即将回收”的集合; 如果没有重新建立连接, 那么它才会真正被回收. 回收方法区 方法区垃圾回收的“性价比”是比较低的, 而且《Java虚拟机规范》中提到过可以不要求虚拟机在方法区中实现垃圾回收. — 在Java堆中, 尤其是在新生代中, 对常规应用进行一次垃圾收集通常可以回收70%至99%的内存空间\n方法区的垃圾收集主要回收两部分内容:\n废弃的常量\n不在使用的类型\n判定一个类型是否属于“不再被使用的类”条件就比较苛刻,需要同时满足下面三个条件\n该类所有的实例都已经被回收 Java堆中不存在该类及其任何派生子类的实例 加载该类的类加载器已经被回收 这个条件通常很难达成, 除非是经过精心设计的可替换类加载器的场景 该类对于的java.lang.Class堆栈没有在任何地方被引用 无论在任何地方通过反射访问该类的方法 Java虚拟机被允许对满足上述三个条件的无用类进行回收.\n在大量使用反射, 动态代理, CGLib等字节码框架, 动态生成JSP以及OSGi这类频繁自定义类加载器的场景中, 通常都需要Java虚拟机具有类型卸载的能力, 以保证不会对方法区造成过大的内存压力.\n如何回收(垃圾收集算法) GC-垃圾回收算法\nGC-经典垃圾收集器\n","permalink":"https://www.liunaijie.top/coding/java/gc-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/","summary":"\u003ch1 id=\"垃圾收集器\"\u003e垃圾收集器\u003c/h1\u003e\n\u003cp\u003e垃圾收集需要完成三件事情:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e哪些地方的内存需要回收?\u003c/li\u003e\n\u003cli\u003e如何判断能否回收?\u003c/li\u003e\n\u003cli\u003e如何回收?\u003c/li\u003e\n\u003c/ol\u003e","title":"GC-垃圾收集器"},{"content":"Java OOM异常分析 OOM异常分析 Java堆溢出 Java堆内存的OutOfMemoryError异常是实际应用中最常见的内存溢出异常情况. 出现Java堆内存溢出时, 异常堆栈信息“java.lang.OutOfMemoryError”会跟随进一步提示“Java heap space“\n可能的原因有:\n内存泄漏\n内存溢出\n需要从代码上检查是否存在某些对象生命周期过长、持有状态时间过长、存储结构设计不合理的情况, 尽量减少程序运行期的内存消耗\n要处理这个内存区域的异常, 常规的处理方法是通过内存映像分析工具对Dump出来的堆转储快照进行分析.\n虚拟机栈和本地方法栈溢出 无论是由于栈帧太大还是虚拟机栈容量太小, 当新的栈帧内存无法分配的时候, HotSpot虚拟机抛出的都是StackOverflowError异常\n原因可能是:\n线程请求的栈深度大于虚拟机所运行的最大深度\n方法链的调用太长, 例如递归没有退出.\n方法区和运行时常量池溢出 在JDK7之后, 字符串常量池被移至Java堆之中, 出现OOM时, 报错信息与Java堆溢出一致, 错误信息提示“Java heap space“\n本机直接内存溢出 直接内存(Direct Memory)的容量大小可通过-XX:MaxDirectMemorySize参数来指定, 如果不去指定, 则默认与Java堆最大值(由-Xmx指定)一致.\n由直接内存导致的内存溢出, 一个明显的特征是在Heap Dump文件中不会看见有什么明显的异常情况.\n在程序直接或间接使用了直接内存时(典型的间接使用就是NIO), 可以重点考虑一下直接内存的原因.\n","permalink":"https://www.liunaijie.top/coding/java/java-oom%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90/","summary":"\u003ch1 id=\"java-oom异常分析\"\u003eJava OOM异常分析\u003c/h1\u003e\n\u003ch1 id=\"oom异常分析\"\u003eOOM异常分析\u003c/h1\u003e\n\u003ch2 id=\"java堆溢出\"\u003eJava堆溢出\u003c/h2\u003e\n\u003cp\u003eJava堆内存的OutOfMemoryError异常是实际应用中最常见的内存溢出异常情况. 出现Java堆内存溢出时, 异常堆栈信息“java.lang.OutOfMemoryError”会跟随进一步提示“\u003ccode\u003eJava heap space\u003c/code\u003e“\u003c/p\u003e\n\u003cp\u003e可能的原因有:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e内存泄漏\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e内存溢出\u003c/p\u003e\n\u003cp\u003e需要从代码上检查是否存在某些对象生命周期过长、持有状态时间过长、存储结构设计不合理的情况, 尽量减少程序运行期的内存消耗\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e要处理这个内存区域的异常, 常规的处理方法是通过内存映像分析工具对Dump出来的堆转储快照进行分析.\u003c/p\u003e","title":"Java OOM异常分析"},{"content":"Java对象创建 当Java虚拟机遇到一条字节码new指令时, 首先将去检查这个指令的参数能否在常量池中定位到一个类的符号引用, 并且检查这个符号引用代表的类是否被加载, 解析和初始化. 如果没有则会先执行相应的类加载过程.\n对象的创建过程大致分为以下四步:\n为新生对象分配内存 虚拟机将分配到的内存空间(不包括对象头)都初始化为零值 对对象进行必要的设置, 例如这个对象是哪个类的实例, 如果找到这个类的元数据信息, 对象的GC分代年龄等, 这些信息存放在对象的对象头之上 执行Class文件额init方法 为新生对象分配内存 在类加载检查通过后, 虚拟机将为新生对象分配内存. 对象所需内存的大小在类加载完成后便可完全确定, 为对象分配空间的任务实际上便等同于把一块确定大小的内存块从Java堆中划分出来.\n如何对内存进行划分也有两种方式:\n指针碰撞(Bump The Pointer)\nJava堆中内存是绝对规整的,所有被使用过的内存都被放在一边, 空闲的内存被放在另一边, 中间放着一个指针作为分界点的指示器, 分配内存时就可以将指针向空闲方向挪动一段与对象大小相等的距离. 这种内存分配方式称为指针碰撞\n空闲列表(Free List)\nJava堆中的内存并不是规整的, 已被使用的内存和空闲的内存相互交错在一起, 这种情况下无法使用指针碰撞来进行分配内存. 虚拟机维护一个列表, 记录哪些内存块是可用的, 在分配时从列表中找到一块足够大的空间划分给对象实例, 并更新列表上的记录, 这种分配方式称为空闲列表.\n选择哪种分配方式由Java堆是否规整决定, 而Java堆是否规整又由所采用的垃圾收集器是否带有空间压缩整理(Compact)的能力决定. — 当使用Serial, ParNew等带压缩整理过程的收集器时, 系统采用的分配算法是指针碰撞, 既简单又高效; 而当使用CMS这种基于清除(Sweep)算法的收集器时, 理论上就只能采用较为复杂的空闲列表来分配内存\n对象创建是一个非常频繁的行为, 所以修改指针位置在并发情况下不是线程安全的. 有两种方式来解决这个问题:\n对分配内存空间的动作进行同步处理 — 实际上虚拟机是采用CAS加重试的方式来保证更新操作的原子性 把内存分配的动作按照线程划分在不同空间之中进行, 即每个线程在Java堆中预先分配一小块内存, 称为本地线程分配缓冲(Thread Local Allocation Buffer TLAB), 哪个线程要分配内存, 就在哪个线程的本地缓冲区中分配. 当本地缓冲区用完后, 分配新的缓存区时才需要同步锁定. — 虚拟机是否使用TLAB, 可以通过-XX:+UseTLAB参数来开启, -XX:-UseTLAB 来关闭 将内存空间(不包含对象头)都初始化零值 内存分配完成后, 虚拟机将分配到的内存空间(不包含对象头)都初始化为零值, 如果使用了TLAB, 这项工作也可以提前至TLAB分配时顺便运行.这一步的操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用, 使程序能访问到这些字段的数据类型对应的零值.\n对对象进行必要的设置 Java虚拟机还要对对象进行必要的设置, 例如这个对象是哪个类的实例, 如果找到类的元数据信息, 对象的GC分代年龄等信息. 这些信息存放到对象的对象头(Object Header)之中.\n执行Class文件的init方法 上面工作都完成之后, 从虚拟机的视角来看, 一个新的对象以及产生类. 但是从Java程序看来, 对象创建才刚刚开始. Class文件的init方法还没有执行. 所有的字段都是默认的零值, 对象的其它资源和状态信息也还没有构造. 当执行完init方法后, 一个真正可用的对象才算完全被构造出来.\ninit方法在使用Java编译器时会自动生成, 如果由一些其它方式产生则不一定会有init方法.\n对象的内存布局 对象在堆内存中的存储布局可以划分为三个部分: 对象头(Header), 实例数据(Instance Data)和对齐填充(Padding).\n对象头 对象头部分包含两类信息:\n对象自身的运行时数据, 如哈希码, GC分代年龄, 锁状态信息, 线程持有的锁, 偏向线程ID, 偏向时间戳等.\n类型指针\n即对象指向它的类型元数据指针, Java虚拟机通过这个指针来确定该对象是哪个类的实例, 并不是所有虚拟机都在对象数据上保留类型指针, 也就是说查找对象的元数据并不一定经过对象本身.\n如果对象是Java数组, 对象头上还必须有一块用来记录数组长度的数据\n因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小, 但是如果数组的长度是不确定的, 将无法通过元数据的信息推断出数组的大小.\n实例数据 实例数据是对象真正存储的有效信息, 即我们在程序代码里面所定义的各种类型的字段内容. 这部分的存储顺序会受到虚拟机分配策略参数(-XX:FieldsAllocationStyle)和字段在Java源码中定义顺序的影响. HotSpot虚拟机默认的分配顺序longs/doubles、ints、shorts/chars、bytes/booleans、oops(Ordinary Object Pointers，OOPs)，从以上默认的分配策略中可以看到, 相同宽度的字段总是被分配到一起存放. 在满足这个前提条件的情况下, 在父类中定义的变量会出现在子类之前. 如果HotSpot虚拟机的 +XX:CompactFields参数值为true(默认就为true), 那子类之中较窄的变量也允许插入父类变量的空隙之中, 以节省出一点点空间.\n对齐填充 这并不是必然存在的, 没有特别的含义, 仅仅起着占位符的作用. 由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍, 换句话说就是任何对象的大小都必须是8字节的整数倍. 对象头部分已经被精心设计成正好是8字节的倍数(1倍或者 2倍), 因此, 如果对象实例数据部分没有对齐的话, 就需要通过对齐填充来补全.\n对象的访问定位 Java程序会通过栈上的reference数据来操作堆上的具体对象. 对象访问方式由虚拟机实现而定, 主流的访问方式有使用句柄和直接指针两种:\n使用句柄访问, Java堆中划分出一块内存来作为句柄池, reference中存储的就是对象的句柄地址, 而句柄中包含来对象实例数据与类型数据各自具体的地址信息\n访问对象时需要多一次间接访问到句柄池的开销, 但是在对象被移动时只会改变句柄中的实例数据指针, reference本身不需要被修改.\nShenandoah收集器采用句柄访问的方式\n使用直接指针访问, reference中对象的直接就是对象地址. 当访问对象本身时, 不需要多一次间接访问的开销\n这时Java堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息\nHotSpot虚拟机中主要使用直接访问的方式\n","permalink":"https://www.liunaijie.top/coding/java/jvm%E4%B8%ADjava%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/","summary":"\u003ch1 id=\"java对象创建\"\u003eJava对象创建\u003c/h1\u003e\n\u003cp\u003e当Java虚拟机遇到一条字节码new指令时, 首先将去检查这个指令的参数能否在常量池中定位到一个类的符号引用, 并且检查这个符号引用代表的类是否被加载, 解析和初始化. 如果没有则会先执行相应的类加载过程.\u003c/p\u003e\n\u003cp\u003e对象的创建过程大致分为以下四步:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e为新生对象分配内存\u003c/li\u003e\n\u003cli\u003e虚拟机将分配到的内存空间(不包括对象头)都初始化为零值\u003c/li\u003e\n\u003cli\u003e对对象进行必要的设置, 例如这个对象是哪个类的实例, 如果找到这个类的元数据信息, 对象的GC分代年龄等, 这些信息存放在对象的对象头之上\u003c/li\u003e\n\u003cli\u003e执行Class文件额init方法\u003c/li\u003e\n\u003c/ol\u003e","title":"JVM中Java对象的创建、内存布局、访问定位"},{"content":"JVM运行时数据区域 Java虚拟机所管理的内存包括以下几个运行时数据区域：\n程序计数器(Program Counter Register) 所占的内存空间比较小，存储的是当前线程所执行的字节码行号指示器。\n字节码解释器工作时是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。\n程序计数器是线程隔离的。因为Java虚拟机的多线程是通过线程轮流切换，分配处理器执行时间的方式来实现，那么在一个确定的时刻，一个处理器(一个内核)都只会执行一条线程中的指令。所以为了在线程切换后能恢复到正确的执行位置，每个线程都需要维护自己独立的程序计数器。\n各条线程直接的计数器互不影响，独立存储。我们称这类内存区域为“线程私有”的内存。\n如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地(Native)方法，这个计数器值则应为空(Undefined)。\nJava虚拟机栈(Java Virtual Machine Stack) Java虚拟机栈与程序计数器一样，都是线程私有的，声明周期与线程相同。\n虚拟机栈描述的是Java方法执行的线程内存模型：每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧(Stack Frame)用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n局部变量表存放了编译期可知的各种Java虚拟机基本数据类型、对象引用(reference类型)和returnAddress类型(指向了一条字节码指令的地址)。这些数据类型在局部变量表中的存储空间以局部变量槽(Slot)来表示，其中long和double类型会占用两个变量槽，其他的数据类型只占用一个。注意，这里的槽大小与真正使用的内存空间无关(1个变量槽可能占用32个比特或者64个比特，这个是由虚拟机来自行决定的)。局部变量表所需要的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。\n异常情况 Java虚拟机栈规定了两类异常情况:\n如果线程请求的栈深度大于虚拟机所运行的深度,将抛出StackOverflowError异常 如果Java虚拟机栈容量可以动态扩展,当栈扩展时无法申请到足够的内存会抛出OutOfMemoryError异常 — HotSpot虚拟机的栈容量是不可用动态扩展的,如果申请成功了就不会有OOM;如果申请时就失败,会出现OOM异常. 本地方法栈(Native Method Stack) 本地方法栈与虚拟机栈的作用类似,区别是虚拟机栈为虚拟机执行Java方法(字节码)服务,而本地方法栈则是为虚拟机使用到的本地方法服务.\n《Java虚拟机规范》对本地方法栈中方法使用的语言、使用方式与数据结构并没有任何强制规 定，因此具体的虚拟机可以根据需要自由实现它 — Hot-Spot虚拟机直接就把本地方法栈和虚拟机栈合二为一。\n与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出StackOverflowError和OutOfMemoryError异常。\nJava堆(Java Heap) Java堆是虚拟机所管理的内存中最大的一块. Java堆是被所有线程共享的一块内存区域, 在虚拟机启动时创建.\n这个内存区域的唯一目的是存放对象实例, Java世界里“几乎”所有的对象实例都在这里分配内存. — 栈上分配, 标量替换等优化手段可以不在堆上分配.\nJava堆是垃圾收集器管理的内存区域.\n垃圾收集器实现\n根据《Java虚拟机规范》的规定, Java堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的, 这点就像我们用磁盘空间去存储文件一样, 并不要求每个文件都连续存放. 但对于大对象(典型的如数组对象), 多数虚拟机实现出于实现简单、存储高效的考虑, 很可能会要求连续的内存空间. Java堆既可以被实现成固定大小的, 也可以是可扩展的, 不过当前主流的Java虚拟机都是按照可扩展来实现的(通过参数-Xmx和-Xms设定).\n如果在Java堆中没有内存完成实例分配, 并且堆也无法再扩展时, Java虚拟机将会抛出OutOfMemoryError异常.\n方法区(Method Area) 方法区与Java堆一样, 是各个线程共享的内存区域, 它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据.\n方法区不需要连续的内存, 可以选择固定大小或者可扩展, 甚至可以选择不实现垃圾收集. 方法区的内存回收目标主要是针对常量池的回收和堆类型的卸载.\n如果方法区无法满足新的内存分配需求时,将抛出OutOfMemoryError异常.\n运行时常量池(Runtime Constant Pool) 运行时常量池是方法区的一部分. Class文件中除了有类的版本, 字段, 方法, 接口等描述信息外, 还有一项信息是常量池表(Constant Pool Table), 用于存放编译期生成的各种字面量和符号引用, 这部分内容在类加载后存放到方法区的运行时常量池中.\n运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性, Java语言并不要求常量一定只有编译期才能产生. 也就是说, 并非预置入Class文件中常量池的内容才能进入方法区运行时常量池, 运行期间也可以将新的常量放入池中. — String类的intern方法, 此方法是判断常量池中是否存在此字符串, 如果不存在则将其放入常量池中, 如果存在则取常量池的地址. 此方法的返回结果为相同的字符串, 并且做了一次将字符串放入常量池中的操作, 如果常量池中存在该字符串, 返回的相同字符串的地址使用的是常量池中的地址.\n当常量池无法再申请到内存时会抛出OutOfMemoryError异常.\n直接内存(Direct Memory) 直接内存并不是虚拟机运行时数据区的一部分, 也不是《Java虚拟机规范》中定义的内存区域.\n直接内存的分配不会受到Java堆大小的限制, 但是会受到本机总内存大小以及处理器寻址空间的限制.\n","permalink":"https://www.liunaijie.top/coding/java/jvm%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/","summary":"\u003ch1 id=\"jvm运行时数据区域\"\u003eJVM运行时数据区域\u003c/h1\u003e\n\u003cp\u003eJava虚拟机所管理的内存包括以下几个运行时数据区域：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/20211121102013.png\" alt=\"\"\u003e\u003c/p\u003e","title":"JVM运行时数据区域"},{"content":"这篇文章记录下使用Git时的一些进阶操作, 命令.\n合并多个Commit 在开发过程中, 有时代码的测试无法在本地进行, 需要提交代码, 而测试流程又可能会反复多次进行, 那么就有可能在最后完成时提交记录中出现很多个提交记录. 我们可以将这些提交记录进行合并, 从而可以使得提交记录变得更加感觉, 整洁, 可追踪.\nIDE合并 我当前使用的是IDEA, 在编辑器里的Git页面里就可以任意选择commit进行合并. 选择所需要合并的commit后, 右键选择Squash Commits..., 然后在弹出页面中编辑提交信息后, 就可以完成合并了 命令行合并 我们也可以在命令行中进行合并, 使用rebase命令 具体步骤为: 获取要合并的commit的前一个commit id 运行`git rebase -i \u0026lt;pre_commit_id\u0026gt; 在弹出的页面中, 对我们所需要合并的commit, 修改前面的信息, 将pick修改为s或squash ，保存退出 保存退出后, 进入修改commit信息的页面, 修改为最终要记录的commit信息, 保存退出 拆分commit 有时候在一个commit内掺杂了多个不同模块的改动, 希望将一次commit提交信息中的多个文件改动提交为不同的commit, 这时就需要用到拆分commit 首先获取到要拆分的commit的前一个commit id\n1 git log --oneline 获取到前一个commit之后, 运行\n1 git rebase -i \u0026lt;pre_commit_id\u0026gt; 在显示页面将需要拆分的commit, 前面的pick修改为e (即 edit) 然后保存退出 执行\n1 git reset HEAD~ 执行完上面的命令就可以看到我们要拆分的commit中的信息已经被添加到修改区. 重新将每个文件分别进行提交即可\n将所有文件提交完成后, 执行\n1 git rebase --continue Hook文件 在.git/hook下有一些文件, 这些文件会在相应的动作执行前运行, 例如当我们需要我们的代码进行格式化之后才能提交, 可以新建pre-commit文件 里面的内容为: 这里给出的例子为: 使用gradle的spotless进行代码格式检查, 当代码格式不满足时, 会自动进行格式化并且进行提交\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ./gradlew spotlessCheck result=$? if [[ \u0026#34;$result\u0026#34; = 0 ]] ; then exit 0 else echo \u0026#34; .... will auto update code style and commit it .... \u0026#34; ./gradlew spotlessApply git add . exit 0 fi 也可以新建commit-msg文件, 在这个文件中对提交的commit信息格式进行检查.\n注意, 这些文件都需要给予可执行权限.\n","permalink":"https://www.liunaijie.top/publish/git%E7%9A%84%E4%B8%80%E4%BA%9B%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C/","summary":"\u003cp\u003e这篇文章记录下使用\u003ccode\u003eGit\u003c/code\u003e时的一些进阶操作, 命令.\u003c/p\u003e\n\u003ch1 id=\"合并多个commit\"\u003e合并多个Commit\u003c/h1\u003e\n\u003cp\u003e在开发过程中, 有时代码的测试无法在本地进行, 需要提交代码, 而测试流程又可能会反复多次进行, 那么就有可能在最后完成时提交记录中出现很多个提交记录.\n我们可以将这些提交记录进行合并, 从而可以使得提交记录变得更加感觉, 整洁, 可追踪.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIDE合并\n我当前使用的是\u003ccode\u003eIDEA\u003c/code\u003e, 在编辑器里的\u003ccode\u003eGit\u003c/code\u003e页面里就可以任意选择\u003ccode\u003ecommit\u003c/code\u003e进行合并.\n选择所需要合并的\u003ccode\u003ecommit\u003c/code\u003e后, 右键选择\u003ccode\u003eSquash Commits...\u003c/code\u003e, 然后在弹出页面中编辑提交信息后, 就可以完成合并了\u003c/li\u003e\n\u003cli\u003e命令行合并\n我们也可以在命令行中进行合并, 使用\u003ccode\u003erebase\u003c/code\u003e命令\n具体步骤为:\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e获取要合并的\u003ccode\u003ecommit\u003c/code\u003e的前一个\u003ccode\u003ecommit id\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e运行`git rebase -i \u0026lt;pre_commit_id\u0026gt;\u003c/li\u003e\n\u003cli\u003e在弹出的页面中, 对我们所需要合并的\u003ccode\u003ecommit\u003c/code\u003e, 修改前面的信息, 将\u003ccode\u003epick\u003c/code\u003e修改为\u003ccode\u003es\u003c/code\u003e或\u003ccode\u003esquash\u003c/code\u003e ，保存退出\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/Untitled_1.png\" alt=\"https://raw.githubusercontent.com/liunaijie/images/master/Untitled_1.png\"\u003e\u003c/li\u003e\n\u003cli\u003e保存退出后, 进入修改\u003ccode\u003ecommit\u003c/code\u003e信息的页面, 修改为最终要记录的\u003ccode\u003ecommit\u003c/code\u003e信息, 保存退出\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"拆分commit\"\u003e拆分commit\u003c/h1\u003e\n\u003cp\u003e有时候在一个commit内掺杂了多个不同模块的改动, 希望将一次commit提交信息中的多个文件改动提交为不同的commit, 这时就需要用到拆分commit\n首先获取到要拆分的commit的前一个commit id\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit log --oneline\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e获取到前一个commit之后, 运行\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit rebase -i \u0026lt;pre_commit_id\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e在显示页面将需要拆分的commit, 前面的\u003ccode\u003epick\u003c/code\u003e修改为\u003ccode\u003ee\u003c/code\u003e (即 edit)\n然后保存退出\n执行\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit reset HEAD~\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e执行完上面的命令就可以看到我们要拆分的commit中的信息已经被添加到修改区.\n重新将每个文件分别进行提交即可\u003c/p\u003e","title":"如何将多个git commit合并成一个"},{"content":"前言 这篇文章记录一下ClickHouse的几种原生引擎的数据写入过程\nMergeTree MergeTree是ClickHouse的最基础引擎，其它引擎都是基于这个引擎来进行扩展的，所以先来看一下这个引擎的写入过程。\n先看一下要创建这个引擎的DDL语句：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 CREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster] ( name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1] [TTL expr1], name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2] [TTL expr2], ... INDEX index_name1 expr1 TYPE type1(...) GRANULARITY value1, INDEX index_name2 expr2 TYPE type2(...) GRANULARITY value2 ) ENGINE = MergeTree() ORDER BY expr [PARTITION BY expr] [PRIMARY KEY expr] [SAMPLE BY expr] [TTL expr [DELETE|TO DISK \u0026#39;xxx\u0026#39;|TO VOLUME \u0026#39;xxx\u0026#39;], ...] [SETTINGS name=value, ...] 首先 ENGINE = MergeTree()表明这个表的引擎\n[ON CLUSTER cluster] 添加这一句可以在集群名为cluster的集群上创建这张表，而不需要去每个节点都创建一遍 ORDER BY expr 声明主键，ClickHouse的主键是可以重复的。数据存储会按照这个进行排序 PARTITION BY 分区字段，不同的数据会存储在不同的文件夹下 PRIMARY KEY expr 设置主键，一般情况下使用ORDER BY来完成，如果同时出现ORDER BY与PRIMARY KEY，primary key需要是order by的子集 数据存储 ClickHouse的数据存储位置由配置文件config.xml中指定，默认路径为/var/clickhouse/data/\n在这个路径下首先按照数据库名称，表名称进行区分。在一个表下的又会存在多个分区文件夹。\n分区文件夹命名规则 分区文件夹的名称格式长这样：\nPartitionId_MinBlockNum_MaxBlockNum_Level PartitionId\nNone\n当未指定分区字段时，会生成一个all的文件夹，所有数据都在这个文件夹下\nNumber\n当分区字段为数字时，会使用数字作为文件夹的名称\nDate\n当分区字段为日期时，将会格式化为yyyyMMdd格式\nOthers\n其它情况会将分区值做一次哈希，然后使用哈希值作为文件夹名称\nBlockNum\nClickHouse会在每个表上维护一个全局递增的数字，每创建一个文件夹都会更新这个数字，新创建文件夹的Min和Max都是相同的数字，在后续merge的过程中，会取两个文件夹block num的最大最小值作为新文件夹的min，max。\nLevel\n表示这个文件夹被merge的次数，每被merge一次，这个数字都会加1.\n举个🌰：\n每个文件夹是否是active的状态则被保存在system.parts表中\n数据存储结构 看完外层文件夹被合并的过程，再看一下文件夹内部的文件存储\n在单个文件夹内主要包含这几个文件：\nprimary.idx\n主键索引\n[Column].mrk2\n[Column].bin\n由于ClickHouse采用了列式存储，所以每一列都会有mrk2, bin两个文件\nbin文件是存储的被压缩过的真实数据文件，mrk2文件中保存了主键索引与文件块之间的关系\ncount.txt\ncolumnar.txt\n这两个文件都是明文存储的，分别保存了在这个文件夹下的记录数量以及表结构\n每次写入都会生成这些文件，即便是一次一条记录，所以clickhouse的写入最好还是批量写，在实时场景下做一下缓存后再进行写入。不然每次都会产生这些文件，造成大量的IO操作，后续也需要大量的merge过程，并且在查询时也会有一定的影响，对查询的影响在查询的部分再进行细说。\n由于clickhouse在每次插入时数据都是直接落盘的，不会有log或者内存缓存再写入的过程。从这一地方也可以看出不支持事务。\n在数据写入时不会进行一遍主键校验，所以主键是会重复的。为了解决这个文件，clickhouse有一个ReplacingMergeTree引擎来实现主键去重，但也只是一定程度上解决了主键重复。\n其他的若干种引擎，都是基于MergeTree引擎的合并过程做了一些修改,扩展。\nReplacingMergeTree 可以在一定程度上解决主键重复的问题，异步完成的，有一定的时间延迟。\n例如我们的DDL以及几条数据如下：\n1 2 3 4 5 6 7 8 CREATE TABLE table_001 ( id UInt32, name String, age UInt8 ) ENGINE = ReplacingMergeTree() ORDER BY id PARTITION BY age id\tname\tage 1\tname1\t18 1\tname2\t18 2\tname3\t19 这3条数据分3批进行插入，3条数据都完成写入后，文件夹及数据长这样\n文件夹：\n18_1_1_0 18_2_2_0 19_3_3_0 数据：\nid\tname\tage 1\tname1\t18 1\tname2\t18 2\tname3\t19 这不是跟之前一样吗，并没有数据去重。\n是的，在数据刚刚写入的时候数据确实是这样的，数据去重发生在文件夹merge的过程中。\n我们可以手动执行命令来触发文件夹合并optimize table db_name.table_name，或者等待几分钟后clickhouse也会自动执行merge过程。\n在文件夹合并之后的文件夹及数据是这样：\n文件夹\n18_1_2_1 19_3_3_0 数据\nid\tname\tage 1\tname1\t18 2 name3 19 这个时候在相同分区下的主键重复数据就被删掉了一条。这里需要注意的是，如果主键分布在不同的分区下，那么相同主键的数据是不会被删除的（因为它们不会被merge到一个文件夹下）。所以使用这个引擎并不能保证数据的唯一性，只能在一定情况下保证数据的唯一性。\n","permalink":"https://www.liunaijie.top/coding/big_data/clickhouse/clickhouse1-%E5%86%99%E5%85%A5%E8%BF%87%E7%A8%8B/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e这篇文章记录一下ClickHouse的几种原生引擎的数据写入过程\u003c/p\u003e\n\u003ch1 id=\"mergetree\"\u003eMergeTree\u003c/h1\u003e\n\u003cp\u003eMergeTree是ClickHouse的最基础引擎，其它引擎都是基于这个引擎来进行扩展的，所以先来看一下这个引擎的写入过程。\u003c/p\u003e\n\u003cp\u003e先看一下要创建这个引擎的DDL语句：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eIF\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNOT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eEXISTS\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003edb\u003c/span\u003e\u003cspan class=\"p\"\u003e.]\u003c/span\u003e\u003cspan class=\"k\"\u003etable_name\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eON\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eCLUSTER\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ecluster\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003ename1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etype1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eDEFAULT\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eMATERIALIZED\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"k\"\u003eALIAS\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTTL\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr1\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003ename2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003etype2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eDEFAULT\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eMATERIALIZED\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"k\"\u003eALIAS\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTTL\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr2\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eINDEX\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eindex_name1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTYPE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etype1\u003c/span\u003e\u003cspan class=\"p\"\u003e(...)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eGRANULARITY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evalue1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eINDEX\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eindex_name2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTYPE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etype2\u003c/span\u003e\u003cspan class=\"p\"\u003e(...)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eGRANULARITY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evalue2\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eENGINE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMergeTree\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eORDER\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eBY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ePARTITION\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eBY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ePRIMARY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eKEY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSAMPLE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eBY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eTTL\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eexpr\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003eDELETE\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"k\"\u003eTO\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDISK\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;xxx\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"k\"\u003eTO\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eVOLUME\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;xxx\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e...]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eSETTINGS\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e...]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"ClickHouse(1)-写入过程"},{"content":"Dependency-reduced-pom.xml*\n这个文件会在使用maven-shade-plugin插件时生成，可以修改配置来避免产生这个文件\n1 2 3 4 5 6 7 8 \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-shade-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.4.3\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;createDependencyReducedPom\u0026gt;false\u0026lt;/createDependencyReducedPom\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; -U 强制更新\n打包时将依赖同时打入jar包内\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;artifactId\u0026gt;maven-assembly-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;descriptorRefs\u0026gt; \u0026lt;descriptorRef\u0026gt;jar-with-dependencies\u0026lt;/descriptorRef\u0026gt; \u0026lt;/descriptorRefs\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;make-assembly\u0026lt;/id\u0026gt; \u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;single\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; ","permalink":"https://www.liunaijie.top/coding/devops/maven/","summary":"\u003cp\u003e\u003cem\u003eDependency-reduced-pom.xml\u003c/em\u003e*\u003c/p\u003e\n\u003cp\u003e这个文件会在使用maven-shade-plugin插件时生成，可以修改配置来避免产生这个文件\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;plugin\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \u003cspan class=\"nt\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.apache.maven.plugins\u003cspan class=\"nt\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003emaven-shade-plugin\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \u003cspan class=\"nt\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e2.4.3\u003cspan class=\"nt\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \u003cspan class=\"nt\"\u003e\u0026lt;configuration\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nt\"\u003e\u0026lt;createDependencyReducedPom\u0026gt;\u003c/span\u003efalse\u003cspan class=\"nt\"\u003e\u0026lt;/createDependencyReducedPom\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \u003cspan class=\"nt\"\u003e\u0026lt;/configuration\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;/plugin\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e-U 强制更新\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e打包时将依赖同时打入jar包内\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;plugins\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;plugin\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003emaven-assembly-plugin\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"nt\"\u003e\u0026lt;configuration\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nt\"\u003e\u0026lt;descriptorRefs\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                  \u003cspan class=\"nt\"\u003e\u0026lt;descriptorRef\u0026gt;\u003c/span\u003ejar-with-dependencies\u003cspan class=\"nt\"\u003e\u0026lt;/descriptorRef\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nt\"\u003e\u0026lt;/descriptorRefs\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"nt\"\u003e\u0026lt;/configuration\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"nt\"\u003e\u0026lt;executions\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nt\"\u003e\u0026lt;execution\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                  \u003cspan class=\"nt\"\u003e\u0026lt;id\u0026gt;\u003c/span\u003emake-assembly\u003cspan class=\"nt\"\u003e\u0026lt;/id\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                  \u003cspan class=\"nt\"\u003e\u0026lt;phase\u0026gt;\u003c/span\u003epackage\u003cspan class=\"nt\"\u003e\u0026lt;/phase\u0026gt;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                  \u003cspan class=\"nt\"\u003e\u0026lt;goals\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                      \u003cspan class=\"nt\"\u003e\u0026lt;goal\u0026gt;\u003c/span\u003esingle\u003cspan class=\"nt\"\u003e\u0026lt;/goal\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                  \u003cspan class=\"nt\"\u003e\u0026lt;/goals\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nt\"\u003e\u0026lt;/execution\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"nt\"\u003e\u0026lt;/executions\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;/plugin\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;/plugins\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"maven"},{"content":"最近有一个项目使用到了sbt作为构建工具，在电脑上即便有科学工具，下载依赖也是巨慢无比，有时候一天都下不下来。所以这篇文章就记录一下如何对sbt进行加速。\n编辑配置文件，添加国内源：\n1 vim ~/.sbt/repository 将这个文件的信息修改为：\n[repositories] local aliyun-ivy: http://maven.aliyun.com/nexus/content/groups/public, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext] aliyun-maven: http://maven.aliyun.com/nexus/content/groups/public typesafe: http://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext], bootOnly typesafe2: http://repo.typesafe.com/typesafe/releases/ sbt-plugin: http://repo.scala-sbt.org/scalasbt/sbt-plugin-releases/ sonatype: http://oss.sonatype.org/content/repositories/snapshots uk_maven: http://uk.maven.org/maven2/ repo2: http://repo2.maven.org/maven2/ 更改IDE配置\n我使用的是IDEA，找到sbt配置项，在VM parameters中填入：\n-Dsbt.override.build.repos=true -Dsbt.repository.config=~/.sbt/repositories ","permalink":"https://www.liunaijie.top/coding/devops/sbt%E5%8A%A0%E9%80%9F/","summary":"\u003cp\u003e最近有一个项目使用到了sbt作为构建工具，在电脑上即便有科学工具，下载依赖也是巨慢无比，有时候一天都下不下来。所以这篇文章就记录一下如何对sbt进行加速。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e编辑配置文件，添加国内源：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003evim ~/.sbt/repository\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e将这个文件的信息修改为：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[repositories]\n\tlocal\n\taliyun-ivy: http://maven.aliyun.com/nexus/content/groups/public, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]\n\taliyun-maven: http://maven.aliyun.com/nexus/content/groups/public\n\ttypesafe: http://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext], bootOnly\n\ttypesafe2: http://repo.typesafe.com/typesafe/releases/\n\tsbt-plugin: http://repo.scala-sbt.org/scalasbt/sbt-plugin-releases/\n\tsonatype: http://oss.sonatype.org/content/repositories/snapshots\n\tuk_maven: http://uk.maven.org/maven2/\n\trepo2: http://repo2.maven.org/maven2/\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e更改IDE配置\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/20210123083342.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e我使用的是IDEA，找到sbt配置项，在\u003ccode\u003eVM parameters\u003c/code\u003e中填入：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e-Dsbt.override.build.repos=true\n-Dsbt.repository.config=~/.sbt/repositories\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"SBT加速"},{"content":"题目描述 将IPV4的地址转换成int值，然后再将其转换回来\n解题思路 IPV4的格式为 [a,b,c,d]，并且值的范围是0~255.\n255是2^8^-1，int的长度为32位，正好可以将4位ip拼接成一个int值。前8位是第一个ip地址，第二个8位是第二个ip地址，第三个8位存放第三个ip地址，第四个8位存放第四个ip地址。\n这里就需要使用位移操作符来进行操作，第一个ip地址向左移24位，第二个ip地址左移16位，第三个ip地址左移8位，第四个ip地址不需要移位，然后将其相加起来就得到最终的int值。\n将int值转换位ip地址时需要注意，由于int的第一位表示正负，所以这里需要使用无符号右移\u0026gt;\u0026gt;\u0026gt;\n第一个ip地址转换回来时，直接无符号右移24位即可\n第二个ip地址转换回来时，需要先左移8位后去除掉第一个ip地址，然后再无符号右移24位\n第三个ip地址转换回来时，需要先左移16位后去掉第一个和第二个ip地址，然后再无符号右移24位\n代码实现:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public static void main(String[] args) { int[] ips = {255, 2, 120, 250}; int one = ips[0] \u0026lt;\u0026lt; 24; int two = ips[1] \u0026lt;\u0026lt; 16; int three = ips[2] \u0026lt;\u0026lt; 8; int four = ips[3]; int res = one + two + three + four; System.out.println(Integer.toBinaryString(res)); int convertOne = res \u0026gt;\u0026gt;\u0026gt; 24; int convertTwo = res \u0026lt;\u0026lt; 8 \u0026gt;\u0026gt;\u0026gt; 24; int convertThree = res \u0026lt;\u0026lt; 16 \u0026gt;\u0026gt;\u0026gt; 24; int convertFour = res \u0026lt;\u0026lt; 24 \u0026gt;\u0026gt;\u0026gt; 24; System.out.println(convertOne); System.out.println(convertTwo); System.out.println(convertThree); System.out.println(convertFour); } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/ipv4%E4%B8%8Eint%E7%9A%84%E8%BD%AC%E6%8D%A2/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e将IPV4的地址转换成int值，然后再将其转换回来\u003c/p\u003e\u003c/blockquote\u003e","title":"IPV4与Int的转换"},{"content":"kylin是什么 在进行数据分析时，随着数据量的提升，处理时间基本也是线性增长。kylin是一个预处理框架，它将一些预先定义的复杂分析预先完成并进行存储，预处理完成后，再次进行请求时，kylin可以进行亚秒级别的响应。\n它是一个分析型数据仓库（也是OLAP引擎），为Hadoop提供标准SQL支持大部分查询功能\n可以接入kafka等实时流处理数据，从而可以在妙极延迟下进行实时数据等多维分析。\n处理引擎可以选用MapReduce和Spark。\n于BI工具无缝整合，可以接入Tableau，PowerBI/Excel，SuperSet等可视化分析工具。\n我总结出来的观点呢就是：当我们的数据量非常大之后，每次查询都需要花费很多时间，这时我们将查询结果缓存起来，后面查询从这个缓存里面查询速度就会非常快。在kylin中，将结果缓存到hbase表中。\n这里需要预先设置一些维度和度量，所以说适合一些固定报表等一些维度固定的场景，如果说维度的组合太多或者变化很频繁，可能不是很适用。\nkylin中的一些概念 kylin中需要设置维度和度量\n维度和度量这些名词在我之前没有接触到，所以这里我解释一下这两个名词的意思：\n维度：我们对数据进行分析时要从各个角度来进行分析，这个时候每一个角度，在sql中的group by字段就是一个维度。\n度量：当我们有了维度之后，我们肯定是要分析某一个值的，在sql中 select 的这个字段，这个值就是度量。\n举个例子：分析这个班级下男生女生的平均身高是多少，这个时候的sql语句大致是这样写：SELECT avg(height),sex FROM student WHERE class = ? GROUP BY sex 。这条sql语句得到的结果就是，这个班级下男生女生的平均身高。这里的维度就是性别，度量就是身高。\ndatasource,model,cube datasource: 顾名思义，就是数据源，由于kylin是部署在hadoop之上的，所以我们存储的hive表，在这里都能查询到，我们选择一个表导入即可。\nmodel: 分析的一个模型，选择事实表，维度表。以及设置它们的关联关系，选择要分析的维度和度量。\n​\t还可以添加filter条件，只拿到我们想要的数据\n​\t这里还有一个设置：data partition field，这个字段是后面cube 构建时查询源数据的时间字段。\ncube：从model中出来的一个更加具体的内容，这个是最终会进行构建的模块，cube中有一些设置\n更新设置\n这里经常会更改的值有两个：Auto Merge Thresholds 和 Volatile Range。\n首先来说明一下kylin中cube构建的一些限制：例如当我们构建了一个起止时间为[7.1-7.4)这一个时间的cube之后，我们无法进行构建[7.2-7.5)这个区间的cube。因为中间有重叠区域。但是这种情况下我们可以构建[7.1-7.5)这个时间范围内的cube。\n构建出来的数据会存储到hive中，它将每一个时间范围存储为一张表，当我们构建的区间多了之后，用于存储的表也会变多，而我们每个时间范围可能会很小，kylin为了节省存储空间，所以将它们整合成一张表。\nauto merge thresholds\n用于设置当我们的小表超过多少后会合并成一张大表。\n例如我们每天构建一个cube，每次的时间范围都是[今天，明天)，auto merge thresholds设置为7,28.\n则当7天之后，之前的cube会合并成一周大小的间隔，当28天之后会合并成一个更大的时间范围，合并检测是从大到小来进行检测的，如果检测到有满足28天的则会先进行合并，之后在进行检测7天。\nvolatile range\n这个是意思是，设置一个offset，这个时间内的数据不会被计算到auto merge范围内，auto merge setting以上面的为例，如果 volatile range设置为2，则9天后会将 9～2这一周的数据合并成一周大小。\n高级设置\n这个部分是对cube进行优化\n当我们有很多的维度，维度组合之后就会有2^n^中组合方式，很容易产生组合爆炸的情况。我们需要对其进行剪枝。\n这里拿一个选项来举例：\nHierarchy Dimensions: 层级维度，例如 “国家” -\u0026gt; “省” -\u0026gt; “市” 是一个层级；不符合此层级关系的 cuboid 可以被跳过计算。\njob 构建job才会真正的去数据源拉取数据。构建完成后会将结果存储到hive表中。\n可以在ui页面上的Monitor栏上看到我们之前构建的cube。\nAPI kylin对外暴漏了一些api，我们可以通过调用api来完成一些自动化的构建流程。\n有一个需要注意的点是，通过api构建cube时，这个cube的状态必须时ready的，也就是说我们必须在ui上提前构建一次。\n总结 kylin是一个大数据量分析时进行一些固定维度的提前预计算，对于一些维度不固定的情况还是不太适用。\n它的原理是将数据进行计算后缓存，后面再需要这个数据时，可以不再去源数据进行分析，而是从kylin里面获取，这样就可以节省时间。\n","permalink":"https://www.liunaijie.top/coding/big_data/kylin/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E4%B9%8B-kylin/","summary":"\u003ch1 id=\"kylin是什么\"\u003ekylin是什么\u003c/h1\u003e\n\u003cp\u003e在进行数据分析时，随着数据量的提升，处理时间基本也是线性增长。kylin是一个预处理框架，它将一些预先定义的复杂分析预先完成并进行存储，预处理完成后，再次进行请求时，kylin可以进行亚秒级别的响应。\u003c/p\u003e\n\u003cp\u003e它是一个分析型数据仓库（也是OLAP引擎），为Hadoop提供标准SQL支持大部分查询功能\u003c/p\u003e\n\u003cp\u003e可以接入kafka等实时流处理数据，从而可以在妙极延迟下进行实时数据等多维分析。\u003c/p\u003e\n\u003cp\u003e处理引擎可以选用MapReduce和Spark。\u003c/p\u003e\n\u003cp\u003e于BI工具无缝整合，可以接入Tableau，PowerBI/Excel，SuperSet等可视化分析工具。\u003c/p\u003e\n\u003cp\u003e我总结出来的观点呢就是：当我们的数据量非常大之后，每次查询都需要花费很多时间，这时我们将查询结果缓存起来，后面查询从这个缓存里面查询速度就会非常快。在kylin中，将结果缓存到hbase表中。\u003c/p\u003e\n\u003cp\u003e这里需要预先设置一些维度和度量，所以说适合一些固定报表等一些维度固定的场景，如果说维度的组合太多或者变化很频繁，可能不是很适用。\u003c/p\u003e","title":"大数据分析工具之-kylin"},{"content":"题目描述 将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。\n比如输入字符串为 \u0026ldquo;LEETCODEISHIRING\u0026rdquo; 行数为 3 时，排列如下：\nL C I R E T O E S I I G E D H N 之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：\u0026ldquo;LCIRETOESIIGEDHN\u0026rdquo;。\n请你实现这个将字符串进行指定行数变换的函数：\nstring convert(string s, int numRows); 示例 1:\n输入: s = \u0026ldquo;LEETCODEISHIRING\u0026rdquo;, numRows = 3 输出: \u0026ldquo;LCIRETOESIIGEDHN\u0026rdquo; 示例 2:\n输入: s = \u0026ldquo;LEETCODEISHIRING\u0026rdquo;, numRows = 4 输出: \u0026ldquo;LDREOEIIECIHNTSG\u0026rdquo; 解释:\nL D R E O E I I E C I H N T S G 解题思路 将给的字符串，先安装从上到下，从左到右的顺序，进行z字形的排列。这时候会出现n行字符串，然后我们再将这n行字符串按照从左到右，从上到下的顺序进行拼接起来，这就是我们最终要的结果。\n这个题目的难点是怎么分配各个字符的位置。\n我们拿最好一个实例为例，numRows=4，那么我们就会有4行内容，顺序是(1,2,3,4,3,2,1,2,3,4)这样的一个顺序。\n每次到第一行和最后一行都需要进行变换，如果是第一行，那么后面每次分配到的行数都是加一，而如果是最后一行，那么每次分配的行数的减一。\n而每次变动增加或减少的行数都是1，所以我们可以这样：\n开始：从第0行开始放，每次放的位置加一。到达最后一行时，位置开始变成减一。当又到达第0行时，位置开始加一。\n代码实例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public String convert(String s, int numRows) { if (s == null || s.length() == 0 || numRows == 1) { return s; } // 会存在numRows行数据，所以初始化这些长度的数组 StringBuilder[] lines = new StringBuilder[numRows]; for (int i = 0; i \u0026lt; lines.length; i++) { lines[i] = new StringBuilder(); } char[] chars = s.toCharArray(); // 最开始从0开始放 int index = 0; //每次增加或减少的间隔都是1 int dir = 1; for (char c : chars) { lines[index].append(c); index += dir; //当遇到最开始或结束时，更改符号，后面就由加变成了减，或由减变成加 if (index == 0 || index == numRows - 1) { dir = -dir; } } //将每一行的结果进行拼接返回 StringBuilder stringBuilder = new StringBuilder(); for (StringBuilder line : lines) { stringBuilder.append(line); } return stringBuilder.toString(); } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/z-%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2-leetcode6/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。\u003c/p\u003e\n\u003cp\u003e比如输入字符串为 \u0026ldquo;LEETCODEISHIRING\u0026rdquo; 行数为 3 时，排列如下：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eL   C   I   R\nE T O E S I I G\nE   D   H   N\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：\u0026ldquo;LCIRETOESIIGEDHN\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e请你实现这个将字符串进行指定行数变换的函数：\u003c/p\u003e\n\u003cp\u003estring convert(string s, int numRows);\n示例 1:\u003c/p\u003e\n\u003cp\u003e输入: s = \u0026ldquo;LEETCODEISHIRING\u0026rdquo;, numRows = 3\n输出: \u0026ldquo;LCIRETOESIIGEDHN\u0026rdquo;\n示例 2:\u003c/p\u003e\n\u003cp\u003e输入: s = \u0026ldquo;LEETCODEISHIRING\u0026rdquo;, numRows = 4\n输出: \u0026ldquo;LDREOEIIECIHNTSG\u0026rdquo;\n解释:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eL     D     R\nE   O E   I I\nE C   I H   N\nT     S     G\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e","title":"Z字形变换—LeetCode6"},{"content":"编译打包时，将依赖也打入jar包，在build.gradle文件中，添加这一部分即可\njar { from { configurations.runtime.collect { zipTree(it) } } enabled = true } 去除依赖：\ncompile(\u0026#39;com.ebay.fount:managed-fount-client:0.1.1\u0026#39;) { exclude group: \u0026#39;com.ebay.platform.security\u0026#39;, module: \u0026#39;trustfabric-client\u0026#39; } ","permalink":"https://www.liunaijie.top/coding/devops/gradle/","summary":"\u003cp\u003e编译打包时，将依赖也打入jar包，在build.gradle文件中，添加这一部分即可\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ejar {\n    from {\n        configurations.runtime.collect { zipTree(it) }\n    }\n    enabled = true\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e去除依赖：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e    compile(\u0026#39;com.ebay.fount:managed-fount-client:0.1.1\u0026#39;) {\n        exclude group: \u0026#39;com.ebay.platform.security\u0026#39;, module: \u0026#39;trustfabric-client\u0026#39;\n    }\n\u003c/code\u003e\u003c/pre\u003e","title":"gradle笔记"},{"content":"安装：\nhelm install -f xxx.yaml server-name chart-dir 更新：\nhelm upgrade -f xxx.yaml server-name chart-dir 查看部署记录\nhelm history [xxx] REVISION\tUPDATED STATUS CHART APP VERSION\tDESCRIPTION 1 Wed Oct 21 18:33:37 2020\tsuperseded\tclickhouse-1.0.1\t19.14 Install complete 2 Wed Oct 21 18:49:18 2020\tdeployed clickhouse-1.0.1\t19.14 Upgrade complete 回滚：\nhelm rollback [xxx] [version] helm rollback clickhouse 1 #回滚到版本1 卸载：\nhelm uninstall server-name ","permalink":"https://www.liunaijie.top/coding/cloud_native/helm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","summary":"\u003cp\u003e安装：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehelm install -f xxx.yaml server-name chart-dir\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e更新：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehelm upgrade -f xxx.yaml server-name chart-dir\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e查看部署记录\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehelm history [xxx]\n \n\nREVISION\tUPDATED                 \tSTATUS    \tCHART           \tAPP VERSION\tDESCRIPTION\n1       \tWed Oct 21 18:33:37 2020\tsuperseded\tclickhouse-1.0.1\t19.14      \tInstall complete\n2       \tWed Oct 21 18:49:18 2020\tdeployed  \tclickhouse-1.0.1\t19.14      \tUpgrade complete\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e回滚：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehelm rollback [xxx] [version]\nhelm rollback clickhouse 1 #回滚到版本1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e卸载：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehelm uninstall server-name\n\u003c/code\u003e\u003c/pre\u003e","title":"Helm常用命令"},{"content":"好久没写博客了。。。\n记录一下我在现在公司的一个git工作流程。\n我之前使用git是不同用户在同一个git仓库下进行操作，而现在是使用fork出自己的仓库，通过提pr的方式来进行提交代码。\n通过git fork操作后，自己的账号下就有了一个仓库，本地下载后又会出现一个本地仓库，这时一个有：\n原仓库 远程仓库 本地仓库 我在这里分别给它们以代号，原仓库为（upstream），远程仓库为（origin），本地仓库为（local）\n在本地开发时，从upstream的master分支中切出一个分支，在这个基础上进行开发。\n开发完成需要进行测试时，本地切换到stg分支，从upstream的stg分支中拉取最新的代码，然后再merge本地的其他分支，这一步就将冲突全部放在本地进行解决，避免在提交pr时与原仓库存在冲突。\n将本地的stg分支提交到远程仓库origin的stg分支上。\n提交pr，merge后就可以拿upsteam的stg分支进行测试。\n当测试完成后，基本按照刚才的流程进行master的提交操作。\n本地切换到master分支，从upsteam中拉取最新的代码\nmerge开发完成的feature分支，如果有冲突本地解决。\n提交到origin的master分支\n提交pr，完成merge后，任务开发完成。\n在这个流程中，origin的仓库只是起到一个中间的作用，并且在本地处理冲突，可以避免在GitHub上处理冲突时，造成\n","permalink":"https://www.liunaijie.top/coding/devops/git/%E6%88%91%E7%9B%AE%E5%89%8D%E7%9A%84git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/","summary":"\u003cp\u003e好久没写博客了。。。\u003c/p\u003e\n\u003cp\u003e记录一下我在现在公司的一个git工作流程。\u003c/p\u003e\n\u003cp\u003e我之前使用git是不同用户在同一个git仓库下进行操作，而现在是使用fork出自己的仓库，通过提pr的方式来进行提交代码。\u003c/p\u003e","title":"我目前的git工作流程"},{"content":"背景 当参与到开源项目开发后，我们需要先将代码fork到自己的仓库，对代码进行修改后再提交pr。\n如果在这中间原仓库有提交过代码，我们这边是无法得知的，所以我们需要在提pr前先进行merge操作，先将原仓库的内容更新下来再进行提交。\n大体流程如下所示： 实现 首先打开代码所在文件目录，然后打开终端：\n执行命令：\n1 git remote -v 当我们没有进行操作前，它会显示如下的内容：\n1 2 origin\tgit@****自己仓库的地址.git (fetch) origin\tgit@****自己仓库的地址.git (push) 然后这时我们需要添加原仓库的地址，执行如下命令：\n1 git remote add upstream git@***原仓库地址.git 执行命令后，没有任何响应，我们需要再次执行git remote -v，这是显示出来的信息与之前的发生了变化：\n1 2 3 4 origin\tgit@****自己仓库的地址.git (fetch) origin\tgit@****自己仓库的地址.git (push) upstream\tgit@***原仓库地址.git (fetch) upstream\tgit@***原仓库地址.git (push) 这时我们就将原仓库地址关联到我们的项目中。\n当我们本地开发完成后，可以先从自己fork出来的仓库中进行更新，执行：\n1 2 3 4 //先拉取原仓库的代码 git fetch upstream //然后将当前分支与 upstream/master分支合并，分支可以更改 git merge upstream/master 这里是先将原仓库的更新拉取下来，然后在当前分支上merge原仓库的代码，原仓库使用的分支是master，可以自行修改成所需要merge的分支。\n这时就可以将原仓库的更改拉取到我们的仓库，执行git push将变动推送到我们自己的仓库。\n这时再去提pr就可以了，现在我们fork出来的仓库与原仓库的区别只有我们更改的文件。\n","permalink":"https://www.liunaijie.top/coding/devops/git/git-fork%E5%90%8E%E5%A6%82%E4%BD%95%E4%B8%8E%E5%8E%9F%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5/","summary":"\u003ch1 id=\"背景\"\u003e背景\u003c/h1\u003e\n\u003cp\u003e当参与到开源项目开发后，我们需要先将代码fork到自己的仓库，对代码进行修改后再提交pr。\u003c/p\u003e\n\u003cp\u003e如果在这中间原仓库有提交过代码，我们这边是无法得知的，所以我们需要在提pr前先进行merge操作，先将原仓库的内容更新下来再进行提交。\u003c/p\u003e\n\u003cp\u003e大体流程如下所示：\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/git%20fork.png\" alt=\"\"\u003e\u003c/p\u003e","title":"git fork后如何与原仓库同步"},{"content":"读取数据的过程需要关注以下两个问题：\n从哪里读？关注数据节点位置 什么样的数据可以读？关注数据的隔离性 第一个问题是由readPreference来解决 第二个问是题由readConcern来解决 什么是readPreference readPreference决定使用哪一个节点来满足正在发起的读请求。可选值包括：\nprimary 主选择主节点 primaryPreferred 优先选择主节点，如果不可用则选择从节点 secondary 只选择从节点 nearest 选择最近的节点 readPreperfence使用场景举例\n用户下订单后马上将用户转到订单详情页 primary/primaryPreferred。因为此时从节点可能还没复制到新订单 用户查询自己下过的订单 secondary/secondaryPreferred。查询历史订单对时效性通常没有太高要求 生成报表 secondary。报表对时效性要求不高，但要进行计算资源需求大，可以在从节点单独处理，避免对线上用户造成影响 将用户上传的图片分发到全世界，让各地用户能够就近读取 nearest。每个地区的应用选择最近的节点读取时间 readPreference与Tag readPreference只能控制使用一类节点。Tag则可以将节点选择控制到一个或多个节点。 考虑以下场景： 一个5个节点的复制集，3个节点硬件较好，专用于服务线上客户，2个节点硬件较差，专用于生成报表。\n可以使用Tag来达到这样的控制目的：\n为3个较好的节点打上{purpose:\u0026ldquo;online\u0026rdquo;}\n为2个较差的节点打上{purpose:\u0026ldquo;analyse\u0026rdquo;}\n在线应用读取时指定online，报表读取时指定reporting\nreadPreference配置 通过MongoDB的连接串参数mongodb://host1:port,host2:port,host3:port/?replicaSet=rs\u0026amp;readPreperence=secondary 通过MongoDB驱动程序API MongoCollection.withReadPreference(ReadPreference readPref) Mongo Shelldb.collection.find({}).readPref(\u0026quot;secondary\u0026quot;) 实验 锁定写入（同步）的命令db.fsyncLock()，解锁:db.fsyncUnlock()\n主节点写入{x:1},观察该条数据在各个节点均可见 在两个从节点分别执行db.fsyncLock()来锁定写入 主节点写入{x:2}，在各个节点观察数据变化 接触从节点锁定，观察各节点数据变化 注意事项 指定readPreference时也应注意高可用问题，利用将readPreference指定primary，则发生故障转移不存在primary期间将没有节点可读。所以如果业务允许，则应该选择primaryPreferred 使用Tag时也会遇到同样的问题，如果只有一个节点拥有一个特定Tag，则在这个节点失效将无节点可读。这在有时候是期望的结果，有时候不是。例如 如果报表使用的节点失效，即使不生成报表，通常也不希望将报表负载转移到其他节点上，此时只有一个节点有报表Tag是合理的选择 如果线上节点失效，通常希望有代替节点，所以应该保持多个节点有同样的Tag Tag有时需要与优先级，选举权综合考虑。例如做报表的节点通常不会希望它成为主节点，则优先级应为0 什么是readConcern 在readPreference选择了指定的节点后，readConcern决定这个节点上的数据哪些是可读的，类似于关系数据库的隔离级别。可选值包括：\navaliable 读取所有可用的数据 local 读取所有可用且属于当前分片的数据 majority 读取在大多数节点上提交完成的数据 linearizable 可线性化读取文档 snapshot 读取最近快照中的数据 readConcern:local和avaliable 在复制集中local和avaliable是没有区别的。两者的区别主要是体现在分片集上考虑以下场景：\n一个chunk x正在从shard1向shard2迁移 这个迁移过程中chunk x中的部分数据会在shard1和shard2中同时存在，但源分片shard1仍然是chunk 想的负责方 所有对chunk x的读写操作仍然进入shard1 config中记录的信息chunk x仍然属于shard1 此时如果读shard2，则会体现出local和avaliable的区别： local：只去应该有shard2负责的数据（不包括x） avaliable：shard2上有什么就读什么（包括xß） 注意事项：\n虽然看上去总是应该选择local，但毕竟对结果集进行过滤会造成额外消耗。在一些无关紧要的场景下，也可以考虑avaliable MongoDB \u0026lt;=3.6不支持对从节点使用{readConcern:\u0026ldquo;local\u0026rdquo;} 从主节点读取数据默认readConcern是local，从从节点读取数据是默认readConcern是avaliable（向前兼容） readConcern:majority 只读取大多数据节点上都提交了的数据。考虑如下场景：\n集合原有文档{x:0} 将x值更新为1 这时在各个节点上应用{readConcern:\u0026ldquo;majority\u0026rdquo;}来读取数据\nUntitled\n在t3时，P收到S1写入成功的响应，再加上自己已经完成写入，达到大多数数据节点的条件。此时返回数据。 在t5时，S1收到P向S1发送的消息，此时在S1上达到大多数数据节点的条件，返回数据。\nreadConcern:majority实现方式 节点上维护多个版本，MVCC机制 MongoDB通过维护多个快照来链接不同的版本\n每个被大多数节点确认过的版本都将是一个快照 快照持续到没有人使用为止才被删除 使用条件 如果要使用readConcern:\u0026quot;majority\u0026quot;则必须在配置文件中将此项打开，默认是关闭的：\nreplcation: replSetName: rs0 enableMajorityReadConcern: true readConcern：majority与脏读 MongoDB中的回滚\n写操作达到大多数节点之前都是不安全的，一旦主节点崩溃，而从节点还没复制到该次操作，刚才的写操作就丢失了 把异常写操作视为一个事务，从事务的角度，可以认为事务被回滚了 所以从分布式系统的角度来看，事务的提交被提示到分布式集群的多个节点级别的“提交”，而不再是单个节点上的“提交” 在可能发生回滚的前提下考虑脏读问题：\n如果一次写操作到达大多数节前读取了这个写操作，然后因为系统故障该操作回滚了，则发生了脏读问题 使用{readConcern:\u0026ldquo;majority\u0026rdquo;}可以有效避免脏读\nreadConcern:majorit对于事务隔离级别中的Read Committed\n","permalink":"https://www.liunaijie.top/coding/database/mongodb/%E8%AF%BB%E6%93%8D%E4%BD%9C%E4%BA%8B%E5%8A%A1/","summary":"\u003cp\u003e读取数据的过程需要关注以下两个问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e从哪里读？关注数据节点位置\u003c/li\u003e\n\u003cli\u003e什么样的数据可以读？关注数据的隔离性 第一个问题是由\u003ccode\u003ereadPreference\u003c/code\u003e来解决 第二个问是题由\u003ccode\u003ereadConcern\u003c/code\u003e来解决\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"什么是readpreference\"\u003e什么是readPreference\u003c/h1\u003e\n\u003cp\u003ereadPreference决定使用哪一个节点来满足正在发起的读请求。可选值包括：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eprimary 主选择主节点\u003c/li\u003e\n\u003cli\u003eprimaryPreferred 优先选择主节点，如果不可用则选择从节点\u003c/li\u003e\n\u003cli\u003esecondary 只选择从节点\u003c/li\u003e\n\u003cli\u003enearest 选择最近的节点\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003ereadPreperfence使用场景举例\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e用户下订单后马上将用户转到订单详情页 primary/primaryPreferred。因为此时从节点可能还没复制到新订单\u003c/li\u003e\n\u003cli\u003e用户查询自己下过的订单 secondary/secondaryPreferred。查询历史订单对时效性通常没有太高要求\u003c/li\u003e\n\u003cli\u003e生成报表 secondary。报表对时效性要求不高，但要进行计算资源需求大，可以在从节点单独处理，避免对线上用户造成影响\u003c/li\u003e\n\u003cli\u003e将用户上传的图片分发到全世界，让各地用户能够就近读取 nearest。每个地区的应用选择最近的节点读取时间\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003ereadPreference与Tag\u003c/strong\u003e readPreference只能控制使用一类节点。Tag则可以将节点选择控制到一个或多个节点。 考虑以下场景： 一个5个节点的复制集，3个节点硬件较好，专用于服务线上客户，2个节点硬件较差，专用于生成报表。\u003c/p\u003e\n\u003cp\u003e可以使用Tag来达到这样的控制目的：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e为3个较好的节点打上{purpose:\u0026ldquo;online\u0026rdquo;}\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e为2个较差的节点打上{purpose:\u0026ldquo;analyse\u0026rdquo;}\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e在线应用读取时指定\u003ccode\u003eonline\u003c/code\u003e，报表读取时指定\u003ccode\u003ereporting\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/20200329100110.png\" alt=\"https://raw.githubusercontent.com/liunaijie/images/master/20200329100110.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"readpreference配置\"\u003ereadPreference配置\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e通过MongoDB的连接串参数\u003ccode\u003emongodb://host1:port,host2:port,host3:port/?replicaSet=rs\u0026amp;readPreperence=secondary\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e通过MongoDB驱动程序API \u003ccode\u003eMongoCollection.withReadPreference(ReadPreference readPref)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eMongo Shell\u003ccode\u003edb.collection.find({}).readPref(\u0026quot;secondary\u0026quot;)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"实验\"\u003e实验\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e锁定写入（同步）的命令\u003c/strong\u003e\u003ccode\u003edb.fsyncLock()\u003c/code\u003e，解锁:\u003ccode\u003edb.fsyncUnlock()\u003c/code\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e主节点写入{x:1},观察该条数据在各个节点均可见\u003c/li\u003e\n\u003cli\u003e在两个从节点分别执行\u003ccode\u003edb.fsyncLock()\u003c/code\u003e来锁定写入\u003c/li\u003e\n\u003cli\u003e主节点写入{x:2}，在各个节点观察数据变化\u003c/li\u003e\n\u003cli\u003e接触从节点锁定，观察各节点数据变化\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"注意事项\"\u003e注意事项\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e指定readPreference时也应注意高可用问题，利用将readPreference指定primary，则发生故障转移不存在primary期间将没有节点可读。所以如果业务允许，则应该选择primaryPreferred\u003c/li\u003e\n\u003cli\u003e使用Tag时也会遇到同样的问题，如果只有一个节点拥有一个特定Tag，则在这个节点失效将无节点可读。这在有时候是期望的结果，有时候不是。例如\n\u003cul\u003e\n\u003cli\u003e如果报表使用的节点失效，即使不生成报表，通常也不希望将报表负载转移到其他节点上，此时只有一个节点有报表Tag是合理的选择\u003c/li\u003e\n\u003cli\u003e如果线上节点失效，通常希望有代替节点，所以应该保持多个节点有同样的Tag\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eTag有时需要与优先级，选举权综合考虑。例如做报表的节点通常不会希望它成为主节点，则优先级应为0\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"什么是readconcern\"\u003e什么是readConcern\u003c/h1\u003e\n\u003cp\u003e在readPreference选择了指定的节点后，readConcern决定这个节点上的数据哪些是可读的，类似于关系数据库的隔离级别。可选值包括：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eavaliable 读取所有可用的数据\u003c/li\u003e\n\u003cli\u003elocal 读取所有可用且属于当前分片的数据\u003c/li\u003e\n\u003cli\u003emajority 读取在大多数节点上提交完成的数据\u003c/li\u003e\n\u003cli\u003elinearizable 可线性化读取文档\u003c/li\u003e\n\u003cli\u003esnapshot 读取最近快照中的数据\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003ereadConcern:local和avaliable\u003c/strong\u003e 在复制集中local和avaliable是没有区别的。两者的区别主要是体现在分片集上考虑以下场景：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一个chunk x正在从shard1向shard2迁移\u003c/li\u003e\n\u003cli\u003e这个迁移过程中chunk x中的部分数据会在shard1和shard2中同时存在，但源分片shard1仍然是chunk 想的负责方\n\u003cul\u003e\n\u003cli\u003e所有对chunk x的读写操作仍然进入shard1\u003c/li\u003e\n\u003cli\u003econfig中记录的信息chunk x仍然属于shard1\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e此时如果读shard2，则会体现出local和avaliable的区别：\n\u003cul\u003e\n\u003cli\u003elocal：只去应该有shard2负责的数据（不包括x）\u003c/li\u003e\n\u003cli\u003eavaliable：shard2上有什么就读什么（包括xß）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e注意事项：\u003c/p\u003e","title":"mongo-读操作事务"},{"content":"原理 MongoDB复制集的主要意义在于实现服务高可用 它的现实依赖于两个方面的功能：\n数据写入时将数据迅速的复制到另一个独立节点上 在接受写入的节点发生故障时自动选举出一个新的替代节点 在实现高可用的同时，复制集实现了其他几个附加功能：\n数据分发：将数据从一个区域复制到另一个区域，减少另一个区域的读延迟 读写分离：不同类型的压力分别在不同的节点上执行 异地容灾：在数据中心故障时快速切换到异地 典型的复制集结构： 一个典型的复制集由3个以上具有投票权的节点组成，包括：\n一个主节点（PRIMARY） 接受写入操作和选举时投票\n两个（或多个）从节点（SECONDARY） 复制主节点上的新数据和选举时投票 大部分分布式都需要奇数节点，因为投票时可以避免相同票数的情况\n数据如何复制的 当一个修改操作，无论是插入，更新或删除，到达主节点时，它对数据的操作将被记录下来（经过一些必要的转换），这些记录称为oplog。 当接到通过主节点上打开tailable游标不断获取新进入主节点的oplog，并在自己的数据上回放，依次保存跟主节点上的数据一致。\n通过选举完成故障恢复 具有投票权的节点之间两两互相发送心跳 当5次心跳未收到时判断为节点失联 如果失联的是主节点，从节点会发起选举，选出新的主节点 如果失联的是从节点则不会产生新的选举 选举基于 RAST一致性算法 实现，选举成功的必要条件是大多数投票节点存活 复制集中最多可以有50个节点，但具有投票权的节点最多7个 影响选举的因素 整个集群必须有大多数节点存活 被选举为主节点的节点必须： 能够与多数节点建立连接 具有较新的oplog 具有较高的优先级（优先级可以配置） 复制集节点有以下常见的选配项： 是否具有投票权（v参数） 有则参与投票 优先级（priority参数） 优先级越高的节点的节点越优先成为主节点。优先级为0的节点无法成为主节点 隐藏(hidden参数) 复制数据，但对应用不可见。隐藏节点可以拥有投票权，但优先级必须为0，即不能成为主节点。备份 延迟（slaveDelay参数） 复制n秒之前的数据，保存与主节点的时间差。容错 注意事项 增加节点不会增加系统写性能！ 因为写的操作都是在主节点完成，增加节点并不能改变主节点的性能，所以不会增加系统的写性能。甚至会降低性能，因为当写请求发送到从节点，从节点需要将请求发送给主节点来完成，完成后再通过oplog发送给所有从节点。 但增加节点可以增加系统读性能 搭建 准备配置文件 systemLog: destination: file path: /data/db1/mongod.log #日志存放位置 logAppend: true storage: db: /data/db1 #数据存储位置 net: bindIp: 0.0.0.0 #开启其他机器访问 port: 28017 #端口 relication: replSetName: rs0 #集群名称 processManagement: fork: true #将进程作为后台进程 启动 指定配置文件启动：mongod -f /data/db1/mongod.conf\n配置复制集 进入Mongo shell中\nrs.initiate({ _id:\u0026#34;rs0\u0026#34;, members:[{ _id:0, host:\u0026#34;localhost:28017\u0026#34; },{ _id:1, host:\u0026#34;localhost:28018\u0026#34; },{ _id:2, host:\u0026#34;localhost:28019\u0026#34; }] }) 设置各个实例的ip地址和端口\n验证 登录主节点进行写入，登录从节点进行读取，在登录从节点后如果直接进行读取会报错，需要先执行以下命令：\nrs.test.find() # 报错 rs.slaveOk() re.test.find() # 返回结果 ","permalink":"https://www.liunaijie.top/coding/database/mongodb/%E5%A4%8D%E5%88%B6%E9%9B%86%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E6%90%AD%E5%BB%BA/","summary":"\u003ch1 id=\"原理\"\u003e原理\u003c/h1\u003e\n\u003cp\u003eMongoDB复制集的主要意义在于实现服务高可用 它的现实依赖于两个方面的功能：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e数据写入时将数据迅速的复制到另一个独立节点上\u003c/li\u003e\n\u003cli\u003e在接受写入的节点发生故障时自动选举出一个新的替代节点\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在实现高可用的同时，复制集实现了其他几个附加功能：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e数据分发：将数据从一个区域复制到另一个区域，减少另一个区域的读延迟\u003c/li\u003e\n\u003cli\u003e读写分离：不同类型的压力分别在不同的节点上执行\u003c/li\u003e\n\u003cli\u003e异地容灾：在数据中心故障时快速切换到异地\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"典型的复制集结构\"\u003e典型的复制集结构：\u003c/h2\u003e\n\u003cp\u003e一个典型的复制集由3个以上具有投票权的节点组成，包括：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e一个主节点（PRIMARY） 接受写入操作和选举时投票\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e两个（或多个）从节点（SECONDARY） 复制主节点上的新数据和选举时投票 大部分分布式都需要奇数节点，因为投票时可以避免相同票数的情况\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/20200327175458.png\" alt=\"https://raw.githubusercontent.com/liunaijie/images/master/20200327175458.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"数据如何复制的\"\u003e数据如何复制的\u003c/h3\u003e\n\u003cp\u003e当一个修改操作，无论是插入，更新或删除，到达主节点时，它对数据的操作将被记录下来（经过一些必要的转换），这些记录称为oplog。 当接到通过主节点上打开tailable游标不断获取新进入主节点的oplog，并在自己的数据上回放，依次保存跟主节点上的数据一致。\u003c/p\u003e\n\u003ch3 id=\"通过选举完成故障恢复\"\u003e通过选举完成故障恢复\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e具有投票权的节点之间两两互相发送心跳\u003c/li\u003e\n\u003cli\u003e当5次心跳未收到时判断为节点失联\u003c/li\u003e\n\u003cli\u003e如果失联的是主节点，从节点会发起选举，选出新的主节点\u003c/li\u003e\n\u003cli\u003e如果失联的是从节点则不会产生新的选举\u003c/li\u003e\n\u003cli\u003e选举基于 RAST一致性算法 实现，选举成功的必要条件是大多数投票节点存活\u003c/li\u003e\n\u003cli\u003e复制集中最多可以有50个节点，但具有投票权的节点最多7个\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"影响选举的因素\"\u003e影响选举的因素\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e整个集群必须有大多数节点存活\u003c/li\u003e\n\u003cli\u003e被选举为主节点的节点必须：\n\u003cul\u003e\n\u003cli\u003e能够与多数节点建立连接\u003c/li\u003e\n\u003cli\u003e具有较新的oplog\u003c/li\u003e\n\u003cli\u003e具有较高的优先级（优先级可以配置）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"复制集节点有以下常见的选配项\"\u003e复制集节点有以下常见的选配项：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e是否具有投票权（v参数） 有则参与投票\u003c/li\u003e\n\u003cli\u003e优先级（priority参数） 优先级越高的节点的节点越优先成为主节点。优先级为0的节点无法成为主节点\u003c/li\u003e\n\u003cli\u003e隐藏(hidden参数) 复制数据，但对应用不可见。隐藏节点可以拥有投票权，但优先级必须为0，即不能成为主节点。\u003cstrong\u003e备份\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e延迟（slaveDelay参数） 复制n秒之前的数据，保存与主节点的时间差。\u003cstrong\u003e容错\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"注意事项\"\u003e注意事项\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e增加节点不会增加系统写性能！ 因为写的操作都是在主节点完成，增加节点并不能改变主节点的性能，所以不会增加系统的写性能。甚至会降低性能，因为当写请求发送到从节点，从节点需要将请求发送给主节点来完成，完成后再通过oplog发送给所有从节点。 但增加节点可以增加系统读性能\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"搭建\"\u003e搭建\u003c/h1\u003e\n\u003ch2 id=\"准备配置文件\"\u003e准备配置文件\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esystemLog:\n    destination: file\n    path: /data/db1/mongod.log #日志存放位置\n    logAppend: true\nstorage:\n    db: /data/db1 #数据存储位置\nnet:\n    bindIp: 0.0.0.0 #开启其他机器访问\n    port: 28017 #端口\nrelication:\n    replSetName: rs0 #集群名称\nprocessManagement:\n    fork: true #将进程作为后台进程\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"启动\"\u003e启动\u003c/h2\u003e\n\u003cp\u003e指定配置文件启动：\u003ccode\u003emongod -f /data/db1/mongod.conf\u003c/code\u003e\u003c/p\u003e","title":"mongo-复制集机制"},{"content":"docker下载：docker pull mongo 运行：docker run -itd --name mongo -p 27017:27017 mongo 进入容器并运行mongo命令：docker exec -it mongo mongo\n基本操作命令：\n插入操作insert 格式：\n- db.\u0026lt;集合\u0026gt;.insertOne(\u0026lt;JSON对象\u0026gt;) - db.\u0026lt;集合\u0026gt;.insertMany\u0026lt;[\u0026lt;JSON 1\u0026gt;,\u0026lt;JSON 2\u0026gt;, ...\u0026lt;JSON N\u0026gt;]\u0026gt; 示例： - `db.fruit.insertOne({name:\u0026#34;apple\u0026#34;})` - `db.fruit.insertMany([{name:\u0026#34;apple\u0026#34;},{name:\u0026#34;pear\u0026#34;}, {name:\u0026#34;orange\u0026#34;}])` 查询文档find find是MongoDB中查询数据的基本指令，相当于SQL中的SELECT find返回的是游标 示例：\ndb.movies.find({\u0026ldquo;year\u0026rdquo;:1975}) 单条件查询 db.movies.find({\u0026ldquo;year\u0026rdquo;:1989,\u0026ldquo;title\u0026rdquo;:\u0026ldquo;Batman\u0026rdquo;}) 多条件and查询 db.movies.find({$and:[{\u0026ldquo;title\u0026rdquo;:\u0026ldquo;Batman\u0026rdquo;},{\u0026ldquo;category\u0026rdquo;:\u0026ldquo;action\u0026rdquo;}]}) and的另一种形式 db.movies.find($or:[{\u0026ldquo;year\u0026rdquo;:1989},{\u0026ldquo;title\u0026rdquo;:\u0026ldquo;Batman\u0026rdquo;}]) 多条件or查询 db.movies.find({\u0026ldquo;title\u0026rdquo;:\u0026quot;/^B/\u0026quot;}) 按正则表达式查找 查询条件对照表:\nSQL | MQL ---|--- a = 1 | {a : 1} a \u0026lt;\u0026gt; 1 (a!=1) | {a: {$ne: 1}} a \u0026gt; 1 | {a: {$gt: 1}} a \u0026gt;= 1 | {a: {$gte: 1}} a \u0026lt; 1 | {a: {$lt: 1}} a \u0026lt;= 1 | {a: {$lte: 1}} 查询逻辑对照表:\nSQL | MQL ---|--- a = 1 AND b = 1 | {a : 1,b: 1} 或 {$and:[{a:1},{b:1}]} a =1 OR b=1 | {$or: [{a: 1},{b:1}]} a IS NULL | {a: {$exists: false}} a IN (1,2,3) | {a: {$in:[1,2,3]}} 查询逻辑运算符：\n$lt ：存在并小于 $lte ：存在并小于等于 $gt ：存在并大于 $gte ：存在并大于等于 $ne ：不存在或存在但不等于 $in : 存在并在指定数组中 $nin : 不存在或不在指定数组中 $or : 匹配两个或多个添加中的一个 $and : 匹配全部条件 使用find搜索子文档 假设现在有一个文档：\ndb.fruit.insertOne({ name : \u0026#34;apple\u0026#34;, from : { country : \u0026#34;china\u0026#34;, province : \u0026#34;guanddong\u0026#34; } }) 当要进行查询from属性中的country值为china时语句应该要怎样写呢？即查询fruit中的子文档from时应该怎样查询？ 可以使用这样的语句：\ndb.fruit.find({\u0026#34;from.country\u0026#34;:\u0026#34;china\u0026#34;}) 使用find搜索数组 查询条件在数组中时 文档格式如下： db.fruit.insert([ {name:\u0026#34;apple\u0026#34;,color:[\u0026#34;red\u0026#34;,\u0026#34;green\u0026#34;]}, {name:\u0026#34;pear\u0026#34;,color:[\u0026#34;yellow\u0026#34;,\u0026#34;green\u0026#34;]} ]) 当要查询颜色为red语句时可以这样写：db.fruit.find({color:\u0026quot;red\u0026quot;}) 当查询条件为多个时，可以这样写：db.fruit.find({$or:[{color:\u0026quot;red\u0026quot;},{color:\u0026quot;yellow\u0026quot;}]})\n当数组里面为对象时，格式如下： db.movies.insertOne({ \u0026#34;title\u0026#34;:\u0026#34;Raiders of the Lost ark\u0026#34;, \u0026#34;filming_locations\u0026#34; : [ {\u0026#34;city\u0026#34;:\u0026#34;Los Angeles\u0026#34;,\u0026#34;state\u0026#34;:\u0026#34;CA\u0026#34;,\u0026#34;country\u0026#34;:\u0026#34;USA\u0026#34;}, {\u0026#34;city\u0026#34;:\u0026#34;Rome\u0026#34;,\u0026#34;state\u0026#34;:\u0026#34;Lazio\u0026#34;,\u0026#34;country\u0026#34;:\u0026#34;Italy\u0026#34;}, {\u0026#34;city\u0026#34;:\u0026#34;Florence\u0026#34;,\u0026#34;state\u0026#34;:\u0026#34;SC\u0026#34;,\u0026#34;country\u0026#34;:\u0026#34;USA\u0026#34;}, ] }) 当需要查找城市为Rome的记录时： db.movies.find({\u0026quot;filming_locations.city\u0026quot;:\u0026quot;Rome\u0026quot;}) 3. 当查找子数组的多个字段都需要满足条件时，可以使用如下查询。\ndb.getCollection(\u0026#39;movies\u0026#39;).find({ \u0026#34;filming_locations.city\u0026#34;:\u0026#34;Rome\u0026#34;, \u0026#34;filming_locations.country\u0026#34;:\u0026#34;USA\u0026#34; }) 也可使用$elemMatch来进行匹配查询\ndb.getCollection(\u0026#39;movies\u0026#39;).find({ \u0026#34;filming_locations\u0026#34;:{ $elemMatch:{\u0026#34;city\u0026#34;:\u0026#34;Rome\u0026#34;,\u0026#34;country\u0026#34;:\u0026#34;USA\u0026#34;} } }) 控制find返回的字段 find({condition},{columns})\nfind可以指定返回指定的字段 _id字段必须明确指明不返还，否则默认返回 在MongoDB中称其为投影（projection） db.movies.find({\u0026quot;category\u0026quot;:\u0026quot;action\u0026quot;},{\u0026quot;_id\u0026quot;:0,title:1}) 这条查询语句中指明不返回id，返回title字段 使用remove删除文档 remove命令需要配合查询条件使用 匹配查询条件的文档会被删除 指定一个空文档条件会删除所有文档 实例：\ndb.testcol.remove({a:1}) 删除a=1的记录 db.testcol.remove({a:{$lt:5}}) 删除a\u0026lt;=5的记录 db.testcol.remove({}) 删除所有记录 db.testcol.remove() 报错 使用update更新文档 db.\u0026lt;集合\u0026gt;.update(\u0026lt;查询条件\u0026gt;,\u0026lt;更新字段\u0026gt;) 当被更新的字段如果不存在，则创建字段，如果存在则更新 以如下的结构为例：\ndb.fruit.insertMany([ {name:\u0026#34;apple\u0026#34;}, {name:\u0026#34;pear\u0026#34;}, {name:\u0026#34;orange\u0026#34;} ]) 对name=apple的文档添加属性\ndb.fruit.updateOne({name:\u0026#34;apple\u0026#34;},{$set:{from:\u0026#34;china\u0026#34;}}) 使用updateOne()表示无论条件匹配多少条记录，始终只更新第一条 使用updateMany表示条件匹配多少条就更新多少条 updateOne/updateMany方法要求更新条件部分必须有以下之一，否则将报 错： $set/$unset $push/$pushAll/$pop $pull/$pullAll $addToSet 更新命令：\n$push 增加一个对象到数组底部 $pushAll 增加多个对象到数组底部 $pop 从数组底部删除一个对象 $pull 如果匹配指定的值，从数组中删除相应的对象 $pullAll 如果匹配任意的值，从数组中删除相应的对象 $addToSet 不过不存在则增加一个值到数组 使用drop删除集合 使用db.\u0026lt;集合\u0026gt;.drop()来删除一个集合 集合中的全部文档都会被删除 集合相关的索引也会被删除 db.fruit.drop()\n使用dropDatabase删除数据库 使用db.dropDatabase()来删除数据库 数据库相应文件也会被删除，磁盘空间将被释放 use tempDB db.dropDatabase() ","permalink":"https://www.liunaijie.top/coding/database/mongodb/%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/","summary":"\u003cp\u003edocker下载：\u003ccode\u003edocker pull mongo\u003c/code\u003e 运行：\u003ccode\u003edocker run -itd --name mongo -p 27017:27017 mongo\u003c/code\u003e 进入容器并运行mongo命令：\u003ccode\u003edocker exec -it mongo mongo\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e基本操作命令：\u003c/p\u003e\n\u003ch1 id=\"插入操作insert\"\u003e插入操作\u003ccode\u003einsert\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e格式：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e-   db.\u0026lt;集合\u0026gt;.insertOne(\u0026lt;JSON对象\u0026gt;)\n-   db.\u0026lt;集合\u0026gt;.insertMany\u0026lt;[\u0026lt;JSON 1\u0026gt;,\u0026lt;JSON 2\u0026gt;, ...\u0026lt;JSON N\u0026gt;]\u0026gt; 示例：\n-   `db.fruit.insertOne({name:\u0026#34;apple\u0026#34;})`\n-   `db.fruit.insertMany([{name:\u0026#34;apple\u0026#34;},{name:\u0026#34;pear\u0026#34;}, {name:\u0026#34;orange\u0026#34;}])`\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"查询文档find\"\u003e查询文档find\u003c/h1\u003e\n\u003cp\u003efind是MongoDB中查询数据的基本指令，相当于SQL中的SELECT find返回的是游标 示例：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edb.movies.find({\u0026ldquo;year\u0026rdquo;:1975}) 单条件查询\u003c/li\u003e\n\u003cli\u003edb.movies.find({\u0026ldquo;year\u0026rdquo;:1989,\u0026ldquo;title\u0026rdquo;:\u0026ldquo;Batman\u0026rdquo;}) 多条件and查询\u003c/li\u003e\n\u003cli\u003edb.movies.find({$and:[{\u0026ldquo;title\u0026rdquo;:\u0026ldquo;Batman\u0026rdquo;},{\u0026ldquo;category\u0026rdquo;:\u0026ldquo;action\u0026rdquo;}]}) and的另一种形式\u003c/li\u003e\n\u003cli\u003edb.movies.find($or:[{\u0026ldquo;year\u0026rdquo;:1989},{\u0026ldquo;title\u0026rdquo;:\u0026ldquo;Batman\u0026rdquo;}]) 多条件or查询\u003c/li\u003e\n\u003cli\u003edb.movies.find({\u0026ldquo;title\u0026rdquo;:\u0026quot;/^B/\u0026quot;}) 按正则表达式查找\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e查询条件对照表:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e    SQL | MQL\n    ---|---\n    a = 1 | {a : 1}\n    a \u0026lt;\u0026gt; 1 (a!=1) | {a: {$ne: 1}}\n    a \u0026gt; 1 | {a: {$gt: 1}}\n    a \u0026gt;= 1 | {a: {$gte: 1}}\n    a \u0026lt; 1 | {a: {$lt: 1}}\n    a \u0026lt;= 1 | {a: {$lte: 1}}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e查询逻辑对照表:\u003c/p\u003e","title":"mongo-基本命令"},{"content":"MongoDB的索引是基于B树的，B树也称为B-树。 为什么MongoDB是B树，MySQL的B+树？ Mysql作为一个关系型数据库，数据的关联性是非常强的，区间访问是常见的一种情况，B+树由于数据全部存储在叶子节点，并且通过指针串在一起，这样就很容易的进行区间遍历甚至全部遍历。 MongoDB使用B-树，所有节点都有Data域，只要找到指定索引就可以进行访问，无疑单次查询平均快于Mysql。\nQuery Shape\u0026ndash;查询的形状 即查询语句中的条件，使用不同的条件会执行不同的索引。\nIndex Prefix\u0026ndash;索引前缀 即最左前缀原则，创建(a,b)联合索引后，就无需创建(a)索引\nSelectivity\u0026ndash;过滤性 选择索引时会选择过滤性最强的一个，假设有这样的一个例子： 根据条件a=1查询后得到记录1000条 根据条件b=2查询后得到记录100条 根据条件c=3查询后得到记录10条 如果现在要执行查询条件为a=1 and b=2 and c=3并且只能创建一个索引，就应该将索引创建在c字段上\n查看执行计划：explain()db.col.find({name:111}).explain(true)\n支持的索引类型 单键索引 组合索引 多值索引 地理位置索引 全文索引 TTL索引 部分索引 哈希索引 组合索引 查询语句为db.members.find({ gender : \u0026quot;F\u0026quot; , age : {$gte : 18}}).sort(\u0026quot;join_data\u0026quot;:1) 这个查询中有精确匹配，排序，范围查询这三个条件。\n组合索引的最佳方式：ESR原则\n精确（Equal）匹配的字段放在最前面 排序（Sort）条件放中间 范围（Range）匹配的字段放最后 同样适合:ES,ER\n创建索引：db.col.createIndex({name:1}) 后台创建索引：db.member.createIndex({city:1},{background:true})\n","permalink":"https://www.liunaijie.top/coding/database/mongodb/%E7%B4%A2%E5%BC%95/","summary":"\u003cp\u003e\u003cstrong\u003eMongoDB的索引是基于B树的，B树也称为B-树。\u003c/strong\u003e 为什么MongoDB是B树，MySQL的B+树？ Mysql作为一个关系型数据库，数据的关联性是非常强的，区间访问是常见的一种情况，B+树由于数据全部存储在叶子节点，并且通过指针串在一起，这样就很容易的进行区间遍历甚至全部遍历。 MongoDB使用B-树，所有节点都有Data域，只要找到指定索引就可以进行访问，无疑单次查询平均快于Mysql。\u003c/p\u003e\n\u003cp\u003eQuery Shape\u0026ndash;查询的形状 即查询语句中的条件，使用不同的条件会执行不同的索引。\u003c/p\u003e\n\u003cp\u003eIndex Prefix\u0026ndash;索引前缀 即最左前缀原则，创建(a,b)联合索引后，就无需创建(a)索引\u003c/p\u003e\n\u003cp\u003eSelectivity\u0026ndash;过滤性 选择索引时会选择过滤性最强的一个，假设有这样的一个例子： 根据条件a=1查询后得到记录1000条 根据条件b=2查询后得到记录100条 根据条件c=3查询后得到记录10条 如果现在要执行查询条件为\u003ccode\u003ea=1 and b=2 and c=3\u003c/code\u003e并且只能创建一个索引，就应该将索引创建在\u003ccode\u003ec\u003c/code\u003e字段上\u003c/p\u003e\n\u003cp\u003e查看执行计划：explain()\u003ccode\u003edb.col.find({name:111}).explain(true)\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"支持的索引类型\"\u003e支持的索引类型\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e单键索引\u003c/li\u003e\n\u003cli\u003e组合索引\u003c/li\u003e\n\u003cli\u003e多值索引\u003c/li\u003e\n\u003cli\u003e地理位置索引\u003c/li\u003e\n\u003cli\u003e全文索引\u003c/li\u003e\n\u003cli\u003eTTL索引\u003c/li\u003e\n\u003cli\u003e部分索引\u003c/li\u003e\n\u003cli\u003e哈希索引\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"组合索引\"\u003e组合索引\u003c/h3\u003e\n\u003cp\u003e查询语句为\u003ccode\u003edb.members.find({ gender : \u0026quot;F\u0026quot; , age : {$gte : 18}}).sort(\u0026quot;join_data\u0026quot;:1)\u003c/code\u003e 这个查询中有精确匹配，排序，范围查询这三个条件。\u003c/p\u003e\n\u003cp\u003e组合索引的最佳方式：\u003cstrong\u003eESR\u003c/strong\u003e原则\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e精确（Equal）匹配的字段放在最前面\u003c/li\u003e\n\u003cli\u003e排序（Sort）条件放中间\u003c/li\u003e\n\u003cli\u003e范围（Range）匹配的字段放最后\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e同样适合:\u003cstrong\u003eES\u003c/strong\u003e,\u003cstrong\u003eER\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e创建索引：\u003ccode\u003edb.col.createIndex({name:1})\u003c/code\u003e 后台创建索引：\u003ccode\u003edb.member.createIndex({city:1},{background:true})\u003c/code\u003e\u003c/p\u003e","title":"mongo-索引"},{"content":"什么是writeConcern writeConcern决定一个写操作落到多少个节点上才算成功。writeConcern的取值包括：\n0：发起写操作，不关心是否成功； 1~集群最大数据节点数，写操作需要被复制到指定节点数才算成功 majority：写操作需要被复制到大多数节点才算成功。 发起写操作的程序将阻塞到写操作到达指定的节点数为止 默认行为： 3节点复制集不做任何特定设置（默认值）时的操作如下图所示：\n大多数节点确认模式： `w:\u0026ldquo;majority\u0026rdquo;\n当写的操作被大多数节点写入成功后才返回\n全部节点确认模式 w:\u0026quot;all\u0026quot; 设置后需要当所有的节点都将数据写入后才返回\njournal writeConcern可以决定写操作到达多少个节点才算成功，journal则定义如何才算成功。取值包括：\ntrue:写操作落到journal文件中才算成功 false：写操作到达内存即算作成功 实验 在复制集测试writeConcern参数\ndb.test.insert({count:1,{writeConcern:{w:\u0026#34;majority\u0026#34;}}}) db.test.insert({count:1,{writeConcern:{w:\u0026#34;3\u0026#34;}}}) db.test.insert({count:1,{writeConcern:{w:\u0026#34;4\u0026#34;}}}) 正常情况下，是可以正常返回的，可以手动修改配置，模拟延迟环境。 修改复制延迟参数：\nconf=rs.conf() conf.members[i].slaveDelay=5 # 将第i个节点设置5秒的复制延迟 conf.members[i].priority=0 # 由于延迟所以不能设置为主节点 rs.reconfig(conf) # 启用配置 设置超过延迟时间后失败：\ndb.test.inser({count:3},{writeConcern:{w:\u0026#34;majority\u0026#34;,wtimeout:3000}}) #当大多数节点写入成功就算成功，超过3秒后如果未返回则失败 注意事项： 我们假设使用上面的配置，对节点启用5秒的延迟写入，并且等待超时时间为3秒，那么会返回下面的信息：\nWriteResult({ \u0026#34;nInserted\u0026#34;:1, \u0026#34;writeConcernError\u0026#34; :{ ... } }) 可以看到上面有个属性nInserted，这个属性表示已经成功写入了多个个节点，这里表示已经成功写入了1个节点，并不是全部的节点都没有这个数据。所以这是需要注意的地方\n注意事项 虽然多于办事的writeConcern都是安全的，但通常只会设置majority，这是因为等待写入延迟时间最短的选择 不要将writeConcern等于总节点数，因为一旦有一个节点故障，所有写操作都将失败 writeConcern虽然会增加写操作延迟时间，但并不会显著增加集群压力，因此无论是否等待，写操作最终都会复制到所有节点上。设置writeConcern只是让写操作复制后再返回而已 应对重要数据应用{w:\u0026quot;majority\u0026quot;}，普通数据可以应用{w:1}以确保最佳性能 ","permalink":"https://www.liunaijie.top/coding/database/mongodb/%E5%86%99%E6%93%8D%E4%BD%9C%E4%BA%8B%E5%8A%A1/","summary":"\u003ch1 id=\"什么是writeconcern\"\u003e什么是writeConcern\u003c/h1\u003e\n\u003cp\u003ewriteConcern决定一个写操作落到多少个节点上才算成功。writeConcern的取值包括：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e0：发起写操作，不关心是否成功；\u003c/li\u003e\n\u003cli\u003e1~集群最大数据节点数，写操作需要被复制到指定节点数才算成功\u003c/li\u003e\n\u003cli\u003emajority：写操作需要被复制到大多数节点才算成功。 发起写操作的程序将阻塞到写操作到达指定的节点数为止\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"默认行为\"\u003e默认行为：\u003c/h2\u003e\n\u003cp\u003e3节点复制集不做任何特定设置（默认值）时的操作如下图所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/1585393042221.jpg\" alt=\"https://raw.githubusercontent.com/liunaijie/images/master/1585393042221.jpg\"\u003e\u003c/p\u003e\n\u003ch2 id=\"大多数节点确认模式\"\u003e大多数节点确认模式：\u003c/h2\u003e\n\u003cp\u003e`w:\u0026ldquo;majority\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/1585393318539.jpg\" alt=\"https://raw.githubusercontent.com/liunaijie/images/master/1585393318539.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e当写的操作被大多数节点写入成功后才返回\u003c/p\u003e\n\u003ch2 id=\"全部节点确认模式\"\u003e全部节点确认模式\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003ew:\u0026quot;all\u0026quot;\u003c/code\u003e\n设置后需要当所有的节点都将数据写入后才返回\u003c/p\u003e\n\u003ch1 id=\"journal\"\u003ejournal\u003c/h1\u003e\n\u003cp\u003ewriteConcern可以决定写操作到达多少个节点才算成功，journal则定义如何才算成功。取值包括：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etrue:写操作落到journal文件中才算成功\u003c/li\u003e\n\u003cli\u003efalse：写操作到达内存即算作成功\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/1585393755601.jpg\" alt=\"https://raw.githubusercontent.com/liunaijie/images/master/1585393755601.jpg\"\u003e\u003c/p\u003e\n\u003ch1 id=\"实验\"\u003e实验\u003c/h1\u003e\n\u003cp\u003e在复制集测试\u003ccode\u003ewriteConcern\u003c/code\u003e参数\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edb.test.insert({count:1,{writeConcern:{w:\u0026#34;majority\u0026#34;}}})\ndb.test.insert({count:1,{writeConcern:{w:\u0026#34;3\u0026#34;}}})\ndb.test.insert({count:1,{writeConcern:{w:\u0026#34;4\u0026#34;}}})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e正常情况下，是可以正常返回的，可以手动修改配置，模拟延迟环境。 修改复制延迟参数：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003econf=rs.conf()\nconf.members[i].slaveDelay=5 # 将第i个节点设置5秒的复制延迟\nconf.members[i].priority=0 # 由于延迟所以不能设置为主节点\nrs.reconfig(conf)  # 启用配置\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e设置超过延迟时间后失败：\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edb.test.inser({count:3},{writeConcern:{w:\u0026#34;majority\u0026#34;,wtimeout:3000}}) #当大多数节点写入成功就算成功，超过3秒后如果未返回则失败\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e注意事项： 我们假设使用上面的配置，对节点启用5秒的延迟写入，并且等待超时时间为3秒，那么会返回下面的信息：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eWriteResult({\n    \u0026#34;nInserted\u0026#34;:1,\n    \u0026#34;writeConcernError\u0026#34; :{\n        ...\n    }\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以看到上面有个属性\u003ccode\u003enInserted\u003c/code\u003e，这个属性表示已经成功写入了多个个节点，这里表示已经成功写入了1个节点，并不是全部的节点都没有这个数据。所以这是需要注意的地方\u003c/p\u003e\n\u003ch1 id=\"注意事项\"\u003e注意事项\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e虽然多于办事的\u003ccode\u003ewriteConcern\u003c/code\u003e都是安全的，但通常只会设置\u003ccode\u003emajority\u003c/code\u003e，这是因为等待写入延迟时间最短的选择\u003c/li\u003e\n\u003cli\u003e不要将writeConcern等于总节点数，因为一旦有一个节点故障，所有写操作都将失败\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewriteConcern\u003c/code\u003e虽然会增加写操作延迟时间，但并不会显著增加集群压力，因此无论是否等待，写操作最终都会复制到所有节点上。设置\u003ccode\u003ewriteConcern\u003c/code\u003e只是让写操作复制后再返回而已\u003c/li\u003e\n\u003cli\u003e应对重要数据应用\u003ccode\u003e{w:\u0026quot;majority\u0026quot;}\u003c/code\u003e，普通数据可以应用\u003ccode\u003e{w:1}\u003c/code\u003e以确保最佳性能\u003c/li\u003e\n\u003c/ul\u003e","title":"mongo-写操作事务"},{"content":"为什么要持久化数据 由于Redis是在内存中进行存储的，当机器重启后内存里面的数据就会丢失。我们不希望这些数据是临时数据，希望它能在重启之后仍然存在，或者我们能将数据导出在其他机器上直接进行导入。这时候都需要进行持久化，将数据落盘。\n持久化的方式 持久化的方式在Redis 4.x版本后有了一些区别！\n持久化方式主要有两种：\nRDB AOF RDB 在指定的时间间隔内生成数据集的时间点快照。\n假如我们设定每两个小时保存一次，那么它就会每两个小时将当时的数据保存到文件中，文件是以二进制的格式保存的。\n为了保证性能，在进行RDB持久化的时候，父进程在保存RDB文件时fork出一个子进程，然后子进程处理保存工作。并且为了保证数据安全，子进程先生成一个临时RDB文件，全部执行完成后再替换之前的RDB文件。\n优点： 文件体积小，使用二进制存储，减少了文件的体积 使用用于备份，容灾。 性能高，fork()一个子进程来进行处理 恢复数据速度比AOF快。 缺点： 由于是定时存储，假设是两小时，如果在这期间宕机，那么中间的数据就没有保存，丢失了数据。\n由于保存文件时fork()了一个子进程，如果当时数据量很大，fork()可能会非常耗时，造成服务器在一段时间内停止响应。\nAOF AOF是将对数据有修改的命令保存到文件中。\n记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。AOF文件中的命令全部以Redis协议的格式来保存，新命令会被追加到文件的末尾。还可以在后台对AOF文件进行重写，使得AOF文件的体积减小。\n优点： 持久化时间间隔默认为每秒钟一次，这样就算发生故障也只会丢失非常少的数据。一共有三种保存策略：不保存，每秒一次，每次执行命令写入。\nAOF文件是一个只进行追加操作的日志文件(append only log)，所以对文件写入不需要再进行寻址操作。并且即便因为某些原因未写入完整的命令，通过redis-check-aof也可以对文件进行恢复。\nRedis可以在AOF文件体积变得过大时，自动的在后台对AOF进行重写：重写后的新AOF文件包含了恢复当前数据集的最小命令集合（假如我们有一个计数器，执行了100次加1，我们可以将它重写为1次加100）。重写过程是安全的，开始重写后命令仍然可以写到现有的AOF文件中，即便重写过程中发生错误，现有的AOF文件也不会丢失，只是新文件未生成。而当新文件生成后，Redis就会从旧AOF文件切换到新AOF文件，并开始对新AOF文件进行追加操作。\n在创建新文件过程中可能会继续执行命令，Redis在开始重写后会开启一个缓冲区，将执行命令写到现有AOF文件和缓存区中。当新文件创建完成后，会先将缓冲区内数据写入到新AOF文件中，然后再进行替换\n\u0026ndash; 此过程仍有疑问\nAOF文件有序的保存了对数据库执行的命令，这些命令以Redis协议的格式保存，因此AOF文件的内容非常容易被人读懂。当我们错误的执行一条命令后，我们可以找到未被重写的AOF文件，手动删除这条命令，然后重启后，就可以恢复到之前的状态。\n缺点： 对于相同的数据集，AOF文件的体积会大于RDB文件的体积。\n根据不同的保存策略，AOF的速度可能会慢与RDB。\n如何开启两种持久化以及配置 RDB 手动触发：\nSAVE：阻塞Redis的服务器线程，直到RDB文件被创建完成 BGSAVE：fork出一个子进程来创建RDB文件，不阻塞服务器进程，写时复制。可以通过lastsave命令来查看最近备份时间。 自动触发：\n根据redis.conf中的配置定时触发，用的是bgsave\n# 备份策略 # save \u0026#34;\u0026#34; save 900 1 save 300 10 save 60 10000 # 备份进程出错主进程是否停止写入操作 stop-writes-on-bgsave-error yes # 是否压缩rdb文件 rdbcompression yes # 导入时是否检查 rdbchecksum yes # 存储的文件名称 dbfilename dump.rdb # 文件存储地址 dir ./ 关于RDB的配置项主要有几个：\n备份策略\n如果需要关闭RDB备份，则使用save \u0026quot;\u0026quot; 即可，否则使用save m n方式表示当m秒内有n条数据变动，则触发产生一次快照，即进行一次备份。\n其实从上面可以看出使用了多条save策略，当900秒内有1条数据变动就进行备份，当300秒内有10条数据变动就备份。为什么要使用多条规则呢？因为Redis中每个时段的读写请求不均衡，所以为了更好的使用，可以定制多种备份策略。\n子进程出错后父进程是否停止\n当备份进程出错后，主进程就停止接收新的写入操作，可以保护持久化的数据一致性问题。\n文件名称，文件路径\nAOF 手动触发：\n- 调用`BGREWRITEAOF`命令 自动触发\n在配置文件中开启AOF： 1 2 3 4 5 6 7 8 9 10 # 是否开启AOF appendonly yes # AOF文件保存的名称 appendfilename \u0026#34;appendonly.aof\u0026#34; # 持久化的选项，分别是每次操作都进行aof操作；每秒一次；不主动执行，30秒一次，默认就是每秒1次 # appendfsync always appendfsync everysec # appendfsync no 通过上面的配置开启AOF持久化，并且指定文件名称，持久化策略。\n关于AOF还有一些其他的配置项：\n1 2 3 4 5 6 7 8 9 # 重写方式 no-appendfsync-on-rewrite no # 重写阈值 auto-aof-rewrite-percentage 100 auto-aof-rewrite-min-size 64mb # 恢复数据遇到错误时是否抛弃错误项 aof-load-truncated yes # 重要的区别！混合持久化 aof-use-rdb-preamble yes 什么时候重写\n从上面可以了解到AOF是写入的执行命令，当文件太大时就执行重写命令。那么如何定义文件太大呢？可以通过auto-aof-rewrite-percentage和auto-aof-rewrite-min-size两个配置项定义。\nauto-aof-rewrite-min-size表示文件重写最小的文件大小，只有当aof文件超过这个值后才会进行触发重写，后面的重写就跟这个配置项没有关系了，这个配置项只能生效一次。\nauto-aof-rewrite-percentage文件增长比例，当前文件比上次重写的增长比例大小。即当前文件是上一次重写完成后的两倍。\n重写是否阻塞\n文件进行重写时，可能会有新的执行命令过来，此时是否需要阻塞服务器来等待重写完成，这个通过no-appendfsync-on-rewrite配置完成。当配置项为no是表示服务器需要阻塞，此时不能再执行更改数据的命令，直到重写完成。当数据量大了之后，重写的时间就会变长，那么此时可能会影响系统的响应时间。我们也可以将配置项设置为yes，此时的流程有不同的说法，我也还有些疑惑，后面了解清楚再更新，如果您了解这个过程，期待您的见解。\n恢复数据\naof文件写入时如果命令只写入一半，此时aof文件就出现错误，当开启aof-load-truncated后如果遇到错误会抛弃这个错误继续执行，否则会抛出错误停止运行。\n混合持久化\n使用aof-use-rdb-preamble开启混合持久化，开启后aof文件会在重写时将此时的数据写成RDB格式，将从开始后到下一次重写之间的命令以命令格式保存到aof文件中\n参考 http://redisdoc.com/topic/persistence.html https://www.cnblogs.com/fanBlog/p/9707422.html#commentform ","permalink":"https://www.liunaijie.top/coding/database/redis%E6%8C%81%E4%B9%85%E5%8C%96/","summary":"\u003ch1 id=\"为什么要持久化数据\"\u003e为什么要持久化数据\u003c/h1\u003e\n\u003cp\u003e由于Redis是在内存中进行存储的，当机器重启后内存里面的数据就会丢失。我们不希望这些数据是临时数据，希望它能在重启之后仍然存在，或者我们能将数据导出在其他机器上直接进行导入。这时候都需要进行持久化，将数据落盘。\u003c/p\u003e\n\u003ch1 id=\"持久化的方式\"\u003e持久化的方式\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003e持久化的方式在\u003ccode\u003eRedis 4.x\u003c/code\u003e版本后有了一些区别！\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e持久化方式主要有两种：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRDB\u003c/li\u003e\n\u003cli\u003eAOF\u003c/li\u003e\n\u003c/ul\u003e","title":"Redis持久化"},{"content":"题目描述 输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。\n示例 1：\n输入：arr = [3,2,1], k = 2 输出：[1,2] 或者 [2,1] 示例 2：\n输入：arr = [0,1,2,1], k = 1 输出：[0]\n限制：\n0 \u0026lt;= k \u0026lt;= arr.length \u0026lt;= 10000 0 \u0026lt;= arr[i] \u0026lt;= 10000\n给定一个数组，找出最小的k个数，对这k个数的大小顺序没有要求。\n解题思路 这个题目我最开始的想法是用堆来解决的，但我解答完成看题解的时候发现了一种做法：\n排序后取前k个元素\n在评论区中有很多人在讨论这一种解法，虽然的他复杂度比较高，实现方式很简单，有一些专业人士在鄙视这种做法，也有一些人说这个题目的难度是简单，所以用这个也没什么问题。我的看法是支持这种做法，并不因为他的难度级别，而是解决问题的思路。在解决问题的时候每一种思路都是可取的。\n排序 1 2 3 4 5 6 public int[] getLeastNumbersSort(int[] arr, int k) { Arrays.sort(arr); int[] result = new int[k]; System.arraycopy(arr, 0, result, 0, k); return result; } 对于数据先进行排序，然后取前k个元素返回即可。这个解决思路简单，代码简洁易懂，但复杂度高。\n堆 由于我们要获取的是最小的k个值，使用堆的时候构建一个大顶堆，至于为什么不构建一个小顶堆在后面实现的部分会进行描述。\n我们来分析一下这个堆要做的一些事情：\n我们建立一个k大小的堆\n前k个元素按照堆的定义直接插入。\n数量超过k时，先与堆顶元素进行比较，由于是大顶堆，所以堆顶元素是堆内的最大值。如果当前值比堆顶值小，则说明此元素需要保留，将堆顶元素删除。如果比堆顶值大，说明这个值不是我们要查找的值进行丢弃。\n将值插入到堆中\n数组全部插入完成后，将堆返回\n用代码来实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 private class M40HeapHelp { //存储堆的数组 private int[] heap; //数组中存储的元素数量 private int count; //堆的数量，即元素最大存储数量 private int length; public M40HeapHelp(int capacity) { this.heap = new int[capacity + 1]; count = 0; length = capacity; } public void add(int val) { ... //需要判断是否超过最大存储数量 //超过数量后判断val是否需要插入到堆中 } public void removeTop() { ... } public int[] getHeap() { ... } } 这里的删除堆顶元素和获取堆数组方法我在堆的那一篇文章中写过，在此处没有什么区别，直接拿过来。\n这里需要改动的地方是添加元素的方法。要判断容量，容量超过后判断插入条件。\n我这里将代码写出来，\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 public void add(int val) { if (count \u0026gt;= length) { //当堆内元素超过最大值后进行判断 if (val \u0026lt; heap[1]) { //如果要插入的元素比堆内的最大值小，则将最大值删除，后面将值进行插入 removeTop(); } else { //否则直接返回 return; } } addVal(val); } private void addVal(int val) { //数量加一 ++count; //将值添加到最后一个位置 heap[count] = val; //此时可能破坏了堆的规则，所以需要重新建堆 int i = count; //判断是否需要与父节点进行替换 while (i / 2 \u0026gt; 0 \u0026amp;\u0026amp; heap[i] \u0026gt; heap[i / 2]) { //首先是数组越界判断，然后判断当前节点是否比父节点大，如果大则需要替换 int temp = heap[i / 2]; heap[i / 2] = heap[i]; heap[i] = temp; //然后向上继续判断 i = i / 2; } } 使用堆来实现的完整代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 public int[] getLeastNumbersHeap(int[] arr, int k) { if (k == 0 || arr.length == 0) { return new int[0]; } M40HeapHelp heap = new M40HeapHelp(k); for (int i : arr) { heap.add(i); } return heap.getHeap(); } private class M40HeapHelp { private int[] heap; private int count; private int length; public M40HeapHelp(int capacity) { this.heap = new int[capacity + 1]; count = 0; length = capacity; } public void add(int val) { if (count \u0026gt;= length) { //当堆内元素超过最大值后进行判断 if (val \u0026lt; heap[1]) { //如果要插入的元素比堆内的最大值小，则将最大值删除，后面将值进行插入 removeTop(); } else { //否则直接返回 return; } } addVal(val); } private void addVal(int val) { //数量加一 ++count; //将值添加到最后一个位置 heap[count] = val; //此时可能破坏了堆的规则，所以需要重新建堆 int i = count; //判断是否需要与父节点进行替换 while (i / 2 \u0026gt; 0 \u0026amp;\u0026amp; heap[i] \u0026gt; heap[i / 2]) { //首先是数组越界判断，然后判断当前节点是否比父节点大，如果大则需要替换 int temp = heap[i / 2]; heap[i / 2] = heap[i]; heap[i] = temp; //然后向上继续判断 i = i / 2; } } public void removeTop() { if (count \u0026lt;= 0) { //堆内没有元素 return; } //将堆内的最后一个元素放到最大值位置上， heap[1] = heap[count]; //数量减一 --count; //这时堆可能不满足堆的规则，需要进行重新建堆 rebuildHeap(heap, count, 1); } private void rebuildHeap(int[] a, int n, int i) { while (true) { //当前节点的数据可能比子节点的数据大，所以与两个子节点对比，找到最大值后进行替换 int maxPos = i; //需要注意不能下标越界 if (i * 2 \u0026lt;= n \u0026amp;\u0026amp; a[i] \u0026lt; a[i * 2]) { maxPos = i * 2; } //先判断左子节点，然后判断左子节点与右子节点的大小 if (i * 2 + 1 \u0026lt;= n \u0026amp;\u0026amp; a[maxPos] \u0026lt; a[i * 2 + 1]) { maxPos = i * 2 + 1; } if (maxPos == i) { //如果父节点比两个子节点都大，则不需要替换满足条件，直接返回 break; } //将父节点与最大子节点进行替换 int temp = a[i]; a[i] = a[maxPos]; a[maxPos] = temp; //然后递归判断子节点是否满足条件，直到满足条件后退出 i = maxPos; } } /** * 返回堆的内容，由于堆是从1开始存放，所以将结果重新放到新数组中，从0开始放。 */ public int[] getHeap() { int[] result = new int[count]; System.arraycopy(heap, 1, result, 0, count); return result; } } 这里使用大顶堆而不是小顶堆的元素是：大顶堆的堆顶元素是堆内的最大值，我们要保留小的元素，所以直接与最大值比较即可，如果比最大值大则丢弃，小则保留。\n而如果使用小顶堆，堆顶元素是最小值，当我们判断元素是否需要保留时无法使用堆顶元素，在不排序的情况下也无法保证最后一个元素是最大值。如果采用小顶堆还需要将小顶堆排序取堆内最大值然后比较。实现和复杂度都比大顶堆复杂。\n快排思想 这个题目还可以利用快排的思想来解决。首先我们来复习一下快排的过程：\n对于全部数组找到一个分区点，将小于分区点的元素移动到左侧，大于分区的元素移动到右侧。 从分区点开始，分为两个数组，左侧和右侧在递归调用 当数组不能再拆分后退出，此时已经完成排序 我们看一下第一步的结果是不是与这道题的要求比较相似。如果分区点左侧的元素有k个。那么我们就可以将分区点左侧的元素进行返回。\n如果左侧元素小于k个，我们就需要向右侧移动。否则向左侧移动。\n在实际编码过程中，分区点返回的是下标，那么我们只要满足index=k-1就表示找到了结果。\n用代码实现以下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 public int[] getLeastNumbersQuickSort(int[] arr, int k) { if (k == 0 || arr.length == 0) { return new int[0]; } //由于返回的是元素下标，所以为长度-1 return quickSortHelp(arr, 0, arr.length - 1, k - 1); } private int[] quickSortHelp(int[] arr, int left, int right, int k) { //快排是用到了分区点这个概念，会将小于分区点的元素放到左边，大于分区点的元素放到右边。 //如果分区点左边的元素是k个或k-1个，那么我们就获取到了最小的k个元素 int[] result = new int[k]; int partition = partition(arr, left, right); if (partition == k) { System.arraycopy(arr, 0, result, 0, k); return result; } //当元素数量小于k时，我们需要向右分，当数量大于k时需要向左分，直到获取到k个元素 return partition \u0026gt; k ? quickSortHelp(arr, left, partition - 1, k) : quickSortHelp(arr, partition + 1, right, k); } private int partition(int[] a, int left, int right) { //设置分区点为数组最后一个元素 int pivot = a[right]; //开始分区 int i = left; for (int j = left; j \u0026lt; right - 1; j++) { //从左向右找到比分区点小的元素 // 找到下标为j，将他从i开始向右放，找到后较 if (a[j] \u0026lt; pivot) { //如果元素比分区点小，则将元素从左侧开始放，将原来左侧的数据换到现在这个位置上 //i表示左侧的位置，交换后就加一 swap(a, i, j); i++; } } //最后将分区点放到对应位置上 //交换后，i左侧为比分区点小的元素，右侧为比分区点大的元素 swap(a, i, right); return i; } private void swap(int[] a, int first, int second) { int temp = a[first]; a[first] = a[second]; a[second] = temp; } 总结 在三种解决思路中，使用快排的方法是实现最高效的，但是如果没有一定的练习或许想不到这样的解题思路。\n而第一种排序后取前k个元素的做法虽然效率低，但是我的想法是这种解决的思路一定不要忘了，有时候一件事件的解决方法不要想的过于复杂，有时候想多了也不见得会好。\n","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0-leetcodem40/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cp\u003e输入：arr = [3,2,1], k = 2\n输出：[1,2] 或者 [2,1]\n示例 2：\u003c/p\u003e\n\u003cp\u003e输入：arr = [0,1,2,1], k = 1\n输出：[0]\u003c/p\u003e\n\u003cp\u003e限制：\u003c/p\u003e\n\u003cp\u003e0 \u0026lt;= k \u0026lt;= arr.length \u0026lt;= 10000\n0 \u0026lt;= \u003ccode\u003earr[i]\u003c/code\u003e \u0026lt;= 10000\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e给定一个数组，找出最小的k个数，对这k个数的大小顺序没有要求。\u003c/p\u003e\n\u003ch1 id=\"解题思路\"\u003e解题思路\u003c/h1\u003e\n\u003cp\u003e这个题目我最开始的想法是用堆来解决的，但我解答完成看题解的时候发现了一种做法：\u003c/p\u003e\n\u003cp\u003e排序后取前k个元素\u003c/p\u003e\n\u003cp\u003e在评论区中有很多人在讨论这一种解法，虽然的他复杂度比较高，实现方式很简单，有一些专业人士在鄙视这种做法，也有一些人说这个题目的难度是简单，所以用这个也没什么问题。我的看法是支持这种做法，并不因为他的难度级别，而是解决问题的思路。在解决问题的时候每一种思路都是可取的。\u003c/p\u003e","title":"最小的k个数-LeetCodeM40"},{"content":"什么是堆 堆是一种特殊的树，它满足以下两点：\n堆是一个完全二叉树\n完全二叉树要求，除最后一层，其他层的节点个数都是满的，最后一次的节点都靠左排列。\n堆中每一个节点的值都必须大于等于（或小于等于）其子树中每个节点的值\n当前节点的值是子树中的最大或最小值。\n我们将每个节点的值都大于等于子树中每个节点值的堆，叫做“大顶堆”。对于每个节点的值都小于等于子树中每个节点值的堆，我们叫做“小顶堆”\n我们来看一下例子：\n在上面的四个实例中，我们根据以上两条规则，可以判断出：\n第一个、第二个是大顶堆，第三个是小顶堆，第四个由于不是完全二叉树所以不是堆。\n如何实现一个堆 由于堆是一个完全二叉树，而完全二叉树又适合用数组来存储。\n数组下标为i的节点，左子节点是下标为i*2的节点，右子节点是下标i * 2 + 1， 它的父节点是下标为i/2的节点。\n对于堆，我们要实现的功能大约有这三个：插入，删除堆顶元素，获取堆内的元素，在这里的实现以大顶堆为例。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 public class Heap { /** * 数组，从下标1开始存储数据 */ private int[] a; /** * 堆可以存储的最大数据个数 */ private int n; /** * 堆中已经存储的数据个数 */ private int count; /** * 由于使用数组来存储数据，所以需要初始化容量 */ public Heap(int capacity) { a = new int[capacity + 1]; n = capacity; count = 0; } /** * 添加元素 */ public void add(int val){ ... } /** * 删除堆顶元素 */ public void removeTop(){ ... } /** * 获取堆数据 */ public int[] getHeap(){ ... } }\t获取数据 这个比较简单，我们只要将数组的内容返回即可，但是我们在下标0中没有存储元素，并且可能未填满存在空数据，所以我们可以从1开始复制，复制元素数量的长度。\n1 2 3 4 5 public int[] getHeap() { int[] r = new int[count]; System.arraycopy(a, 1, r, 0, count); return r; } 添加元素 由于我们使用数组，所以存在最大长度，当元素数量未超过最大长度时进行添加，当超过长度后我们需要进行一个策略判断，在这里先直接抛弃。\n后面添加元素的时候需要满足堆的规则，就需要进行调整，让其满足堆的特性，这个过程称为堆化。\n堆化实际上有两种，从下往上和从上往下。这里使用从下往上的堆化方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public void add(int val) { if (count \u0026gt;= n) { //堆满了，先直接抛弃。 return; } addVal(val); } private void addVal(int val){ //堆内元素数量加一 ++count; //将元素放到最后 a[count] = data; int i = count; //循环比较当前节点与父节点的大小关系 //大顶堆时子节点元素要比父节点元素值小。 while (i / 2 \u0026gt; 0 \u0026amp;\u0026amp; a[i] \u0026gt; a[i / 2]) { int temp = a[i]; a[i] = a[i / 2]; a[i / 2] = temp; i = i / 2; } } 删除堆顶元素 根据堆定义规则的第二条可以知道：堆顶元素存储的是堆中数据的最大值或最小值。\n我们以上面的大顶堆为例，堆顶元素就是最大值。当需要删除堆顶元素时，就需要第二大的元素放到堆顶，第二个元素就是堆顶元素的子节点。当将第二大元素放到堆顶后，还需要依次填充从子节点添加到父节点的位置，这时虽然完成了删除，但容易出现数组空洞的现象。\n以下面这个大顶堆为例：\n所以这里删除的时候需要转换一下思路：\n先将最后一个节点元素放到堆顶，然后再比较父节点于子节点的关系，对于不满足条件的进行替换，直到满足堆的定义为止。这其实是从上往下的堆化方法。\n刚才的例子用这个方法再来实现一遍：\n将这个思路转换为代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public void removeTop() { if (count == 0) { //堆内没有数据 return; } //堆顶元素与最后的元素交换 a[1] = a[count]; //数量减少 --count; heapHelp(a, count, 1); } //从堆顶开始比较，找到子节点的最大值，然后替换，如果父节点是最大值则终止 private void heapHelp(int[] a, int n, int i) { while (true) { //当前节点的数据可能比子节点的数据大，所以与两个子节点对比，找到最大值后进行替换 int maxPos = i; //需要注意不能下标越界 if (i * 2 \u0026lt;= n \u0026amp;\u0026amp; a[i] \u0026lt; a[i * 2]) { maxPos = i * 2; } //先判断左子节点，然后判断左子节点与右子节点的大小 if (i * 2 + 1 \u0026lt;= n \u0026amp;\u0026amp; a[maxPos] \u0026lt; a[i * 2 + 1]) { maxPos = i * 2 + 1; } if (maxPos == i) { //如果父节点比两个子节点都大，则不需要替换，满足条件退出 break; } //将父节点与最大子节点进行替换 int temp = a[i]; a[i] = a[maxPos]; a[maxPos] = temp; //然后递归判断子节点是否满足条件，直到满足条件后退出 i = maxPos; } } 至此就完成了大顶堆的数据访问，添加元素，删除堆顶元素操作。\n这里实现的是大顶堆，如果实现小顶堆，只要比较条件中进行一些更改即可完成。\n在这里的添加元素，当超过数量时直接进行了抛弃，对于一些应用不符合，这一部分放在应用练习中进行操作。\n堆排序 从上面的几个例子可以看出，拿到存放堆的数组遍历后的数据并不是有序的。所以不能直接返回堆数组。\n由于堆顶元素是最大值，所以我们可以将最大值与最后一个元素n进行交换，然后对前面的n-1个元素重新建堆。堆化完成后再取堆顶元素，放到n-1的位置，依次进行交换，堆化的过程，直至结束。\n用下面的图来看一下流程：\n用代码来实现一下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 /** * 堆排序 * 如果要对[19,4,6,3,22,8,7]这个数组排序，首先要将数组长度加一，首位补零 * 改成这样的结构:[0,19,4,6,3,22,8,7] * 然后调用此函数时，参数为 heapSort(a,a.length-1)。 * 总之，传入长度应为数组长度减一，则会对除首位的其他元素排序 * * @param a 数组 * @param n 要排序的长度 */ public void heapSort(int[] a, int n) { //首先按照大顶堆建堆，完成后第一个元素就是最大的元素 buildHeap(a, 10); int k = n; while (k \u0026gt; 1) { //将最大的元素，即1，与最后一个元素交换，那最大元素就放到了下标为n的位置 swap(a, 1, k); --k; //然后重新建堆，将剩下的n-1个元素重新构建成堆，再继续交换 heapHelp(a, k, 1); } } /** * 建堆 * 按照大顶堆来完成，即每个元素都比下面的元素大 * * @param a 数组 * @param n */ private void buildHeap(int[] a, int n) { for (int i = n / 2; i \u0026gt;= 1; --i) { heapHelp(a, n, i); } } /** * 建堆 * * @param a * @param n * @param i */ private void heapHelp(int[] a, int n, int i) { while (true) { int maxPos = i; if (i * 2 \u0026lt;= n \u0026amp;\u0026amp; a[i] \u0026lt; a[i * 2]) { maxPos = i * 2; } if (i * 2 + 1 \u0026lt;= n \u0026amp;\u0026amp; a[maxPos] \u0026lt; a[i * 2 + 1]) { maxPos = i * 2 + 1; } if (maxPos == i) { break; } swap(a, i, maxPos); i = maxPos; } } 这个实现中需要注意一点，即由于堆的特性，下标0不存储元素，所以我们这里只会除首位外的元素排序。也可以再封装一层再操作。\n习题 最小的k个数 参考： 数据结构与算法之美 ","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%8E%92%E5%BA%8F/","summary":"\u003ch1 id=\"什么是堆\"\u003e什么是堆\u003c/h1\u003e\n\u003cp\u003e堆是一种特殊的树，它满足以下两点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e堆是一个完全二叉树\u003c/p\u003e\n\u003cp\u003e完全二叉树要求，除最后一层，其他层的节点个数都是满的，最后一次的节点都靠左排列。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e堆中每一个节点的值都必须大于等于（或小于等于）其子树中每个节点的值\u003c/p\u003e\n\u003cp\u003e当前节点的值是子树中的最大或最小值。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我们将每个节点的值都大于等于子树中每个节点值的堆，叫做“大顶堆”。对于每个节点的值都小于等于子树中每个节点值的堆，我们叫做“小顶堆”\u003c/p\u003e\n\u003cp\u003e我们来看一下例子：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/20200413141220.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e在上面的四个实例中，我们根据以上两条规则，可以判断出：\u003c/p\u003e\n\u003cp\u003e第一个、第二个是大顶堆，第三个是小顶堆，第四个由于不是完全二叉树所以不是堆。\u003c/p\u003e","title":"堆以及堆排序"},{"content":"fail-fast与fail-safe 在Collection集合的各个类中，有线程安全和线程不安全这2大类的版本。\n对于线程不安全的类，并发情况下可能会出现fail-fast情况；而线程安全的类，可能出现fail-safe的情况。\n**快速失败（fail—fast）**是java集合中的一种机制， 在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的内容进行了修改（增加、删除、修改），则会抛出Concurrent Modification Exception。\n**安全失败（fail-sage）**保存了该集合对象的一个快照副本。你可以并发读取，不会抛出异常，但是不保证你遍历读取的值和当前集合对象的状态是一致的！\nfail-fast 来看一下线程不安全的类ArrayList，它实现fail-fast主要靠一个字段modCount。来从头认识一下它。\n首先找到引用它的地方：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 public boolean add(E e) { ensureCapacityInternal(size + 1); // Increments modCount!! elementData[size++] = e; return true; } private void ensureCapacityInternal(int minCapacity) { ensureExplicitCapacity(calculateCapacity(elementData, minCapacity)); } private void ensureExplicitCapacity(int minCapacity) { modCount++; // overflow-conscious code if (minCapacity - elementData.length \u0026gt; 0) grow(minCapacity); } public E remove(int index) { rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved \u0026gt; 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // clear to let GC do its work return oldValue; } 可以看出，在增加元素，删除元素时都会对modCount值加一。当我们查看更新，查找的代码时并没有找到对modCount的修改。\nmodCount字段翻译过来就是修改次数，再结合上面的代码可以了解到只有在结构发生变化，数量增减的时候才会修改。查找不会对结构发生变化也不用修改，至于更新操作，虽然它修改了值，但是在结构上总体的数量没有改变，结构上指的是：是谁不重要，有就行。\n我们继续查找用到modCount字段的地方：\n1 2 3 4 final void checkForComodification() { if (modCount != expectedModCount) throw new ConcurrentModificationException(); } 找到这样的一段代码，判断modCount与另一个值是否相同，如果不相同就抛出异常！再来找到expectedModCount定义的地方。\n1 2 3 4 5 6 7 8 private class Itr implements Iterator\u0026lt;E\u0026gt; { int cursor; // index of next element to return int lastRet = -1; // index of last element returned; -1 if no such int expectedModCount = modCount; Itr() {} ... } 从这里看到expectedModCount=modCount。小朋友你是否有很多疑惑？为什么这里将modCount赋值给expectedModCount，后面又需要判断它们是否相等呢？\n其实我们将这两个字段翻译过来，一个是修改数量，一个是期望的修改数量。当我们看到这两个词时脑子里应该有了一些猜想。\n这个expectedModCount是迭代器在子类实现中定义的一个成员变量。当我们使用迭代器后就将这个变量值初始化完成了，如果我们在使用迭代器期间结构发生了变化，那么就会遇到两者不一样的情况。\n我们来看这样的一段代码，演示一下这种错误情况：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public static void main(String[] args) { List list = new ArrayList(); list.add(\u0026#34;a\u0026#34;); list.add(\u0026#34;b\u0026#34;); list.add(\u0026#34;c\u0026#34;); list.add(\u0026#34;d\u0026#34;); Iterator\u0026lt;String\u0026gt; iterator = list.iterator(); while (iterator.hasNext()) { String s = iterator.next(); System.out.println(s); // 修改集合结构 if (\u0026#34;b\u0026#34;.equals(s)) { list.remove(s); } } } 这段代码中，我先添加了4条数据，添加完成后list的modCount=4。这时我调用了迭代器方法，此时iterator中的expectedModCount=4。\n然后我利用迭代器的方法进行取值，删除了其中一个数据，这时list的modCount=3，当我们下一次使用迭代器循环时，检测到expectedModCount=4 != modCount，这时就会抛出异常。\nfail-safe 上面的代码是线程不安全的ArrayList的源码，接下来看一下线程安全的类ConcurrentHashMap是怎样实现的。\n1 2 3 4 public Set\u0026lt;Map.Entry\u0026lt;K,V\u0026gt;\u0026gt; entrySet() { EntrySetView\u0026lt;K,V\u0026gt; es; return (es = entrySet) != null ? es : (entrySet = new EntrySetView\u0026lt;K,V\u0026gt;(this)); } 调用map的迭代时选择了entrySet方法，这里会先进行判断一个变量es是否为空，不为空则返回，为空则进行了一个实例化，并且传入了当前对象，即传入了当前的ConcurrentHashMap对象，找一下调用的这个方法。\n1 2 3 4 5 6 static final class EntrySetView\u0026lt;K,V\u0026gt; extends CollectionView\u0026lt;K,V,Map.Entry\u0026lt;K,V\u0026gt;\u0026gt; implements Set\u0026lt;Map.Entry\u0026lt;K,V\u0026gt;\u0026gt;, java.io.Serializable { EntrySetView(ConcurrentHashMap\u0026lt;K,V\u0026gt; map) { super(map); } ... } 在这个构造函数中又调用了父类的构造函数，我们还需要继续向上找\n1 2 3 4 5 6 7 8 9 10 abstract static class CollectionView\u0026lt;K,V,E\u0026gt; implements Collection\u0026lt;E\u0026gt;, java.io.Serializable { private static final long serialVersionUID = 7249069246763182397L; final ConcurrentHashMap\u0026lt;K,V\u0026gt; map; CollectionView(ConcurrentHashMap\u0026lt;K,V\u0026gt; map) { this.map = map; } public abstract Iterator\u0026lt;E\u0026gt; iterator(); ... } 找到了这个父类，它在这里将我们上面穿入的ConcurrentHashMap对象实例赋值到成员变量map上。\n并且有一个抽象方法iterator()，并且这个方法有3个实现，分别是EntrySetView,KeySetView,ValueSetView，这也是分别对应entrySet(),keySet()，valueSet()的实现。进入到EntrySetView中看一下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 static final class EntrySetView\u0026lt;K,V\u0026gt; extends CollectionView\u0026lt;K,V,Map.Entry\u0026lt;K,V\u0026gt;\u0026gt; implements Set\u0026lt;Map.Entry\u0026lt;K,V\u0026gt;\u0026gt;, java.io.Serializable { private static final long serialVersionUID = 2249069246763182397L; EntrySetView(ConcurrentHashMap\u0026lt;K,V\u0026gt; map) { super(map); } public Iterator\u0026lt;Map.Entry\u0026lt;K,V\u0026gt;\u0026gt; iterator() { ConcurrentHashMap\u0026lt;K,V\u0026gt; m = map; Node\u0026lt;K,V\u0026gt;[] t; int f = (t = m.table) == null ? 0 : t.length; return new EntryIterator\u0026lt;K,V\u0026gt;(t, f, 0, f, m); } } static final class EntryIterator\u0026lt;K,V\u0026gt; extends BaseIterator\u0026lt;K,V\u0026gt; implements Iterator\u0026lt;Map.Entry\u0026lt;K,V\u0026gt;\u0026gt; { EntryIterator(Node\u0026lt;K,V\u0026gt;[] tab, int index, int size, int limit, ConcurrentHashMap\u0026lt;K,V\u0026gt; map) { super(tab, index, size, limit, map); } public final Map.Entry\u0026lt;K,V\u0026gt; next() { Node\u0026lt;K,V\u0026gt; p; if ((p = next) == null) throw new NoSuchElementException(); K k = p.key; V v = p.val; lastReturned = p; advance(); return new MapEntry\u0026lt;K,V\u0026gt;(k, v, map); } } 经过上面的代码，可以看出在这里它将当前实例赋值到一个新的map中，相当于在调用entrySet时做了一个镜像，然后操作时是在镜像上进行操作，在操作时如果对数据有修改，也不会影响到镜像里面的内容。但是同样的，在镜像里面做迭代也不会有创建镜像后新增的数据。\n总结 在线程不安全的类中使用使用fail-fast来尽最大努力抛出ConcurrentModificationException异常，因为在更新时虽然数据发生了变化，但是在结构上并没变化，只能在增加，删除时保证了安全。\n在线程安全的类中，比如java.util.concurrent包下的容器都是fail-safe。它内部实现是保存了创建一个快照副本，读取这个快照副本的数据。它的缺点是不能保证返回集合更新后的数据，另外创建新的快照也需要一些相应的时间空间开销。\n","permalink":"https://www.liunaijie.top/coding/java/%E4%BB%80%E4%B9%88%E6%98%AFfail-fast%E4%B8%8Efail-safe/","summary":"\u003ch1 id=\"fail-fast与fail-safe\"\u003efail-fast与fail-safe\u003c/h1\u003e\n\u003cp\u003e在Collection集合的各个类中，有线程安全和线程不安全这2大类的版本。\u003c/p\u003e\n\u003cp\u003e对于线程不安全的类，并发情况下可能会出现fail-fast情况；而线程安全的类，可能出现fail-safe的情况。\u003c/p\u003e\n\u003cp\u003e**快速失败（fail—fast）**是java集合中的一种机制， 在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的内容进行了修改（增加、删除、修改），则会抛出Concurrent Modification Exception。\u003c/p\u003e\n\u003cp\u003e**安全失败（fail-sage）**保存了该集合对象的一个快照副本。你可以并发读取，不会抛出异常，但是不保证你遍历读取的值和当前集合对象的状态是一致的！\u003c/p\u003e\n\u003ch1 id=\"fail-fast\"\u003efail-fast\u003c/h1\u003e\n\u003cp\u003e来看一下线程不安全的类\u003ccode\u003eArrayList\u003c/code\u003e，它实现\u003ccode\u003efail-fast\u003c/code\u003e主要靠一个字段\u003ccode\u003emodCount\u003c/code\u003e。来从头认识一下它。\u003c/p\u003e\n\u003cp\u003e首先找到引用它的地方：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eensureCapacityInternal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e// Increments modCount!!\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eelementData\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"o\"\u003e++]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eensureCapacityInternal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eminCapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eensureExplicitCapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecalculateCapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelementData\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eminCapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eensureExplicitCapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eminCapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003emodCount\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e// overflow-conscious code\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eminCapacity\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eelementData\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003egrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eminCapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003erangeCheck\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003emodCount\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eoldValue\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eelementData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enumMoved\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumMoved\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003earraycopy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelementData\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eelementData\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                     \u003c/span\u003e\u003cspan class=\"n\"\u003enumMoved\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eelementData\u003c/span\u003e\u003cspan class=\"o\"\u003e[--\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// clear to let GC do its work\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eoldValue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e可以看出，在增加元素，删除元素时都会对\u003ccode\u003emodCount\u003c/code\u003e值加一。当我们查看更新，查找的代码时并没有找到对\u003ccode\u003emodCount\u003c/code\u003e的修改。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003emodCount\u003c/code\u003e字段翻译过来就是\u003ccode\u003e修改次数\u003c/code\u003e，再结合上面的代码可以了解到只有在结构发生变化，数量增减的时候才会修改。查找不会对结构发生变化也不用修改，至于更新操作，虽然它修改了值，但是在结构上总体的数量没有改变，结构上指的是：是谁不重要，有就行。\u003c/p\u003e","title":"什么是fail-fast与fail-safe"},{"content":"题目描述 给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。\n例如： 给定二叉树 [3,9,20,null,null,15,7],\n3 / \\ 9 20 / \\ 15 7 返回锯齿形层次遍历如下：\n\\[ \\[3], \\[20,9], \\[15,7] ] 所谓的锯齿形遍历，即是在第一层从左向右遍历，在第二层从右向左遍历，依次遍历完成。\n解题思路 我们将从根节点开始从0开始计数，那么就是在偶数层从左向右遍历，在奇数层从右向左遍历，如果我们能得到每一层的节点，那么在奇数层从后向前取，在偶数层从前向后取。\n如果能做到从两端取值呢？我这里使用了双向链表LinkedList。\n我们在遍历第n层时，要将这一次的数据放到结果集中，还要将下一次的节点按照先后顺序放到链表中。以上面的例子为例，在遍历第0层时，下一次的节点要按照(9,20)这样的顺序，在遍历第1层时，下一层的顺序要按照(15,7)这样的顺序。\n这样就可以在每一层遍历开始前得到这一层的节点数量，然后对这一层的节点进行遍历。\n我们如何保证在遍历节点时让下一层的节点按照我们想要的顺序呢？\n看上面的例子，在第一层我们先获取20节点，这时先放了15,7这两个节点，如果9节点还有子节点那么我们要保证9节点的数据在20节点的数据之前。\n除此之外，在每一层遍历时虽然得到了这一层节点的数量，但是我们并不是一次将他们全部取出，而这时子节点也需要放到链表中。我们要保证子节点不能与当前层的数据混合。\n我使用了一个更加复杂一些的例子花了一个流程图，看完这个应该能更好理解：\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; zigzagLevelOrder(TreeNode root) { if (root == null) { return Collections.emptyList(); } List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); LinkedList\u0026lt;TreeNode\u0026gt; queue = new LinkedList\u0026lt;\u0026gt;(); queue.addFirst(root); int level = 0; while (!queue.isEmpty()) { int size = queue.size(); List\u0026lt;Integer\u0026gt; con = new LinkedList\u0026lt;\u0026gt;(); if (level % 2 == 0) { for (int i = 0; i \u0026lt; size; i++) { TreeNode node = queue.pollFirst(); con.add(node.val); if (node.left != null) { queue.addLast(node.left); } if (node.right != null) { queue.addLast(node.right); } } } else { for (int i = 0; i \u0026lt; size; i++) { TreeNode node = queue.pollLast(); con.add(node.val); if(node.right!=null){ queue.addFirst(node.right); } if(node.left!=null){ queue.addFirst(node.left); } } } result.add(con); level++; } return result; } 这里是先从左到右，然后从右到左的顺序。如果题目要求先从右到左，在从左到右的顺序。可以在代码中将pollLast与pollFirst进行交换即可。\n","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86-leetcode103/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。\u003c/p\u003e\n\u003cp\u003e例如：\n给定二叉树 [3,9,20,null,null,15,7],\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e \t  3\n   / \\\n  9  20\n    /  \\\n   15   7\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e返回锯齿形层次遍历如下：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\\[\n  \\[3],\n  \\[20,9],\n  \\[15,7]\n]\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e所谓的锯齿形遍历，即是在第一层从左向右遍历，在第二层从右向左遍历，依次遍历完成。\u003c/p\u003e","title":"二叉树的锯齿形层次遍历-LeetCode103"},{"content":"题目描述 给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。\n你可以假设数组是非空的，并且给定的数组总是存在多数元素。\n示例 1:\n输入: [3,2,3] 输出: 3 示例 2:\n输入: [2,2,1,1,1,2,2] 输出: 2\n解题思路 这个题目要求我们找这个数组里面数量最多的元素，并且这个元素出现的次数大于 n/2。\nmap\n遍历数组，key相同的数量加一，然后判断数量如果大于n/2则找到答案\n排序\n将数组排序后，由于多数元素出现次数大于n/2，所以在n/2上的元素就是我们要找的元素\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public int majorityElement(int[] nums) { int n = nums.length; Map\u0026lt;Integer, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(n); for (int num : nums) { if (map.containsKey(num)) { int count = map.get(num); if ((count + 1) \u0026gt; n / 2) { return num; } map.put(num, count + 1); } else { map.put(num, 1); } } return nums[0]; } /** * 排序后 在n/2位的肯定是多数元素 * @param nums * @return */ public int majorityElementSort(int[] nums) { Arrays.sort(nums); return nums[nums.length / 2]; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0-leetcode169/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。\u003c/p\u003e\n\u003cp\u003e你可以假设数组是非空的，并且给定的数组总是存在多数元素。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e输入: [3,2,3]\n输出: 3\n示例 2:\u003c/p\u003e\n\u003cp\u003e输入: [2,2,1,1,1,2,2]\n输出: 2\u003c/p\u003e\u003c/blockquote\u003e","title":"多数元素-LeetCode169"},{"content":"题目描述 给你 n 个非负整数 a1，a2，\u0026hellip;，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\n说明：你不能倾斜容器，且 n 的值至少为 2。\n图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\n示例：\n输入：[1,8,6,2,5,4,8,3,7] 输出：49\n解题思路 水的容量怎么算呢？两个边界的最小值，与边界之间的距离相乘，结果就是所能盛水的容量。\n最开始拿两边的边界来进行计算，得到一个水的容量。这个时候，下一步如何移动呢？我们开始是从最左侧和最右侧找的两个值，然后比较这两个值，当哪边的值小，哪边的指针就向另一侧移动，补短板。\n比较每次的容量与最大值，如果比最大值还大则替换，直到找完。\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public int maxArea(int[] height) { int max = 0; int left = 0, right = height.length - 1; while (left \u0026lt; right) { int temp = Math.min(height[left], height[right]) * (right - left); max = Math.max(temp, max); if (height[left] \u0026lt; height[right]) { left++; } else { right--; } } return max; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8-leetcode11/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给你 n 个非负整数 a1，a2，\u0026hellip;，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\u003c/p\u003e\n\u003cp\u003e说明：你不能倾斜容器，且 n 的值至少为 2。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\u003c/p\u003e\n\u003cp\u003e示例：\u003c/p\u003e\n\u003cp\u003e输入：[1,8,6,2,5,4,8,3,7]\n输出：49\u003c/p\u003e\u003c/blockquote\u003e","title":"盛水最多的容器—LeetCode11"},{"content":"自己动手实现一个RPC框架\n使用fastjson，netty，反射，动态代理，zookeeper实现一个RPC框架。\n代码链接：https://github.com/liunaijie/self-rpc-framwork`\n各模块说明： rpc-commons 通用设置模块，包括网络传输的数据格式，请求编号工具类，反射工具类等一些底层协议，工具相关的内容\nrpc-register\n服务注册模块，主要包括服务的注册与发现功能。这里使用zookeeper来进行实现。\n在这里，服务端注册时，使用通用模块中的ServiceDescriptor,ResponseServiceDescription类来进行注册 ResponseServiceDescription类是ServiceDescription的子类，添加了实现类，实例地址等属性。 消费者查找服务时，发送ServiceDescription得到ResponseServiceDescription，一个类可能有多个实现类，多个实例，在返回时进行随机返回。 对于同一个实现的不同版本实现，或多个服务实例这种情况随机返回没有问题。对于不同实现类，采用随机返回可能有些问题，但是在spring中对于多实现类也需要指定实现类，所以后面再考虑更改。\nrpc-codec 信息的编解码，这里使用fastjson来进行实现。\nrpc-transport\n网络传输模块，生产者调用启动监听服务，消费者调用发送请求。\n这里使用netty来进行实现。\nrpc-server\n生产者调用的模块，注册服务实现，包括实现的接口，实现类，版本等。\n启动服务，监听连接，对请求的解析，然后通过反射来进行处理，最后将处理结果进行返回。\nrpc-client\n消费者调用的模块，通过代理来进行实际调用。\n通过信号量Semaphore来控制同时发送的请求数量，防止多请求发送后压垮服务端。\n使用future来实现异步操作，使用map容器存储，并且启动固定频率线程，清除超时超时的future。\nsimple-example\n一个简单的客户端，定义了一个接口，包含有返回值和无返回值的两个方法\n1 2 3 4 public interface HelloService { String hello(String name); void bye(String name); } 然后定义了两个不同的实现类Chinese,English两种实现分别以不同语言进行返回或打印。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public class ChineseHelloImpl implements HelloService { @Override public String hello(String name) { return \u0026#34;你好，\u0026#34; + name; } @Override public void bye(String name) { System.out.println(\u0026#34;再见,\u0026#34; + name); } } public class EnglishHelloImpl implements HelloService { @Override public String hello(String name) { return \u0026#34;hello,\u0026#34; + name; } @Override public void bye(String name) { System.out.println(\u0026#34;bye,\u0026#34;+name); } } 并且定义了同一个实现类的不同版本，在返回信息中做了区别。\n1 2 3 4 5 6 7 8 9 10 public class V2Chinese implements HelloService { @Override public String hello(String name) { return \u0026#34;v2 你好,\u0026#34; + name; } @Override public void bye(String name) { System.out.println(\u0026#34;v2 再见,\u0026#34; + name); } } 然后先后启动SimpleProvide和SimpleConsumer两个类。\n可以在SimpleConsumer控制台中看到有返回值的调用内容，在SimpleProvider控制台中看到无返回值的调用。即表示服务调用成功。\n其他部分链接 自己动手首先一个RPC框架（三） 自己动手首先一个RPC框架（四） 自己动手首先一个RPC框架（五） 自己动手首先一个RPC框架（六） 自己动手首先一个RPC框架（七） ","permalink":"https://www.liunaijie.top/coding/micro_service/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AArpc%E6%A1%86%E6%9E%B6%E4%BA%8C/","summary":"\u003cp\u003e\u003cstrong\u003e自己动手实现一个RPC框架\u003c/strong\u003e\u003cbr\u003e\n使用fastjson，netty，反射，动态代理，zookeeper实现一个RPC框架。\u003c/p\u003e\n\u003cp\u003e代码链接：https://github.com/liunaijie/self-rpc-framwork`\u003c/p\u003e\n\u003ch1 id=\"各模块说明\"\u003e各模块说明：\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003erpc-commons\u003c/code\u003e\n通用设置模块，包括网络传输的数据格式，请求编号工具类，反射工具类等一些底层协议，工具相关的内容\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003erpc-register\u003c/code\u003e\u003cbr\u003e\n服务注册模块，主要包括服务的注册与发现功能。这里使用\u003ccode\u003ezookeeper\u003c/code\u003e来进行实现。\u003cbr\u003e\n在这里，服务端注册时，使用通用模块中的\u003ccode\u003eServiceDescriptor\u003c/code\u003e,\u003ccode\u003eResponseServiceDescription\u003c/code\u003e类来进行注册\n\u003ccode\u003eResponseServiceDescription\u003c/code\u003e类是\u003ccode\u003eServiceDescription\u003c/code\u003e的子类，添加了\u003ccode\u003e实现类，实例地址\u003c/code\u003e等属性。\n消费者查找服务时，发送\u003ccode\u003eServiceDescription\u003c/code\u003e得到\u003ccode\u003eResponseServiceDescription\u003c/code\u003e，一个类可能有多个实现类，多个实例，在返回时进行随机返回。\n对于同一个实现的不同版本实现，或多个服务实例这种情况随机返回没有问题。对于不同实现类，采用随机返回可能有些问题，但是在\u003ccode\u003espring\u003c/code\u003e中对于多实现类也需要指定实现类，所以后面再考虑更改。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"自己动手实现一个RPC框架（二）"},{"content":"rpc-server 消费者的部分，这里使用配置类，将各种实现的部分在配置类中进行定义。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public class ServerConfig { /** * 监听端口 */ private int port = 9090; /** * 网络传输 */ private Class\u0026lt;? extends TransportServer\u0026gt; transportClass = NettyServer.class; /** * 注册中心 */ private Class\u0026lt;? extends RpcRegister\u0026gt; rpcRegister = ZookeeperRegistry.class; /** * 编码 */ private Class\u0026lt;? extends Encoder\u0026gt; encoder = FastJsonEncoder.class; /** * 解码 */ private Class\u0026lt;? extends Decoder\u0026gt; decoder = FastJsonDecoder.class; } 这这个配置中，定义了服务启动的端口，网络传输，注册中心，编解码的各种实现，当我们需要更换实现时只需要在这里修改即可。\n请求的实际处理类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 public class RpcRequestHandler implements RequestHandler { private final Decoder decoder; private final Encoder encoder; public RpcRequestHandler(Decoder decoder, Encoder encoder) { this.decoder = decoder; this.encoder = encoder; } @Override public Command handle(Command requestCommand) { Header header = requestCommand.getHeader(); //反序列化RpcRequest RequestInfo requestInfo = decoder.decode(requestCommand.getBytes(), RequestInfo.class); try { //客户端在注册中心获取到实现类和地址 ResponseServiceDescription responseServiceDescription = requestInfo.getResponseServiceDescription(); //通过反射进行调用 Class implClass = Class.forName(responseServiceDescription.getImplName()); Object implInstance = implClass.newInstance(); Method method = implClass.getMethod(requestInfo.getResponseServiceDescription().getMethod(), requestInfo.getResponseServiceDescription().getParameterTypes()); Object result = method.invoke(implInstance, requestInfo.getParameters()); //将结果封装成响应进行返回 return new Command(new ResponseHeader(header.getRequestId(), header.getVersion(), ResponseHeader.SUCCESS_CODE, ResponseHeader.SUCCESS_MSG), encoder.encode(result)); } catch (Throwable t) { //发生异常，返回错误信息 log.warn(\u0026#34;Exception:\u0026#34;, t); return new Command(new ResponseHeader(header.getRequestId(), header.getVersion(), -1, t.getMessage()), new byte[0]); } } } 这个类实现自rpc-transport中的RequestHandler接口\n主类：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 public class RpcServer { /** * 服务配置类 */ private ServerConfig serverConfig; /** * 网络传输服务端 */ private TransportServer transportServer; /** * 注册中心 */ private RpcRegister rpcRegister; public RpcServer() { this(new ServerConfig()); } public RpcServer(ServerConfig serverConfig) { this.serverConfig = serverConfig; this.transportServer = ReflectionUtils.newInstance(serverConfig.getTransportClass()); Encoder encoder = ReflectionUtils.newInstance(serverConfig.getEncoder()); Decoder decoder = ReflectionUtils.newInstance(serverConfig.getDecoder()); this.transportServer.init(new RpcRequestHandler(decoder, encoder)); this.rpcRegister = ReflectionUtils.newInstance(serverConfig.getRpcRegister()); } /** * 注册服务 * @param interfaceClass 接口类 * @param impl 实现类 * @param version 实现的版本号 * @param \u0026lt;T\u0026gt; 接口类型 */ public \u0026lt;T\u0026gt; void register(Class\u0026lt;T\u0026gt; interfaceClass, Class\u0026lt;? extends T\u0026gt; impl, String version) { Method[] methods = ReflectionUtils.getPublicMethods(interfaceClass); for (Method method : methods) { ServiceDescriptor serviceDescriptor = ServiceDescriptor.from(interfaceClass, version, method); ResponseServiceDescription responseServiceDescription = formResponseServiceDescription(interfaceClass, method, version, impl); rpcRegister.register(serviceDescriptor, responseServiceDescription); log.info(\u0026#34;register service:{}{} \u0026#34;, serviceDescriptor.getClazz(), serviceDescriptor.getMethod()); } } /** * 启动服务 */ public void start() { try { this.transportServer.start(serverConfig.getPort()); } catch (InterruptedException e) { e.printStackTrace(); log.error(\u0026#34;server start failed:{}\u0026#34;, e.getMessage()); } } public void stop() { this.transportServer.stop(); } private \u0026lt;T\u0026gt; ResponseServiceDescription formResponseServiceDescription(Class\u0026lt;T\u0026gt; interfaceClass, Method method, String version, Class\u0026lt;? extends T\u0026gt; impl) { return ResponseServiceDescription.from(interfaceClass, version, method, impl, getURI()); } /** * 返回这个实例的地址和端口，由于本地调用所以就直接返回了localhost * @return */ private URI getURI() { String host = \u0026#34;localhost\u0026#34;; return URI.create(\u0026#34;rpc://\u0026#34; + host + \u0026#34;:\u0026#34; + serverConfig.getPort()); } } 生产者调用流程：\n初始化new RpcServer()\n注册服务register()\n启动服务start()\n其他部分链接 自己动手首先一个RPC框架（二） 自己动手首先一个RPC框架（三） 自己动手首先一个RPC框架（四） 自己动手首先一个RPC框架（五） 自己动手首先一个RPC框架（七） ","permalink":"https://www.liunaijie.top/coding/micro_service/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AArpc%E6%A1%86%E6%9E%B6%E5%85%AD/","summary":"\u003ch1 id=\"rpc-server\"\u003erpc-server\u003c/h1\u003e\n\u003cp\u003e消费者的部分，这里使用配置类，将各种实现的部分在配置类中进行定义。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eServerConfig\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * 监听端口\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eport\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e9090\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * 网络传输\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eClass\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eTransportServer\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etransportClass\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNettyServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * 注册中心\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eClass\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eRpcRegister\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003erpcRegister\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eZookeeperRegistry\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * 编码\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eClass\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eEncoder\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eencoder\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eFastJsonEncoder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * 解码\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eClass\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDecoder\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edecoder\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eFastJsonDecoder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e这这个配置中，定义了服务启动的端口，网络传输，注册中心，编解码的各种实现，当我们需要更换实现时只需要在这里修改即可。\u003c/p\u003e","title":"自己动手实现一个RPC框架(六)"},{"content":"rpc-client 消费者端，通过代理来进行调用。\n与生产者端类型，首先定义配置类：\n1 2 3 4 5 6 7 8 9 10 public class ClientConfig { private Class\u0026lt;? extends Encoder\u0026gt; encoder = FastJsonEncoder.class; private Class\u0026lt;? extends Decoder\u0026gt; decoder = FastJsonDecoder.class; private Class\u0026lt;? extends TransportClient\u0026gt; transportClient = NettyClient.class; private Class\u0026lt;? extends RpcRegister\u0026gt; rpcRegister = ZookeeperRegistry.class; } 代理类：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 public class RemoteInvoker implements InvocationHandler { /** * 请求的对象 */ private Class clazz; /** * 编码 */ private Encoder encoder; /** * 解码 */ private Decoder decoder; /** * 网络传输 */ private TransportClient transportClient; /** * 注册中心 */ private RpcRegister rpcRegister; private String version; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { //首先从注册中心查询 ResponseServiceDescription responseServiceDescription = lookup(clazz, version, method); //创建连接 Transport transport = transportClient.createTransport(new InetSocketAddress(responseServiceDescription.getUri().getHost(), responseServiceDescription.getUri().getPort()), 30000L); //构建请求信息 Header header = new Header(); header.setRequestId(IDUtil.nextId()); header.setVersion(1); RequestInfo requestInfo = new RequestInfo(responseServiceDescription, args); Command requestCommand = new Command(header, encoder.encode(requestInfo)); //发送请求 CompletableFuture\u0026lt;Command\u0026gt; future = transport.sendRequest(requestCommand); //获取响应 Command responseCommand = future.get(); Header respHeader = responseCommand.getHeader(); if (respHeader instanceof ResponseHeader) { //对响应信息做判断 ResponseHeader responseHeader = (ResponseHeader) respHeader; if (responseHeader.getCode() != ResponseHeader.SUCCESS_CODE) { throw new IllegalStateException(responseHeader.getMsg()); } } //返回响应结果 return decoder.decode(responseCommand.getBytes(), method.getReturnType()); } /** * 向注册中心查询 */ private ResponseServiceDescription lookup(Class clazz, String version, Method method) { ServiceDescriptor serviceDescriptor = ServiceDescriptor.from(clazz, version, method); ResponseServiceDescription responseServiceDescription = rpcRegister.lookup(serviceDescriptor); if (responseServiceDescription == null) { throw new IllegalStateException(\u0026#34;provider not exist!\u0026#34;); } return responseServiceDescription; } } 其他部分链接 自己动手首先一个RPC框架（二）\n自己动手首先一个RPC框架（三）\n自己动手首先一个RPC框架（四）\n自己动手首先一个RPC框架（五）\n自己动手首先一个RPC框架（六）\n","permalink":"https://www.liunaijie.top/coding/micro_service/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AArpc%E6%A1%86%E6%9E%B6%E4%B8%83/","summary":"\u003ch1 id=\"rpc-client\"\u003erpc-client\u003c/h1\u003e\n\u003cp\u003e消费者端，通过代理来进行调用。\u003c/p\u003e\n\u003cp\u003e与生产者端类型，首先定义配置类：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eClientConfig\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eClass\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eEncoder\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eencoder\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eFastJsonEncoder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eClass\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDecoder\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edecoder\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eFastJsonDecoder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eClass\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eTransportClient\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etransportClient\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNettyClient\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eClass\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eRpcRegister\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003erpcRegister\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eZookeeperRegistry\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"自己动手实现一个RPC框架(七)"},{"content":"rpc-commons 这个模块主要是定义一些通信协议类，工具类。\n请求编号类 对请求过程添加请求编号，所以设置一个IDUtil，里面的实现使用AtomicLong来进行递增取值。\n反射工具类\n在生产者接收到请求信息进行实际调用时需要用到反射来进行实际调用。所有在这里先将反射的一些方法写成工具类。\n需要通过反射来获取对象实例，进行实际调用，并且注册时需要将所有公共方法都进行注册，所有还需要一个获取类中所有公共方法的方法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 public class ReflectionUtils { /** * 根据class创建对象实例 * * @param clazz 待创建的对象 * @param \u0026lt;T\u0026gt; 对象类型 * @return 创建好的对象 */ public static \u0026lt;T\u0026gt; T newInstance(Class\u0026lt;T\u0026gt; clazz) { try { return clazz.newInstance(); } catch (Exception e) { e.printStackTrace(); throw new IllegalStateException(e); } } /** * 获取一个类中所有的公共方法 * * @param clazz 目标类 * @return 公共方法的数组 */ public static Method[] getPublicMethods(Class clazz) { Method[] methods = clazz.getDeclaredMethods(); List\u0026lt;Method\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); for (Method method : methods) { if (Modifier.isPublic(method.getModifiers())) { list.add(method); } } return list.toArray(new Method[0]); } /** * 调用指定对象的指定方法 * * @param obj 被调用的对象 * @param method 被调用的参数 * @param args 参数 * @return 方法返回结果 */ public static Object invoke(Object obj, Method method, Object... args) { try { return method.invoke(obj, args); } catch (Exception e) { e.printStackTrace(); throw new IllegalStateException(e); } } } 网络传输发送的信息\n我们将实际发送的业务请求信息与一些其它项目分别开。\n1 2 3 4 5 6 7 public class Command { /** * 头信息 */ private Header header; private byte[] bytes; } 在这里，bytes是业务请求信息，而header中是我们对请求的一些信息。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 public class Header { /** * 请求编号 */ private long requestId; /** * 请求协议的版本号 */ private int version; /** * 计算长度信息，后面请求解析时用到 * @return */ public int length() { return Long.BYTES + Integer.BYTES; } } public class ResponseHeader extends Header { public static final int SUCCESS_CODE = 0; public static final String SUCCESS_MSG = \u0026#34;ok\u0026#34;; /** * 响应码 */ private int code = SUCCESS_CODE; /** * 响应信息，错误信息 */ private String msg = SUCCESS_MSG; @Override public int length() { return Long.BYTES + Integer.BYTES + Integer.BYTES + Integer.BYTES + (msg == null ? 0 : msg.getBytes(StandardCharsets.UTF_8).length); } public ResponseHeader(long requestId, int version, int code, String msg) { super(requestId, version); this.code = code; this.msg = msg; } } Header也分为请求头部和返回信息的头部，在请求信息中，我们需要给出这次请求的编号，这次请求的协议版本号，版本号是为了后续可能升级协议后导致的不兼容问题。\nResponseHeader是返回信息的头部，它是Header的子类，除了父类中的请求编号，协议版本号之外，还增加了状态码，状态信息字段。\n重要的地方：length()\n**length()**方法，这个方法是返回头部信息的长度。由于Header中只有两个字段分别为long,int。所以长度即为它们两个的字节长度之和。\n而在返回信息中，它多了msg这个字符串类型的字段，它在遇到异常时返回异常信息，所以它的长度是不固定的，我们在响应编码时需要先写入msg的长度，再写入msg的具体信息。所以这里求长度，除了几个字段的长度为还多了一个Integet.BYTES，这就是因为在编码时多了一个长度。\n可以结合rpc-transport/netty/codec/ResponseEncoder和rpc-transport/netty/codec/ResponseDecoder 两个类分别为对响应信息的编解码操作来理解。\n业务请求内容\n1 2 3 4 5 6 7 8 9 10 public class RequestInfo { /** * 服务描述，类，方法，参数类型，返回类型等 */ private ResponseServiceDescription responseServiceDescription; /** * 参数 */ private Object[] parameters; } 这个类就是在Command类中的bytes对应的内容。\n而这里有使用了一个类ResponseServiceDescription，这个类是对服务的描述信息。它首先继承自``ServiceDescription`。\n来看一下它们两个类的代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 public class ServiceDescriptor { private static final String DEFAULT_VERSION = \u0026#34;1.0\u0026#34;; /** * 接口名称 */ private String clazz; /** * 方法 */ private String method; /** * 版本号 */ private String version; /** * 返回值类型 */ private String returnType; /** * 参数类型 */ private Class[] parameterTypes; public static ServiceDescriptor from(Class clazz, String version, Method method) { ... } } public class ResponseServiceDescription extends ServiceDescriptor { /** * 实现类 */ private String implName; /** * 实例的地址 */ private URI uri; public static ResponseServiceDescription from(Class clazz, String version, Method method, Class implClass, URI uri) { ... } } 它们两个主要的区别是ResponseServiceDescription中多了implName和uri两个字段。\n我这里采用的是消费者构造ServiceDescription去注册中心进查询，注册中心返回ResponseServiceDescription，即给出了要调用接口的实现类，这个实现类所在实例的请求地址。\n返回实现类是为了请求到达生产者后，生产者能直接构建实例进行调用，请求地址则是为了网络通信。\n结语 对于通用模块或者协议的定义中，需要提前想到升级后的处理，比如这里的version字段。\n对于同一个实现类，可能存在不同版本的实现，在ServiceDescription中的version字段来表示。\n我这里其实将实现类的信息返回给了消费者，也可以在消费者端维护一个容器，存储接口和实现类，注册中心只返回uri。这样消费者发送给生产者的信息就可以是ServiceDescription。\n其他部分链接 自己动手首先一个RPC框架（二） 自己动手首先一个RPC框架（四） 自己动手首先一个RPC框架（五） 自己动手首先一个RPC框架（六） 自己动手首先一个RPC框架（七） ","permalink":"https://www.liunaijie.top/coding/micro_service/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AArpc%E6%A1%86%E6%9E%B6%E4%B8%89/","summary":"\u003ch1 id=\"rpc-commons\"\u003erpc-commons\u003c/h1\u003e\n\u003cp\u003e这个模块主要是定义一些通信协议类，工具类。\u003c/p\u003e","title":"自己动手实现一个RPC框架（三）"},{"content":"rpc-register 注册中心，这里使用zookeeper来实现。\n生产者在启动服务时，将自己实现的服务注册到注册中心。\n消费者调用服务时，来注册中心查找，返回调用服务实例的地址信息。\n并且为了适应不同的注册实现，我们将功能定义为接口，在替换实现时在配置文件中进行替换即可。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public interface RpcRegister { /** * 注册服务 * @param serviceDescriptor * @param responseServiceDescription */ void register(ServiceDescriptor serviceDescriptor, ResponseServiceDescription responseServiceDescription); /** * 根据服务名称查询实例地址 * @param serviceDescriptor * @return */ ResponseServiceDescription lookup(ServiceDescriptor serviceDescriptor); } zookeeper实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 public class ZookeeperRegistry implements RpcRegister { /** * 注册的名称 */ private static final String NAME_SPACE = \u0026#34;zk-rpc\u0026#34;; /** * 节点信息 */ private static final String RPC_PROVIDER_NODE = \u0026#34;/provider\u0026#34;; /** * 保存多个生产者信息,作为缓存容器 */ private final Map\u0026lt;ServiceDescriptor, List\u0026lt;ResponseServiceDescription\u0026gt;\u0026gt; remoteProviders = new ConcurrentHashMap\u0026lt;\u0026gt;(); /** * 客户端 */ private CuratorFramework zkClient; /** * 编解码，将节点信息编码后存到节点中 */ private Encoder encoder; private Decoder decoder; public ZookeeperRegistry() { this(\u0026#34;localhost:2181\u0026#34;); } public ZookeeperRegistry(String zkConnectString) { // 设置重试次数和两次重试间隔时间 RetryPolicy retryPolicy = new RetryNTimes(3, 5000); //获取客户端 this.zkClient = CuratorFrameworkFactory.builder() .connectString(zkConnectString) .sessionTimeoutMs(10000) .retryPolicy(retryPolicy) .namespace(NAME_SPACE) .build(); this.encoder = new FastJsonEncoder(); this.decoder = new FastJsonDecoder(); this.zkClient.start(); } /** * 注册服务 * @param serviceDescriptor 请求服务信息 * @param responseServiceDescription 响应信息，包括实现类和实例地址 */ @Override public void register(ServiceDescriptor serviceDescriptor, ResponseServiceDescription responseServiceDescription) { String nodePath = RPC_PROVIDER_NODE + \u0026#34;/\u0026#34; + serviceDescriptor.toString(); try { // 判断节点是否存在，如果不存在则创建 Stat stat = zkClient.checkExists().forPath(nodePath); if (stat == null) { zkClient.create() .creatingParentsIfNeeded() .withMode(CreateMode.EPHEMERAL_SEQUENTIAL) .withACL(ZooDefs.Ids.OPEN_ACL_UNSAFE) //创建节点，并且将信息写入节点中\t.forPath(nodePath, encoder.encode(responseServiceDescription)); } else { //这里对于多个实例的情况没有处理 System.out.println(\u0026#34;the provider already exist,\u0026#34; + serviceDescriptor.toString()); } } catch (Exception e) { e.printStackTrace(); } } /** * 订阅服务 */ public void subscribe(ServiceDescriptor serviceDescriptor) { try { List\u0026lt;String\u0026gt; providerIds = zkClient.getChildren().forPath(RPC_PROVIDER_NODE); for (String providerId : providerIds) { //如果与订阅服务相同，则获取节点信息 if (providerId.contains(serviceDescriptor.toString())) { String nodePath = RPC_PROVIDER_NODE + \u0026#34;/\u0026#34; + providerId; byte[] data = zkClient.getData().forPath(nodePath); ResponseServiceDescription providerInfo = decoder.decode(data, ResponseServiceDescription.class); //获取到服务信息后，将它放到缓存中 if (remoteProviders.containsKey(serviceDescriptor)) { remoteProviders.get(serviceDescriptor).add(providerInfo); } else { List\u0026lt;ResponseServiceDescription\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); list.add(providerInfo); remoteProviders.put(serviceDescriptor, list); } } } //添加监听事件 addProviderWatch(serviceDescriptor); } catch (Exception e) { e.printStackTrace(); } } public void addProviderWatch(ServiceDescriptor serviceDescriptor) { try { //创建子节点缓存 final PathChildrenCache childrenCache = new PathChildrenCache(this.zkClient, RPC_PROVIDER_NODE, true); childrenCache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE); //添加子节点监听事件 childrenCache.getListenable().addListener((client, event) -\u0026gt; { String nodePath = event.getData().getPath(); if (nodePath.contains(serviceDescriptor.toString())) { if (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_REMOVED)) { //节点移除 this.remoteProviders.remove(nodePath); } else if (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_ADDED)) { byte[] data = event.getData().getData(); ResponseServiceDescription providerInfo = decoder.decode(data, ResponseServiceDescription.class); //添加节点 if (remoteProviders.containsKey(serviceDescriptor)) { remoteProviders.get(serviceDescriptor).add(providerInfo); } else { List\u0026lt;ResponseServiceDescription\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); list.add(providerInfo); remoteProviders.put(serviceDescriptor, list); } } } }); } catch (Exception e) { e.printStackTrace(); } } /** * 查找服务，先去缓存容器中查询，如果没有调用订阅的方法， * 订阅后会将信息放到容器中。最后都从容器中返回。 */ @Override public ResponseServiceDescription lookup(ServiceDescriptor serviceDescriptor) { if (!remoteProviders.containsKey(serviceDescriptor)) { subscribe(serviceDescriptor); } List\u0026lt;ResponseServiceDescription\u0026gt; list = remoteProviders.get(serviceDescriptor); return list.get(new Random().nextInt(list.size())); } } 这里有一个问题是如果有多个实现类，我这里只是随机返回一个，这种请求在spring中也需要进行手动声明，\n所以暂时没有想到什么好的解决方法。\n在注册中心维护了一个容器作为客户端调用的缓存。并且对节点进行监听，如果有变动会更改容器的内容。\nrpc-codec 编解码模块，将对象转换成字节码从而进行网络传输。\n将字节码进行解析成对象，从而进行业务处理。\n这里使用了阿里的Fastjson来进行实现。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public interface Decoder { /** * 将字节数组转换为对象 * * @param bytes 字节数组 * @param clazz 被转换成的类型 * @param \u0026lt;T\u0026gt; 类型 * @return 转换成的对象 */ \u0026lt;T\u0026gt; T decode(byte[] bytes, Class\u0026lt;T\u0026gt; clazz); } public interface Encoder { /** * 将对象转换为字节数组 * * @param obj 要转换的对象 * @return */ byte[] encode(Object obj); } 而实现对象也直接调用fastjson的方法即可。\n1 2 3 4 5 6 7 8 9 10 11 12 13 public class FastJsonDecoder implements Decoder { @Override public \u0026lt;T\u0026gt; T decode(byte[] bytes, Class\u0026lt;T\u0026gt; calzz) { return JSON.parseObject(bytes, calzz); } } public class FastJsonEncoder implements Encoder { @Override public byte[] encode(Object obj) { return JSON.toJSONBytes(obj); } } 其他部分链接 自己动手首先一个RPC框架（二） 自己动手首先一个RPC框架（三） 自己动手首先一个RPC框架（五） 自己动手首先一个RPC框架（六） 自己动手首先一个RPC框架（七） ","permalink":"https://www.liunaijie.top/coding/micro_service/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AArpc%E6%A1%86%E6%9E%B6%E5%9B%9B/","summary":"\u003ch1 id=\"rpc-register\"\u003erpc-register\u003c/h1\u003e\n\u003cp\u003e注册中心，这里使用\u003ccode\u003ezookeeper\u003c/code\u003e来实现。\u003c/p\u003e\n\u003cp\u003e生产者在启动服务时，将自己实现的服务注册到注册中心。\u003c/p\u003e\n\u003cp\u003e消费者调用服务时，来注册中心查找，返回调用服务实例的地址信息。\u003c/p\u003e\n\u003cp\u003e并且为了适应不同的注册实现，我们将功能定义为接口，在替换实现时在配置文件中进行替换即可。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003einterface\u003c/span\u003e \u003cspan class=\"nc\"\u003eRpcRegister\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * 注册服务\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * @param serviceDescriptor\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * @param responseServiceDescription\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eregister\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eServiceDescriptor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eserviceDescriptor\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eResponseServiceDescription\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresponseServiceDescription\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * 根据服务名称查询实例地址\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * @param serviceDescriptor\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * @return\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003eResponseServiceDescription\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003elookup\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eServiceDescriptor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eserviceDescriptor\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"自己动手实现一个RPC框架(四)"},{"content":"rpc-transport 这个模块是有在观看消息队列高手课中的rpc示例完成的。\n网络传输模块，这里使用netty来进行实现。\n生产者调用来指定端口启动服务。\n1 2 3 4 public interface TransportServer { void start(int port) throws InterruptedException; void stop(); } 消费者调用来创建一个连接\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public interface TransportClient extends Closeable { Transport createTransport(SocketAddress address, long timeout) throws TimeoutException, InterruptedException; @Override void close(); } public interface Transport { /** * 发送请求命令 * * @param request 请求命令 * @return 一个future */ CompletableFuture\u0026lt;Command\u0026gt; sendRequest(Command request); } 发送一个Command然后使用future来实现异步。\nfuture的定义如下：\n1 2 3 4 5 6 7 8 9 10 11 public class ResponseFuture { private final long requestId; private final CompletableFuture\u0026lt;Command\u0026gt; future; private final long timestamp; public ResponseFuture(long requestId, CompletableFuture\u0026lt;Command\u0026gt; future) { this.requestId = requestId; this.future = future; //创建时间初始化时自动指定 this.timestamp = System.nanoTime(); } } 同时我们使用信号量来实现对客户端请求的限流。同时将future使用容器存储起来。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 public class InFlightRequests implements Closeable { /** * 超时时间，当超过20秒仍未收到响应则删除这个请求 */ private final static long TIMEOUT_SEC = 20L; /** * 容器，以请求编号为key，future作为value */ private final Map\u0026lt;Long, ResponseFuture\u0026gt; futureMap = new ConcurrentHashMap\u0026lt;\u0026gt;(); /** * 定义一个信号量，发送10个请求，每当归还一个信号后才能继续发送 * 不然客户端会一直想服务端发送消息，服务端如果处理不过来而客户端一直在发送就让服务端更糟糕 */ private final Semaphore semaphore = new Semaphore(10); /** * 启动一个线程，以固定频率TIMEOUT_SEC（即超时时间）启动，每次将超时的任务删除，同时释放一个信号量 */ private final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(); private final ScheduledFuture scheduledFuture; public InFlightRequests() { //初始化，线程以固定频率执行清除任务 scheduledFuture = scheduledExecutorService.scheduleAtFixedRate(this::removeTimeoutFutures, TIMEOUT_SEC, TIMEOUT_SEC, TimeUnit.SECONDS); } public void put(ResponseFuture responseFuture) throws InterruptedException, TimeoutException { //在指定时间内获取一个许可，获取不到则超时抛出异常 if (semaphore.tryAcquire(TIMEOUT_SEC, TimeUnit.SECONDS)) { futureMap.put(responseFuture.getRequestId(), responseFuture); } else { throw new TimeoutException(); } } /** * 对超过时间的请求进行移除 */ private void removeTimeoutFutures() { futureMap.entrySet().removeIf(entry -\u0026gt; { if (System.nanoTime() - entry.getValue().getTimestamp() \u0026gt; TIMEOUT_SEC * 1000000000L) { semaphore.release(); return true; } else { return false; } }); } public ResponseFuture remove(long requestId) { ResponseFuture future = futureMap.remove(requestId); if (null != future) { semaphore.release(); } return future; } @Override public void close() { //关闭时将定时线程关闭 scheduledFuture.cancel(true); scheduledExecutorService.shutdown(); } } netty实现 编解码 由于netty使用了自己定义的ByteBuf,所以我们需要进行编解码。\n我们按照请求流程来理一下\n消费者将Command命令编码后发送到生产者 生产者需要解析消息。 然后生产者进行调用，返回时需要将响应消息编码。 消费者接收到生产者的响应，需要将响应信息解码。 我们来看一下对应每一步的代码实现：\n定义请求的编码类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class CommandEncoder extends MessageToByteEncoder\u0026lt;Command\u0026gt; { @Override protected void encode(ChannelHandlerContext channelHandlerContext, Command command, ByteBuf byteBuf) throws Exception { //定义信息长度，头信息长度+实际信息长度+再加一个int的字节长度 byteBuf.writeInt(Integer.BYTES + command.getHeader().length() + command.getBytes().length); //对头部信息进行编码 encodeHeader(channelHandlerContext, command.getHeader(), byteBuf); byteBuf.writeBytes(command.getBytes()); } protected void encodeHeader(ChannelHandlerContext channelHandlerContext, Header header, ByteBuf byteBuf) throws Exception { byteBuf.writeLong(header.getRequestId()); byteBuf.writeInt(header.getVersion()); } } 这时信息到达生产者，就需要进行解析了。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public abstract class CommandDecoder extends ByteToMessageDecoder { private static final int LENGTH_FIELD_LENGTH = Integer.BYTES; @Override protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List\u0026lt;Object\u0026gt; list) throws Exception { if (!byteBuf.isReadable(LENGTH_FIELD_LENGTH)) { return; } byteBuf.markReaderIndex(); int length = byteBuf.readInt() - LENGTH_FIELD_LENGTH; if (byteBuf.readableBytes() \u0026lt; length) { byteBuf.resetReaderIndex(); return; } Header header = decodeHeader(channelHandlerContext, byteBuf); int bytesLength = length - header.length(); byte[] bytes = new byte[bytesLength]; byteBuf.readBytes(bytes); list.add(new Command(header, bytes)); } protected abstract Header decodeHeader(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf); } 这个与上面不同的地方是，上面的编码信息是对请求的编码，只会在消费者发送到生产者时用到。而这个解码是对Command的解码，在生产者接收消费者的请求，消费者接收生产者的响应时都会用到。这两个请求有一个不同的地方是头部信息是不一样的，所以这里定义为抽象类。\n这里定义了一个成员变量LENGTH_FIELD_LENGTH就是我们在上面多加了一个Inter.BYTES。\n头部解码的不同实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public class RequestDecoder extends CommandDecoder { @Override protected Header decodeHeader(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf) { return new Header(byteBuf.readLong(),byteBuf.readInt()); } } public class ResponseDecoder extends CommandDecoder { @Override protected Header decodeHeader(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf) { long requestId = byteBuf.readLong(); int version = byteBuf.readInt(); int code = byteBuf.readInt(); int msgLength = byteBuf.readInt(); byte[] msgBytes = new byte[msgLength]; byteBuf.readBytes(msgBytes); String msg = new String(msgBytes, StandardCharsets.UTF_8); return new ResponseHeader(requestId, version, code, msg); } } 这里的读取顺序必须与写入时的顺序一致！\n请求信息的编码在上面可以看到是先写请求编号，再写协议版本，所以在这里也是先解析请求编号，再解析协议版本。\n响应信息的编码在后面。\n生产者调用完成，需要向消费者响应\n1 2 3 4 5 6 7 8 9 10 11 12 13 public class ResponseEncoder extends CommandEncoder { @Override protected void encodeHeader(ChannelHandlerContext channelHandlerContext, Header header, ByteBuf byteBuf) throws Exception { super.encodeHeader(channelHandlerContext, header, byteBuf); if (header instanceof ResponseHeader) { ResponseHeader responseHeader = (ResponseHeader) header; byteBuf.writeInt(responseHeader.getCode()); byteBuf.writeInt(responseHeader.getMsg().length()); byteBuf.writeBytes(responseHeader.getMsg() == null ? new byte[0] : responseHeader.getMsg().getBytes(StandardCharsets.UTF_8)); } } } 这个类是继承自CommandEncoder也就是第一步中的类。在他的基础上又多了响应信息头部的编码。\n这里的写入顺序与上面解析的顺序都要保持一致。\n消费者收到响应，解析响应信息 这里就是第二步中的响应信息的解析。\n具体实现 这一部分还未弄请求各部分的流程，也就是对netty执行过程还不是特别了解，挖坑，后续更新。\nNettyServer NettyClient ResponseInvocation RequestInvocation NettyTransport 对于实际反射的调用我将它放到了服务端来进行实现。\n其他部分链接 自己动手首先一个RPC框架（二） 自己动手首先一个RPC框架（三） 自己动手首先一个RPC框架（四） 自己动手首先一个RPC框架（六） 自己动手首先一个RPC框架（七） ","permalink":"https://www.liunaijie.top/coding/micro_service/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AArpc%E6%A1%86%E6%9E%B6%E4%BA%94/","summary":"\u003ch1 id=\"rpc-transport\"\u003erpc-transport\u003c/h1\u003e\n\u003cp\u003e这个模块是有在观看\u003ca href=\"https://time.geekbang.org/column/intro/100032301\"\u003e消息队列高手课\u003c/a\u003e中的rpc示例完成的。\u003c/p\u003e\n\u003cp\u003e网络传输模块，这里使用\u003ccode\u003enetty\u003c/code\u003e来进行实现。\u003c/p\u003e\n\u003cp\u003e生产者调用来指定端口启动服务。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003einterface\u003c/span\u003e \u003cspan class=\"nc\"\u003eTransportServer\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eport\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eInterruptedException\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003estop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"自己动手实现一个RPC框架(五)"},{"content":"题目描述 给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。\n本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。\n示例:\n给定的有序链表： [-10, -3, 0, 5, 9],\n一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：\n0 -3\t9 -10\t5 答案不唯一，只要满足平常二叉树的特性即可。\n题目中给出的数组已经按升序排序，我们需要将其转换为平衡二叉树。\n解题思路 由于是二叉平衡树，所以根节点应该为中间值，这样树两边的元素高度在正负1范围内。\n对于根节点两侧，也是一个平衡二叉树，可以递归调用来进行构建。\n但是由于给出的是链表，不方便取值，所以可以先转换为数组。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public TreeNode sortedListToBSTSelf(ListNode head) { //先将链表转化为数组，由于数组需要预先知道容量，所以使用了arraylist容器 List\u0026lt;Integer\u0026gt; values = new ArrayList\u0026lt;Integer\u0026gt;(); while (head != null) { values.add(head.val); head = head.next; } return help(values, 0, values.size() - 1); } private TreeNode help(List\u0026lt;Integer\u0026gt; list, int left, int right) { if (left \u0026gt; right) { return null; } //取中间值作为根节点 int mid = left + (right - left) / 2; TreeNode node = new TreeNode(list.get(mid)); //左侧节点，用数组的左边继续构建 node.left = help(list, left, mid - 1); //右侧节点，用数组的右边继续构建 node.right = help(list, mid + 1, right); return node; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-leetcode109/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。\u003c/p\u003e\n\u003cp\u003e本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。\u003c/p\u003e\n\u003cp\u003e示例:\u003c/p\u003e\n\u003cp\u003e给定的有序链表： [-10, -3, 0, 5, 9],\u003c/p\u003e\n\u003cp\u003e一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e  \t0\n  -3\t9\n-10\t 5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e答案不唯一，只要满足平常二叉树的特性即可。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e题目中给出的数组已经按升序排序，我们需要将其转换为平衡二叉树。\u003c/p\u003e","title":"有序链表转换为二叉搜索树—LeetCode109"},{"content":"前言 现在微服务体系流行，而RPC框架作为微服务中重要的一环，为了弄明白RPC的整体过程，决定要自己动手实现一个RPC框架。\n我们先了解一下什么是RPC，RPC全程是Remote Procedure Call，翻译过来就是远程过程调用，我们先思考一下没有使用rpc的项目的调用流程：\n通过@Autoware注解注入另外的类 在需要调用的地方直接调用即可 当需要调用其他功能的接口时，比如调用其他公司的接口，或者调用自己公司内部的其他业务或功能接口。这时一般需要使用http来进行网络调用。\n那么使用http调用其他的功能接口算不算是rpc调用呢？我感觉也是算的，因为这也是一种通过网络从计算机程序上请求服务的过程。\n只不过由于调用的功能不严格意义上属于一个大项目，所以不算一个程序直接的内部调用，所以这里只讨论 一个大项目拆分成不同模块后，不同模块直接调用的过程。\nRPC是原来一个程序分为多个不同的程序，分别运行在不同的jvm上。部署在多台机器上后，就涉及到网络通信，需要将调用的信息发送到被调用的机器上，调用完成后再进行返回。\nrpc的流程图如下所示，\n牵扯到网络请求，那么就可以使用之前的http请求，但是由于http请求需要封装一些对于我们而言无用的信息，所以使用http的方式可以采用，比如springcloud就采用了http来进行通信的方式，而这次我准备使用其他的网络通信方式，这一篇中先使用bio来实现网络通信。\n还有一个序列化过程，它主要是将信息进行编解码，然后通过网络传输，因为网络传输中都是传输的二进制字节码文件，所以我们需要定义规则，将信息进行转换，消费者发送出去的信息生产者能明白其调用的内容，消费者也能明白生产者返回的信息。这一篇文章中也不去使用复杂的序列化方式，直接实现java中的Serializable接口。\n定义请求响应 消费者要将信息发送给生产者，发送过去的消息必须要被识别，所以需要定义请求消息类，而生产者调用实现完成后要将信息返回给消费者，所以也需要定义响应消息类。\n在这里使用lombok来简化编程。\n请求消息类 这个消息需要发送给生产者，生产者需要识别出消费者要调用的类，具体使用哪个类的实现，调用的哪个方法，并且传递的参数。所以我们先这样定义请求类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 @Data public class RpcRequest implements Serializable { private static final long serialVersionUID = -4129585144798112980L; /** * 请求的类 */ private Class\u0026lt;?\u0026gt; clazz; /** * 实现类 */ private Class\u0026lt;?\u0026gt; implClazz; /** * 方法名称 */ private String methodName; /** * 参数类型 */ private Class\u0026lt;?\u0026gt;[] parameterTypes; /** * 参数列表 */ private Object[] parameters; } 请求响应类\n响应首要的任务是将生产者的响应信息返回到消费者，并且生产者可能有异常，需要让消费者明确是否请求成功，如果发生异常，错误原因的什么。所以先如下定义响应类。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @Data public class RpcResponse implements Serializable { private static final long serialVersionUID = 5837872617706737632L; public static int SUCCESS_CODE = 200; public static String SUCCESS_MESSAGE = \u0026#34;ok\u0026#34;; private int code = SUCCESS_CODE; private String message = SUCCESS_MESSAGE; private Object data; } 定义网络传输部分 这里先使用bio来进行简单实现。\n服务端 这里的服务端就是在rpc请求流程中的生产者，它要做的东西就是启动，监听，处理，返回这几个过程。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 @Slf4j public class BioServer { public void export(int port) { try { ServerSocket serverSocket = new ServerSocket(port); log.info(\u0026#34;server started!\u0026#34;); while (true) { //监听连接 Socket client = serverSocket.accept(); //转换信息 ObjectInputStream objectInputStream = new ObjectInputStream(client.getInputStream()); Object object = objectInputStream.readObject(); if (object instanceof RpcRequest) { RpcRequest rpcRequest = (RpcRequest) object; log.info(\u0026#34;bio server received client:{}\u0026#34;, rpcRequest); //调用实现方法 RpcResponse rpcResponse = handleRequest(rpcRequest); //将请求结果返回客户端 ObjectOutputStream objectOutputStream = new ObjectOutputStream(client.getOutputStream()); objectOutputStream.writeObject(rpcResponse); } } } catch (Exception e) { e.printStackTrace(); } } } 在这里，使用ServerSocket来启动socker服务，然后监听客户端连接，然后将客户端发送的消息进行反序列化成对象，如果客户端发送的是我们定义的RpcRequest对象，我们就对它进行处理，然后再将处理结果返回到客户端。\n看一下对请求实际处理的内部方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 private RpcResponse handleRequest(RpcRequest request) { RpcResponse rpcResponse = new RpcResponse(); try { //获取要请求的方法 Method method = request.getClazz().getMethod(request.getMethodName(), request.getParameterTypes()); Object res = method.invoke(request.getImplClazz().newInstance(), request.getParameters()); rpcResponse.setData(res); } catch (Exception e) { log.error(e.getMessage()); rpcResponse.setCode(-1); rpcResponse.setMessage(e.getClass().getName()); } return rpcResponse; } 这里通过请求的信息解析出请求信息，然后通过反射method.invoke()来进行实际调用，调用成功后将信息设置到返回信息的data属性，如果调用失败则设置错误原因，修改状态码。\n客户端 客户端就是rpc请求中的消费者，它需要将它调用的信息发送给生产者，并且指定生产者的地址和端口。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 @Slf4j public class BioClient { private String host; private int port; public BioClient(String host, int port) { this.host = host; this.port = port; } public RpcResponse send(RpcRequest rpcRequest) { try { Socket socket = new Socket(host, port); //发送rpc请求 ObjectOutputStream objectOutputStream = new ObjectOutputStream(socket.getOutputStream()); objectOutputStream.writeObject(rpcRequest); //接收响应 ObjectInputStream objectInputStream = new ObjectInputStream(socket.getInputStream()); Object object = objectInputStream.readObject(); if (object instanceof RpcResponse) { return (RpcResponse) object; } } catch (Exception e) { log.error(e.getMessage()); } return null; } } 在网络请求的客户端对请求信息不做任何处理，将服务端返回的信息直接返回给调用者。\n定义生产者和消费者的部分 生产者 这里生产者的作用就是启动网络传输的服务端，不存在服务注册等其他方法。\n1 2 3 4 5 6 7 public class RpcServer { public void start() { new BioServer().export(9090); } } 消费者 由于要对调用者隐藏封装调用过程，所以使用了代理模式，并且代理对象不可知所以使用了动态代理。\n在请求信息中需要明确实现类，所以又定义了一个成员变量来进行表示。\n1 2 3 4 5 6 7 8 9 10 11 12 13 public class RpcClient { private Class\u0026lt;?\u0026gt; implClazz; public void init(Class\u0026lt;?\u0026gt; implClazz) { this.implClazz = implClazz; } public \u0026lt;T\u0026gt; T getProxy(Class\u0026lt;T\u0026gt; clazz) { return (T) Proxy.newProxyInstance(getClass().getClassLoader(), new Class[]{clazz}, new RemoteInvoker(clazz, implClazz)); } } 动态代理类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public class RemoteInvoker implements InvocationHandler { private Class\u0026lt;?\u0026gt; clazz; private Class\u0026lt;?\u0026gt; implClazz; public RemoteInvoker(Class\u0026lt;?\u0026gt; clazz, Class\u0026lt;?\u0026gt; implClazz) { this.clazz = clazz; this.implClazz = implClazz; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { RpcRequest rpcRequest = new RpcRequest(); rpcRequest.setClazz(clazz); rpcRequest.setImplClazz(implClazz); rpcRequest.setMethodName(method.getName()); rpcRequest.setParameterTypes(method.getParameterTypes()); rpcRequest.setParameters(args); RpcResponse rpcResponse = new BioClient(\u0026#34;127.0.0.1\u0026#34;, 9090).send(rpcRequest); if (rpcResponse == null) { throw new Exception(\u0026#34;network invoke error!\u0026#34;); } return rpcResponse.getData(); } } 这动态代理类中进行请求信息的封装，网络请求的调用，判断返回结果，然后返回方法返回的实际内容。\n测试一下 首先定义一个接口和实现类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public interface HelloService { String sayHello(String name); String sayBye(String name); } public class HelloServiceImpl implements HelloService { @Override public String sayHello(String name) { return \u0026#34;hello,\u0026#34; + name; } @Override public String sayBye(String name) { return \u0026#34;bye,\u0026#34; + name; } } 生产者的调用\n1 2 3 4 5 6 7 8 public class Server { public static void main(String[] args) { RpcServer rpcServer = new RpcServer(); rpcServer.start(); } } 消费者的调用\n1 2 3 4 5 6 7 8 9 10 11 12 13 public class Client { public static void main(String[] args) { RpcClient rpcClient = new RpcClient(); rpcClient.init(HelloServiceImpl.class); HelloService helloService = rpcClient.getProxy(HelloService.class); String sayHello = helloService.sayHello(\u0026#34;rpc\u0026#34;); System.out.println(sayHello); String sayBye = helloService.sayBye(\u0026#34;rpc\u0026#34;); System.out.println(sayBye); } } 当看到控制台输出hello,rpc bye,rpc字段时就表示我们这次的请求成功了。\n后续 其实这个程序有一些问题，消费者的调用时其实并不请求它的实现类是什么，后续会针对这一问题进行改进。\n","permalink":"https://www.liunaijie.top/coding/micro_service/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AArpc%E6%A1%86%E6%9E%B6%E4%B8%80/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e现在微服务体系流行，而RPC框架作为微服务中重要的一环，为了弄明白RPC的整体过程，决定要自己动手实现一个RPC框架。\u003c/p\u003e\n\u003cp\u003e我们先了解一下什么是RPC，RPC全程是Remote Procedure Call，翻译过来就是远程过程调用，我们先思考一下没有使用rpc的项目的调用流程：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e通过\u003ccode\u003e@Autoware\u003c/code\u003e注解注入另外的类\u003c/li\u003e\n\u003cli\u003e在需要调用的地方直接调用即可\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e当需要调用其他功能的接口时，比如调用其他公司的接口，或者调用自己公司内部的其他业务或功能接口。这时一般需要使用\u003ccode\u003ehttp\u003c/code\u003e来进行网络调用。\u003c/p\u003e\n\u003cp\u003e那么使用http调用其他的功能接口算不算是rpc调用呢？我感觉也是算的，因为这也是一种通过网络从计算机程序上请求服务的过程。\u003c/p\u003e\n\u003cp\u003e只不过由于调用的功能不严格意义上属于一个大项目，所以不算一个程序直接的内部调用，所以这里只讨论 一个大项目拆分成不同模块后，不同模块直接调用的过程。\u003c/p\u003e\n\u003cp\u003eRPC是原来一个程序分为多个不同的程序，分别运行在不同的jvm上。部署在多台机器上后，就涉及到网络通信，需要将调用的信息发送到被调用的机器上，调用完成后再进行返回。\u003c/p\u003e\n\u003cp\u003erpc的流程图如下所示，\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/RPC%E8%B0%83%E7%94%A8.png\" alt=\"RPC调用流程\"\u003e\u003c/p\u003e\n\u003cp\u003e牵扯到网络请求，那么就可以使用之前的\u003ccode\u003ehttp\u003c/code\u003e请求，但是由于\u003ccode\u003ehttp\u003c/code\u003e请求需要封装一些对于我们而言无用的信息，所以使用\u003ccode\u003ehttp\u003c/code\u003e的方式可以采用，比如\u003ccode\u003espringcloud\u003c/code\u003e就采用了\u003ccode\u003ehttp\u003c/code\u003e来进行通信的方式，而这次我准备使用其他的网络通信方式，这一篇中先使用\u003ccode\u003ebio\u003c/code\u003e来实现网络通信。\u003c/p\u003e\n\u003cp\u003e还有一个序列化过程，它主要是将信息进行编解码，然后通过网络传输，因为网络传输中都是传输的二进制字节码文件，所以我们需要定义规则，将信息进行转换，消费者发送出去的信息生产者能明白其调用的内容，消费者也能明白生产者返回的信息。这一篇文章中也不去使用复杂的序列化方式，直接实现java中的\u003ccode\u003eSerializable\u003c/code\u003e接口。\u003c/p\u003e","title":"自己动手实现一个RPC框架（一）"},{"content":"二分查找 前置要求：数组有序\n时间复杂度：log(n)\n几种常见的问题：\n数组中查找target 数组中有重复，查找第一个target 数组中有重复，查找最后一个target 查找等于target或第一个小于target的值 查找等于target或第一个大于target的值 代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public int binarySearch(int[] a, int value) { int n = a.length; int start = 0, end = n - 1; //这个地方是 \u0026lt;= while (start \u0026lt;= end) { //取中间值，这个方法可能会溢出，可以采用下面的方法 //\tint mid = (start + end) / 2; int mid = start + (end - start) / 2; //更进一步，也可以使用位运算 //\tint mid = start + ((start + end) \u0026gt;\u0026gt; 1); if (a[mid] == value) { return mid; } else if (a[mid] \u0026gt; value) { end = mid - 1; } else { start = mid + 1; } } return -1; } 再给出一个递归实现的二分查找方法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public int binarySearchDeep(int[] a, int value) { int n = a.length; return binarySearchDeepHelp(a, 0, n - 1, value); } private int binarySearchDeepHelp(int[] a, int low, int high, int value) { if (low \u0026gt; high) { return -1; } int mid = low + ((high - low) \u0026gt;\u0026gt; 1); if (a[mid] == value) { return mid; } else if (a[mid] \u0026lt; value) { return binarySearchDeepHelp(a, mid + 1, high, value); } else { return binarySearchDeepHelp(a, low, mid - 1, value); } } 代码中有一个地方，我们取中间下标时，最基本的方法是mid=(low+higt)/2。但这个时候可能会造成溢出，所以我们可以采用mid=low+(high-low)。如果需要继续优化可以使用位运算mid=low+((high-low)\u0026gt;\u0026gt;1)。\n局限性 排序\n这个毋容置疑，不排好序，我们取中间值比较是没有意义的\n数组\n二分查找需要按照下标随机访问元素，数组访问的时间复杂度是o(1)，而链表是o(n)。所以二分查找不使用与链表。\n数据量太大时\n因为需要数组这种数据结构，而数组在内存中需要连续存储。当数据量太大，比如1gb大小，那么就需要1gb的连续内存区间，所以当数据量太大时会比较吃力。\n习题 用二分查找实现，求一个数的平方根，要求精确到小数点后6位。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public double mySqrt(double x) { double low = 0.0, high = x; double mid = low + (high - low) / 2.0; //表示 10（^-6^）即小数点后6位 double eps = 1e-6; while (Math.abs(high - low) \u0026gt; eps) { // 首先找到中间值 mid = low + (high - low) / 2; double temp = mid * mid; // 比较并更新 high和low if ((temp - x) \u0026gt; eps) { high = mid; } else if ((temp - x) \u0026lt; -eps) { low = mid; } else { return mid; } } return mid; } 变形一 查找第一个值等于给定值的元素\n现在有这样一个数组，[1,2,3,3,3,4,5]，要求查找3。对数组里面三个3分别命名为3a,3b,3c。按照上面二分查找方法，返回的3是3b。我们现在要求返回第一个也就是3a。\n这时上面的代码就无法处理这种情况了。我们针对这个变形来实现一下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public int binarySearch1(int[] a, int value) { int n = a.length; int low = 0, high = n - 1; while (low \u0026lt;= high) { int mid = low + ((high - low) \u0026gt;\u0026gt; 1); if (a[mid] \u0026gt; value) { high = mid - 1; } else if (a[mid] \u0026lt; value) { low = mid + 1; } else { // 主要在这个地方 //如果这个元素已经是数组的第一个元素了，那么就直接返回 //如果不是，则判断上一个元素的值是不是等于value，如果不是则返回 //如果是则更新high ，high=mid-1 if ((mid == 0) || (a[mid - 1] != value)) { return mid; } else { high = mid - 1; } } } return -1; } 变形二 查找最后一个值等于给定值的元素\n在变形一种，我们查找第一个给定值的元素，我们这次查找最后一个给定值的元素。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public int binarySearchLastMatch(int[] a, int value) { int n = a.length; int high = n - 1, low = 0; while (low \u0026lt;= high) { int mid = low + ((high - low) \u0026gt;\u0026gt; 1); if (a[mid] \u0026gt;= value) { if ((mid == 0) || (a[mid - 1] \u0026lt; value)) { return mid; } else { high = mid - 1; } } else { low = mid + 1; } } return -1; } 变形三 查找第一个大于等于给定值的元素\n给定数组，给定值，如果值存在则返回第一个元素的下标，否则返回第一个大于给定值的元素下标。\n我们以这个数组为例：[1,2,4,4,5,6]。我们如果查找4，它需要返回2，即满足条件的第一个元素下标。我们如果查找3，它也需要返回2，因为3不存在数组中，第一个大于给定值的元素就是4，下标为2。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public int binarySearch3(int[] a, int value) { int n = a.length; int low = 0; int high = n - 1; while (low \u0026lt;= high) { int mid = low + ((high - low) \u0026gt;\u0026gt; 1); if (a[mid] \u0026gt;= value) { if ((mid == 0) || (a[mid - 1] \u0026lt; value)) { return mid; } else { high = mid - 1; } } else { low = mid + 1; } } return -1; } 变形四 查找最后一个小于等于给定值的元素\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /** * 变形四，查找最后一个小于等于给定值的元素 * [3,5,6,6,8,9,10]。 * 当值存在时，返回最后一个等于给定值的元素 * 不存在时，返回最后一个小于给定值的元素\t* 查询6，7都返回下标3 * * @param a 数组 * @param value 要查找的值 * @return */ public int binarySearch4(int[] a, int value) { int n = a.length; int low = 0; int high = n - 1; while (low \u0026lt;= high) { int mid = low + ((high - low) \u0026gt;\u0026gt; 1); if (a[mid] \u0026gt; value) { high = mid - 1; } else { if ((mid == n - 1) || (a[mid + 1] \u0026gt; value)) { return mid; } else { low = mid + 1; } } } return -1; } ","permalink":"https://www.liunaijie.top/coding/algorithm/%E7%AE%97%E6%B3%95/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%8F%8A%E5%87%A0%E7%A7%8D%E5%8F%98%E5%BD%A2/","summary":"\u003ch1 id=\"二分查找\"\u003e二分查找\u003c/h1\u003e\n\u003cp\u003e前置要求：数组有序\u003c/p\u003e\n\u003cp\u003e时间复杂度：log(n)\u003c/p\u003e\n\u003cp\u003e几种常见的问题：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e数组中查找target\u003c/li\u003e\n\u003cli\u003e数组中有重复，查找第一个target\u003c/li\u003e\n\u003cli\u003e数组中有重复，查找最后一个target\u003c/li\u003e\n\u003cli\u003e查找等于target或第一个小于target的值\u003c/li\u003e\n\u003cli\u003e查找等于target或第一个大于target的值\u003c/li\u003e\n\u003c/ol\u003e","title":"二分查找及几种变形"},{"content":"这篇文章主要记录几种排序方式，描述他们的排序过程，复杂度，代码实现，使用比较。\n主要包括以下几种：\n冒泡排序 插入排序 选择排序 归并排序 快速排序 桶排序 基数排序 计数排序 我们首先来了解一个概念：稳定性。\n假如我们有以下几个数：(3,3,2,1)。我们把第一个3称为3a,第二个称为3b。经过排序后结果是(1,2,3a,3b)，即保持了相同大小元素的先后顺序，则把这种排序算法称为稳定的排序算法。\n首先记录一下几种最开始学习的排序方式，这几种的复杂度都是o(n^2^)。\n冒泡排序 这个应该是最开始学习的一种排序方法之一，从头开始比较两个相邻的元素，如果前面的元素比后面的大则互换位置，经过一次排序，最大的元素就到了数组的最后位置。然后我们比较从头到倒数第二个的位置，就这样一直到比较完毕。每一次排序都将剩余数组中的最大值移动到了数组的尾部。\n代码实现如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public void bubbleSort(int[] a) { int n = a.length; //入参判断 if (n \u0026lt;= 1) { return; } for (int i = 0; i \u0026lt; n; i++) { //经过一次排序后，只剩下 n-i个未排序，下标再减一 for (int j = 0; j \u0026lt; n -i- 1; j++) { if (a[j] \u0026gt; a[j + 1]) { int temp = a[j]; a[j] = a[j + 1]; a[j + 1] = temp; } } } } 其实这个代码还有一些优化的地方，当某次冒泡操作已经没有数据交换时，说明已经达到完全有序，不用再继续执行后面的冒泡操作了。比如下面的这个例子，它在执行到中间过程就依然有序了，不需要继续向下执行。\n我们来进行优化一下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public void bubbleSortBetter(int[] a) { int n = a.length; if (n \u0026lt;= 1) { return; } for (int i = 0; i \u0026lt; n; i++) { boolean flag = true; for (int j = 0; j \u0026lt; n - i - 1; j++) { if (a[j] \u0026gt; a[j + 1]) { int temp = a[j]; a[j] = a[j + 1]; a[j + 1] = temp; // 表示有数据交换 flag = true; } } if (!flag) { //没有数据交换时，提前退出 break; } } } 在这里面添加了一个标识，如果在一次冒泡中没有交换就退出。\n复杂度分析： 空间复杂度：\n由于未用到额外空间，所以冒泡排序的空间复杂度是o(1)\n时间复杂度：\n我们要看几种情况\n最好情况：也就是数组已经是排好序的，这时需要一次冒泡，时间复杂度为o(n)。\n最坏情况：当数组是逆序的，这时的时间复杂度为o(n^2^)。\n而在平均情况下它的时间复杂度也是o(n^2^)。\n稳定性\n我们在进行比较的时候只有当第一个元素比第二个元素小时才会交换，相等时不会交换，所以可以保证冒泡排序是稳定的排序算法\n插入排序 假设这么一个场景，我们有一个已经排好序的数组，现在要插入一个新元素并仍然保持有序，要怎么做呢？\n很简单，我们只有遍历数组，找到数据应该插入的位置将其插入即可。\n那么我们按照这个方法，将数组分为两个区间，已排序区间和未排序区间。第一次将第一个元素作为数组也就是已排序区间，将第二个元素插入到已排序数组中。一次插入后，再将第三个元素插入到已经排好序的前两个元素构成的有序数组中。依次进行直到没有数据。\n代码实现如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public void insertionSort(int[] a) { int n = a.length; //入参判断 if (n \u0026lt;= 1) { return; } //从第二个开始插入到已排序数组中，（前面i个为已排序数组） for (int i = 1; i \u0026lt; n; i++) { int value = a[i]; int j = i - 1; //查找插入的位置 //从后向前查找要插入的位置，最坏情况是需要移动已排序数组的长度 //因为如果从前开始也要先找到位置，然后从这个位置开始向后挪，移动的次数固定为已排序数组的长度。 for (; j \u0026gt;= 0; j--) { if (a[j] \u0026gt; value) { a[j + 1] = a[j]; } else { break; } } //进行插入 a[j + 1] = value; } } 第一层循环是从第二个元素开始插入到已排序数组中，第二层循环是找到要插入元素的位置，并且是从后向前查找。\n复杂度分析 空间复杂度\n没有使用到额外的存储空间，所以空间复杂度是o(1)\n稳定性\n在第二层循环中寻找插入位置时，当元素相同时不再进行查找，所以可以保持相同值原有的前后顺序不变。所以插入排序是稳定的排序算法。\n时间复杂度\n最好情况：原数组依然有序，我们第二层循环执行一次就会退出，第一层仍然需要全部执行，所以时间复杂度为o(n)。\n最坏情况：原数组为逆序，我们这时要走满两层循环，即时间复杂度为o(n^2^)。\n而在平均情况下它的时间复杂度也是o(n^2^)。\n优化 插入排序是这三种中最常用的一个算法，因为他的时间复杂度与初始状态有关。\n插入排序有一些优化的算法，比如希尔排序。希尔排序的思想是使数组中任意间隔为h的元素都是有序的。希尔排序比插入排序和选择排序快得多，并且数组越大，优势越大\n代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public static void shellSort(int[] a) { int n = a.length; int h = 1; //增量计算 while (h \u0026lt; n / 3) { h = 3 * h + 1; } while (h \u0026gt;= 1) { //对一个组的元素进行排序 for (int i = h; i \u0026lt; n; i++) { for (int j = i; j \u0026gt;= h; j -= h) { if (a[j] \u0026lt; a[j - h]) { int temp = a[j - h]; a[j - h] = a[j]; a[j] = temp; } } } //增量递减，逐渐缩小数组 h = h / 3; } } 空间复杂度为o(1)，不是稳定的排序算法，并且他的时间复杂度也与增量有关。\n选择排序 选择排序与插入排序有点类似，也分为已排序区间和未排序区间，但是它是每次从未排序区间找到最小的元素，将其放到已排序区间的末尾。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public void selectionSort(int[] a) { int n = a.length; for (int i = 0; i \u0026lt; n; i++) { int minIndex = i; //找到未排序数组中最小的元素 for (int j = i + 1; j \u0026lt; n; j++) { if (a[j] \u0026lt; a[minIndex]) { minIndex = j; } } //将找到的元素与已排序数组的尾部进行交换。 int temp = a[minIndex]; a[minIndex] = a[i]; a[i] = temp; } } 复杂度分析 稳定性\n选择排序不是稳定的排序算法\n我们以下面这个例子说明：6(a),5,6(b),4,2,3。\n在第一次循环中，它会将2与6(a)进行交换位置，这时6(b)就在6(a)前了。在后面的排序中，它俩的顺序也不会改变，所以选择排序不是稳定的排序算法。\n空间复杂度\n没有额外的存储空间，所以选择排序的空间复杂度为o(1)\n时间复杂度\n即便是已经排好序的数组，在选择排序中它仍然要执行两层循环，即它的时间复杂度为o(n^2^),在逆序的情况下也是o(n^2^)\n所以选择排序的时间复杂度固定为o(n^2^)。\n归并排序 归并排序使用了分治思想，将数组进行划分成小数组，然后将小数组进行排序，再将小数组进行合并，合并时再进行排序一次。\n它的过程我用动画表示一下：\n主要过程包括拆分，合并。两个主要过程，\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 public void mergeSort(int[] a) { if (a == null) { return; } mergeSortHelp(a, 0, a.length - 1); } private void mergeSortHelp(int[] a, int start, int end) { if (start \u0026gt;= end) { return; } int mid = (start + end) / 2; mergeSortHelp(a, start, mid); mergeSortHelp(a, mid + 1, end); mergeHelp(a, start, mid, end); } //合并 private void mergeHelp(int[] a, int left, int mid, int right) { //初始化一个排序长度的数组 int[] temp = new int[right - left + 1]; int i = left, j = mid + 1, k = 0; //将{left-mid},{mid-right}两个数组按照顺序放到temp中 while (i \u0026lt;= mid \u0026amp;\u0026amp; j \u0026lt;= right) { if (a[i] \u0026lt;= a[j]) { temp[k++] = a[i++]; } else { temp[k++] = a[j++]; } } //将左边剩余元素填充到temp中 while (i \u0026lt;= mid) { temp[k++] = a[i++]; } //将右边剩余元素填充到temp中 while (j \u0026lt;= right) { temp[k++] = a[j++]; } //将temp中的元素全部拷贝到原数组中对应位置 System.arraycopy(temp, 0, a, left, k); } 复杂度分析 稳定性\n在合并函数中进行合并比较时，上面代码的第23行的判断中，当两种相等时，先将左侧的元素放入临时数组中，这时就保证了先后顺序。\n所以，归并排序是一个稳定的排序算法。\n空间复杂度\n我们可以看出，每次合并都需要创建临时数组，所以归并排序的空间复杂度为o(n)\n时间复杂度\n归并排序的效率与初始状态无关，并且是非常稳定的，它的时间复杂度是o(nlogn)。\n快速排序 快速排序也是利用的分治思想。\n它是先在数组中找到一个元素(随便找一个，一般是数组最后一个元素)，作为分区点(pivot)。然后将小于分区点元素的放到左边，大于分区的元素的放到右边，将分区点放到两者之间。那么就这个数组就变成了三部分，比分区点元素小的一个数组，比分区点元素大的一个数组，还有一个分区点。\n然后再分别将两个数组进行拆分，最后整个数组就有序了。\n分区的过程可以用下面这张图展示：\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public void quickSort(int[] a) { int n = a.length; quickSortHelp(a, 0, n - 1); } private void quickSortHelp(int[] a, int start, int end) { //递归函数边界退出条件 if (start \u0026gt;= end) { return; } int p = partition(a, start, end); quickSortHelp(a, start, p - 1); quickSortHelp(a, p + 1, end); } private int partition(int[] a, int left, int right) { //设置分区点为数组最后一个元素 int pivot = a[right]; //开始分区 int i = left; for (int j = left; j \u0026lt; right - 1; j++) { if (a[j] \u0026lt; pivot) { //如果元素比分区点小，则将元素从左侧开始放，将原来左侧的数据换到现在这个位置上 //i表示左侧的位置，交换后就加一 swap(a, i, j); i++; } } //最后将分区点放到对应位置上 //交换后，i左侧为比分区点小的元素，右侧为比分区点大的元素 swap(a, i, right); return i; } private void swap(int[] a, int first, int second) { int temp = a[first]; a[first] = a[second]; a[second] = temp; } 复杂度分析 稳定性：\n在选取分区点过程中会把后面的元素放到分区点上，这时会破坏先后顺序。所以快速排序不是一个稳定的排序算法\n空间复杂度\n没有用到额外的空间，所以空间复杂度为o(1)\n时间复杂度\n快速排序的时间复杂度是o(nlogn)\n与归并排序区别 快速排序与归并排序都是利用分治的思想，它们两个有什么区别呢？\n我们仔细看一下流程图，可以看出，归并排序是直接分到最小单位，然后再进行合并，最终完成，处理过程主要是merge方法，是由下向上的。\n快速排序是主要过程是partition函数，它先将大数组找出分区点，然后再进行递归，所以它的过程是由上向下的。\n还有一个问题就是空间复杂度，快速排序可以实现o(1)的空间复杂度，而归并排序的空间复杂度为o(n)\n练习 在o(n)的时间复杂度内求无序数组中的第k大元素\n利用快速排序方法，进行分区，得到分区点provit的下标p，然后用k和p进行比较，如果k=p+1，那么a[p]就答案。如果k\u0026gt;p+1，则继续在a[p+1,n-1]这个区间找，如果k\u0026lt; p+1则在a[0,p-1]的区间继续查找。\n桶排序 下面要记录的几个就是时间复杂度为o(n)的排序算法，也可以成为线性排序。这几个能做到线性的时间复杂度，主要原因是，他们是基于非比较的排序算法，不涉及元素直接的比较操作。\n桶排序，顾名思义会用到\u0026rsquo;桶\u0026rsquo;，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行排序。桶内排完序后，再把每个桶里的数据按照顺序依次取出，组成有序序列。\n桶排序的时间复杂度为什么是o(n)？\n如果要排序的数据有 n 个，我们把它们均匀地划分到 m 个桶内，每个桶里就有 k=n/m 个元素。每个 桶内部使用快速排序，时间复杂度为 O(k * logk)。m 个桶排序的时间复杂度就是 O(m * k * logk)，因 为 k=n/m，所以整个桶排序的时间复杂度就是 O(n*log(n/m))。当桶的个数 m 接近数据个数 n 时，log(n/m) 就是一个非常小的常量，这个时候桶排序的时间复杂度接近 O(n)。\n那么既然有了o(n)的桶排序是不是就可以替换之前的排序算法了呢？\n答案是否定的，肯定有有一些弊端的，否则其他算法肯定是会被淘汰的，桶排序有有一些局限性。\n我们举一个例子，现在有一个数组，取值范围为0 ~ 100，我们是不是就要分成100个桶，但是我的数据里面并不是均匀分布的，我里面有10个0 ~10的，其余的全部都是99 ~ 100的。这时我们大部分数据都在一个桶里面，这个算法的弊端就体现出来了。而且我们还需要这些桶直接有着天然的大小顺序，这样才能在每个桶排序完成后，桶与桶直接不再需要合并排序。\n桶排序比较适合用在外部排序中。所谓的外部排序就是数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。\n基数排序 假设我们需要对电话号码进行从小到大的排序。用之前的快排，时间复杂度可以做到o(nlogn)。可不可以用桶排序呢实现o(n)的复杂度呢？因为手机号有11位，范围太大，我们需要创建10^11^个桶。当然可以继续优化，但是数量级仍然还是很高。所以这时候就需要一种新的排序方法，基数排序。\n我们在比较电话号码时，在前面几位中，如果a号码已经比b号码大了，那么后面就不用看了。这里需要借助稳定排序算法，不然在第二次排序中会打乱一次排序的先后顺序，那就没有意义了。\n用一个字符串排序的例子来代替手机号的例子：\n根据每一位来排序，我们可以用桶排序，他的时间复杂度可以做到o(n)。如果要排序的数据有k位，比如手机号有11位，那么我们就需要k次桶排序。总的时间复杂度就是o(k*n)。所以基数排序的时间复杂度就近似于o(n)\n实际操作中，有时候数据并不是等长的，就拿英文单词来说，长度不统一。对于这种情况，我们可以采用补齐的方式，找到最长的位数，然后对其它位数不够的可以在前面或后面补'0\u0026rsquo;。这样就可以继续用基数排序了。\n基数排序对要排序是数据也是有要求的，需要可以分割出独立的\u0026quot;位\u0026quot;来比较，并且位之间有递进的关系。如果a数据的高位比b数据大，那么剩下的低位就不用比较了。除此之外，每一位的数据范围不能太大，要可以用线性排序算法来排序，否则基数排序的时间复杂度也无法做到o(n).\n计数排序 计数排序也是一种o(n)的线性排序，我还没有完全理解他的过程，后序会对这一部分做补充。\n总结 按照复杂度分为可以分为三类：\n$O(n^2)$：冒泡排序，插入排序，选择排序\n$O(nlog_n)$：快速排序，归并排序\nO(n)：桶排序，基数排序，计数排序\n时间复杂度为o(n)的排序算法对于数据有要求，所以在未知情况下可以使用快速排序，不使用归并排序的原因是归并排序需要额外的空间。\n而且后面的桶排序，基数排序也都是基于其他的排序算法来进行的，就拿桶排序来说，他桶内排序依赖快速排序，所以能做到近似o(n)，如果使用冒泡也能达到o(n)。后面的这几个线性排序是一种更高层级的思想。\n参考 数据结构与算法之美 所用图片大部分来自王铮的算法专栏，也有从网上找的一个动图，如有冒犯，联系我更改。\n","permalink":"https://www.liunaijie.top/coding/algorithm/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%87%A0%E7%A7%8D%E6%8E%92%E5%BA%8F%E6%96%B9%E5%BC%8F/","summary":"\u003cp\u003e这篇文章主要记录几种排序方式，描述他们的排序过程，复杂度，代码实现，使用比较。\u003c/p\u003e\n\u003cp\u003e主要包括以下几种：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\"\u003e冒泡排序\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\"\u003e插入排序\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\"\u003e选择排序\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\"\u003e归并排序\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\"\u003e快速排序\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E6%A1%B6%E6%8E%92%E5%BA%8F\"\u003e桶排序\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F\"\u003e基数排序\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F\"\u003e计数排序\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"几种排序方式"},{"content":"题目链接 力扣\n给你二叉树的根节点 root, 返回其节点值的 层序遍历. (即逐层地, 从左到右访问所有节点).\n输入：root = [3,9,20,null,null,15,7] 输出：[[3],[9,20],[15,7]] 广度优先遍历的一个变种, 需要每一层放到一个数组中.\n每次对队列遍历时, 当前队列的长度就是这一层的数据, 所以先获取到当前层的元素数量\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; levelOrder(TreeNode root) { if (root == null) { return Collections.emptyList(); } List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new LinkedList\u0026lt;\u0026gt;(); Queue\u0026lt;TreeNode\u0026gt; queue = new LinkedList\u0026lt;\u0026gt;(); queue.add(root); while (!queue.isEmpty()) { int curLevelSize = queue.size(); List\u0026lt;Integer\u0026gt; curList = new LinkedList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; curLevelSize; i++) { TreeNode node = queue.poll(); curList.add(node.val); if (node.left != null) { queue.add(node.left); } if (node.right != null) { queue.add(node.right); } } res.add(curList); } return res; } 变种 力扣\n输入：root = [3,9,20,null,null,15,7] 输出：[[15,7],[9,20],[3]] 这次要求, 结果中, 先放最下层节点\n我们利用Java中的List特性, 在每次插入一层的数据时, 将其插入到最开始的位置.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; levelOrderBottom(TreeNode root) { if (root == null) { return Collections.emptyList(); } List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new LinkedList\u0026lt;\u0026gt;(); Queue\u0026lt;TreeNode\u0026gt; queue = new LinkedList\u0026lt;\u0026gt;(); queue.add(root); while (!queue.isEmpty()) { int curLevelSize = queue.size(); List\u0026lt;Integer\u0026gt; curList = new LinkedList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; curLevelSize; i++) { TreeNode node = queue.poll(); curList.add(node.val); if (node.left != null) { queue.add(node.left); } if (node.right != null) { queue.add(node.right); } } res.add(0, curList); } return res; } ","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/","summary":"\u003ch1 id=\"题目链接\"\u003e题目链接\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\"\u003e力扣\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e给你二叉树的根节点 \u003ccode\u003eroot\u003c/code\u003e, 返回其节点值的 \u003cstrong\u003e层序遍历.\u003c/strong\u003e (即逐层地, 从左到右访问所有节点).\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入：root = [3,9,20,null,null,15,7]\n输出：[[3],[9,20],[15,7]]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e广度优先遍历的一个变种, 需要每一层放到一个数组中.\u003c/p\u003e\n\u003cp\u003e每次对队列遍历时, 当前队列的长度就是这一层的数据, 所以先获取到当前层的元素数量\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003elevelOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eCollections\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eemptyList\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLinkedList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eQueue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLinkedList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecurLevelSize\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecurList\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLinkedList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecurLevelSize\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epoll\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ecurList\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eleft\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurList\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"变种\"\u003e变种\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/\"\u003e力扣\u003c/a\u003e\u003c/p\u003e","title":"二叉树的层序遍历"},{"content":"题目链接 力扣\n给你二叉树的根结点 root ，请你将它展开为一个单链表：\n展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null 。 展开后的单链表应该与二叉树 先序遍历 顺序相同。 一边遍历一边修改树 维护一个指针，表示上一次的节点， 从栈中获取到节点后，如果上一次节点不为null，则将其左节点置为null，右节点置为当前访问节点 如果左右节点不为null，则将它们放入栈中，但是要注意需要先放右节点\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public void flatten(TreeNode root) { if (root == null) { return; } Stack\u0026lt;TreeNode\u0026gt; stack = new Stack\u0026lt;TreeNode\u0026gt;(); stack.push(root); TreeNode prev = null; while (!stack.isEmpty()) { TreeNode curr = stack.pop(); if (prev != null) { prev.left = null; prev.right = curr; } if (curr.right != null) { stack.push(curr.right); } if (curr.left != null) { stack.push(curr.left); } prev = curr; } } 先中序遍历再构建结果 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public void flatten(TreeNode root) { List\u0026lt;TreeNode\u0026gt; list = new ArrayList\u0026lt;TreeNode\u0026gt;(); Deque\u0026lt;TreeNode\u0026gt; stack = new LinkedList\u0026lt;TreeNode\u0026gt;(); TreeNode node = root; while (node != null || !stack.isEmpty()) { while (node != null) { list.add(node); stack.push(node); node = node.left; } node = stack.pop(); node = node.right; } int size = list.size(); for (int i = 1; i \u0026lt; size; i++) { TreeNode prev = list.get(i - 1), curr = list.get(i); prev.left = null; prev.right = curr; } } ","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/","summary":"\u003ch1 id=\"题目链接\"\u003e题目链接\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/\"\u003e力扣\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e给你二叉树的根结点 root ，请你将它展开为一个单链表：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null 。\u003c/li\u003e\n\u003cli\u003e展开后的单链表应该与二叉树 先序遍历 顺序相同。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"一边遍历一边修改树\"\u003e一边遍历一边修改树\u003c/h1\u003e\n\u003cp\u003e维护一个指针，表示上一次的节点， 从栈中获取到节点后，如果上一次节点不为null，则将其左节点置为null，右节点置为当前访问节点 如果左右节点不为null，则将它们放入栈中，但是要注意需要先放右节点\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eflatten\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eleft\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eleft\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"先中序遍历再构建结果\"\u003e先中序遍历再构建结果\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eflatten\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eArrayList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eDeque\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLinkedList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eleft\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecurr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"二叉树展开为链表"},{"content":"主要记录一下对于二叉树，进行遍历的几种方式，包括：\n前序遍历 中序遍历 后序遍历 深度优先遍历 广度优先遍历 我们以下面的这个二叉树结构为例，分别描述一下这几种遍历的方式有什么不同，以及给出java实现的代码。\n几种遍历的区别 我们知道，一个二叉树有根节点，左节点，左节点。\n我们遍历的顺序肯定先是左节点，再右节点。前序、中序、后序的区别就是根节点的位置。\n如果根节点在左节点前面，那么就是前序遍历。\n如果根节点在两者之间，那么就是中序遍历。对于二叉搜索树而言，中序遍历得到的结果是从小到大的。\n如果根节点在右节点后面，那么就是后序遍历了。\n对于深度优先，我们对于一棵树，从根节点开始，一直访问左子节点，一直到为空，再向上依次返回访问右子节点。以上面的树结构为例，它访问的顺序为: A,B,D,H,I,E,C,F,J,G。\n对于广度优先，我们把树分层，根节点为第一层，根节点的子节点为第二层，第二层的子节点为第三层，依次递推。遍历的时候就对每一层进行依次访问。上面的树结构的遍历结果为：A,B,C,D,E,F,G,H,I,J\n代码实现 前序遍历 遍历打印\n1 2 3 4 5 6 7 8 public void prologuePrint(TreeNode root) { if (root == null) { return; } prologuePrint(root.left); System.out.print(root.val + \u0026#34; \u0026#34;); prologuePrint(root.right); } 遍历，将数据添加到集合中\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public List prologueList(TreeNode root) { List result = new ArrayList(); prologueListHelp(root, result); return result; } private void prologueListHelp(TreeNode node, List list) { if (node == null) { return; } prologueListHelp(node.left, list); list.add(node.val); prologueListHelp(node.right, list); } 中序遍历 遍历打印\n1 2 3 4 5 6 7 8 public void middlePrint(TreeNode root) { if (root == null) { return; } middlePrint(root.left); System.out.print(root.val + \u0026#34;\u0026#34;); middlePrint(root.right); } 遍历将数据添加到集合中\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public List middleList(TreeNode root) { List result = new ArrayList(); middleListHelp(root, result); return result; } private void middleListHelp(TreeNode node, List list) { if (node == null) { return; } middleListHelp(node.left, list); list.add(node.val); middleListHelp(node.right, list); } 后序遍历 遍历打印\n1 2 3 4 5 6 7 8 public void postPrint(TreeNode root) { if (root == null) { return; } postPrint(root.left); System.out.print(root.val + \u0026#34; \u0026#34;); postPrint(root.right); } 遍历将数据添加到集合中\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public List postList(TreeNode root) { List result = new ArrayList(); postListHelp(root, result); return result; } private void postListHelp(TreeNode node, List list) { if (node == null) { return; } prologueListHelp(node.left, list); list.add(node.val); prologueListHelp(node.right, list); } 深度优先遍历 用栈实现深度优先遍历\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public static void DFSPrint(TreeNode root) { if (root == null) { return; } Stack\u0026lt;TreeNode\u0026gt; stack = new Stack(); stack.push(root); while (!stack.empty()) { TreeNode node = stack.pop(); System.out.print(node.val + \u0026#34; \u0026#34;); //由于栈，先进后出，所以先放右节点 if (node.right != null) { stack.push(node.right); } if (node.left != null) { stack.push(node.left); } } } 广度优先遍历 用队列实现广度优先遍历\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public static void BFSPrint(TreeNode root) { if (root == null) { return; } Queue\u0026lt;TreeNode\u0026gt; queue = new LinkedList(); queue.add(root); while (!queue.isEmpty()) { TreeNode node = queue.poll(); System.out.print(node.val + \u0026#34; \u0026#34;); //先进先出，先放左节点，再放右节点。遍历的时候就是每一层从左到右的顺序 if (node.left != null) { queue.add(node.left); } if (node.right != null) { queue.add(node.right); } } } ","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%A0%91%E7%9A%84%E5%87%A0%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/","summary":"\u003cp\u003e主要记录一下对于二叉树，进行遍历的几种方式，包括：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e前序遍历\u003c/li\u003e\n\u003cli\u003e中序遍历\u003c/li\u003e\n\u003cli\u003e后序遍历\u003c/li\u003e\n\u003cli\u003e深度优先遍历\u003c/li\u003e\n\u003cli\u003e广度优先遍历\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我们以下面的这个二叉树结构为例，分别描述一下这几种遍历的方式有什么不同，以及给出java实现的代码。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/20200303155623.png\" alt=\"\"\u003e\u003c/p\u003e","title":"树的几种遍历方式"},{"content":"对于一个二叉树, 有根节点、左节点、右节点.\n前序遍历为: 根节点, 左节点, 右节点\n中序遍历为: 左节点, 根节点, 右节点 — 二叉搜索树的遍历结果为升序\n后序遍历为: 左节点, 右节点, 根节点\n使用栈模拟递归 后序遍历时, 由于弹出根节点时还需要判断右节点是否访问过, 如果没有访问过, 则需要将根节点再次访问栈中, 同时访问右节点.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 /** * 前序遍历 */ public List\u0026lt;Integer\u0026gt; preOrderStack(TreeNode root) { List\u0026lt;Integer\u0026gt; res = new LinkedList\u0026lt;\u0026gt;(); Stack\u0026lt;TreeNode\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); while (root != null || !stack.isEmpty()) { // 将根节点添加到结果集中，并将根节点添加到栈中 while (root != null) { stack.push(root); res.add(root.val); root = root.left; } root = stack.pop(); root = root.right; } return res; } /** * 中序遍历 */ public List\u0026lt;Integer\u0026gt; inOrderStack(TreeNode root) { List\u0026lt;Integer\u0026gt; res = new LinkedList\u0026lt;\u0026gt;(); Stack\u0026lt;TreeNode\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); while (root != null || !stack.isEmpty()) { //将左节点放入栈中，直至没有左节点为止，此时root为null while (root != null) { stack.push(root); root = root.left; } //最左节点 root = stack.pop(); res.add(root.val); // 从最左节点向上遍历右节点 root = root.right; } return res; } /** * 后序遍历 */ public static List\u0026lt;Integer\u0026gt; postOrderStack(TreeNode root) { List\u0026lt;Integer\u0026gt; res = new LinkedList\u0026lt;\u0026gt;(); Stack\u0026lt;TreeNode\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); //保存上一次访问右子树的值，这样就可以判断右子树是否访问过 TreeNode prev = null; while (root != null || !stack.isEmpty()) { //将左子树添加到栈中 while (root != null) { stack.push(root); root = root.left; } root = stack.pop(); // 这时需要判断右子树是否被访问过 if (root.right == null || prev == root.right) { //没有右子树，或者已经访问过 res.add(root.val); prev = root; root = null; } else { //未访问过 stack.push(root); root = root.right; } } return res; } 递归 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 /** * 前序遍历，遍历顺序为：根节点，左节点，右节点 */ public List\u0026lt;Integer\u0026gt; preOrder(TreeNode root) { List\u0026lt;Integer\u0026gt; res = new LinkedList\u0026lt;\u0026gt;(); preOrderHelp(root, res); return res; } public void preOrderHelp(TreeNode node, List\u0026lt;Integer\u0026gt; res) { if (node == null) { return; } res.add(node.val); preOrderHelp(node.left, res); preOrderHelp(node.right, res); } /** * 中序遍历，遍历顺序为：左节点，根节点, 右节点 */ public List\u0026lt;Integer\u0026gt; inOrder(TreeNode root) { List\u0026lt;Integer\u0026gt; res = new LinkedList\u0026lt;\u0026gt;(); inOrderHelp(root, res); return res; } public void inOrderHelp(TreeNode node, List\u0026lt;Integer\u0026gt; res) { if (node == null) { return; } inOrderHelp(node.left, res); res.add(node.val); inOrderHelp(node.right, res); } /** * 后序遍历，遍历顺序为：左节点，右节点，根节点 * * @param root * @return */ public List\u0026lt;Integer\u0026gt; postOrder(TreeNode root) { List\u0026lt;Integer\u0026gt; res = new LinkedList\u0026lt;\u0026gt;(); postOrderHelp(root, res); return res; } public void postOrderHelp(TreeNode node, List\u0026lt;Integer\u0026gt; res) { if (node == null) { return; } postOrderHelp(node.left, res); postOrderHelp(node.right, res); res.add(node.val); } ","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86-%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F/","summary":"\u003cp\u003e对于一个二叉树, 有根节点、左节点、右节点.\u003c/p\u003e\n\u003cp\u003e前序遍历为: 根节点, 左节点, 右节点\u003c/p\u003e\n\u003cp\u003e中序遍历为: 左节点, 根节点, 右节点 — 二叉搜索树的遍历结果为升序\u003c/p\u003e\n\u003cp\u003e后序遍历为: 左节点, 右节点, 根节点\u003c/p\u003e\n\u003ch1 id=\"使用栈模拟递归\"\u003e使用栈模拟递归\u003c/h1\u003e\n\u003cp\u003e后序遍历时, 由于弹出根节点时还需要判断右节点是否访问过, 如果没有访问过, 则需要将根节点再次访问栈中, 同时访问右节点.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e54\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e55\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e56\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e57\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e58\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e59\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e60\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e61\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e62\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e63\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e64\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e65\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e66\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e67\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e68\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e69\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e70\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e71\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * 前序遍历\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003epreOrderStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLinkedList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 将根节点添加到结果集中，并将根节点添加到栈中\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * 中序遍历\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003einOrderStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLinkedList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e//将左节点放入栈中，直至没有左节点为止，此时root为null\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e//最左节点\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 从最左节点向上遍历右节点\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * 后序遍历\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003epostOrderStack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLinkedList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e//保存上一次访问右子树的值，这样就可以判断右子树是否访问过\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e//将左子树添加到栈中\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 这时需要判断右子树是否被访问过\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e//没有右子树，或者已经访问过\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e//未访问过\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"递归\"\u003e递归\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e54\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e55\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e56\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e57\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e58\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * 前序遍历，遍历顺序为：根节点，左节点，右节点\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003epreOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLinkedList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003epreOrderHelp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003epreOrderHelp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003epreOrderHelp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003epreOrderHelp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * 中序遍历，遍历顺序为：左节点，根节点, 右节点\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003einOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLinkedList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003einOrderHelp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003einOrderHelp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003einOrderHelp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003einOrderHelp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * 后序遍历，遍历顺序为：左节点，右节点，根节点\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t *\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * @param root\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * @return\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003epostOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLinkedList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003epostOrderHelp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003epostOrderHelp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003epostOrderHelp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003epostOrderHelp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"树的几种遍历方式"},{"content":"什么是LRU算法 Least Recently Used，最近最少使用，当数据超过容量时，淘汰最近最少使用的一个然后再进行添加。\n用单链表来进行实现：\n维护一个链表，从头插入数据。当新数据插入时将新数据作为头部，指向旧的头结点。\n向一个单链表插入数据，首先遍历这个链表，查看数据是否已经存在于链表中。如果存在，则删除原有数据，将新数据插入到头结点。\n如果不存在，先看是否已经到达容量，如果没有到达容量则插入到头结点。如果到达容量则删除尾部节点，再进行插入。\n在这个过程中，将最近使用过的又重新插入到了头部，在链表尾部的就是最近最少使用的一项，所以从尾部删除。\n数据结构 首先我们需要定义一下节点的数据结构：\n1 2 3 4 5 6 7 class Node { Node next; int val; public Node(int val) { this.val = val; } } 为了方便直接使用int作为存储的数据结构\n定义实现 lru需要一个容量，以及链表的长度，还有头结点\n我们添加节点，定义一个添加方法\n为了方便查看数据，我们再定义一个打印数据方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class LruList { Node head; int length; int maxLength; public LruList(int maxLength){ this.maxLength = maxLength; } void add(int val){ ... } void print(){ Node temp = head; while (temp != null) { System.out.print(temp.val + \u0026#34; ,\u0026#34;); temp = temp.next; } System.out.println(); } } 我们在插入的时候，需要向头部插入，如果重复则删除当前节点，或者删除最后一个节点，我们将其抽离为单独的方法。最终的代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 class LruList { Node head; int length; int maxLength; public LruList() { } public LruList(int maxLength) { this.maxLength = maxLength; } void add(int val) { Node node = new Node(val); //当链表为空的情况 if (head == null) { head = node; length++; return; } if (head.val == val) { //如果是跟头部一样，则直接返回，因为需要先删除这个头部旧节点再添加，所以直接返回不做操作 return; } //进行遍历，查找是否已经存在，由于已经比较过头结点，所以从第二个节点开始 //同时，保存两个节点，便于删除 Node e = head; Node next = e.next; while (e != null \u0026amp;\u0026amp; next != null) { if (next.val == val) { e.next = next.next; next = null; addHead(node); return; } e = e.next; next = next.next; } //新插入节点不存在，判断是否超过容量 if (length \u0026lt; maxLength) { addHead(node); length++; } else { //删除尾部节点，然后再从头插入 deleteLast(); addHead(node); } } /** * 删除尾部节点 */ private void deleteLast() { Node t = head; while (t.next != null \u0026amp;\u0026amp; t.next.next != null) { t = t.next; } t.next = null; } /** * 从头部插入节点 */ private void addHead(Node e) { e.next = head; head = e; } /** * 将链表打印 */ void print() { Node temp = head; while (temp != null) { System.out.print(temp.val + \u0026#34; ,\u0026#34;); temp = temp.next; } System.out.println(); } } class Node { Node next; int val; public Node(int val) { this.val = val; } } 测试一下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public static void main(String[] args) { LruList lruList = new LruList(5); lruList.add(1); lruList.add(2); lruList.add(3); lruList.add(4); lruList.add(5); lruList.add(1); lruList.add(1); lruList.add(3); lruList.add(4); lruList.add(5); lruList.print(); } 最终打印结果为5,4,3,1,2。跟我们预期的结果一致。\n","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/%E7%94%A8%E5%8D%95%E9%93%BE%E8%A1%A8%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0lru%E7%AE%97%E6%B3%95/","summary":"\u003ch1 id=\"什么是lru算法\"\u003e什么是LRU算法\u003c/h1\u003e\n\u003cp\u003eLeast Recently Used，最近最少使用，当数据超过容量时，淘汰最近最少使用的一个然后再进行添加。\u003c/p\u003e\n\u003cp\u003e用单链表来进行实现：\u003c/p\u003e\n\u003cp\u003e维护一个链表，从头插入数据。当新数据插入时将新数据作为头部，指向旧的头结点。\u003c/p\u003e\n\u003cp\u003e向一个单链表插入数据，首先遍历这个链表，查看数据是否已经存在于链表中。如果存在，则删除原有数据，将新数据插入到头结点。\u003c/p\u003e\n\u003cp\u003e如果不存在，先看是否已经到达容量，如果没有到达容量则插入到头结点。如果到达容量则删除尾部节点，再进行插入。\u003c/p\u003e\n\u003cp\u003e在这个过程中，将最近使用过的又重新插入到了头部，在链表尾部的就是最近最少使用的一项，所以从尾部删除。\u003c/p\u003e","title":"用单链表简单实现LRU算法"},{"content":"题目描述 给你一个整数数组 nums，请你返回其中位数为 偶数 的数字的个数。\n示例 1：\n输入：nums = [12,345,2,6,7896] 输出：2 解释： 12 是 2 位数字（位数为偶数） 345 是 3 位数字（位数为奇数）\n2 是 1 位数字（位数为奇数） 6 是 1 位数字 位数为奇数） 7896 是 4 位数字（位数为偶数）\n因此只有 12 和 7896 是位数为偶数的数字 示例 2：\n输入：nums = [555,901,482,1771] 输出：1 解释： 只有 1771 是位数为偶数的数字。\n提示：\n1 \u0026lt;= nums.length \u0026lt;= 500 1 \u0026lt;= nums[i] \u0026lt;= 10^5\n解题思路 这里使用了一个取巧的办法，将它转换为字符串，然后判断长度是否为偶数\n代码实现：\n1 2 3 4 5 6 7 8 9 public int findNumbers(int[] nums) { int count = 0; for (int num : nums) { if ((String.valueOf(num).length() \u0026amp; 1) == 0) { count++; } } return count; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E7%BB%9F%E8%AE%A1%E4%BD%8D%E6%95%B0%E4%B8%BA%E5%81%B6%E6%95%B0%E7%9A%84%E6%95%B0%E5%AD%97-leetcode1295/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给你一个整数数组 nums，请你返回其中位数为 偶数 的数字的个数。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cp\u003e输入：nums = [12,345,2,6,7896]\n输出：2\n解释：\n12 是 2 位数字（位数为偶数）\n345 是 3 位数字（位数为奇数）\u003cbr\u003e\n2 是 1 位数字（位数为奇数）\n6 是 1 位数字 位数为奇数）\n7896 是 4 位数字（位数为偶数）\u003cbr\u003e\n因此只有 12 和 7896 是位数为偶数的数字\n示例 2：\u003c/p\u003e\n\u003cp\u003e输入：nums = [555,901,482,1771]\n输出：1\n解释：\n只有 1771 是位数为偶数的数字。\u003c/p\u003e\n\u003cp\u003e提示：\u003c/p\u003e\n\u003cp\u003e1 \u0026lt;= nums.length \u0026lt;= 500\n1 \u0026lt;= nums[i] \u0026lt;= 10^5\u003c/p\u003e\u003c/blockquote\u003e","title":"统计位数为偶数的数字—LeetCode1295"},{"content":"题目描述 给定一个二叉树，找出其最大深度。\n二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\n说明: 叶子节点是指没有子节点的节点。\n示例： 给定二叉树 [3,9,20,null,null,15,7]，\n3 / 9 20 / 15 7 返回它的最大深度 3 。\n解题思路 求树的最大深度，一个节点的深度为子节点的深度加一，而最大深度为两个子节点深度的最大值。\n1 2 3 4 5 6 public int maxDepth(TreeNode root) { if (root == null) { return 0; } return 1 + Math.max(maxDepth(root.left), maxDepth(root.right)); } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6-leetcode104/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个二叉树，找出其最大深度。\u003c/p\u003e\n\u003cp\u003e二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\u003c/p\u003e\n\u003cp\u003e说明: 叶子节点是指没有子节点的节点。\u003c/p\u003e\n\u003cp\u003e示例：\n给定二叉树 [3,9,20,null,null,15,7]，\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e/ \u003cbr\u003e\n9  20\n/  \u003cbr\u003e\n15   7\n返回它的最大深度 3 。\u003c/p\u003e\u003c/blockquote\u003e","title":"二叉树的最大深度-LeetCode104"},{"content":"题目描述 给你一个整数 n，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。\n示例 1：\n输入：n = 234 输出：15 解释： 各位数之积 = 2 * 3 * 4 = 24 各位数之和 = 2 + 3 + 4 = 9 结果 = 24 - 9 = 15 示例 2：\n输入：n = 4421 输出：21 解释： 各位数之积 = 4 * 4 * 2 * 1 = 32 各位数之和 = 4 + 4 + 2 + 1 = 11 结果 = 32 - 11 = 21\n提示：\n1 \u0026lt;= n \u0026lt;= 10^5\n解题思路 这个题目的思路就很清晰，对进行拆分，然后累积和累加，然后做差返回。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 public int subtractProductAndSum(int n) { int sum = 0; int mutx = 1; while (n \u0026gt; 0) { int temp = n % 10; sum += temp; mutx *= temp; n /= 10; } return mutx - sum; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%95%B4%E6%95%B0%E7%9A%84%E5%90%84%E4%BD%8D%E7%A7%AF%E5%92%8C%E4%B9%8B%E5%B7%AE-leetcode1281/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给你一个整数 n，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cp\u003e输入：n = 234\n输出：15\n解释：\n各位数之积 = 2 * 3 * 4 = 24\n各位数之和 = 2 + 3 + 4 = 9\n结果 = 24 - 9 = 15\n示例 2：\u003c/p\u003e\n\u003cp\u003e输入：n = 4421\n输出：21\n解释：\n各位数之积 = 4 * 4 * 2 * 1 = 32\n各位数之和 = 4 + 4 + 2 + 1 = 11\n结果 = 32 - 11 = 21\u003c/p\u003e\n\u003cp\u003e提示：\u003c/p\u003e\n\u003cp\u003e1 \u0026lt;= n \u0026lt;= 10^5\u003c/p\u003e\u003c/blockquote\u003e","title":"整数的各位积和之差—LeetCode1281"},{"content":"题目描述 小A 和 小B 在玩猜数字。小B 每次从 1, 2, 3 中随机选择一个，小A 每次也从 1, 2, 3 中选择一个猜。他们一共进行三次这个游戏，请返回 小A 猜对了几次？\n输入的guess数组为 小A 每次的猜测，answer数组为 小B 每次的选择。guess和answer的长度都等于3。\n示例 1：\n输入：guess = [1,2,3], answer = [1,2,3] 输出：3 解释：小A 每次都猜对了。\n示例 2：\n输入：guess = [2,2,3], answer = [3,2,1] 输出：1 解释：小A 只猜对了第二次。\n限制：\nguess的长度 = 3 answer的长度 = 3 guess的元素取值为 {1, 2, 3} 之一。 answer的元素取值为 {1, 2, 3} 之一。\n解题思路 长度为3，循环3次，每次对比相应位置是否匹配\n代码实现：\n1 2 3 4 5 6 7 8 9 public int game(int[] guess, int[] answer) { int count = 0; for (int i = 0; i \u0026lt; 3; i++) { if (guess[i] == answer[i]) { count++; } } return count; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E7%8C%9C%E6%95%B0%E5%AD%97-leetcodelcp1/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e小A 和 小B 在玩猜数字。小B 每次从 1, 2, 3 中随机选择一个，小A 每次也从 1, 2, 3 中选择一个猜。他们一共进行三次这个游戏，请返回 小A 猜对了几次？\u003c/p\u003e\n\u003cp\u003e输入的guess数组为 小A 每次的猜测，answer数组为 小B 每次的选择。guess和answer的长度都等于3。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cp\u003e输入：guess = [1,2,3], answer = [1,2,3]\n输出：3\n解释：小A 每次都猜对了。\u003c/p\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e\n\u003cp\u003e输入：guess = [2,2,3], answer = [3,2,1]\n输出：1\n解释：小A 只猜对了第二次。\u003c/p\u003e\n\u003cp\u003e限制：\u003c/p\u003e\n\u003cp\u003eguess的长度 = 3\nanswer的长度 = 3\nguess的元素取值为 {1, 2, 3} 之一。\nanswer的元素取值为 {1, 2, 3} 之一。\u003c/p\u003e\u003c/blockquote\u003e","title":"猜数字-LeetCodeLCP1"},{"content":"题目描述 输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。\n示例：\n给定一个链表: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5, 和 k = 2.\n返回链表 4-\u0026gt;5.\n解题思路 要求链表的倒数第k个节点，可以利用两个变量，第一个变量从头记录，第二个变量为第一个元素后的第k个元素，然后两个变量一起先后走，当第二个变量到达尾部时，第一个变量就是要求的元素。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public ListNode getKthFromEnd(ListNode head, int k) { if (head == null) { return null; } ListNode fast = head; ListNode slow = head; for (int i = 0; i \u0026lt;k \u0026amp;\u0026amp; fast !=null; i++) { fast = fast.next; } while (fast != null){ fast = fast.next; slow = slow.next; } return slow; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9-leetcodem22/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例：\u003c/p\u003e\n\u003cp\u003e给定一个链表: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5, 和 k = 2.\u003c/p\u003e\n\u003cp\u003e返回链表 4-\u0026gt;5.\u003c/p\u003e\u003c/blockquote\u003e","title":"链表中的倒数第K个节点-LeetCodeM22"},{"content":"1. 前言 之前的程序架构可能是这样的一种形式：\n当程序体量扩大后，我们进行扩展，可能会扩展多个后台服务实例，但数据库还是只有一个，所以系统的瓶颈还是在数据库上面，所以这次的主要任务就是对数据库进行扩展，主要形式为：扩展多台数据库实例，实现读写分离，对于一些写的任务分配到主数据库，对于读的任务使用子数据库进行读取。从而提高系统性能。\n修改后的架构如下所示：\n2. 环境预搭建 这次使用docker来进行这个环境的搭建，使用MySQL版本为5.7.13。\n1 docker pull mysql:5.7.13 整体结构为:\n1个master主节点，作为写的节点。\n2个slave从节点，作为读的节点。\n先分别将这几个节点启动，映射到不同的端口。在本机使用数据库连接工具连接，测试是否正常启动且正常连接。\n1 2 3 docker run -p 3307:3306 --name mysql-master -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7.13 docker run -p 3308:3306 --name mysql-slave1 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7.13 docker run -p 3309:3306 --name mysql-slave2 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7.13 我这里分别将主节点（mysql-master）映射为3307端口，两个从节点（mysql-slave1,2）分别为3308和3309端口。然后设置MySQL的root密码为123456。\n然后可以使用navicat等工具连接测试MySQL。\n分别进入这几个节点，编辑配置文件。\n1 docker exec -it mysql-master /bin/bash 我使用的是name来进入容器，也可以根据id来选择，即docker exec -it 对应容器的id /bin/bash。\n由于没有预先安装vi和vim程序，然后要下载时需要执行apt update命令，这时会从国外源进行下载。由于众所周知的原因，速度很慢。我就将下载源更改为国内源。\n进入到/etc/apt文件夹中，首先将原有的文件进行备份：\n1 mv sources.list sources.list.bak 然后使用如下命令新建文件并输入内容：\n1 echo deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse \u0026gt; sources.list 然后我们再执行apt update等操作，最后安装vim即可。\n3. 进行主从配置 主节点（master）配置 进入主节点容器后，进入/etc/mysql文件夹中，会有一个my.cnf文件，主要对它进行修改。\n编辑这个文件，找到[mysqld]，在这个下面添加如下命令：\n1 2 3 4 5 6 7 [mysqld] ... ... ## 唯一的编号 server-id=101 ## 这个是关键配置项 log-bin=mysql-bin 配置完成后，需要重启MySQL服务使配置生效。使用service mysql restart命令进行重启，重启完成后会关闭MySQL的容器，我们还要重启容器docker restart mysql-master。\n从节点（slave）配置 同主节点一样，编辑/etc/mysql/my.cnf文件\n1 2 3 4 5 6 7 [mysqld] ... ... ## 唯一的编号 server-id=103 ## 选，如果需要将该节点作为其他节点的主节点则需要添加 # log-bin=mysql-bin 链接主节点和从节点 主节点\n在主节点容器中进入MySQLmysql -u root -p，密码就是启动容器时设置的123456。\n进入MySQL后执行show master status;：\n从这里我们得到两个信息File和Position的值，我这里分别是mysql-bin.000001和154。\n从节点\n进入MySQL，执行如下的命令：\n1 change master to master_host=\u0026#39;***\u0026#39;, master_port=3306, master_user=\u0026#39;root\u0026#39;, master_password=\u0026#39;123456\u0026#39;, master_log_file=\u0026#39;****\u0026#39;, master_log_pos= ***; 分别解释一下这几个参数代表的意思：\nmaster_host：主节点的ip地址，可以在本机使用中如下命令来查看容器的ip地址\n1 docker inspect --format=\u0026#39;{{.NetworkSettings.IPAddress}}\u0026#39; 容器名称|容器id master_port：mysql的端口号，不是对外映射的端口号\nmaster_user：mysql中的用户，要有权限，我直接使用了root，也可以新建用户来使用\nmaster_password：用于同步的mysql帐户密码\nmaster_log_file：用于同步的文件，就是从主节点查询到的文件，我这里是mysql-bin.000001\nmaster_log_pos：binlog文件开始同步的位置， 就是从主节点查询到的位置，我这里是154\n执行刚刚的命令后在MySQL终端执行show slave status \\G;来查看主从同步状态。\n我们可以从这里查看配置的信息来进行核查，然后可以看到两个属性slave_io_running和slave_sql_running都是no，也就是关闭状态。\n我们可以执行start slave来开启主从复制，执行后再次执行show slave status \\G;命令可以看到两个属性都变成了yes，则说明主从复制已经开启。\n如果启动未成功，我们可以检查网络是否连通，同步用到的mysql密码是否正确，还有就是同步文件名称和位置是否正确！\n测试 我们可以在主库中新建一个数据库，到从库中如果看到这个库的存在就表示主从同步完成。\n4. 级联配置 我想再加一个备份节点，并且这个节点是从slave1节点进行备份的，也就是slave1节点作为backup节点的主节点。这就构成了master-\u0026gt;slave-\u0026gt;backup这样一个级联关系。\n我本来是按照上面的步骤，先在slave的my.cnf中添加了\n1 log-bin=mysql-slave-bin #为了区分，我对文件名进行了修改 接着在backup节点执行的\n1 change master to master_host=\u0026#39;***\u0026#39;, master_user=\u0026#39;root\u0026#39;, master_password=\u0026#39;123456\u0026#39;, master_port=3306, master_log_file=\u0026#39;****\u0026#39;, master_log_pos= ***; 命令换成对应slave节点的ip等属性。结果发现不行。在主节点有更改后，备份节点并没有变更！\n于是我开始了排查，发现在slave节点中的binlog文件并没有更改信息的记录，而backup节点相当于监听这个文件变更，这个文件没有变更所以backup节点也就不会有更改。这里延伸一点，mysql的binlog记录了我们所有更改的操作，所以理论上我们可以通过binlog来恢复任一时间刻的数据库内容。\n于是问题就转变成，主节点变更后如何让从节点的binlog日志有记录。\n我们可以在编辑my.cnf文件时再添加一行：log_slave_updates=1即可，让slave在接到master同步后也将二进制日志写到自己的binlog中。\n这样就可以完成，主节点进行更改后，从节点和备份节点都会进行变更，备份节点的数据是从从节点备份过去的。\n参考 https://blog.csdn.net/youngwizard/article/details/8530725 ","permalink":"https://www.liunaijie.top/coding/database/%E5%9F%BA%E4%BA%8Edocker%E7%9A%84mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","summary":"\u003ch1 id=\"1-前言\"\u003e1. 前言\u003c/h1\u003e\n\u003cp\u003e之前的程序架构可能是这样的一种形式：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/20200130131404.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e当程序体量扩大后，我们进行扩展，可能会扩展多个后台服务实例，但数据库还是只有一个，所以系统的瓶颈还是在数据库上面，所以这次的主要任务就是对数据库进行扩展，主要形式为：扩展多台数据库实例，实现读写分离，对于一些写的任务分配到主数据库，对于读的任务使用子数据库进行读取。从而提高系统性能。\u003c/p\u003e\n\u003cp\u003e修改后的架构如下所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/%E6%88%AA%E5%B1%8F2020-01-3017.03.05.png\" alt=\"\"\u003e\u003c/p\u003e","title":"基于Docker的MySQL主从复制环境搭建"},{"content":"记录一些我在日常用到的一些好用的软件。我现在用的系统是mac系统，所以下面大部分是mac系统的，也会记录一些在Windows上用到过的好用的软件。\n主要分为几个部分：1.日常使用。2.编程工具\n日常使用 图片上传\npicgo\n利用它结合github可以白嫖一个网络图床\n脑图\n百度脑图\n网页端\nxmind\n浏览器\nChrome 视频、音乐\nIINA potplayer（Windows系统） 网易云音乐 rss订阅\nreeder 日历\nitsycal\n用它替换了系统自带的日历\n密码存储\n1password 窗口管理\nmagnet 下载工具\ntransmission 网盘\n百度网盘 oneDrive 视频处理工具\n直播工具\nobs 视频剪辑\nfinal cut pro arctime pro（字幕工具） 编程工具 makedown编辑工具\ntypora 原型流程，作图工具\nomnigraffle 文本编辑\nsublime text 数据库工具\nnavicat IDE\nIntelij全家桶 ssh工具\ntermius iterm2 + oh my zsh api测试工具\npostman ftp工具\ntransmit xshell和xftp（Windows系统） 虚拟机\nparallels desktop api文档查询\ndash ","permalink":"https://www.liunaijie.top/coding/tools/%E5%A5%BD%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E8%BD%AF%E4%BB%B6/","summary":"\u003cp\u003e记录一些我在日常用到的一些好用的软件。我现在用的系统是mac系统，所以下面大部分是mac系统的，也会记录一些在Windows上用到过的好用的软件。\u003c/p\u003e\n\u003cp\u003e主要分为几个部分：1.日常使用。2.编程工具\u003c/p\u003e\n\u003ch1 id=\"日常使用\"\u003e日常使用\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e图片上传\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003epicgo\u003c/p\u003e\n\u003cp\u003e利用它结合github可以白嫖一个网络图床\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e脑图\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e百度脑图\u003c/p\u003e\n\u003cp\u003e网页端\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003exmind\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eChrome\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e视频、音乐\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIINA\u003c/li\u003e\n\u003cli\u003epotplayer（Windows系统）\u003c/li\u003e\n\u003cli\u003e网易云音乐\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003erss订阅\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ereeder\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e日历\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eitsycal\u003c/p\u003e\n\u003cp\u003e用它替换了系统自带的日历\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e密码存储\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1password\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e窗口管理\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emagnet\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e下载工具\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etransmission\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e网盘\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e百度网盘\u003c/li\u003e\n\u003cli\u003eoneDrive\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e视频处理工具\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e直播工具\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eobs\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e视频剪辑\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003efinal cut pro\u003c/li\u003e\n\u003cli\u003earctime pro（字幕工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"编程工具\"\u003e编程工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003emakedown编辑工具\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etypora\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e原型流程，作图工具\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eomnigraffle\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e文本编辑\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003esublime text\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e数据库工具\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003enavicat\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIDE\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIntelij全家桶\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003essh工具\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etermius\u003c/li\u003e\n\u003cli\u003eiterm2 + oh my zsh\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eapi测试工具\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003epostman\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eftp工具\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etransmit\u003c/li\u003e\n\u003cli\u003exshell和xftp（Windows系统）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e虚拟机\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eparallels desktop\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eapi文档查询\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edash\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"好用的一些软件"},{"content":"\nMybatis这个框架在日常开发中用的很多，比如面试中经常有一个问题：$和#的区别，它们的区别是使用#可以防止SQL注入，今天就来看一下它是如何实现SQL注入的。\n什么是SQL注入 在讨论怎么实现之前，首先了解一下什么是SQL注入，我们有一个简单的查询操作：根据id查询一个用户信息。它的sql语句应该是这样：select * from user where id = 。我们根据传入条件填入id进行查询。\n如果正常操作，传入一个正常的id，比如说2，那么这条语句变成select * from user where id =2。这条语句是可以正常运行并且符合我们预期的。\n但是如果传入的参数变成 '' or 1=1，这时这条语句变成select * from user where id = '' or 1=1。让我们想一下这条语句的执行结果会是怎么？它会将我们用户表中所有的数据查询出来，显然这是一个大的错误。这就是SQL注入。\nMybatis如何防止SQL注入 在开头讲过，可以使用#来防止SQL注入，它的写法如下：\n1 2 3 \u0026lt;select id=\u0026#34;safeSelect\u0026#34; resultMap=\u0026#34;testUser\u0026#34;\u0026gt; SELECT * FROM user where id = #{id} \u0026lt;/select\u0026gt; 在mybatis中查询还有一个写法是使用$，它的写法如下：\n1 2 3 \u0026lt;select id=\u0026#34;unsafeSelect\u0026#34; resultMap=\u0026#34;testUser\u0026#34;\u0026gt; select * from user where id = ${id} \u0026lt;/select\u0026gt; 当我们在外部对这两个方法继续调用时，发现如果传入安全的参数时，两者结果并无不同，如果传入不安全的参数时，第一种使用#的方法查询不到结果(select * from user where id = '' or 1=1)，但这个参数在第二种也就是$下会得到全部的结果。\n并且如果我们将sql进行打印，会发现添加#时，向数据库执行的sql为:select * from user where id = ' \\'\\' or 1=1 '，它会在我们的参数外再加一层引号，在使用$时，它的执行sql是select * from user where id = '' or 1=1。\n弃用$可以吗 我们使用#也能完成$的作用，并且使用$还有危险，那么我们以后不使用$不就行了吗。\n并不是，它只是在我们这种场景下会有问题，但是在有一些动态查询的场景中还是有不可代替的作用的，比如，动态修改表名select * from ${table} where id = #{id}。我们就可以在返回信息一致的情况下进行动态的更改查询的表，这也是mybatis动态强大的地方。\n如何实现SQL注入的，不用Mybatis怎么实现 其实Mybatis也是通过jdbc来进行数据库连接的，如果我们看一下jdbc的使用，就可以得到这个原因。\n#使用了PreparedStatement来进行预处理，然后通过set的方式对占位符进行设置，而$则是通过Statement直接进行查询，当有参数时直接拼接进行查询。\n所以说我们可以使用jdbc来实现SQL注入。\n看一下这两个的代码:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 public static void statement(Connection connection) { System.out.println(\u0026#34;statement-----\u0026#34;); String selectSql = \u0026#34;select * from user\u0026#34;; // 相当于mybatis中使用$，拿到参数后直接拼接 String unsafeSql = \u0026#34;select * from user where id = \u0026#39;\u0026#39; or 1=1;\u0026#34;; Statement statement = null; try { statement = connection.createStatement(); } catch (SQLException e) { e.printStackTrace(); } try { ResultSet resultSet = statement.executeQuery(selectSql); print(resultSet); } catch (SQLException e) { e.printStackTrace(); } System.out.println(\u0026#34;---****---\u0026#34;); try { ResultSet resultSet = statement.executeQuery(unsafeSql); print(resultSet); } catch (SQLException e) { e.printStackTrace(); } } public static void preparedStatement(Connection connection) { System.out.println(\u0026#34;preparedStatement-----\u0026#34;); String selectSql = \u0026#34;select * from user;\u0026#34;; //相当于mybatis中的#，先对要执行的sql进行预处理，设置占位符，然后设置参数 String safeSql = \u0026#34;select * from user where id =?;\u0026#34;; PreparedStatement preparedStatement = null; try { preparedStatement = connection.prepareStatement(selectSql); ResultSet resultSet = preparedStatement.executeQuery(); print(resultSet); } catch (SQLException e) { e.printStackTrace(); } System.out.println(\u0026#34;---****---\u0026#34;); try { preparedStatement = connection.prepareStatement(safeSql); preparedStatement.setString(1,\u0026#34; \u0026#39;\u0026#39; or 1 = 1 \u0026#34;); ResultSet resultSet = preparedStatement.executeQuery(); print(resultSet); } catch (SQLException e) { e.printStackTrace(); } } public static void print(ResultSet resultSet) throws SQLException { while (resultSet.next()) { System.out.print(resultSet.getString(1) + \u0026#34;, \u0026#34;); System.out.print(resultSet.getString(\u0026#34;name\u0026#34;) + \u0026#34;, \u0026#34;); System.out.println(resultSet.getString(3)); } } 总结 Mybatis中使用#可以防止SQL注入，$并不能防止SQL注入 Mybatis实现SQL注入的原理是调用了jdbc中的PreparedStatement来进行预处理。 ","permalink":"https://www.liunaijie.top/coding/mybatis/mybatis%E6%98%AF%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2sql%E6%B3%A8%E5%85%A5%E7%9A%84-%E4%B8%8D%E7%94%A8mybatis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0sql%E6%B3%A8%E5%85%A5/","summary":"\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/happy-new-year-4718894_640.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003eMybatis这个框架在日常开发中用的很多，比如面试中经常有一个问题：\u003ccode\u003e$\u003c/code\u003e和\u003ccode\u003e#\u003c/code\u003e的区别，它们的区别是使用\u003ccode\u003e#\u003c/code\u003e可以防止SQL注入，今天就来看一下它是如何实现SQL注入的。\u003c/p\u003e\n\u003ch1 id=\"什么是sql注入\"\u003e什么是SQL注入\u003c/h1\u003e\n\u003cp\u003e在讨论怎么实现之前，首先了解一下什么是SQL注入，我们有一个简单的查询操作：根据id查询一个用户信息。它的sql语句应该是这样：\u003ccode\u003eselect * from user where id = \u003c/code\u003e。我们根据传入条件填入id进行查询。\u003c/p\u003e\n\u003cp\u003e如果正常操作，传入一个正常的id，比如说2，那么这条语句变成\u003ccode\u003eselect * from user where id =2\u003c/code\u003e。这条语句是可以正常运行并且符合我们预期的。\u003c/p\u003e\n\u003cp\u003e但是如果传入的参数变成\u003ccode\u003e '' or 1=1\u003c/code\u003e，这时这条语句变成\u003ccode\u003eselect * from user where id = '' or 1=1\u003c/code\u003e。让我们想一下这条语句的执行结果会是怎么？它会将我们用户表中所有的数据查询出来，显然这是一个大的错误。这就是SQL注入。\u003c/p\u003e","title":"Mybatis是如何防止SQL注入的,不用Mybatis如何实现SQL注入"},{"content":"前言 之前了解过位运算符，左移\u0026lt;\u0026lt;等于乘以2，右移\u0026gt;\u0026gt;等于除以2。但是我在看jdk源码的时候发现了一个\u0026gt;\u0026gt;\u0026gt;三个符号的，不明白这是什么意思，就去搜了一下，发现还挺多的知识点的，就整理了一下。\n首先我们知道，我们编写的程序最终都是在计算机底层进行的，计算机底层也仅支持0、1两种符号。所以当时网上有个键盘只有0、1两个键，那才是大佬用的键盘。扯远了。。。\n先来复习一下java的基本类型都占多少字节，占多少位（1字节等于8位）：\n类型 字节数 位数 大小范围 byte 1 8 -2^8^~2^8^-1 short 2 16 -2^16^~2^16^-1 int 4 32 -2^32^~2^32^-1 long 8 64 -2^64^~2^64^-1 float 4 double 8 char 2 16 一个char类型可以存储一个汉字 boolean 1 true or false 移位操作是把数据看作二进制数，然后将其向左或向右移动若干位的运算。在Java中，移位操作符包含三种：\u0026lt;\u0026lt;左移运算符，\u0026gt;\u0026gt;带符号右移运算符，\u0026gt;\u0026gt;\u0026gt;无符号右移运算符。这三种操作符都只能作用于long,int,short,byte这四种基本整形类型上和char类型上。其他类型如double都无法使用位运算符，大家可以在ide中自行试验一下。\n在java中，第一位用来表示数字的正负，第一位为零时表示正数，第一位为1时表示负数。我们拿最简单的8位byte类型举例：0000 0000表示0，0111 1111这个表示最大值(2^8^-1)，再进行加一后就变成了1000 0000这时就变成了最小值(-2^8^)。再加一后变成1000 0001这时的值为-127。也就是从0到最大值然后转为最小值，然后再从最小值向零靠近。\n左移操作符\u0026lt;\u0026lt; 左移操作符\u0026lt;\u0026lt;是将数据转换为二进制后，向左移动若干位，高位丢弃，低位补零。\n首先我们可以利用java中的方法获取一个数的二进制：Integer.toBinaryString(int val)。\n然后我们看下面这个例子：\n1 2 3 4 5 6 7 public static void main(String[] args) { int a = 10; System.out.println(\u0026#34;左移前的二进制:\u0026#34;+Integer.toBinaryString(a)); a \u0026lt;\u0026lt;= 2; System.out.println(\u0026#34;左移后的二进制:\u0026#34;+Integer.toBinaryString(a)); System.out.println(\u0026#34;左移后的十进制:\u0026#34;+a); } 首先定义一个数，值为10，打印它的二进制(1010)，然后进行左移操作2位。打印移位后的结果和二进制。\n1 2 3 左移前的二进制:1010 左移后的二进制:101000 左移后的十进制:40 可以看出，将原来的二进制向左移动了两位，后面进行了补零。40=10 * 2 * 2。所以一次左移等于将这个数扩大了两倍。再来看一个负数的左移：\n1 2 3 4 5 int b = -8; System.out.println(\u0026#34;左移前的二进制：\u0026#34; + Integer.toBinaryString(b)); b \u0026lt;\u0026lt;= 2; System.out.println(\u0026#34;左移后的二进制：\u0026#34; + Integer.toBinaryString(b)); System.out.println(\u0026#34;左移后的十进制：\u0026#34; + b); 我们定义了一个负数（-8），打印出它的二进制，进行左移2位，左移后打印它的二进制，再将10进制打印出来查看。\n1 2 3 左移前的二进制：11111111111111111111111111111000 左移后的二进制：11111111111111111111111111100000 左移后的十进制：-32 可以明显的看出二进制向左移动了两位，前面的位置丢弃，后面的位置补零。转换为10进制也符合我们之前的运算：-32 = -8 * 2 *2。\n带符号右移操作符\u0026gt;\u0026gt; 刚才的左移中，它向左移动，高位进行了丢弃，低位进行补零。但是右移操作时有一个符号位，操作不当将造成答案与预期结果不同。\n带符号右移就是在**向右移动若干位，低位进行丢弃，高位按照符号位进行填补。**对于正数做右移操作时，高位补充0；负数进行右移时，高位补充1。\n再来用例子证明一下：\n1 2 3 4 5 6 7 8 9 10 11 12 public static void main(String[] args) { int a = 1024; System.out.println(\u0026#34;a右移前的二进制：\u0026#34; + Integer.toBinaryString(a)); a \u0026gt;\u0026gt;= 4; System.out.println(\u0026#34;a右移后的二进制：\u0026#34; + Integer.toBinaryString(a)); System.out.println(\u0026#34;a右移后的十进制:\u0026#34;+a); int b = -70336; System.out.println(\u0026#34;b右移前的二进制：\u0026#34; + Integer.toBinaryString(b)); b \u0026gt;\u0026gt;= 4; System.out.println(\u0026#34;b右移后的二进制：\u0026#34; + Integer.toBinaryString(b)); System.out.println(\u0026#34;b右移后的十进制:\u0026#34;+b); } 定义了两个变量，a=1024，然后向右移动4位。b=-70336也向右移动4位。分别将它们的移动前后二进制和十进制打印出来查看。\n1 2 3 4 5 6 a右移前的二进制：10000000000 a右移后的二进制：1000000 a右移后的十进制:64 b右移前的二进制：11111111111111101110110101000000 b右移后的二进制：11111111111111111110111011010100 b右移后的十进制:-4396 a原来的二进制向右移动后，低位被丢弃，高位补充符号位也就是0。b原来的二进制向右移动后，低位被丢弃，高位补充符号位1。这也符号我们之前的运算规律： 1024 / 2^4^ =16 ；-70336/ 2^4^ = -4396。\n无符号右移操作符\u0026gt;\u0026gt;\u0026gt; 刚才的带符号右移操作符，我们在向右移动时带着高位的符号，正数填充0，负数填充0。现在不带符号的右移操作符大体与右移操作符一致，只不过不再区分正负数，结果都是高位补零，低位丢弃。\n再用例子来证明一下：\n1 2 3 4 5 6 7 8 9 10 11 12 public static void main(String[] args) { int a = 1024; System.out.println(\u0026#34;a右移前的二进制：\u0026#34; + Integer.toBinaryString(a)); a \u0026gt;\u0026gt;\u0026gt;= 4; System.out.println(\u0026#34;a右移后的二进制：\u0026#34; + Integer.toBinaryString(a)); System.out.println(\u0026#34;a右移后的十进制:\u0026#34;+a); int b = -70336; System.out.println(\u0026#34;b右移前的二进制：\u0026#34; + Integer.toBinaryString(b)); b \u0026gt;\u0026gt;\u0026gt;= 4; System.out.println(\u0026#34;b右移后的二进制：\u0026#34; + Integer.toBinaryString(b)); System.out.println(\u0026#34;b右移后的十进制:\u0026#34;+b); } 还是刚才带符号右移的例子：这次我们仅仅把操作符换成无符号的右移操作符。\n按照定义，其实在正数时不会有变化，因为在带符号的右移中正数也是高位补零。只不过当值为负数时会有变化，让我们看一下输出是不是符合猜想。\n1 2 3 4 5 6 a右移前的二进制：10000000000 a右移后的二进制：1000000 a右移后的十进制:64 b右移前的二进制：11111111111111101110110101000000 b右移后的二进制：1111111111111110111011010100 b右移后的十进制:268431060 确实正数没有变化，验证了我们的猜想。然后是负数，这次向右移动时高位进行了补零，低位丢弃。改变后的数值不再符合我们之前的规律。\n在无符号右移中，当值为正数时，依然符合之前的规律移动一位相当于除以2。但是当值为负数时不再符合规律。\n当移位的位数超过数值所占用的位数会怎么样？ 这个问题很有意思，我们刚刚都仅仅移动了2位或者4位，如果我们超过了int的位数也就是32位后会怎么样？我们如果对一个正数左移32位，低位补零补充了32次就变成0了，就如同下面代码所写的一样，最终a的结果会是什么。会变成0吗？\n1 2 3 4 5 public static void main(String[] args) { int a = 10; a \u0026lt;\u0026lt;= 32; System.out.println(a); } 经过我们运行后发现a的结果最终没变还是10。我们如果改成左移33位，它的结果会变成20。那么它的运算规律会不会是当超过位数后仅仅移动对位数的余数呢？比如对int做操作，它实际是运算 位数%32次。\n经过多次试验发现答案确实就是这个猜想，当对int类型处理时，右移x位的运算为x%32位。\n对其他类型也是一样吗？ 我们刚才都是用的int类型，那么对于byte,short,char,long都一样吗？\n先看一下byte类型。\n1 2 3 4 5 6 public static void main(String[] args) { byte b = -1; System.out.println(\u0026#34;操作前：\u0026#34;+b); b \u0026gt;\u0026gt;\u0026gt;= 6; System.out.println(\u0026#34;操作后：\u0026#34;+b); } 定义了byte的值为-1，即1111 1111，然后无符号右移6位，高位补零，低位丢弃，那么应该变成0000 0011也就是是3。让我们运行一下这段代码看一下打印出来的信息是不是3呢？\n1 2 操作前：-1 操作后：-1 运行结果与我们预期的结果不一致！\n我们将它的二进制也一起打印出来看一下究竟：\n1 2 3 4 5 6 7 8 public static void main(String[] args) { byte b = -1; System.out.println(\u0026#34;操作前十进制：\u0026#34;+b); System.out.println(\u0026#34;操作前二进制：\u0026#34;+Integer.toBinaryString(b)); b \u0026gt;\u0026gt;\u0026gt;= 6; System.out.println(\u0026#34;操作后二进制：\u0026#34;+Integer.toBinaryString(b)); System.out.println(\u0026#34;操作后十进制：\u0026#34;+b); } 这时再看一下运行结果\n1 2 3 4 操作前十进制：-1 操作前二进制：11111111111111111111111111111111 操作后二进制：11111111111111111111111111111111 操作后十进制：-1 原来，Java在对byte,short,char这三种类型进行移位操作前，会将其先转型为int类型，然后再进行位操作。由于我们有进行了重新赋值将其赋值为原来的byte类型，所以又进行了从int到byte的先下转型，也就是截断。我们对上面的例子进行一下修改可以更直观的发现运行过程：\n1 2 3 4 5 6 7 public static void main(String[] args) { byte b = -1; System.out.println(\u0026#34;操作前十进制：\u0026#34;+b); System.out.println(\u0026#34;操作前二进制：\u0026#34;+Integer.toBinaryString(b)); System.out.println(\u0026#34;进行无符号右移6位后的十进制：\u0026#34;+(b\u0026gt;\u0026gt;\u0026gt;6)); System.out.println(\u0026#34;操作后二进制：\u0026#34;+Integer.toBinaryString(b\u0026gt;\u0026gt;\u0026gt;6)); } 在这里我没有使用=进行重新赋值，而是计算完成后直接打印十进制和二进制的结果。\n1 2 3 4 操作前十进制：-1 操作前二进制：11111111111111111111111111111111 进行无符号右移6位后的十进制：67108863 操作后二进制：11111111111111111111111111 从打印结果中可以明显的看出是先转换为int类型，然后进行位运算，位运算结束后由于重新赋值所以进行的截断。\n对于long类型，它是64位，不用先转换。\n总结 移位符是Java中的基本操作符，实际支持的类型只有int和long。在对byte,short,char类型进行移位操作时，都会先将其转换为int类型再进行操作。左移\u0026lt;\u0026lt;操作符相当于乘以2。带符号右移操作符\u0026gt;\u0026gt;相当于除以2。在Java中使用位运算符会比乘*,除/运算符更高效一些。而无符号右移符\u0026gt;\u0026gt;\u0026gt;在移动时高位补零，低位丢弃，在正数时仍然相当于除以2，但是在负数时结果却是变大了(由负数变为正数)。\n参考 https://juejin.im/post/5dff47416fb9a0162f62271c\n","permalink":"https://www.liunaijie.top/coding/java/java%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E8%AF%A6%E8%A7%A3/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e之前了解过位运算符，左移\u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e等于乘以2，右移\u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e等于除以2。但是我在看jdk源码的时候发现了一个\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/code\u003e三个符号的，不明白这是什么意思，就去搜了一下，发现还挺多的知识点的，就整理了一下。\u003c/p\u003e\n\u003cp\u003e首先我们知道，我们编写的程序最终都是在计算机底层进行的，计算机底层也仅支持0、1两种符号。所以当时网上有个键盘只有0、1两个键，那才是大佬用的键盘。扯远了。。。\u003c/p\u003e\n\u003cp\u003e先来复习一下java的基本类型都占多少字节，占多少位（1字节等于8位）：\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e类型\u003c/th\u003e\n          \u003cth\u003e字节数\u003c/th\u003e\n          \u003cth\u003e位数\u003c/th\u003e\n          \u003cth\u003e大小范围\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ebyte\u003c/td\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n          \u003ctd\u003e8\u003c/td\u003e\n          \u003ctd\u003e-2^8^~2^8^-1\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eshort\u003c/td\u003e\n          \u003ctd\u003e2\u003c/td\u003e\n          \u003ctd\u003e16\u003c/td\u003e\n          \u003ctd\u003e-2^16^~2^16^-1\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eint\u003c/td\u003e\n          \u003ctd\u003e4\u003c/td\u003e\n          \u003ctd\u003e32\u003c/td\u003e\n          \u003ctd\u003e-2^32^~2^32^-1\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003elong\u003c/td\u003e\n          \u003ctd\u003e8\u003c/td\u003e\n          \u003ctd\u003e64\u003c/td\u003e\n          \u003ctd\u003e-2^64^~2^64^-1\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003efloat\u003c/td\u003e\n          \u003ctd\u003e4\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003edouble\u003c/td\u003e\n          \u003ctd\u003e8\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003echar\u003c/td\u003e\n          \u003ctd\u003e2\u003c/td\u003e\n          \u003ctd\u003e16\u003c/td\u003e\n          \u003ctd\u003e一个char类型可以存储一个汉字\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eboolean\u003c/td\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n          \u003ctd\u003e\u003c/td\u003e\n          \u003ctd\u003etrue or false\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e移位操作是把数据看作二进制数，然后将其向左或向右移动若干位的运算。在Java中，移位操作符包含三种：\u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e左移运算符，\u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e带符号右移运算符，\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/code\u003e无符号右移运算符。这三种操作符都只能作用于\u003ccode\u003elong\u003c/code\u003e,\u003ccode\u003eint\u003c/code\u003e,\u003ccode\u003eshort\u003c/code\u003e,\u003ccode\u003ebyte\u003c/code\u003e这四种基本整形类型上和\u003ccode\u003echar\u003c/code\u003e类型上。其他类型如double都无法使用位运算符，大家可以在ide中自行试验一下。\u003c/p\u003e\n\u003cp\u003e在java中，第一位用来表示数字的正负，第一位为零时表示正数，第一位为1时表示负数。我们拿最简单的8位byte类型举例：\u003ccode\u003e0000 0000\u003c/code\u003e表示0，\u003ccode\u003e0111 1111\u003c/code\u003e这个表示最大值(2^8^-1)，再进行加一后就变成了\u003ccode\u003e1000 0000\u003c/code\u003e这时就变成了最小值(-2^8^)。再加一后变成\u003ccode\u003e1000 0001\u003c/code\u003e这时的值为-127。也就是从0到最大值然后转为最小值，然后再从最小值向零靠近。\u003c/p\u003e","title":"Java位运算符详解"},{"content":"基于《算法》一书的红黑树的插入和删除。看过不同的教材，也有不同的实现方式，但是最终的结果也大致相同，感觉这个比较容易理解，就采用这种的方式来进行简单实现。\n定义树节点的实体类型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 private static final boolean RED = true; private static final boolean BLACK = false; /** * 红黑树的节点结构 * 保存的值，左节点，右节点以及颜色(true为红色，false为黑色) * 默认添加一个红节点 * * @param \u0026lt;E\u0026gt; */ static final class RedBlackTreeNode\u0026lt;E extends Comparable\u0026lt;E\u0026gt;\u0026gt; { E val; RedBlackTreeNode\u0026lt;E\u0026gt; left; RedBlackTreeNode\u0026lt;E\u0026gt; right; boolean color = RED; RedBlackTreeNode(E val) { this.val = val; } } 这里简单的定义了一下红黑树，并且只有节点，并不是map这样的k-v结构。如果定义k-v结构到时比较的时候比较k即可。\n用了泛型，并且要支持比较(继承自Comparable)，不然无法比较大小进行插入。\n然后定义了一个值，左节点和右节点，然后颜色默认为红色。\n再增加一个构造函数即可\n定义公共方法 主要做的就是插入和删除节点，为了方便查看是否符合添加了一个中序遍历的打印方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class RedBlackTree\u0026lt;E extends Comparable\u0026lt;E\u0026gt;\u0026gt; { RedBlackTreeNode\u0026lt;E\u0026gt; head; public void add(E e) { ... } public void remove(E e){ ... } public void printTree(){ ... } } 定义这些公共方法来对外部调用，具体实现可以放到私有方法中。\n变换操作 在红黑树的变换中主要有三个：左旋，右旋，变色。接下来我们就来实现这三个方法。\n旋转操作可以保持红黑树的两个重要性质：有序性和完美平衡性\n左旋 1 2 3 4 5 6 7 8 9 10 private RedBlackTreeNode\u0026lt;E\u0026gt; rotateLeft(RedBlackTreeNode\u0026lt;E\u0026gt; node) { //变换位置 RedBlackTreeNode\u0026lt;E\u0026gt; result = node.right; node.right = result.left; result.left = node; //换色 result.color = node.color; node.color = RED; return result; } 当右节点为红色， 左节点为空或者黑色时，需要进行左旋操作。\n首先定义一个变量存储右节点，然后将右节点的左节点作为父节点（传入参数）的右节点。这时与右节点（定义的变量）断开了关联。\n然后将定义的变量（右节点）的左节点设置为参数节点（左节点之前已经赋值到参数节点的右节点上）。\n还需进行一步换色，将定义变量的颜色设置为父节点的颜色（不影响上一级的操作），然后将父节点设置为红色。\n将定义的变量作为父节点返回。\n右旋 1 2 3 4 5 6 7 8 9 10 private RedBlackTreeNode\u0026lt;E\u0026gt; rotateRight(RedBlackTreeNode\u0026lt;E\u0026gt; node) { //变换位置 RedBlackTreeNode\u0026lt;E\u0026gt; result = node.left; node.left = result.right; result.right = node; //变色 result.color = node.color; node.color = RED; return result; } 当左节点为红色，左节点的左节点也为红色时，需要进行右旋操作。\n这个与左旋基本类似，将左节点作为父节点返回，然后对其他节点也要确保不丢失，还有换色操作不能影响红黑树的特性。\n换色 1 2 3 4 5 private void flipColor(RedBlackTreeNode\u0026lt;E\u0026gt; node) { node.left.color = BLACK; node.right.color = BLACK; node.color = RED; } 当两个子节点都为红色时，需要进行换色\n让两个子节点变为黑色，父节点变为红色\n完成公共方法的实现 刚才我们在上面有提到，需要判断节点的颜色，虽然我们在节点的类型中定义了color属性，但是考虑到其他情况还是写一个方法来完成判断颜色的功能：\nisRed(Node) 1 2 3 4 5 6 private boolean isRed(RedBlackTreeNode\u0026lt;E\u0026gt; node) { if (node == null) { return false; } return node.color; } 当节点为空时返回false即为黑色，不然判断节点的color属性是否为红色。\n还有一个中序打印的方法\nprintTree() 1 2 3 4 5 6 7 8 9 10 11 12 public void printTree() { print(head); } private void print(RedBlackTreeNode\u0026lt;E\u0026gt; node) { if (node == null) { return; } print(node.left); System.out.print(node.val + \u0026#34; \u0026#34;); print(node.right); } 在对外部的方法中调用了内部方法，传入了头结点。\n由于是中序遍历，所以需要先遍历左节点，然后打印自己，然后遍历右节点。这是一个递归操作，所以需要定义终止条件：当节点为空时就返回。\n具体实现 add() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public void add(E val) throws IllegalAccessException { if (val == null) { throw new IllegalAccessException(\u0026#34;不能添加null值\u0026#34;); } head = addVal(val, head); //最终将根节点设置为黑色 head.color = BLACK; } private RedBlackTreeNode\u0026lt;E\u0026gt; addVal(E val, RedBlackTreeNode\u0026lt;E\u0026gt; node) { //达到最终的节点，如果为空则新建一个红色的节点 if (node == null) { return new RedBlackTreeNode\u0026lt;E\u0026gt;(val); } if (val.compareTo(node.val) \u0026lt; 0) { //如果小，则左节点为 新建节点返回的节点(可能会经过调整) node.left = addVal(val, node.left); } else if (val.compareTo(node.val) \u0026gt; 0) { //如果大，则右节点为 新建节点后返回的节点(可能会经过调整) node.right = addVal(val, node.right); } else { //值相等 return node; } //判断平衡等操作 if (isRed(node.right) \u0026amp;\u0026amp; !isRed(node.left)) { //右节点为红色，左节点为空或者黑色时需要进行左旋 node = rotateLeft(node); } if (isRed(node.left) \u0026amp;\u0026amp; isRed(node.left.left)) { //左节点为红色，左节点的左节点也为红色时，需要进行右旋 node = rotateRight(node); } if (isRed(node.left) \u0026amp;\u0026amp; isRed(node.right)) { //当两个子节点都为红色时，需要进行变色 flipColor(node); } return node; } ​\t在公共方法中首先进行了一个参数校验，如果为空则无法比较所以就抛出一个异常。\n然后调用私有方法进行添加节点：传入的参数为要添加的值，树的头结点。\n在私有方法中首先判断了传入的节点是否为空，如果为空则新建一个红色节点返回。\n当不为空时进行大小判断，判断是添加在左子树还是右子树上，然后递归调用当前方法，传入要添加的值和左节点或右节点，如果相等则直接返回当期节点即可（不是map不用重新改变value）。并且添加后可能会进行调整，所以需要重新赋值。\n接下来就是判断是否符合红黑树的规定，然后进行左旋，右旋，变色等操作。这时也会进行重新调整，所以需要重新赋值。\n操作完成后返回到公共方法中。\n在公共方法中将头结点的颜色设置为黑色，保证红黑树的特性。\nremove() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 public void remove(E val) throws IllegalAccessException { if (val == null) { throw new IllegalAccessException(\u0026#34;不允许null值操作\u0026#34;); } if (head == null) { throw new IllegalAccessException(\u0026#34;树为空\u0026#34;); } head = removeVal(val, head); } private RedBlackTreeNode\u0026lt;E\u0026gt; removeVal(E val, RedBlackTreeNode\u0026lt;E\u0026gt; node) throws IllegalAccessException { if (node == null) { throw new IllegalAccessException(\u0026#34;val not exist!\u0026#34;); } if (val.compareTo(node.val) \u0026lt; 0) { node.left = removeVal(val, node.left); } else if (val.compareTo(node.val) \u0026gt; 0) { node.right = removeVal(val, node.right); } else { if (node.right != null) { node = getRightMinNode(node); } else if (node.left != null) { node = getLeftMaxNode(node); } else { node = null; } } //判断平衡等操作 if (node != null) { //判断平衡等操作 if (isRed(node.right) \u0026amp;\u0026amp; !isRed(node.left)) { //右节点为红色，左节点为空或者黑色时需要进行左旋 node = rotateLeft(node); } if (isRed(node.left) \u0026amp;\u0026amp; isRed(node.left.left)) { //左节点为红色，左节点的左节点也为红色时，需要进行右旋 node = rotateRight(node); } if (isRed(node.left) \u0026amp;\u0026amp; isRed(node.right)) { //当两个子节点都为红色时，需要进行变色 flipColor(node); } } return node; } 在公共方法中进行参数校验，如果删除的是null，则抛出异常。\n然后当树为空时也不能进行删除操作。删除操作也可能会进行结构修改，所以也需要进行重新赋值。\n用参数与当前节点比较，如果小则递归传入左节点，如果大则递归传入右节点，当节点为空时表示要删除的节点不再树中，我在这里是抛出了异常，可能有些不太妥当。\n如果与当前节点相同，则删除当前节点。这时就暴露了一个问题，当当前节点有子节点时如果进行删除。其实这也分为几种情况即上面代码中的第20-26行：\n当前节点无子节点，删除当前节点即置为null即可。\n将右子节点的最小节点作为当前节点的替代，然后删除这个最小节点。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 /** * 获取右侧树的最小节点 * * @param node * @return */ private RedBlackTreeNode\u0026lt;E\u0026gt; getRightMinNode(RedBlackTreeNode\u0026lt;E\u0026gt; node) { RedBlackTreeNode\u0026lt;E\u0026gt; parent = node.right; if (parent.left == null) { node.right = parent.right; return parent; } RedBlackTreeNode\u0026lt;E\u0026gt; result = parent.left; //可能有优化的地方 while (result.left != null) { parent = parent.left; result = parent.left; } parent.left = null; return result; } 当右节点为空时，找到左节点的最大值作为当前节点的替代，然后删除这个最大节点。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 private RedBlackTreeNode\u0026lt;E\u0026gt; getLeftMaxNode(RedBlackTreeNode\u0026lt;E\u0026gt; node) { RedBlackTreeNode\u0026lt;E\u0026gt; parent = node.left; if (parent.right == null) { node.right = parent.left; return parent; } RedBlackTreeNode\u0026lt;E\u0026gt; result = parent.right; while (result.right != null) { parent = parent.right; result = parent.right; } parent.right = null; return result; } 进行替换后，需要检查是否符合红黑树的特性是否需要左旋，右旋，变色等操作。\n验证 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public static void main(String[] args) throws IllegalAccessException { RedBlackTree\u0026lt;Integer\u0026gt; redBlackTree = new RedBlackTree\u0026lt;Integer\u0026gt;(); redBlackTree.add(1); redBlackTree.add(3); redBlackTree.add(5); redBlackTree.add(7); redBlackTree.add(9); redBlackTree.add(2); redBlackTree.add(4); redBlackTree.printTree(); System.out.println(); redBlackTree.remove(2); redBlackTree.printTree(); System.out.println(); redBlackTree.remove(11); } 首先我们依次添加[1,3,5,7,9,2,4]。然后将树打印，按照预期结果打印出的结果应该是顺序的1~9。然后我们删除2节点，如果我们将插入过程画出来会发现如果删除2，则会造成1，3两个红节点的连接，这不符合红黑树的规定，所以需要进行调整。然后再次进行打印查看结果是否为有误。\n最后我们删除一个不存在的值，看它是否会报错。\n1 2 3 4 5 6 7 8 9 1 2 3 4 5 7 9 1 3 4 5 7 9 Exception in thread \u0026#34;main\u0026#34; java.lang.IllegalAccessException: val not exist! at RedBlackTree.removeVal(RedBlackTree.java:33) at RedBlackTree.removeVal(RedBlackTree.java:38) at RedBlackTree.removeVal(RedBlackTree.java:38) at RedBlackTree.removeVal(RedBlackTree.java:38) at RedBlackTree.remove(RedBlackTree.java:28) at Test.main(Test.java:21) 通过输出可以看出结果符合我们的要求，然后也可以通过debug的方法查看删除2节点后的节点情况发现与在草稿上手画版一致。\n给出一个刚才插入的图画过程。\n删除2节点后的情况\n","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%89%8B%E5%86%99%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/","summary":"\u003cp\u003e基于《算法》一书的红黑树的插入和删除。看过不同的教材，也有不同的实现方式，但是最终的结果也大致相同，感觉这个比较容易理解，就采用这种的方式来进行简单实现。\u003c/p\u003e\n\u003ch1 id=\"定义树节点的实体类型\"\u003e定义树节点的实体类型\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eRED\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eBLACK\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * 红黑树的节点结构\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * 保存的值，左节点，右节点以及颜色(true为红色，false为黑色)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * 默认添加一个红节点\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t *\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t * @param \u0026lt;E\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e\t */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRedBlackTreeNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eComparable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eRedBlackTreeNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eRedBlackTreeNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecolor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eRED\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eRedBlackTreeNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eval\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e这里简单的定义了一下红黑树，并且只有节点，并不是map这样的k-v结构。如果定义k-v结构到时比较的时候比较k即可。\u003c/p\u003e\n\u003cp\u003e用了泛型，并且要支持比较(继承自Comparable)，不然无法比较大小进行插入。\u003c/p\u003e\n\u003cp\u003e然后定义了一个值，左节点和右节点，然后颜色默认为红色。\u003c/p\u003e\n\u003cp\u003e再增加一个构造函数即可\u003c/p\u003e","title":"手写红黑树的简单实现"},{"content":"今天继续来看一下Java中古老的集合类-Vector\n变量 1 2 3 4 5 6 //容器存储实体的底层数据结构，Vector也是使用数组来进行存储的 protected Object[] elementData; //实体的数量 protected int elementCount; //每次扩容时增加的长度，当为0是扩容原数组长度的两倍 protected int capacityIncrement; 从上面的变量可以得知，Vector也是使用数组来进行底层的数据存储，并且还设置了扩容容量。\n构造函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public Vector() { this(10); } public Vector(int initialCapacity) { this(initialCapacity, 0); } public Vector(int initialCapacity, int capacityIncrement) { super(); if (initialCapacity \u0026lt; 0) throw new IllegalArgumentException(\u0026#34;Illegal Capacity: \u0026#34;+ initialCapacity); this.elementData = new Object[initialCapacity]; this.capacityIncrement = capacityIncrement; } public Vector(Collection\u0026lt;? extends E\u0026gt; c) { elementData = c.toArray(); elementCount = elementData.length; // c.toArray might (incorrectly) not return Object[] (see 6260652) if (elementData.getClass() != Object[].class) elementData = Arrays.copyOf(elementData, elementCount, Object[].class); } 构造函数主要分为两类，一类指定初始容量和扩容容量，一类则是将Collection转换为Vector。\n默认的初始容量为10，扩容容量为0也就是双倍扩容。\nadd() 1 2 3 4 5 6 public synchronized boolean add(E e) { modCount++; ensureCapacityHelper(elementCount + 1); elementData[elementCount++] = e; return true; } 首先在方法上添加了synchronized关键字。保证了多线程情况下的安全性。\n由于继承自AbstactList，所以在添加元素中对modCount数量进行了加一。然后调用函数ensureCapacityHelper()，查看是否需要扩容。完成后在数组中将元素设置进去。最后返回true。\n来看一下它的扩容机制\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 private void ensureCapacityHelper(int minCapacity) { // overflow-conscious code if (minCapacity - elementData.length \u0026gt; 0) grow(minCapacity); } private void grow(int minCapacity) { // overflow-conscious code int oldCapacity = elementData.length; int newCapacity = oldCapacity + ((capacityIncrement \u0026gt; 0) ? capacityIncrement : oldCapacity); if (newCapacity - minCapacity \u0026lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE \u0026gt; 0) newCapacity = hugeCapacity(minCapacity); elementData = Arrays.copyOf(elementData, newCapacity); } private static int hugeCapacity(int minCapacity) { if (minCapacity \u0026lt; 0) // overflow throw new OutOfMemoryError(); return (minCapacity \u0026gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE; } 判断数组现在容量添加一个实体后会不会超过定义数组的长度，如果超过了长度则需要进行扩容。\n在扩容的时候它进行了一个判断，判断我们设置的capacityIncrement这个变量是否大于0，如果大于零则按照设置的数量进行扩容，即新数组长度=旧数组长度+capacityIncrement。否则每次增加为旧数组长度的两倍。\n下面就是对长度的一个校验，如果我们经过上面的扩容后依然不够我们所需的长度则使用我们所需的长度。还有一个判断是进行双倍扩容后是否会超过int正数的最大值，当超过后就会变成负数，这时肯定不能作为数组的长度单位。还有从上面的代码也能看出，Vector容器的最大长度为int的最大值。但是这个时候在不同的jvm下可能会有问题，所以还有一个MAX_ARRAY_SIZE变量，从其他的容器源码中也可以看到这个变量，它保证了在不同的jvm平台下尽量能不出问题。\nget() 1 2 3 4 5 6 7 8 9 10 public synchronized E get(int index) { if (index \u0026gt;= elementCount) throw new ArrayIndexOutOfBoundsException(index); return elementData(index); } E elementData(int index) { return (E) elementData[index]; } 在方法上添加synchronized关键字，保证多线程情况下的安全性。\n然后有一个下标的校验。调用了内部的方法，返回数组中下标的元素并通过泛型进行了由Object向下E的转型\nset() 1 2 3 4 5 6 7 8 public synchronized E set(int index, E element) { if (index \u0026gt;= elementCount) throw new ArrayIndexOutOfBoundsException(index); E oldValue = elementData(index); elementData[index] = element; return oldValue; } 在方法上添加synchronized关键字，保证多线程情况下的安全性。\n然后对入参进行了判断。将原来的值暂存后设置新值，将旧值返回。\ncopyInfo() 1 2 3 public synchronized void copyInto(Object[] anArray) { System.arraycopy(elementData, 0, anArray, 0, elementCount); } 这个方法添加了synchronized关键字，保证了线程的安全性。然后调用了System.arraycopy()方法将Vector中的数据复制到了参数的数组中。\n与ArrayList异同 区别： 线程安全的。\n它在多线程访问的方法上添加了synchronized关键字，保证了多线程下只有一个线程进行访问，但是由于全部添加了方法上会造成效率低下。\n扩容机制不同\nVector有一个变量可以设置每次扩容时数组长度增加多少，未设置的情况下会是双倍原数组长度的扩容。\nArrayList没有设置扩容长度的变量，并且它的扩容机制是原数组长度的1.5倍扩容。\n相同点 都是采用的数组作为底层的存储结构 大部分方法的思路都是一致的 ","permalink":"https://www.liunaijie.top/coding/java/java%E5%8F%A4%E8%80%81%E7%9A%84%E9%9B%86%E5%90%88%E7%B1%BB%E4%B9%8Bvector/","summary":"\u003cp\u003e今天继续来看一下Java中古老的集合类-Vector\u003c/p\u003e\n\u003ch1 id=\"变量\"\u003e变量\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//容器存储实体的底层数据结构，Vector也是使用数组来进行存储的\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprotected\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eelementData\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e//实体的数量\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprotected\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eelementCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e//每次扩容时增加的长度，当为0是扩容原数组长度的两倍\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprotected\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecapacityIncrement\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e从上面的变量可以得知，Vector也是使用数组来进行底层的数据存储，并且还设置了扩容容量。\u003c/p\u003e","title":"Java古老的集合类之Vector"},{"content":"最近在看源码的时候看到一个关键字transient，之前对这个字没有印象，所以就去看了一下它的作用。\ntransient的作用 首先放上来着维基百科的解释：\nJava 提供自动序列化，需要以java.io.Serializable接口的实例来标明对象。实现接口将类别标明为“可序列化”，然后Java在内部处理序列化。在Serializable接口上并没有预先定义序列化的方法，但可序列化类别可任意定义某些特定名称和签署的方法，如果这些方法有定义了，可被调用运行序列化/反序列化部分过程。该语言允许开发人员以另一个Externalizable接口，更彻底地实现并覆盖序列化过程，这个接口包括了保存和恢复对象状态的两种特殊方法。\n在默认情况下有三个主要原因使对象无法被序列化。其一，在序列化状态下并不是所有的对象都能获取到有用的语义。例如，Thread对象绑定到当前Java虚拟机的状态，对Thread对象状态的反序列化环境来说，没有意义。其二，对象的序列化状态构成其类别兼容性缔结（compatibility contract）的某一部分。在维护可序列化类别之间的兼容性时，需要额外的精力和考量。所以，使类别可序列化需要慎重的设计决策而非默认情况。其三，序列化允许访问类别的永久私有成员，包含敏感信息（例如，密码）的类别不应该是可序列化的，也不能外部化。上述三种情形，必须实现Serializable接口来访问Java内部的序列化机制。标准的编码方法将字段简单转换为字节流。\n原生类型以及永久和非静态的对象引用，会被编码到字节流之中。序列化对象引用的每个对象，若其中未标明为transient的字段，也必须被序列化；如果整个过程中，引用到的任何永久对象不能序列化，则这个过程会失败。开发人员可将对象标记为暂时的，或针对对象重新定义的序列化，来影响序列化的处理过程，以截断引用图的某些部分而不序列化。Java并不使用构造函数来序列化对象。\n从上面的最后一段可以了解，如果没有添加transient关键字，则会被进行序列化。也就是说添加了这个关键字后就不会被序列化。\n接下来我们将用一个例子来测试一下\n简单例子 首先定义一个实体类，用来被序列化。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 public class UserDomain implements Serializable { private static final long serialVersionUID = 2278149501042061657L; public UserDomain() { } public UserDomain(int id, String name, int age) { this.id = id; this.name = name; this.age = age; } private int id; /** * 添加了 transient关键字， */ private transient String name; private int age; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } @Override public String toString() { return \u0026#34;UserDomain{\u0026#34; + \u0026#34;id=\u0026#34; + id + \u0026#34;, name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, age=\u0026#34; + age + \u0026#39;}\u0026#39;; } } 定义了3个字段，其中的name字段被添加上了transient关键字。\n然后我们继续编写一个测试类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class TransientTest { public static void main(String[] args) { UserDomain user = new UserDomain(123, \u0026#34;姓名123\u0026#34;, 18); System.out.println(\u0026#34;序列化之前的打印\u0026#34;); System.out.println(user.toString()); //将实体对象序列化到文件中 try (ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream(\u0026#34;user.txt\u0026#34;))) { os.writeObject(user); os.flush(); } catch (Exception e) { e.printStackTrace(); } //读取文件，将序列化后的文件读取然后重新赋值到实体对象上 try (ObjectInputStream is = new ObjectInputStream(new FileInputStream(\u0026#34;user.txt\u0026#34;))) { user = (UserDomain) is.readObject(); } catch (Exception e) { e.printStackTrace(); } System.out.println(\u0026#34;序列化之后的打印\u0026#34;); System.out.println(user.toString()); } } 我们通过构造函数创建了一个实体变量。然后将它打印出来。\n接下来我们将它序列化之后写到文件中。\n再将它从文件中读取出来，然后转换为实体类型。\n将它再次打印出来，通过控制台打印查看区别。\n1 2 3 4 序列化之前的打印 UserDomain{id=123, name=\u0026#39;姓名123\u0026#39;, age=18} 序列化之后的打印 UserDomain{id=123, name=\u0026#39;null\u0026#39;, age=18} 可以看出，在序列化之前所有的字段都被打印出来，然后经过一次序列化后我们添加transient的字段就没有信息了。所以添加了这个关键字后就可以取消序列化了。\n使用小结 一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法访问、 transien关键字只能修饰变量，而不能修饰方法和类。 一个静态变量不管是否被transient修饰，均不能被序列化。因为静态变量会被加载到jvm中，并且仅加载一次。所以它不管有没有transient关键字都不会被序列化。 并不是添加了transient之后都不会被序列化，只是在Serializable接口下会这样，如果实现的是Externalizable它还是会被序列化。 参考 https://zh.wikipedia.org/wiki/%E5%BA%8F%E5%88%97%E5%8C%96#Java https://www.cnblogs.com/lanxuezaipiao/p/3369962.html ","permalink":"https://www.liunaijie.top/coding/java/java%E5%85%B3%E9%94%AE%E5%AD%97-transient/","summary":"\u003cp\u003e最近在看源码的时候看到一个关键字\u003ccode\u003etransient\u003c/code\u003e，之前对这个字没有印象，所以就去看了一下它的作用。\u003c/p\u003e\n\u003ch1 id=\"transient的作用\"\u003etransient的作用\u003c/h1\u003e\n\u003cp\u003e首先放上来着维基百科的解释：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eJava 提供自动序列化，需要以\u003ccode\u003ejava.io.Serializable\u003c/code\u003e接口的实例来标明对象。实现接口将类别标明为“可序列化”，然后Java在内部处理序列化。在\u003ccode\u003eSerializable\u003c/code\u003e接口上并没有预先定义序列化的方法，但可序列化类别可任意定义某些特定名称和签署的方法，如果这些方法有定义了，可被调用运行序列化/反序列化部分过程。该语言允许开发人员以另一个\u003ccode\u003eExternalizable\u003c/code\u003e接口，更彻底地实现并覆盖序列化过程，这个接口包括了保存和恢复对象状态的两种特殊方法。\u003c/p\u003e\n\u003cp\u003e在默认情况下有三个主要原因使对象无法被序列化。其一，在序列化状态下并不是所有的对象都能获取到有用的语义。例如，\u003ccode\u003eThread\u003c/code\u003e对象绑定到当前Java虚拟机的状态，对\u003ccode\u003eThread\u003c/code\u003e对象状态的反序列化环境来说，没有意义。其二，对象的序列化状态构成其类别兼容性缔结（compatibility contract）的某一部分。在维护可序列化类别之间的兼容性时，需要额外的精力和考量。所以，使类别可序列化需要慎重的设计决策而非默认情况。其三，序列化允许访问类别的永久私有成员，包含敏感信息（例如，密码）的类别不应该是可序列化的，也不能外部化。上述三种情形，必须实现\u003ccode\u003eSerializable\u003c/code\u003e接口来访问Java内部的序列化机制。标准的编码方法将字段简单转换为字节流。\u003c/p\u003e\n\u003cp\u003e原生类型以及永久和非静态的对象引用，会被编码到字节流之中。序列化对象引用的每个对象，若其中未标明为\u003ccode\u003etransient\u003c/code\u003e的字段，也必须被序列化；如果整个过程中，引用到的任何永久对象不能序列化，则这个过程会失败。开发人员可将对象标记为暂时的，或针对对象重新定义的序列化，来影响序列化的处理过程，以截断引用图的某些部分而不序列化。Java并不使用构造函数来序列化对象。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e从上面的最后一段可以了解，如果没有添加\u003ccode\u003etransient\u003c/code\u003e关键字，则会被进行序列化。也就是说添加了这个关键字后就不会被序列化。\u003c/p\u003e\n\u003cp\u003e接下来我们将用一个例子来测试一下\u003c/p\u003e","title":"Java关键字-transient"},{"content":"题目描述 给定一个链表，判断链表中是否有环。\n为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。\n示例 1：\n输入：head = \\[3,2,0,-4], pos = 1 输出：true 解释：链表中有一个环，其尾部连接到第二个节点。 示例 2：\n输入：head = \\[1,2], pos = 0 输出：true 解释：链表中有一个环，其尾部连接到第一个节点。 示例 3：\n输入：head = \\[1], pos = -1 输出：false 解释：链表中没有环。 进阶：\n你能用 O(1)（即，常量）内存解决此问题吗？\n解题思路 如果一个链表中出现了环，我们在进行遍历时就会有重复的元素出现，那么可以使用哈希表来实现。\n哈希表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public static boolean hasCycle1(ListNode head) { if (head == null) { //入参检查，如果链表为空则不可能存在环 return false; } Set set = new HashSet(); while (head != null) { //如果当前节点在 set 中存储过，则表示有环 if (set.contains(head)) { return true; } //不然将当前节点添加到 set 中，并将当前节点改为下一个节点 set.add(head); head = head.next; } return false; } 使用哈希表的空间复杂度为O(n)\n双指针 使用双指针可以实现O(1)的空间复杂度，因为如果链表有环，我们使用两个速度不同的指针，那么它两个最终都会相遇，如果没有环，那快指针会先到达终点。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public static boolean hasCycle2(ListNode head) { if (head == null || head.next == null) { return false; } ListNode slow = head; ListNode fast = head.next; while (slow != fast) { if (fast == null || fast.next == null) { return false; } slow = slow.next; fast = fast.next.next; } return true; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-leetcode141/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个链表，判断链表中是否有环。\u003c/p\u003e\n\u003cp\u003e为了表示给定链表中的环，我们使用整数 \u003ccode\u003epos\u003c/code\u003e 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 \u003ccode\u003epos\u003c/code\u003e 是 \u003ccode\u003e-1\u003c/code\u003e，则在该链表中没有环。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入：head = \\[3,2,0,-4], pos = 1\n输出：true\n解释：链表中有一个环，其尾部连接到第二个节点。\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入：head = \\[1,2], pos = 0\n输出：true\n解释：链表中有一个环，其尾部连接到第一个节点。\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入：head = \\[1], pos = -1\n输出：false\n解释：链表中没有环。\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e进阶：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e你能用 \u003cem\u003eO(1)\u003c/em\u003e（即，常量）内存解决此问题吗？\u003c/p\u003e\u003c/blockquote\u003e","title":"环形链表—LeetCode141"},{"content":"Hashtable虽然现在不经常被用到，但是它作为Java最早的集合类，今天来看一下它的源码。\n首先说明一个问题，在Java中大部分都是驼峰式写法，但是Hasbtable并没有采用这种写法。\n继承与实现关系 1 2 3 public class Hashtable\u0026lt;K,V\u0026gt; extends Dictionary\u0026lt;K,V\u0026gt; implements Map\u0026lt;K,V\u0026gt;, Cloneable, java.io.Serializable {} 可以看出它继承的是Dictionary与HashMap并不是同一个父类。但是它也实现了Map，Cloneable，Serializable接口。说明它可以被克隆，可以执行序列化。\n变量 1 2 3 4 5 6 7 8 9 private transient Entry\u0026lt;?,?\u0026gt;[] table; private transient int count; private int threshold; private float loadFactor; private transient int modCount = 0; 来一个一个的解释每一个变量的意义：\ntable 与HashMap一样，利用数组作为底层的存储容器，并且添加了关键字transient。这个关键字的意思是在进行序列化的时候不会被序列化。这个关键字具体可以看一下这篇文章。\ncount 表示容器中存储的数量\nthreshold 扩容阈值，当容器中的数量到达这个值后会进行扩容机制。这个值默认情况下为 （capacity* loadFactor）\nloadFactor 扩容系数，默认为0.75f。\nmodCount 修改次数，当增加或删除时，这个值会进行加一。表示这个容器结构修改的次数。这个变量在迭代，序列化等操作、多线程的操作下都尽量保证了安全性。\n构造函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public Hashtable() { this(11, 0.75f); } public Hashtable(int initialCapacity) { this(initialCapacity, 0.75f); } public Hashtable(int initialCapacity, float loadFactor) { if (initialCapacity \u0026lt; 0) throw new IllegalArgumentException(\u0026#34;Illegal Capacity: \u0026#34;+ initialCapacity); if (loadFactor \u0026lt;= 0 || Float.isNaN(loadFactor)) throw new IllegalArgumentException(\u0026#34;Illegal Load: \u0026#34;+loadFactor); if (initialCapacity==0) initialCapacity = 1; this.loadFactor = loadFactor; table = new Entry\u0026lt;?,?\u0026gt;[initialCapacity]; threshold = (int)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + 1); } public Hashtable(Map\u0026lt;? extends K, ? extends V\u0026gt; t) { this(Math.max(2*t.size(), 11), 0.75f); putAll(t); } 从上面的构造函数可以看出几个点：\nHashtable的默认容量为 11 Hashtable的默认扩容系数为 0.75。 在这几个构造函数中都调用了全参数的构造函数public Hashtable(int initialCapacity, float loadFactor)。我们就来具体看一下这个构造函数的执行过程。\n首先做了一个入参检查，这一步很值得我们去学习，对方法中的参数先进行检查校验。\n在这里调用了一个函数Float.isNan(float f)，这个方法会校验我们传入的值是不是一个正确的浮点数。因为在float与double中有一个值为NaN，public static final float NaN = 0.0f / 0.0f;。\n后面将传入的扩容系数进行赋值，然后构造了一个传入容量大小的数组。再就是扩容阈值的赋值。\n这里使用了一个变量MAX_ARRAY_SIZE。这个变量的值是private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8。这个值是int的最大值然后减去8。为什么要减去8，在字段注释上也给出了说明：在不同的虚拟机下会有不同的情况，有的会在数组中添加头信息。这是就会占用几个长度。如果使用int最大值就会产生错误。所以使用了int最大值-8。\nput()方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public synchronized V put(K key, V value) { // Make sure the value is not null if (value == null) { throw new NullPointerException(); } // Makes sure the key is not already in the hashtable. Entry\u0026lt;?,?\u0026gt; tab[] = table; int hash = key.hashCode(); int index = (hash \u0026amp; 0x7FFFFFFF) % tab.length; @SuppressWarnings(\u0026#34;unchecked\u0026#34;) Entry\u0026lt;K,V\u0026gt; entry = (Entry\u0026lt;K,V\u0026gt;)tab[index]; for(; entry != null ; entry = entry.next) { if ((entry.hash == hash) \u0026amp;\u0026amp; entry.key.equals(key)) { V old = entry.value; entry.value = value; return old; } } addEntry(hash, key, value, index); return null; } 首先我们可以看出，它在方法上添加了synchronized关键字，那么这个方法在同一时间只能有一个线程访问。下面其他方法也是采用的同种方法，保证的线程安全性。\n从上面的代码中很容易看出进行了value不能为空的校验。其实key也不能为空。key不能为空的原因是在计算hash值时，在这里调用了key.hashCode()这个方法，但是如果我们的key是null，在调用这个方法时会报一个空指针错误。所以Hashtable存储的key，value都不能为null。\n再对比一个HashMap，它计算hash值时是这样的：\n1 2 3 4 static final int hash(Object key) { int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h \u0026gt;\u0026gt;\u0026gt; 16); } ​\t它会先进行key为null的判断，如果为null，则返回一个0的哈希值。它也没有对value进行校验，所以HashMap能存储null作为key，value。而Hashtable在存储null时都会报错。\n然后它又进行了key相同的判断，先根据key计算hash，然后再计算出这个hash在数组中的下标位置。然后循环判断是否是相同的key，如果key相同则进行替换value、退出方法。所以Hashtable采用的是数组+链表的实现方式。 当没有找到相同的key时会调用addEntry()方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 private void addEntry(int hash, K key, V value, int index) { modCount++; Entry\u0026lt;?,?\u0026gt; tab[] = table; if (count \u0026gt;= threshold) { // Rehash the table if the threshold is exceeded rehash(); tab = table; hash = key.hashCode(); index = (hash \u0026amp; 0x7FFFFFFF) % tab.length; } // Creates the new entry. @SuppressWarnings(\u0026#34;unchecked\u0026#34;) Entry\u0026lt;K,V\u0026gt; e = (Entry\u0026lt;K,V\u0026gt;) tab[index]; tab[index] = new Entry\u0026lt;\u0026gt;(hash, key, value, e); count++; } 因为填了一个新值，所以数据结构长度增加了1，需要对modCount继续加1。\n然后判断是否需要扩容，当容器内实体的数量大于扩容阈值时就要进行扩容rehash()。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 protected void rehash() { int oldCapacity = table.length; Entry\u0026lt;?,?\u0026gt;[] oldMap = table; // overflow-conscious code int newCapacity = (oldCapacity \u0026lt;\u0026lt; 1) + 1; if (newCapacity - MAX_ARRAY_SIZE \u0026gt; 0) { if (oldCapacity == MAX_ARRAY_SIZE) // Keep running with MAX_ARRAY_SIZE buckets return; newCapacity = MAX_ARRAY_SIZE; } Entry\u0026lt;?,?\u0026gt;[] newMap = new Entry\u0026lt;?,?\u0026gt;[newCapacity]; modCount++; threshold = (int)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + 1); table = newMap; for (int i = oldCapacity ; i-- \u0026gt; 0 ;) { for (Entry\u0026lt;K,V\u0026gt; old = (Entry\u0026lt;K,V\u0026gt;)oldMap[i] ; old != null ; ) { Entry\u0026lt;K,V\u0026gt; e = old; old = old.next; int index = (e.hash \u0026amp; 0x7FFFFFFF) % newCapacity; e.next = (Entry\u0026lt;K,V\u0026gt;)newMap[index]; newMap[index] = e; } } } hashtable的扩容机制是将新数组的长度变为 原来数组长度的两倍+1。但是也还不会超过之前定义的MAX_ARRAY_SIZE也就是int的最大值-8。然后又将modCount值加了1。将扩容阈值进行修改，\n然后将原来数组中的值复制到新数组中。\n当扩容完成后由于我们这个容器的数组发生了变化，所以又进行了重新取值tab=table。并且重新计算了在数组中的下标。\n将新值添加到数组中的方法也与hashmap有不同。在addEntry()方法中，先获取到原来下标中的元素e，然后新建了一个值，并将这个新值的next元素指向刚刚得到的元素e，然后将这个新值放到数组下标位置。也就是新的元素是放到了链表中的头部，而在hashmap的实现中它是遍历链表然后将元素放到链表的尾部，遍历的原因应该是需要判断是否需要转换红黑树。不然还是hashtable的实现方法更加方便一些。\nget() 1 2 3 4 5 6 7 8 9 10 11 public synchronized V get(Object key) { Entry\u0026lt;?,?\u0026gt; tab[] = table; int hash = key.hashCode(); int index = (hash \u0026amp; 0x7FFFFFFF) % tab.length; for (Entry\u0026lt;?,?\u0026gt; e = tab[index] ; e != null ; e = e.next) { if ((e.hash == hash) \u0026amp;\u0026amp; e.key.equals(key)) { return (V)e.value; } } return null; } 首先在方法上添加了synchronized关键字，保证了同一时间只能有一个线程访问。\n然后根据key计算出在数组中的下标，对链表进行循环，判断如果哈希值和key都一样则返回。\ncontains containsKey() 1 2 3 4 5 6 7 8 9 10 11 public synchronized boolean containsKey(Object key) { Entry\u0026lt;?,?\u0026gt; tab[] = table; int hash = key.hashCode(); int index = (hash \u0026amp; 0x7FFFFFFF) % tab.length; for (Entry\u0026lt;?,?\u0026gt; e = tab[index] ; e != null ; e = e.next) { if ((e.hash == hash) \u0026amp;\u0026amp; e.key.equals(key)) { return true; } } return false; } 判断容器内是否包含key，首先根据key计算出这个哈希值，然后计算出在数组中的下标。对这个下标内的链表进行循环，如果key相同、哈希值相同则返回true，否则返回false。\ncontainsValue() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public boolean containsValue(Object value) { return contains(value); } public synchronized boolean contains(Object value) { if (value == null) { throw new NullPointerException(); } Entry\u0026lt;?,?\u0026gt; tab[] = table; for (int i = tab.length ; i-- \u0026gt; 0 ;) { for (Entry\u0026lt;?,?\u0026gt; e = tab[i] ; e != null ; e = e.next) { if (e.value.equals(value)) { return true; } } } return false; } 判断容器内是否包含value，对数组进行循环，然后对数组中的链表进行循环，只有值相同就返回true。当全部遍历完成后如果还未找到则返回false。\nremove() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public synchronized V remove(Object key) { Entry\u0026lt;?,?\u0026gt; tab[] = table; int hash = key.hashCode(); int index = (hash \u0026amp; 0x7FFFFFFF) % tab.length; @SuppressWarnings(\u0026#34;unchecked\u0026#34;) Entry\u0026lt;K,V\u0026gt; e = (Entry\u0026lt;K,V\u0026gt;)tab[index]; for(Entry\u0026lt;K,V\u0026gt; prev = null ; e != null ; prev = e, e = e.next) { if ((e.hash == hash) \u0026amp;\u0026amp; e.key.equals(key)) { modCount++; if (prev != null) { prev.next = e.next; } else { tab[index] = e.next; } count--; V oldValue = e.value; e.value = null; return oldValue; } } return null; } 根据key删除，先根据key计算出数组下标，然后遍历判断是否相同。如果相同则进行删除，并修改链表的结构。\n进行删除的操作后需要修改modCount值，并且数量变少也需要修改count值。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 @Override public synchronized boolean remove(Object key, Object value) { Objects.requireNonNull(value); Entry\u0026lt;?,?\u0026gt; tab[] = table; int hash = key.hashCode(); int index = (hash \u0026amp; 0x7FFFFFFF) % tab.length; @SuppressWarnings(\u0026#34;unchecked\u0026#34;) Entry\u0026lt;K,V\u0026gt; e = (Entry\u0026lt;K,V\u0026gt;)tab[index]; for (Entry\u0026lt;K,V\u0026gt; prev = null; e != null; prev = e, e = e.next) { if ((e.hash == hash) \u0026amp;\u0026amp; e.key.equals(key) \u0026amp;\u0026amp; e.value.equals(value)) { modCount++; if (prev != null) { prev.next = e.next; } else { tab[index] = e.next; } count--; e.value = null; return true; } } return false; } 还有一个方法，接受key，value两个参数，当这两个条件同时满足后会进行删除，但是这个是返回布尔值，当成功删除后会返回true，当未找到会返回false\nputAll() 1 2 3 4 public synchronized void putAll(Map\u0026lt;? extends K, ? extends V\u0026gt; t) { for (Map.Entry\u0026lt;? extends K, ? extends V\u0026gt; e : t.entrySet()) put(e.getKey(), e.getValue()); } 构造函数中也调用了这个方法，对参数中的map进行循环调用，然后执行put()操作。\nclear() 1 2 3 4 5 6 7 public synchronized void clear() { Entry\u0026lt;?,?\u0026gt; tab[] = table; modCount++; for (int index = tab.length; --index \u0026gt;= 0; ) tab[index] = null; count = 0; } 清空操作，对map数组进行循环，将每一项设置为null。\n总结 Hashtable作为一个线程安全的集合类，是利用了synchronized关键字，在进入方法时就加了悲观锁，所以在效率方面不是很好。\nHashtable存储的key和value都不能是null。\nHashtable采用的是数组加链表的存储方式\n","permalink":"https://www.liunaijie.top/coding/java/java%E5%8F%A4%E8%80%81%E7%9A%84%E9%9B%86%E5%90%88%E7%B1%BB%E4%B9%8Bhashtable/","summary":"\u003cp\u003eHashtable虽然现在不经常被用到，但是它作为Java最早的集合类，今天来看一下它的源码。\u003c/p\u003e\n\u003cp\u003e首先说明一个问题，在Java中大部分都是驼峰式写法，但是Hasbtable并没有采用这种写法。\u003c/p\u003e\n\u003ch1 id=\"继承与实现关系\"\u003e继承与实现关系\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eHashtable\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \t\u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDictionary\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003eimplements\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMap\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eCloneable\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ejava\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eSerializable\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e可以看出它继承的是\u003ccode\u003eDictionary\u003c/code\u003e与\u003ccode\u003eHashMap\u003c/code\u003e并不是同一个父类。但是它也实现了\u003ccode\u003eMap\u003c/code\u003e，\u003ccode\u003eCloneable\u003c/code\u003e，\u003ccode\u003eSerializable\u003c/code\u003e接口。说明它可以被克隆，可以执行序列化。\u003c/p\u003e\n\u003ch1 id=\"变量\"\u003e变量\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003etransient\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u0026gt;[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etable\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003etransient\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ethreshold\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003efloat\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eloadFactor\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003etransient\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emodCount\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e来一个一个的解释每一个变量的意义：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etable\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e与HashMap一样，利用数组作为底层的存储容器，并且添加了关键字\u003ccode\u003etransient\u003c/code\u003e。这个关键字的意思是在进行序列化的时候不会被序列化。这个关键字具体可以看一下\u003ca href=\"https://www.liunaijie.top/2019/12/22/java/Java%E5%85%B3%E9%94%AE%E5%AD%97-transient\"\u003e这篇文章\u003c/a\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ecount\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e表示容器中存储的数量\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ethreshold\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e扩容阈值，当容器中的数量到达这个值后会进行扩容机制。这个值默认情况下为 （capacity* loadFactor）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eloadFactor\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e扩容系数，默认为0.75f。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emodCount\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e修改次数，当增加或删除时，这个值会进行加一。表示这个容器结构修改的次数。这个变量在迭代，序列化等操作、多线程的操作下都尽量保证了安全性。\u003c/p\u003e","title":"Java古老的集合类之Hashtable"},{"content":"简单项目 首先我们建立一个项目，它作为我们的全部项目的容器，并负责公共依赖的版本管理等。\n项目结构是这样的：\n然后我们在pom.xml中导入我们所需要的依赖，我们全部使用 springboot 来启动项目，并且需要修改packaging的方式为pom。最终的文件如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;learn.spring.cloud.eureka.demo\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;learn-spring-cloud-eureka\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;packaging\u0026gt;pom\u0026lt;/packaging\u0026gt; \u0026lt;name\u0026gt;simple-parent\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;学习eureka\u0026lt;/description\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.3.RELEASE\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt; \u0026lt;project.reporting.outputEncoding\u0026gt;UTF-8\u0026lt;/project.reporting.outputEncoding\u0026gt; \u0026lt;java.version\u0026gt;1.8\u0026lt;/java.version\u0026gt; \u0026lt;spring-cloud.version\u0026gt;Finchley.RELEASE\u0026lt;/spring-cloud.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-cloud.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; 单机版 首先我们需要建立一个服务注册中心eureka-server，pom 文件如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;learn.spring.cloud.eureka.demo\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;eureka-server\u0026lt;/artifactId\u0026gt; \u0026lt;packaging\u0026gt;jar\u0026lt;/packaging\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;eureka server\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;服务注册中心 eureka 第一个服务实例\u0026lt;/description\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;artifactId\u0026gt;learn-spring-cloud-eureka\u0026lt;/artifactId\u0026gt; \u0026lt;groupId\u0026gt;learn.spring.cloud.eureka.demo\u0026lt;/groupId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-netflix-eureka-server\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; 然后仅需在 springboot 的启动项上添加@EnableEurekaServer注解即可。其实只要我们在 pom 文件中引入了eureka-server的 jar 包，springboot 就会自动将它作为eureka server，但是为了更加友好，还是在启动项上添加注解来启动。\n然后我们要修改配置文件：\n1 2 3 4 5 6 7 8 9 10 11 12 spring: application: name: eurka-server # 定义项目名称，方便从控制面板查看项目注册情况 eureka: client: # registerWithEureka 此实例是否应将其信息注册到eureka服务器以供其他服务发现 # 我们可以先将下面两项设置为 true 可以更加直观的从网页上看到服务端注册的信息。 registerWithEureka: false fetchRegistry: false serviceUrl: defaultZone: http://127.0.0.1:8761/eureka/ #eureka 默认的端口为8761 然后我们就可以启动项目，并且打开http://localhost:8761来查看项目的配置情况\n可以看到，我们建立的 eureka-server 已经注册到我们的注册中心(只是为了演示，单机情况下注册中心不会再注册到注册中心上)。\n然后我们再建立生产者eureka-provider\n首先创建我们的 pom文件，我们需要将这个服务注册到 eureka 的服务端，所以我们这次需要导入eureka client包，并且我们需要对外提供 rest 服务，所以我们又导入了web相关。最终如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;groupId\u0026gt;learn.spring.cloud.eureka.demo\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;eureka-provider\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;packaging\u0026gt;jar\u0026lt;/packaging\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;artifactId\u0026gt;learn-spring-cloud-eureka\u0026lt;/artifactId\u0026gt; \u0026lt;groupId\u0026gt;learn.spring.cloud.eureka.demo\u0026lt;/groupId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;name\u0026gt;eureka provider\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;一个服务提供者，注册到 eureka 中供消费者调用\u0026lt;/description\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-netflix-eureka-client\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; 接下来是我们的配置文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 spring: application: name: eureka-provider # 创建这个服务的名称 server: # 这个业务实例的端口 port: 8080 eureka: instance: prefer-ip-address: true # 用 ip 而不是 host 的方式 client: serviceUrl: # 注册中心的地址 defaultZone: http://localhost:8761/eureka/ 然后我们要在这个项目的启动类上添加@EuableEurekaClient注册，从而将这个服务注册到服务中心。并且我们这个服务是需要对外提供 rest 的，所以我有定义了一个方法来供外部调用，最终启动类如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @SpringBootApplication @EnableEurekaClient @RestController public class EurekaProviderApplication { public static void main(String[] args) { SpringApplication.run(EurekaProviderApplication.class, args); } @Value(\u0026#34;${server.port}\u0026#34;) String port; @GetMapping(value = \u0026#34;/provider\u0026#34;) public String sayHello(@RequestParam(value = \u0026#34;name\u0026#34;, defaultValue = \u0026#34;consumer\u0026#34;) String name) { return \u0026#34;hello,\u0026#34; + name + \u0026#34;。 i am the provider from port :\u0026#34; + port; } } 然后我们启动项目，启动项目后我们去 eureka-server 的网页上查看注册信息：\n我们可以看到我们刚刚启动的这个生产者项目已经注册到注册中心了，并且他的端口是我们设置的8080。\n然后我们验证一下我们对外提供的接口\n全部成功后我们就需要进行下一步，创建消费者\n创建消费者\n消费者与生产者的 pom 文件是一样的，这样就不再贴上了。\n然后是我们的配置文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 server: port: 8083 # 服务启动的端口 spring: application: name: eureka-consumer # 服务名称 eureka: instance: prefer-ip-address: true client: serviceUrl: # eureka server 的地址 defaultZone: http://localhost:8762/eureka/ 最后就是我们的启动类：\n​\t消费者是要去调用生产者的具体实现。也就是我们要访问消费者的接口，但实际返回信息是从生产者那里过了一遍的。我们在这里使用 springboot 提供的RestTemplate作为http 请求的工具类。我们需要从注册中心里拿到我们所需要服务实例的访问地址和端口，然后通过RestTemplate去请求。具体代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 @SpringBootApplication @EnableDiscoveryClient @RestController public class EurekaConsumerApplication { @Autowired private EurekaClient eurekaClient; @Autowired private RestTemplate restTemplate; public static void main(String[] args) { SpringApplication.run(EurekaConsumerApplication.class, args); } @Bean public RestTemplate restTemplate(RestTemplateBuilder builder) { return builder.build(); } @GetMapping(value = \u0026#34;/consumer\u0026#34;) public Object getFromProvider() { //通过 eureka 查找服务名为eureka-provider的实例返回一个访问地址，会先经过负载均衡（轮询）然后再返回 InstanceInfo instance = eurekaClient.getNextServerFromEureka(\u0026#34;eureka-provider\u0026#34;, false); String homePageUrl = instance.getHomePageUrl(); //然后调用接口，获取数据 return restTemplate.getForObject(homePageUrl + \u0026#34;provider?name=world\u0026#34;, String.class); } } ​\t我们首先用eurekaClient去获取我们所需服务的可访问地址，然后拿到访问链接，最终通过拼接的方式拼接出我们需要访问的链接。在这里我直接将生产者返回的信息返回出去。\n​\t我们启动项目后，首先去eureka-server 的页面上查看我们是否将消费者注册到注册中心上了：\n然后我们就需要去验证，我们是否可以通过访问消费者来得到生产者返回的信息：从上面的代码中可以看到，我在消费者去请求时传递了参数为world,如果请求成功，它的返回信息将为hello world。\n出现这样的返回信息就表示我们成功搭建了一个单机版本的eureka 并完成了消费者与生产者直接的调用。\n集群版 在实际生产中，我们的实例可以部署多份，这时需要将eureka-server 也部署多份，并且实现注册节点的互通。我们根据上面的项目来进行改进\n首先是 eureka-server\n我定义了多个配置文件，在启动时分别启动不同的配置文件即可。\n在 8762 的配置文件中是这样的：\n1 2 3 4 5 6 7 8 9 # 集群eureka配置 server: port: 8762 eureka: instance: hostname: localhost client: serviceUrl: defaultZone: http://localhost:8763/eureka/,http://localhost:8764/eureka/ # 集群配置，将注册到本机的节点也发送到其他节点 在不同的配置文件中修改端口，然后修改注册地址，将本身的信息注册到其他节点上，实现信息互通\n在 idea 中可以这样来启动不同配置文件的实例项目\n接下来是 eureka-provider\n我也将这个服务通过配置文件的方式在本机启动多份。\n启动方式同上面的一样。\n启动\n消费者我就没有启动多个实例了，我们将所以的项目实例进行启动\n然后打开网页查看注册信息\n由于我在生产者和消费者写的地址8762，所以启动完后在 8762 会有信息，而其他的两个节点需要等待一段时间后由 8762 节点发送过去。\n然后我们访问消费者节点，看一下他是不是会访问多个生产者节点。\n可以看出，返回信息不同，说明是访问了不同的服务实例，并且多请求几次后会发现这个是轮询负载均衡策略。\n我将完整的代码放到了 github，地址为https://github.com/liunaijie/learn-demo/tree/master/SpringCloud/Eureka/learn-spring-cloud-eureka\n","permalink":"https://www.liunaijie.top/coding/micro_service/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8Bspringcloud-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83eureka/","summary":"\u003ch1 id=\"简单项目\"\u003e简单项目\u003c/h1\u003e\n\u003cp\u003e首先我们建立一个项目，它作为我们的全部项目的容器，并负责公共依赖的版本管理等。\u003c/p\u003e\n\u003cp\u003e项目结构是这样的：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/20191218114357.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e然后我们在\u003ccode\u003epom.xml\u003c/code\u003e中导入我们所需要的依赖，我们全部使用 springboot 来启动项目，并且需要修改\u003ccode\u003epackaging\u003c/code\u003e的方式为\u003ccode\u003epom\u003c/code\u003e。最终的文件如下所示：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;project\u003c/span\u003e \u003cspan class=\"na\"\u003exmlns=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         \u003cspan class=\"na\"\u003exmlns:xsi=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         \u003cspan class=\"na\"\u003exsi:schemaLocation=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;modelVersion\u0026gt;\u003c/span\u003e4.0.0\u003cspan class=\"nt\"\u003e\u0026lt;/modelVersion\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003elearn.spring.cloud.eureka.demo\u003cspan class=\"nt\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003elearn-spring-cloud-eureka\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1.0-SNAPSHOT\u003cspan class=\"nt\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;packaging\u0026gt;\u003c/span\u003epom\u003cspan class=\"nt\"\u003e\u0026lt;/packaging\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;name\u0026gt;\u003c/span\u003esimple-parent\u003cspan class=\"nt\"\u003e\u0026lt;/name\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;description\u0026gt;\u003c/span\u003e学习eureka\u003cspan class=\"nt\"\u003e\u0026lt;/description\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;parent\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.springframework.boot\u003cspan class=\"nt\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003espring-boot-starter-parent\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e2.0.3.RELEASE\u003cspan class=\"nt\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026lt;relativePath/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;/parent\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;properties\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026lt;project.build.sourceEncoding\u0026gt;\u003c/span\u003eUTF-8\u003cspan class=\"nt\"\u003e\u0026lt;/project.build.sourceEncoding\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026lt;project.reporting.outputEncoding\u0026gt;\u003c/span\u003eUTF-8\u003cspan class=\"nt\"\u003e\u0026lt;/project.reporting.outputEncoding\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026lt;java.version\u0026gt;\u003c/span\u003e1.8\u003cspan class=\"nt\"\u003e\u0026lt;/java.version\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026lt;spring-cloud.version\u0026gt;\u003c/span\u003eFinchley.RELEASE\u003cspan class=\"nt\"\u003e\u0026lt;/spring-cloud.version\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;/properties\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026lt;dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nt\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.springframework.boot\u003cspan class=\"nt\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003espring-boot-starter-test\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nt\"\u003e\u0026lt;scope\u0026gt;\u003c/span\u003etest\u003cspan class=\"nt\"\u003e\u0026lt;/scope\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026lt;/dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;dependencyManagement\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026lt;dependencies\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nt\"\u003e\u0026lt;dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"nt\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.springframework.cloud\u003cspan class=\"nt\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003espring-cloud-dependencies\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"nt\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e${spring-cloud.version}\u003cspan class=\"nt\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"nt\"\u003e\u0026lt;type\u0026gt;\u003c/span\u003epom\u003cspan class=\"nt\"\u003e\u0026lt;/type\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"nt\"\u003e\u0026lt;scope\u0026gt;\u003c/span\u003eimport\u003cspan class=\"nt\"\u003e\u0026lt;/scope\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nt\"\u003e\u0026lt;/dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026lt;/dependencies\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;/dependencyManagement\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;build\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026lt;plugins\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nt\"\u003e\u0026lt;plugin\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"nt\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.springframework.boot\u003cspan class=\"nt\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\t\u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003espring-boot-maven-plugin\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\t\u003cspan class=\"nt\"\u003e\u0026lt;/plugin\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nt\"\u003e\u0026lt;/plugins\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nt\"\u003e\u0026lt;/build\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;/project\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"微服务之SpringCloud-注册中心eureka"},{"content":"题目来源 今天做了个题：\n将一个链表里的数据组装树形结构，链表里的数据已经满足树形结构要求\n这道题描述的很简单，但是有很多种情况。他只说了链表数据满足树形结构要求，并没有说明数据到底是什么样的，也就是题目参数具有多样性，这样其实我们给出一种解决方案就可以。而且也只要求将链表转换为树，并没有说是什么树。所以这道题说难也难，说简单也简单。\n解题思路 最近也将平衡二叉树的原理看了一下，正好借着这道题将代码手写一下。\n我写了一个平衡二叉树的插入方法。我们不管链表里面的数据是如何排序的，我们只要调用树的插入方法即可。在插入方法内部实现树的平衡。\n所以我们这道题也就转换成了手写平衡二叉树的插入过程。\n代码实现 平衡二叉树 首先我们需要定义平衡二叉树的数据结构，在这里我们就用 int 类型来简单实现。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 /** * 二叉平衡树的数据类型 */ class AVLTreeNode { int val; int height = -1; AVLTreeNode left; AVLTreeNode right; public AVLTreeNode() { } public AVLTreeNode(int val) { this.val = val; } } 接下来我们定义这个平衡二叉树中所需用到的方法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class AVLTree { //定义一个变量，存储头部节点 AVLTreeNode head; //我们在进行平衡判断时，需要知道每个节点的高度，从而进行计算 private static int Height(AVLTreeNode avlTreeNode) { if (avlTreeNode == null) { return -1; } else { return avlTreeNode.height; } } //定义公共方法，实现内部封装 public AVLTreeNode add(int value) { head = insert(head, value); return head; } //实际插入的方法 private AVLTreeNode insert(AVLTreeNode root, int val) { ... ... } } 我们知道，在平衡二叉树中，有四种调整情况。分别为 LL型，LR 型，RL 型，RR 型。\n所以需要将这四个方法提前写明：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 /*四种类型转换*/ public AVLTreeNode LL(AVLTreeNode node) { //反转结构 AVLTreeNode result = node.left; node.left = result.right; result.right = node; //修改高度 node.height = Math.max(Height(node.left), Height(node.right)) + 1; result.height = Math.max(Height(result.left), Height(result.right)) + 1; return result; } public AVLTreeNode LR(AVLTreeNode node) { AVLTreeNode result = node.left.right; node.left.right = result.left; result.left = node.left; node.left = result.right; result.right = node; //修改高度 node.height = Math.max(Height(node.left), Height(node.right)) + 1; result.height = Math.max(Height(result.left), Height(result.right)) + 1; return result; } public AVLTreeNode RL(AVLTreeNode node) { AVLTreeNode result = node.right.left; node.right.left = result.right; result.right = node.right; node.right = result.left; result.left = node; //修改高度 node.height = Math.max(Height(node.left), Height(node.right)) + 1; result.height = Math.max(Height(result.left), Height(result.right)) + 1; return result; } private AVLTreeNode RR(AVLTreeNode node) { AVLTreeNode result = node.right; node.right = result.left; result.left = node; //修改高度 node.height = Math.max(Height(node.left), Height(node.right)) + 1; result.height = Math.max(Height(result.left), Height(result.right)) + 1; return result; } 为了验证最终答案是否正确，除了从 debug 看还写了一个中序遍历的方法来打印数据查看我们最终的答案是否正确：\n1 2 3 4 5 6 7 8 9 // 中序遍历 public void print(AVLTreeNode node) { if (node == null) { return; } print(node.left); System.out.print(node.val + \u0026#34; \u0026#34;); print(node.right); } 我们最终的代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 /** * 平衡二叉树 */ class AVLTree { AVLTreeNode head; public AVLTreeNode add(int value) { head = insert(head, value); return head; } private AVLTreeNode insert(AVLTreeNode root, int val) { if (root == null) { root = new AVLTreeNode(val); root.height = 0; return root; } if (val \u0026lt; root.val) { //左侧插入 root.left = insert(root.left, val); } else if (val \u0026gt; root.val) { //右侧插入 root.right = insert(root.right, val); } else { //更新值 root.val = val; } //检查失衡,左右节点的高度差绝对值大于 2 即为失衡 if (Math.abs(Height(root.left) - Height(root.right)) \u0026gt;= 2) { //当左边树高时可能为 LL 型或 LR 型 if (Height(root.left) \u0026gt; Height(root.right)) { //当新插入的值比 root.left 值小时为 LL 型，比 root.left 值大时为 LR 型 if (val \u0026lt; root.left.val) { root = LL(root); } else if (val \u0026gt; root.left.val) { root = LR(root); } } else if (Height(root.right) \u0026gt; Height(root.left)) { //当右边树高时可能为 RR 型或 RL 型 //当新插入的值比 root.right 值大时为 RR 型，比 root.right 值小时为 RL 型 if (val \u0026gt; root.right.val) { root = RR(root); } else if (val \u0026lt; root.right.val) { root = RL(root); } } } root.height = Math.max(Height(root.left), Height(root.right)) + 1; return root; } /*四种类型转换*/ public AVLTreeNode LL(AVLTreeNode node) { //反转结构 AVLTreeNode result = node.left; node.left = result.right; result.right = node; //修改高度 node.height = Math.max(Height(node.left), Height(node.right)) + 1; result.height = Math.max(Height(result.left), Height(result.right)) + 1; return result; } public AVLTreeNode LR(AVLTreeNode node) { AVLTreeNode result = node.left.right; node.left.right = result.left; result.left = node.left; node.left = result.right; result.right = node; //修改高度 node.height = Math.max(Height(node.left), Height(node.right)) + 1; result.height = Math.max(Height(result.left), Height(result.right)) + 1; return result; } public AVLTreeNode RL(AVLTreeNode node) { AVLTreeNode result = node.right.left; node.right.left = result.right; result.right = node.right; node.right = result.left; result.left = node; //修改高度 node.height = Math.max(Height(node.left), Height(node.right)) + 1; result.height = Math.max(Height(result.left), Height(result.right)) + 1; return result; } private AVLTreeNode RR(AVLTreeNode node) { AVLTreeNode result = node.right; node.right = result.left; result.left = node; //修改高度 node.height = Math.max(Height(node.left), Height(node.right)) + 1; result.height = Math.max(Height(result.left), Height(result.right)) + 1; return result; } // 中序遍历 public void print(AVLTreeNode node) { if (node == null) { return; } print(node.left); System.out.print(node.val + \u0026#34; \u0026#34;); print(node.right); } private int Height(AVLTreeNode avlTreeNode) { if (avlTreeNode == null) { return -1; } else { return avlTreeNode.height; } } } /** * 二叉平衡树的数据类型 */ class AVLTreeNode { int val; int height = -1; AVLTreeNode left; AVLTreeNode right; public AVLTreeNode() { } public AVLTreeNode(int val) { this.val = val; } } 我们写一个 main 方法来检查一下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public static void main(String[] args) { ListNode head = new ListNode(1); ListNode head1 = new ListNode(2); ListNode head2 = new ListNode(3); ListNode head3 = new ListNode(4); ListNode head4 = new ListNode(5); ListNode head5 = new ListNode(6); head.next = head1; head1.next = head2; head2.next = head3; head3.next = head4; head4.next = head5; AVLTreeNode root = sortedListToBST(head); new AVLTree().print(root); } public static AVLTreeNode sortedListToBST(ListNode head) { AVLTreeNode root = null; while (head != null) { root = new AVLTree().add(head.val); head = head.next; } return root; } 运行代码后发现打印出的信息也是顺序打印的，也没有缺少节点。所以我们就完成了一个平衡二叉树的插入过程。\n然后这个题目的解也就自然完成了。\n","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E5%B0%86%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%A0%91/","summary":"\u003ch1 id=\"题目来源\"\u003e题目来源\u003c/h1\u003e\n\u003cp\u003e今天做了个题：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e将一个链表里的数据组装树形结构，链表里的数据已经满足树形结构要求\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e这道题描述的很简单，但是有很多种情况。他只说了链表数据满足树形结构要求，并没有说明数据到底是什么样的，也就是题目参数具有多样性，这样其实我们给出一种解决方案就可以。而且也只要求将链表转换为树，并没有说是什么树。所以这道题说难也难，说简单也简单。\u003c/p\u003e\n\u003ch1 id=\"解题思路\"\u003e解题思路\u003c/h1\u003e\n\u003cp\u003e最近也将平衡二叉树的原理看了一下，正好借着这道题将代码手写一下。\u003c/p\u003e\n\u003cp\u003e我写了一个平衡二叉树的插入方法。我们不管链表里面的数据是如何排序的，我们只要调用树的插入方法即可。在插入方法内部实现树的平衡。\u003c/p\u003e\n\u003cp\u003e所以我们这道题也就转换成了手写平衡二叉树的插入过程。\u003c/p\u003e","title":"将链表转换为树"},{"content":"题目描述 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\n元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n示例 1:\n给定 nums = [3,2,2,3], val = 3,\n函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。\n你不需要考虑数组中超出新长度后面的元素。 示例 2:\n给定 nums = [0,1,2,2,3,0,4,2], val = 2,\n函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。\n注意这五个元素可为任意顺序。\n你不需要考虑数组中超出新长度后面的元素。\n说明:\n为什么返回数值是整数，但输出的答案是数组呢?\n请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\n你可以想象内部操作如下:\n// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝 int len = removeElement(nums, val);\n// 在函数里修改输入数组对于调用者是可见的。 // 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。 for (int i = 0; i \u0026lt; len; i++) { print(nums[i]); }\n解题思路 双指针法 我们可以利用快慢指针，开始时i,j两个指针都在左侧，然后j右移，如果元素与给定值相同则继续向前走，直到遇到不相同的值，然后将这个值赋值到i的位置上，然后i,j再一起向前走，最后i左侧的内容即为需要保留的元素。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 public int removeElement(int[] nums, int val) { int i = 0; for (int j = 0; j \u0026lt; nums.length; j++) { if (nums[j] != val) { nums[i] = nums[j]; i++; } } return i; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-leetcode27/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\u003c/p\u003e\n\u003cp\u003e不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\u003c/p\u003e\n\u003cp\u003e元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e给定 nums = [3,2,2,3], val = 3,\u003c/p\u003e\n\u003cp\u003e函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。\u003c/p\u003e\n\u003cp\u003e你不需要考虑数组中超出新长度后面的元素。\n示例 2:\u003c/p\u003e\n\u003cp\u003e给定 nums = [0,1,2,2,3,0,4,2], val = 2,\u003c/p\u003e\n\u003cp\u003e函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。\u003c/p\u003e\n\u003cp\u003e注意这五个元素可为任意顺序。\u003c/p\u003e\n\u003cp\u003e你不需要考虑数组中超出新长度后面的元素。\u003c/p\u003e\n\u003cp\u003e说明:\u003c/p\u003e\n\u003cp\u003e为什么返回数值是整数，但输出的答案是数组呢?\u003c/p\u003e\n\u003cp\u003e请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\u003c/p\u003e\n\u003cp\u003e你可以想象内部操作如下:\u003c/p\u003e\n\u003cp\u003e// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝\nint len = removeElement(nums, val);\u003c/p\u003e\n\u003cp\u003e// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。\nfor (int i = 0; i \u0026lt; len; i++) {\nprint(nums[i]);\n}\u003c/p\u003e\u003c/blockquote\u003e","title":"移除元素-LeetCode27"},{"content":"二叉树 定义 二叉树由节点的有限集合构成 这个有限集合或者为空集 或者为由一个根节点(root)及两棵互不相交、分别称为这个根的左子树和右子树的二叉树组成的集合 在 java 中用代码定义为：\n1 2 3 4 5 6 7 8 class TreeNode { Object val; TreeNode leftNode; TreeNode rightNode; ... } 性质 在二叉树中，第 i 层上最多有2^i^ 个节点(i\u0026gt;=0) 深度为 k 的二叉树至多有2^k+1^-1个节点(k\u0026gt;=0) 有 n 个节点的完全二叉树的高度为 log2(n+1) 它主要有五种基本形态：\n满二叉树 定义：除最后一层无任何子节点外，每一层上的所有节点都有两个子节点的二叉树。\n大体的意思就是：一颗二叉树的节点要么是叶子节点（也就是最后一层），要么它就要有两个子节点。如果这个二叉树的层数为 k，且节点总数是(2^k^-1)，则它就是满二叉树。\n完全二叉树 定义：设二叉树的深度为 k，除第 k 层外，其他各层(1~(k-1)层)的节点都都达到最大值，其第 k 层所有的节点都连续集中在最左边，这样的树就是完全二叉树\n这些是二叉树的一些基本定义以及变形，它对于数据的存储并没有要求，只是要求了结构。所以对于实际应用中还存在很多的不足，比如对于一个 n 个节点的树，判断一个节点是不是在树里面，它的复杂度还是 o(n)。所以我们下面介绍几种对于存储有要求的树。\n二叉树的遍历 树的几种遍历方式\n我们以这样的一个二叉树为例，来进行不同形式的遍历\n中序 我们以一个节点为例，它分别有该节点本身，左节点，右节点。\n中序遍历的顺序为：\n访问左节点（如果左节点为树，则继续递归访问） 访问自身节点 访问右节点（如果右节点为树，则继续递归访问） 拿我们上面的例子来说：首先拿到 A 节点。根据上面的规则，先访问左节点 B，左节点 B 为树，那么继续访问 B 的左节点 C，最终我们可以访问到 E。E 没有左子树了，那么将 E 放到结果集中。\n然后访问自身节点，这时的自身节点是 D，将 D 放到结果集中，然后访问右节点 F。\n一步一步的返回到 A，这时结果集里的顺序是(E,D,F,C,B,G,I,H,A)。\n然后访问右节点J，这时 J 是一个树，然后访问 J 的左节点 K，将它放到结果集中，然后访问自身，最后访问右节点 L。\n那么最终得到的结果集是：(E,D,F,C,B,G,I,H,A,K,J,L)\n前序 中序遍历的顺序为：\n访问自身节点 访问左节点（如果左节点为树，则继续递归访问） 访问右节点（如果右节点为树，则继续递归访问） 继续拿上面的例子：首先拿到 A 节点，然后将它放到结果集中。然后访问左节点 B，将 B 放到结果集中。然后访问做节点 C，将 C 放到结果集中，然后访问 D，然后 E。这时 E 没有子节点，向上返回到 D。继续访问右节点 F，F 也没有子节点，向上返回到 B，访问 B 的右节点 G。\n最后返回到 A，这时结果集里的顺序为(A,B,C,D,E,F,G,H,I)\n然后访问右节点 J，将 J 放到结果集中，继续访问左节点 K，k 没有子节点，向上返回然后访问右节点 L。最后完成遍历\n最终得到的结果为:(A,B,C,D,E,F,G,H,I,J,K,L)\n后序 后序遍历的顺序为：\n访问左节点（如果左节点为树，则继续递归访问） 访问右节点（如果右节点为树，则继续递归访问） 访问自身节点 继续拿上面的例子：首先拿到根节点 A。然后访问左节点B，B 还有左节点，所以继续向下访问，一直到 E，将 E 放到结果集中。然后向上返回到 D，接下来访问 D 的右节点F，将 F 放到结果集中。然后访问自身节点 D，将值放到结果集中，然后返回 C，由于 C 没有右节点，所以将 C 放到结果集中，一直返回。\n返回到 A 的时候，结果集里面的值为：(E,F,D,C,I,H,G,B)\n然后需要访问 A 的右节点 J，J 还有子节点，所以再进行递归。访问 J 的左节点 K，访问右节点 L，访问自身节点。完成 J 的访问后再回到 A，将 A 添加到结果集中\n最终得到的结果是：(E,F,D,C,I,H,G,B,K,L,K,A)\n所以这里的前中后，对于的就是根节点对于左右节点的顺序。如果根节点在左右节点之间则为中序、如果根节点在左右节点之前则为前序、在左右节点后面就是后序\n其他遍历方式 还是一些其他的遍历方式，比如深度优先、广度优先等。\n二叉搜索树（BST） 为了解决二叉树在搜索上的效率问题，我们定义了二叉搜索树。\n定义： 可以是一颗空树 或者是具有下列性质的二叉树 对于任何一个节点，设其值为 k 则该节点的左子树(若不为空)的任意一个节点的值都小于 k 该节点的右子树(若不为空)的任意一个节点的值都大于 k 而且它的左右子树也分别为二叉搜索树 性质 中序遍历是正序的(由小到大的排列)\n搜索的时候使用二分搜索法\n插入也是一遍检索的过程\n删除时，可以使用左子树的最大或者右子树的最小值作为被删除值的替换，然后将左子树最大或者右子树最小进行删除（比如删除 35，我们可以用右子树最小 51 来替换 35 的值，然后将 51 节点删除）\n最优的情况下，我们搜索的时间复杂度是 o(log2N)，最坏的情况下是 o(N)\n平衡二叉树（AVL） 当我们给定一个正序的数组[1,2,3,4,5,6,7]然后将他们顺序插入到二叉搜索树中。它就变成了如下的结构：\n它从我们的树退化成了链表，我们对于这样的数据结构访问的时间复杂度也变成了 o(n)。但我们希望它能变成这样的数据结构，那么我们就可以使用 o(log2N)的复杂度去访问了。\n这就是我们引入平衡二叉树的意义。\n定义 一颗平衡二叉树或者是空树，或者是具有以下性质的二叉排序树 左子树与右子树的高度之差的绝对值小于等于 1 左子树与右子树也是平衡二叉树 所以平衡的关键点就是在二叉搜索树的基础上，实现左右子树的高度差不超过 1\n实现 为了方便起见，给每个节点附加一个数字，给出该节点左子树与右子树的高度差。这个数组称为节点的平衡因子(BF)\n平衡因子 = 节点左子树的高度-节点右子树的高度\n根据平衡二叉树的定义，平衡二叉树上所有节点的平衡因子只能是 -1,0,1;\n如果在一颗 AVL 树中插入一个新节点后造成失衡，则必须重新调整树的结构，使之恢复平衡。平衡调整分为以下四种类型：\n当出现失衡时就需要进行调整，而调整的原则就是：\n降低高度 保持二叉排序树的性质 所以可以将上面四种情况分别调整为：\n上面的调整都是在简单的情况或者理想情况下的图，当我们实际操作起来 A,B 节点还可能有其他的子节点。这时又该如何调整呢？我们继续来看：\n例子 我们以一个例子来看一下平衡二叉树的构造过程。\n我们用一个数组：[16,3,7,11,9,26,18,14,15]顺序插入到二叉平衡树中。\n2-3 树 学习 2-3 树是为了下面红黑树的学习。2-3 树在完美平衡的情况下所有空链接到根节点的距离都是相同的。我们接下来描述的也都是完美平衡的 2-3 树。\n定义 首先我们知道二叉树的节点是有一个值，有两个子节点。我们在 2-3 树中将这样的节点称为 2-节点(因为有两个子节点)，然后我们再引入一个定义 3-节点（这个节点里面有两个值，有三个子节点，左节点小于两个值，右节点大于两个值，中节点介于两个值之间）\n所以它也是一颗二叉搜索树，它的查找和二叉搜索树的查找基本上没区别\n插入过程 向一颗空树插入\n当向空树插入时，新建一个 2-节点即可。\n向 2-节点插入\n把这个 2-节点替换为一个 3-节点即可。\n向 3-节点插入\n先将这个 3-节点临时变为 4-节点(节点里面有 3 个值，两个旧值，一个新值)。然后将三个值的中间值作为父节点，父节点的左节点为这三个值中的最小值，父节点的右节点为这三个值中的最大值。这时树的高度增加了 1。\n向一个父节点为 2-节点的 3-节点插入\n首先我们看第三步，我们向一个 3-节点插入，会将其分解为 3 个 2-节点，然后树高加 1。但是我们这次有一个父节点，并且它是一个 2-节点。那我们是不是可以把它看做，向一个 2-节点插入一个新键(这个新键是从子节点分解上来的中间值)。那么这样就可以按照第二步，将这个 2-节点替换为 3-节点。这时父节点变成了 3-节点。\n向一个父节点为 3-节点的 3-节点插入\n首先它是向一个 3-节点插入，我们再按照第三步操作，得到了一个中间值向上传递。这时父节点又是一个 3-节点。我们继续按照第三步来操作。一直向上传递，直到遇到一个父节点为 2-节点，或者到达根节点。\n当我们到达根节点后，如果根节点也是 3-节点，就需要分解根节点，变成 3个 2-节点。此时树的高度加 1。\n只看这个步骤可能有些晦涩，我们就直接上例子(1,3,5,7,9,2,4,6,8)的插入过程。\n我们只要记住，首先按照二叉搜索树的性质来进行插入。小就往左子树，大就向右子树，中间就想中间的树。然后遇到 2-节点就变 3-节点。遇到 3-节点就分解向上传递，然后就又变成了向 2-或 3-节点插入的问题。\n红黑树 性质 节点是红色或黑色 根节点是黑色 所有叶子节点都是黑色 每个红色节点必须有两个黑色的子节点（从每个叶子到根的所有路径上不能有两个连续的红色节点） 从任意节点到其每个叶子节点的所有简单路径都包含相同数目的黑色节点 我们为什么在上面要学习一下 2-3 树呢，因为在《算法》第四版中，它将红黑树看成 2-3 树的变形。我们知道 2-3 树中有一个 3-节点。它在一个节点中有两个值，这两个值肯定是一个大，一个小。我们如果把这个小的值分离出来，并且将它的颜色设置成红色，因为它小，所以它是大值的左节点，这样就形成了一颗红黑树。\n将上面的 2-3 树的例子拿过来对比一下\n有一个重要的点是：红黑树不是完美的平衡二叉树，它只是近似平衡，我刚开始以为它是一颗平衡二叉树，在进行转换的时候就有了一下困难。\n我们可以将它的结构用代码定义一下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 private class Node { Key key; Val val; Node left,right; boolean color; // true 为红，false 为黑 Node(Key key,Val val,boolean color){ this.key = key; this.val = val; this.color = color; } private boolean isRed(Node x){ if(x==null){ return false;} return x.color; } ... } 插入 首先我们明确，新插入的节点都是红色的，然后经过一系列操作它可能会改变颜色，但是我们在新建节点来插入时它是红色的。\n我们在讲插入之前先来讲一下插入过程中需要的变换\n旋转 左旋转 代码简单实现如下：\n1 2 3 4 5 6 7 8 9 10 Node rotateLeft(Node h){ //变换位置 Node x = h.right; h.right = x.left; x.left = h; //变色 x.color = h.color; h.color = true; return x; } 右旋转 代码简单实现如下：\n1 2 3 4 5 6 7 8 9 10 Node rotateRight(Node h){ //变换位置 Node x = h.left; h.left = x.right; x.right = h; //变色 x.color = h.color; h.color = true; return x; } 旋转操作可以保持红黑树的两个重要性质：有序性和完美平衡性\n那我们就开始一个红黑树的插入：\n向单个2-节点插入 向树底部的 2-节点插入\n向 3-节点插入\n上面的第二、三种情况用到了颜色转换，将两个孩子节点变成黑色，将父节点变成红色，简单代码如下：\n1 2 3 4 5 void flipColors(Node h){ h.color = true; h.left.color=false; h.right.color = false; } 接下来我们用一个例子来说明一下这个过程：[1,3,5,7,9,2,4,6,8]\n并且简单代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 public void put(Key key,Val val){ root = put(root,key,val); //最终保证根节点为黑色 root.color = false; } private Node put(Node h,Key key,Val val){ if(h==null){ return new Node(key,val,true); //每次都插入一个红节点 } int cmp = compareTo(h.key); //判断大小关系后递归调用 //需要返回值的原因是 当添加值之后可能会影响性质，需要旋转变色等。也就是节点发生了变换，需要重新赋值。 if(cmp\u0026lt;0){ h.left = put(h.left,key,val); }else if(cmp\u0026gt;0){ h.right = put(h.right,key,val); }else { h.val = val; } if( isRed(h.right) \u0026amp;\u0026amp; !isRed(h.left) ){ //右节点为红色，左节点为空或者黑色时需要左旋转 h = rotateLeft(h); } if( isRed(h.left) \u0026amp;\u0026amp; isRed(h.left.left) ){ //当左节点为红色，左节点的左节点也为红色时，需要进行右旋转 h = rotateRight(h); } if( isRed(h.left) \u0026amp;\u0026amp; isRed(h.right) ){ //当两个子节点都为红色时，将两个子节点变黑，根节点变红 flipColors(h); } } 然后我们来看一下图示过程：\n后续 关于节点删除的部分后面继续添加\n参考 https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91 https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91 https://www.cxyxiaowu.com/7374.html https://www.icourse163.org/course/PKU-1002534001 《算法》（第四版） ","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/avl%E7%BA%A2%E9%BB%91%E6%A0%91%E5%AD%A6%E4%B9%A0/","summary":"\u003ch1 id=\"二叉树\"\u003e二叉树\u003c/h1\u003e\n\u003ch2 id=\"定义\"\u003e定义\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e二叉树由节点的有限集合构成\u003c/li\u003e\n\u003cli\u003e这个有限集合或者为空集\u003c/li\u003e\n\u003cli\u003e或者为由一个根节点(root)及两棵互不相交、分别称为这个根的左子树和右子树的二叉树组成的集合\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在 java 中用代码定义为：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eleftNode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003erightNode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"性质\"\u003e性质\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e在二叉树中，第 i 层上最多有2^i^ 个节点(i\u0026gt;=0)\u003c/li\u003e\n\u003cli\u003e深度为 k 的二叉树至多有2^k+1^-1个节点(k\u0026gt;=0)\u003c/li\u003e\n\u003cli\u003e有 n 个节点的完全二叉树的高度为 log\u003cdel\u003e2\u003c/del\u003e(n+1)\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e它主要有五种基本形态：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%BA%94%E7%A7%8D%E5%9F%BA%E6%9C%AC%E5%BD%A2%E6%80%81.png\" alt=\"二叉树的五种基本形态\"\u003e\u003c/p\u003e\n\u003ch2 id=\"满二叉树\"\u003e满二叉树\u003c/h2\u003e\n\u003cp\u003e定义：除最后一层无任何子节点外，每一层上的所有节点都有两个子节点的二叉树。\u003c/p\u003e\n\u003cp\u003e大体的意思就是：一颗二叉树的节点要么是叶子节点（也就是最后一层），要么它就要有两个子节点。如果这个二叉树的层数为 k，且节点总数是(2^k^-1)，则它就是满二叉树。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png\" alt=\"满二叉树\"\u003e\u003c/p\u003e\n\u003ch2 id=\"完全二叉树\"\u003e完全二叉树\u003c/h2\u003e\n\u003cp\u003e定义：设二叉树的深度为 k，除第 k 层外，其他各层(1~(k-1)层)的节点都都达到最大值，其第 k 层所有的节点都连续集中在最左边，这样的树就是完全二叉树\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.png\" alt=\"完全二叉树\"\u003e\u003c/p\u003e\n\u003cp\u003e这些是二叉树的一些基本定义以及变形，它对于数据的存储并没有要求，只是要求了结构。所以对于实际应用中还存在很多的不足，比如对于一个 n 个节点的树，判断一个节点是不是在树里面，它的复杂度还是 o(n)。所以我们下面介绍几种对于存储有要求的树。\u003c/p\u003e","title":"AVL，红黑树学习"},{"content":"注解，这个经常在开发中使用到的东西，它的使用语法是怎么样的？如何去自定义一个注解呢？\n什么是注解 我们在日常开发中，比如 java 中的@Override，在 springboot 中用到的@SpringBootApplication等一系列标注在类或者方法上的注解。我们添加上注解后会有对应的事件处理，比如我们的@Override注解标明这个方法是重写了父类或者接口的方法，当参数不一致、返回类型不一致等不符合重写的要求时，编译器会报错。类似的@SpringBootApplication也是标明这个项目的一个 springboot 项目，默认会启动一个 tomcat 容器等。\n注解是从 jdk5 开始引入的新特性。\n注解的语法 1 public @interface FirstAnnotation {} 通过@interface即可声明一个注解。\n内置的注解 Java 定义了一套注解，共有 7 个，3 个在 java.lang 中，剩下 4 个在 java.lang.annotation 中\n作用在代码的注解是 @Override - 检查该方法是否是重载方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。 @Deprecated - 标记过时方法。如果使用该方法，会报编译警告。 @SuppressWarnings - 指示编译器去忽略注解中声明的警告。 元注解 我们通过上面的语法定义了一个注解，但还需要其他的注解一同作用。在 jdk1.5中定义了 4 个标准注解，它们用来提供对其他 annotation 类型做说明。分别是：\n@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。 @Documented - 标记这些注解是否包含在用户文档中。 @Target - 标记这个注解应该是哪种 Java 成员。 @Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类) 从 Java 7 开始，额外添加了 3 个注解:\n@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。 @FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。 @Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。 @Retention 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 @Documented @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.ANNOTATION_TYPE) public @interface Retention { RetentionPolicy value(); } public enum RetentionPolicy { /* 注解被编译器丢弃，不会保留到 class 文件中 */ SOURCE, /* 默认的类型。 注解在 class 文件中可用，但会被 jvm 丢弃 */ CLASS, /*在运行期也保留，可以通过反射机制读取注解的信息*/ RUNTIME } 这个注解只有一个变量，类型是一个枚举。可以通过这个变量来表明这个注解是保存在源码中(source)，还是编入 class 文件中(class)，还是在运行时通过反射访问(runtime)。\n@Target 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 @Documented @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.ANNOTATION_TYPE) public @interface Target { ElementType[] value(); } public enum ElementType { /* 表明该注解可以用于 类，接口（包括注解类型）或枚举声明*/ TYPE, /* 表明该注解可以用于 字段声明（包括枚举常量） */ FIELD, /* 表明该注解可以用于 方法声明 */ METHOD, /* 表明该注解可以用于 参数声明 */ PARAMETER, /* 表明该注解可以用于 构造函数声明 */ CONSTRUCTOR, /* 表明该注解可以用于 局部变量声明 */ LOCAL_VARIABLE, /* 表明该注解可以用于 注解声明（应用于另一个注解上） */ ANNOTATION_TYPE, /* 表明该注解可以用于 包声明 */ PACKAGE, /* 表明该注解可以用于 类型参数声明@since 1.8 */ TYPE_PARAMETER, /* 类型使用声明 */ TYPE_USE } @Documented 1 2 3 4 5 @Documented @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.ANNOTATION_TYPE) public @interface Documented { } 它没有任何变量，添加这个注解可以让我们执行 JavaDoc 文档打包时注解会被保存进 doc 文档，反之将在打包时丢弃。\n@Inherited 1 2 3 4 5 @Documented @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.ANNOTATION_TYPE) public @interface Inherited { } 这个注解是什么意思呢？我们通过一个例子来说明一下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 @Inherited @Documented @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) public @interface DocumentFirst { } @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) public @interface DocumentSecond { } @DocumentFirst class A{ } class B extends A{ } @DocumentSecond class C{ } class D extends C{ } public class DocumentDemo { public static void main(String[] args){ A instanceA=new B(); System.out.println(\u0026#34;实例 B 拥有的注解:\u0026#34;+Arrays.toString(instanceA.getClass().getAnnotations())); C instanceC = new D(); System.out.println(\u0026#34;实例 D 拥有的注解:\u0026#34;+Arrays.toString(instanceC.getClass().getAnnotations())); } /** * 运行结果: 实例 B 拥有的注解:[@cn.lnj.annotationdemo.DocumentFirst()] 实例 D 拥有的注解:[] */ } 可以看出来，添加了@Inherited元注解的注解，这个类被继承后的子类也可以拥有这个注解。也就是说这个注解的作用范围是父类和子类。而没有添加这个元注解的注解，作用范围只有被添加的类。\n@Repeatable 添加这个注解后，注解可以在同一个声明上使用多次，来看一个例子：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public @interface DocumentA { String[] names; } @Repeatable public @interface DocumentB { String[] names; } //相同的注解，不能同时声明多次，因为没有添加@Repeatable注解 @DocumentA(names=\u0026#34;AAA\u0026#34;) //@DocumentA(names=\u0026#34;BBB\u0026#34;) class A { } //相同的注解，可以同时被声明多次，不会报错 @DocumentB(names=\u0026#34;AAA\u0026#34;) @DocumentB(names=\u0026#34;BBB\u0026#34;) class B { } @FunctionalInterface 在 jdk1.8中添加了 lambda 表达式，也就是函数式编程。虽然说添加了lambda，但也并不是所有的东西都可以无条件的去使用。需要在接口上添加@FunctionalInterface注解，并且这个接口里面只能有一个抽象方法。\n通过 aop 来进行拦截 通过上面我们可以进行一个自定义的注解，但是我们即便把他声明在方法上，它其实还是没有作用的，如果需要这个注解起到我们想要的作用还需要进行自定义的处理。比如我们使用 aop 来进行这个处理\n首先定义一个注解\n1 2 3 4 5 @Target({ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) public @interface HelloAnnotation { } 然后在方法上添加这个注解\n1 2 3 4 @HelloAnnotation public void sayHello(){ System.out.println(\u0026#34;i am working\u0026#34;); } 最后定义拦截器\n1 2 3 4 5 6 7 8 9 @Around(\u0026#34;@annotation(HelloAnnotation)\u0026#34;) public Object around(ProceedingJoinPoint proceedingJoinPoint, HelloAnnotation helloAnnotation) { //方法执行前 System.out.println(\u0026#34;start\u0026#34;); //调用方法 proceedingJoinPoint.proceed(); //方法执行后 System.out.println(\u0026#34;finish\u0026#34;); } 这样我们就可以在调用sayHello()这个方法后，执行这个拦截器逻辑。\n参考 维基百科 https://blog.csdn.net/javazejian/article/details/71860633 ","permalink":"https://www.liunaijie.top/coding/java/java%E6%B3%A8%E8%A7%A3/","summary":"\u003cp\u003e注解，这个经常在开发中使用到的东西，它的使用语法是怎么样的？如何去自定义一个注解呢？\u003c/p\u003e\n\u003ch1 id=\"什么是注解\"\u003e什么是注解\u003c/h1\u003e\n\u003cp\u003e我们在日常开发中，比如 java 中的\u003ccode\u003e@Override\u003c/code\u003e，在 springboot 中用到的\u003ccode\u003e@SpringBootApplication\u003c/code\u003e等一系列标注在类或者方法上的注解。我们添加上注解后会有对应的事件处理，比如我们的\u003ccode\u003e@Override\u003c/code\u003e注解标明这个方法是重写了父类或者接口的方法，当参数不一致、返回类型不一致等不符合重写的要求时，编译器会报错。类似的\u003ccode\u003e@SpringBootApplication\u003c/code\u003e也是标明这个项目的一个 springboot 项目，默认会启动一个 tomcat 容器等。\u003c/p\u003e\n\u003cp\u003e注解是从 jdk5 开始引入的新特性。\u003c/p\u003e\n\u003ch1 id=\"注解的语法\"\u003e注解的语法\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nd\"\u003e@interface\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eFirstAnnotation\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e通过\u003ccode\u003e@interface\u003c/code\u003e即可声明一个注解。\u003c/p\u003e","title":"Java注解"},{"content":"题目描述 给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。 k 是一个正整数，它的值小于或等于链表的长度。 如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。 示例 : 给定这个链表：1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5 当 k = 2 时，应当返回: 2-\u0026gt;1-\u0026gt;4-\u0026gt;3-\u0026gt;5 当 k = 3 时，应当返回: 3-\u0026gt;2-\u0026gt;1-\u0026gt;4-\u0026gt;5 说明 : 你的算法只能使用常数的额外空间。 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换\n解题思路 首先根据 k，分隔每一组。将这一组反转，将下面的一组递归调用函数，然后将这一组的最后一个节点（就是参数中的头结点）与下一组反转后的头结点相连接。\n代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public ListNode reverseKGroup(ListNode head, int k) { ListNode lastNode = head; //根据 k ，分割每一组。最终 temp 为一组的最后一个节点 for (int i = 1; i \u0026lt; k; i++) { if (lastNode != null) { lastNode = lastNode.next; } } //如果为空则表示不足一组，不用反转，返回头指针 if (lastNode == null) { return head; } //开始每一组的反转，首先将下一组的开始存为一个变量 ListNode nextGroupHead = lastNode.next; //然后将这一组与下一组分隔，不然无法反转这一组，后面再将两者连接 lastNode.next = null; //将这一组反转 ListNode newHead = reverseGroupHelp(head); //将后面的继续递归反转，得到的结果是下面一组反转后的头结点 ListNode reverseNextHead = reverseKGroup(nextGroupHead, k); //当这一组进行反转后，传入的 head 变成了这一组最后一个节点，最后一个节点连接下一组的头结点。如果不够一组，在上面已经 return 掉了 head.next = reverseNextHead; return newHead; } /** * 反转链表函数 */ private ListNode reverseGroupHelp(ListNode head) { if (head == null || head.next == null) { return head; } ListNode result = reverseGroupHelp(head.next); head.next.next = head; head.next = null; return result; } 参数中传入了头结点，根据 k 找到这一组的最后一个节点。然后将这个节点与下一组节点分隔。\n将头结点进行反转，返回反转后的头结点。\n将下一组递归调用这个函数，得到返回的头结点。\n将这一组的最后一个节点与后面的头结点相连接。一组反转后的最后一个节点也就是传入参数中的头结点\n变形-从后开始反转 在上面这道题，是从头开始计算反转，这次要从尾部开始反转。拿上面的例子来说：\n给定一个链表：1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5 当 k = 2 时，应当返回: 1-\u0026gt;3-\u0026gt;2-\u0026gt;5-\u0026gt;4 当 k = 3 时，应当返回: 1-\u0026gt;2-\u0026gt;5-\u0026gt;4-\u0026gt;3\n这道题需要先转换一下思路：如果给定的是这样：\n给定一个链表：5-\u0026gt;4-\u0026gt;3-\u0026gt;2-\u0026gt;1 当 k = 2 时，应当返回: 4-\u0026gt;5-\u0026gt;2-\u0026gt;3-\u0026gt;1 当 k = 3 时，应当返回: 3-\u0026gt;4-\u0026gt;5-\u0026gt;2-\u0026gt;1\n是不是就和我们刚刚做的题目一样了。所以我们要做的是先将链表反转，然后进行 k 个一组反转，最后再将链表反转回来。最终的代码如下：\n1 2 3 4 5 6 7 8 public ListNode reverseKGroupFromTail(ListNode head, int k) { //首先将链表反转 ListNode tail = reverseGroupHelp(head); //然后将链表分组反转 ListNode reverse = reverseKGroup(tail, k); //再将链表反转回来 return reverseGroupHelp(reverse); } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8-leetcode25/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。\nk 是一个正整数，它的值小于或等于链表的长度。\n如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。\n示例 :\n给定这个链表：1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5\n当 k = 2 时，应当返回: 2-\u0026gt;1-\u0026gt;4-\u0026gt;3-\u0026gt;5\n当 k = 3 时，应当返回: 3-\u0026gt;2-\u0026gt;1-\u0026gt;4-\u0026gt;5\n说明 :\n你的算法只能使用常数的额外空间。\n你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"解题思路\"\u003e解题思路\u003c/h1\u003e\n\u003cp\u003e首先根据 k，分隔每一组。将这一组反转，将下面的一组递归调用函数，然后将这一组的最后一个节点（就是参数中的头结点）与下一组反转后的头结点相连接。\u003c/p\u003e","title":"K个一组翻转链表-LeetCode25"},{"content":"背景 我们知道，当前端请求的后端程序抛出异常时，此时的 http 状态码变成了 500，并有一大串错误信息。今天要做的是整合后台返回信息，不管后台程序有异常，都能返回一个统一格式的信息，前端根据里面的信息来判断是否请求失败。\n定义一下正常返回的信息如下：\n1 2 3 4 5 6 7 { code:1, msg:\u0026#34;请求成功\u0026#34;, //或其他自定义信息 data:{ //这里存储这个接口的返回信息 } } 错误的信息如下：\n1 2 3 4 5 { code:-1, //可以根据不同的情况返回不同的状态码 msg:\u0026#34;请求失败\u0026#34;, //或其他自定义信息 data:{} } 实现 在 spring 框架下，这个要求我们可以利用 aop 去实现它，比如对我们所有的接口进行一个横切，对返回信息遇到异常后进行处理。\n在 springboot 框架下，已经有现成的东西让我们可以直接去使用了。那就直接上代码了。\n定义返回信息实体类：\n1 2 3 4 5 6 7 8 @Data public class ResultBean\u0026lt;T\u0026gt; { private String code; private String msg; private T data; } 然后定义一个自定义异常，必须继承自RuntimeException。如果直接继承Exception则事务不一定回滚\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 @Data public class AppException extends RuntimeException { /** * 异常状态码 */ private String code; /** * 异常提示信息 */ private String msg; public AppException(ResultEnums resultEnums) { super(resultEnums.getMsg()); this.code = resultEnums.getCode(); this.msg = resultEnums.getMsg(); } public AppException(String msg) { super(msg); this.code = \u0026#34;-1\u0026#34;; this.msg = msg; } } 由于异常信息较多，为了便于管理，我们定义一个枚举\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public enum ResultEnums { SUCCESS(\u0026#34;1\u0026#34;, \u0026#34;成功！\u0026#34;), FAIL(\u0026#34;-1\u0026#34;, \u0026#34;失败！\u0026#34;); private String code; private String msg; ResultEnums(String code, String msg) { this.code = code; this.msg = msg; } public String getCode() { return code; } public String getMsg() { return msg; } } 为了不再每一个返回信息和处理异常都使用 new 一个返回信息类，定义一个工具类来进行处理\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 public class ResultUtil { /** * 固定成功提示，不返回信息 * * @return resultBean */ public static ResultBean success() { return success(null); } /** * 固定成功提示，返回信息 * * @param object 具体信息 * @return resultBean */ public static ResultBean success(Object object) { ResultBean result = new ResultBean(); result.setCode(ResultEnums.SUCCESS.getCode()); result.setMsg(ResultEnums.SUCCESS.getMsg()); result.setData(object); return result; } /** * 自定义成功提示，返回信息 * * @param resultEnums * @param object * @return */ public static ResultBean success(ResultEnums resultEnums, Object object) { ResultBean result = new ResultBean(); result.setCode(resultEnums.getCode()); result.setMsg(resultEnums.getMsg()); result.setData(object); return result; } /** * 失败 * * @param code 错误码 * @param message 错误信息 * @return resultBean */ public static ResultBean fail(String code, String message) { ResultBean result = new ResultBean(); result.setCode(code); result.setMsg(message); result.setData(null); return result; } public static ResultBean fail(ResultEnums resultEnums) { ResultBean result = new ResultBean(); result.setCode(resultEnums.getCode()); result.setMsg(resultEnums.getMsg()); result.setData(null); return result; } } 然后是最关键的一步：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 @ControllerAdvice public class ExceptionHandle { /** * 捕获异常 针对不同异常返回不同内容的固定格式信息 * 拦截所有的异常，并且返回 json 格式的信息 * @param e 异常 * @return resultBean */ @ExceptionHandler(value = Exception.class) @ResponseBody public ResultBean handle(Exception e) { if (e instanceof AppException) { //如果是我们自定义的异常，就直接返回我们异常里面设置的信息 AppException appException = (AppException) e; return ResultUtil.fail(appException.getCode(), appException.getMessage()); } else if (e instanceof HttpRequestMethodNotSupportedException) { //对其他的异常进行处理，如果是请求方法错误，我们设置 code 和 msg 进行返回。 return ResultUtil.fail(ResultEnums.REQUEST_PARAMETER_MISSING.getCode(), ResultEnums.REQUEST_PARAMETER_MISSING.getMsg()); } else { return ResultUtil.fail(ResultEnums.UN_KNOW_ERROR.getCode(), ResultEnums.UN_KNOW_ERROR.getMsg()); } } } 测试代码 我们新建一个接口：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 @RestController public class Test { @GetMapping(value = \u0026#34;/noError\u0026#34;) public Object noError() { String data = \u0026#34;ok,you are right\u0026#34;; return ResultUtil.success(data); } @GetMapping(value = \u0026#34;/hasError\u0026#34;) public Object hasError() { //对于业务异常我们可以抛出自定义异常 //\tthrow new AppException(ResultEnums.FAIL); int a = 1 / 0; //由于 0 不能做除数，所以会抛出异常 return ResultUtil.success(a); } } 然后我们访问对于的地址，可以看到正常时的信息和遇到异常时的信息在外部格式是一致的，不会因为服务器出现错误就出现 500 的错误了。\n@ControllerAdvice 下其他注解 处理@ExceptionHandler 外还有两个注解\n@InitBinder 主要作用是绑定一些自定义的参数\n@ModelAttribute 除了处理用于接口参数可以用于转换对象类型的属性之外，还可以用来进行方法的声明。\n这两个注解在此篇文章中不再记录。\n","permalink":"https://www.liunaijie.top/coding/spring/springboot%E4%BD%BF%E7%94%A8-controlleradvice%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8/","summary":"\u003ch1 id=\"背景\"\u003e背景\u003c/h1\u003e\n\u003cp\u003e我们知道，当前端请求的后端程序抛出异常时，此时的 http 状态码变成了 500，并有一大串错误信息。今天要做的是整合后台返回信息，不管后台程序有异常，都能返回一个统一格式的信息，前端根据里面的信息来判断是否请求失败。\u003c/p\u003e\n\u003cp\u003e定义一下正常返回的信息如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003ecode:1,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003emsg:\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026#34;请求成功\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"c1\"\u003e//或其他自定义信息\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"err\"\u003edata:{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e//这里存储这个接口的返回信息\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e错误的信息如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003ecode:-1,\u003c/span\u003e \u003cspan class=\"c1\"\u003e//可以根据不同的情况返回不同的状态码\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"err\"\u003emsg:\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026#34;请求失败\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"c1\"\u003e//或其他自定义信息\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"err\"\u003edata:{\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"实现\"\u003e实现\u003c/h1\u003e\n\u003cp\u003e在 spring 框架下，这个要求我们可以利用 aop 去实现它，比如对我们所有的接口进行一个横切，对返回信息遇到异常后进行处理。\u003c/p\u003e\n\u003cp\u003e在 springboot 框架下，已经有现成的东西让我们可以直接去使用了。那就直接上代码了。\u003c/p\u003e\n\u003cp\u003e定义返回信息实体类：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nd\"\u003e@Data\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eResultBean\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emsg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e然后定义一个自定义异常，必须继承自\u003ccode\u003eRuntimeException\u003c/code\u003e。如果直接继承\u003ccode\u003eException\u003c/code\u003e则事务不一定回滚\u003c/p\u003e","title":"SpringBoot使用@ControllerAdvice处理异常"},{"content":"题目描述 反转一个单链表。\n示例:\n输入: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5-\u0026gt;NULL 输出: 5-\u0026gt;4-\u0026gt;3-\u0026gt;2-\u0026gt;1-\u0026gt;NULL 进阶: 你可以迭代或递归地反转链表。你能否用两种方法解决这道题？\n解题思路 迭代 使用迭代法，存储两个节点，上一个节点和当前节点，然后进行反转\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 public ListNode reverseList(ListNode head) { ListNode prev = null; ListNode cur = head; while (cur != null) { ListNode temp = cur.next; cur.next = prev; prev = cur; cur = temp; } return prev; } 递归 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public ListNode reverseList2(ListNode head) { ListNode prev = null; ListNode cur = head; return reverseHelp(prev, cur); } public ListNode reverseHelp(ListNode prev, ListNode cur) { if (cur == null) { return prev; } ListNode temp = cur.next; cur.next = prev; prev = cur; cur = temp; return reverseHelp(prev, cur); } 相关题目 K个一组翻转链表-LeetCode25 两两交换链表中的节点-LeetCode24 ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8F%8D%E8%BD%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E9%93%BE%E8%A1%A8-leetcode206/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e反转一个单链表。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5-\u0026gt;NULL\n输出: 5-\u0026gt;4-\u0026gt;3-\u0026gt;2-\u0026gt;1-\u0026gt;NULL\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e进阶:\u003c/strong\u003e\n你可以迭代或递归地反转链表。你能否用两种方法解决这道题？\u003c/p\u003e\u003c/blockquote\u003e","title":"反转一个单链表-LeetCode206"},{"content":"题目描述 使用队列实现栈的下列操作： push(x) \u0026ndash; 元素 x 入栈 pop() \u0026ndash; 移除栈顶元素 top() \u0026ndash; 获取栈顶元素 empty() \u0026ndash; 返回栈是否为空 注意:\n你只能使用队列的基本操作\u0026ndash; 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。 你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。 你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。\n解题思路 使用两个队列\n将元素添加到第一个队列中。\n在获取元素时，将第一个队列中除了最后一个元素都添加到第二个队列中，剩下的这个就是要返回的元素。\n将两个队列进行交换，这样在添加元素时都能放到第一个队列中。\n使用一个变量来存储最后一个元素，这样在调用 top 方法时直接返回这个变量即可。\n使用一个队列\n添加元素时添加到队列中，然后将队列中的元素除了最后一个再重新放入一遍\n在获取元素和查看元素时都拿第一个即可\n代码实现 双队列实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class MyStack { Queue\u0026lt;Integer\u0026gt; input; Queue\u0026lt;Integer\u0026gt; output; int top; /** * 构造函数 */ public MyStack() { input = new LinkedList\u0026lt;Integer\u0026gt;(); output = new LinkedList\u0026lt;Integer\u0026gt;(); } /** * 添加元素，在第一个队列里面添加，并使用变量存储第一个元素 */ public void push(int x) { input.add(x); top = x; } /** * 查看并移除第一个元素 */ public int pop() { //将第一个队列里面的元素只留一个，其他都放到第二个队列中，并将 top 变量保存的值进行修改 while (input.size() \u0026gt; 1) { top = input.poll(); output.add(top); } //然后将第一个和第二个队列进行交换 Queue temp = input; input = output; output = temp; //返回刚刚剩下的一个元素，那就就是最后一个元素 return output.poll(); } /** * 查看最后一个元素，直接返回变量即可 */ public int top() { return top; } /** * 判断两个队列都不为空 */ public boolean empty() { return input.isEmpty() \u0026amp;\u0026amp; output.isEmpty(); } } 单队列实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class MyStack2 { Queue\u0026lt;Integer\u0026gt; queue; /** * Initialize your data structure here. */ public MyStack2() { queue = new LinkedList\u0026lt;Integer\u0026gt;(); } /** * Push element x onto stack. */ public void push(int x) { queue.add(x); int size = queue.size(); while (size \u0026gt; 1) { queue.add(queue.poll()); size--; } } /** * Removes the element on top of the stack and returns that element. */ public int pop() { return queue.poll(); } /** * Get the top element. */ public int top() { return queue.peek(); } /** * Returns whether the stack is empty. */ public boolean empty() { return queue.isEmpty(); } } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88-leetcode225/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e使用队列实现栈的下列操作：\npush(x) \u0026ndash; 元素 x 入栈\npop() \u0026ndash; 移除栈顶元素\ntop() \u0026ndash; 获取栈顶元素\nempty() \u0026ndash; 返回栈是否为空\n注意:\u003c/p\u003e\n\u003cp\u003e你只能使用队列的基本操作\u0026ndash; 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。\n你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。\n你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。\u003c/p\u003e\u003c/blockquote\u003e\n\u003c!-- more --\u003e\n\u003ch1 id=\"解题思路\"\u003e解题思路\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e使用两个队列\u003c/p\u003e\n\u003cp\u003e将元素添加到第一个队列中。\u003c/p\u003e\n\u003cp\u003e在获取元素时，将第一个队列中除了最后一个元素都添加到第二个队列中，剩下的这个就是要返回的元素。\u003c/p\u003e\n\u003cp\u003e将两个队列进行交换，这样在添加元素时都能放到第一个队列中。\u003c/p\u003e\n\u003cp\u003e使用一个变量来存储最后一个元素，这样在调用 top 方法时直接返回这个变量即可。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/%E7%94%A8%E5%8F%8C%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.png\" alt=\"用双队列实现栈\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e使用一个队列\u003c/p\u003e\n\u003cp\u003e添加元素时添加到队列中，然后将队列中的元素除了最后一个再重新放入一遍\u003c/p\u003e\n\u003cp\u003e在获取元素和查看元素时都拿第一个即可\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/%E7%94%A8%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.png\" alt=\"用一个队列实现栈\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e","title":"用队列实现栈-LeetCode225"},{"content":"题目描述 使用栈实现队列的下列操作：\npush(x) \u0026ndash; 将一个元素放入队列的尾部。 pop() \u0026ndash; 从队列首部移除元素。 peek() \u0026ndash; 返回队列首部的元素。 empty() \u0026ndash; 返回队列是否为空。 示例:\nMyQueue queue = new MyQueue();\nqueue.push(1); queue.push(2);\nqueue.peek(); // 返回 1 queue.pop(); // 返回 1 queue.empty(); // 返回 false 说明:\n你只能使用标准的栈操作 \u0026ndash; 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。 你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。 假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）\n解题思路 栈（先进后出）来实现队列（先进先出）。\n可以用两个栈来实现，第一个栈存储，当进行 peek 或 pop 操作时，将第一个栈内元素按照先进后出的原则拿出来放到第二个栈里面。这时第二个栈里面在取就是我们总的第一个元素。\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 class MyQueue { //初始化两个栈，用来实现队列 Stack\u0026lt;Integer\u0026gt; input; Stack\u0026lt;Integer\u0026gt; output; /** * 构造函数 */ public MyQueue() { input = new Stack\u0026lt;Integer\u0026gt;(); output = new Stack\u0026lt;Integer\u0026gt;(); } /** * 添加元素 * 向入栈中放 */ public void push(int x) { input.push(x); } /** * 获取并删除第一个元素 * 当出栈为空时，先将入栈中的元素添加到出栈中 * 然后返回出栈的第一个元素 */ public int pop() { if (output.isEmpty()) { exchange(); } return output.pop(); } /** * 查看第一个元素 */ public int peek() { if (output.isEmpty()) { exchange(); } return output.peek(); } /** * 交换，将入栈的全部放到出栈中 */ private void exchange() { while (!input.isEmpty()){ output.push(input.pop()); } } /** * 判断两个栈全不为空时，队列才不为空 */ public boolean empty() { return input.isEmpty() \u0026amp;\u0026amp; output.isEmpty(); } } 我们用了两个栈，在插入数据时放到其中一个栈里面。当获取数据时，队列需要获取第一个放的元素，所以需要调转顺序，所以再将入栈的数据从尾开始拿，放到出栈里面，那么出栈里面的顺序就是我们要的顺序了。\n","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97-leetcode232/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e使用栈实现队列的下列操作：\u003c/p\u003e\n\u003cp\u003epush(x) \u0026ndash; 将一个元素放入队列的尾部。\npop() \u0026ndash; 从队列首部移除元素。\npeek() \u0026ndash; 返回队列首部的元素。\nempty() \u0026ndash; 返回队列是否为空。\n示例:\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eMyQueue queue = new MyQueue();\u003c/p\u003e\n\u003cp\u003equeue.push(1);\nqueue.push(2);\u003cbr\u003e\nqueue.peek();  // 返回 1\nqueue.pop();   // 返回 1\nqueue.empty(); // 返回 false\n说明:\u003c/p\u003e\n\u003cp\u003e你只能使用标准的栈操作 \u0026ndash; 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。\n你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。\n假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）\u003c/p\u003e\u003c/blockquote\u003e\n\u003c!-- more --\u003e\n\u003ch1 id=\"解题思路\"\u003e解题思路\u003c/h1\u003e\n\u003cp\u003e栈（先进后出）来实现队列（先进先出）。\u003c/p\u003e\n\u003cp\u003e可以用两个栈来实现，第一个栈存储，当进行 peek 或 pop 操作时，将第一个栈内元素按照先进后出的原则拿出来放到第二个栈里面。这时第二个栈里面在取就是我们总的第一个元素。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.png\" alt=\"用栈实现队列\"\u003e\u003c/p\u003e","title":"用栈实现队列-LeetCode232"},{"content":"题目描述 给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。\n你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。\n示例:\n给定 1-\u0026gt;2-\u0026gt;3-\u0026gt;4, 你应该返回 2-\u0026gt;1-\u0026gt;4-\u0026gt;3. 可以看出，链表每两个一组交换了前后位置，然后再跟其他元素按照原有顺序连接。\n解题思路 迭代 两个为一组，那么就根据这一组前面的节点和后面的节点等分为了这样的结构：pre,first,second,next。\n每对一组进行修改，要将pre.next=second，first.next=next，second.next=first\n然后下一组的pre = first,fist=next\n在开始的时候，头结点没有前面的节点，所以需要临时构建一个节点。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public ListNode swapPairs(ListNode head) { ListNode fakeHead = new ListNode(-1); fakeHead.next = head; ListNode pre = fakeHead; ListNode curr = pre.next; while (curr != null \u0026amp;\u0026amp; curr.next != null) { ListNode temp = curr.next; ListNode next = temp.next; pre.next = temp; temp.next = curr; pre = curr; curr = next; } pre.next = curr; return fakeHead.next; } 递归 这个问题当然也可以使用递归来实现，递归时如果当前节点和下一个节点不为空则进行处理，即终止条件为两个节点都为空。\n然后递归调用第二个节点的下一个元素。向上返回的结果是反转后的头元素，也就是两个元素中的第二个元素。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 public ListNode swapPairs2(ListNode head) { if ((head == null) || (head.next == null)) { return head; } ListNode firstNode = head; ListNode secondNode = head.next; firstNode.next = swapPairs2(secondNode.next); secondNode.next = firstNode; return secondNode; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9-leetcode24/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e你不能只是单纯的改变节点内部的值\u003c/strong\u003e，而是需要实际的进行节点交换。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e给定 1-\u0026gt;2-\u0026gt;3-\u0026gt;4, 你应该返回 2-\u0026gt;1-\u0026gt;4-\u0026gt;3.\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003e可以看出，链表每两个一组交换了前后位置，然后再跟其他元素按照原有顺序连接。\u003c/p\u003e","title":"两两交换链表中的节点—LeetCode24"},{"content":"在脉脉上看到一篇文章，StringBulider 为什么线程不安全，然后想了一下，确实不知道。\n之前问string 相关问题，只了解了 string 不可变，stringbuffer 线程安全，stringbuilder 线程不安全。但却没有搞清楚为什么是不安全的，今天就去看了一下 stringbuilder 的源码，来了解一下原因。\n首先来测试一下多线程下的不安全问题：\n1 2 3 4 5 6 7 8 9 10 public static void main(String[] args) { StringBuilder stringBuilder = new StringBuilder(); for (int i = 0; i \u0026lt; 100000; i++) { new Thread(() -\u0026gt; stringBuilder.append(\u0026#34;a\u0026#34;)).start(); } System.out.println(stringBuilder.length()); } 这个方法最终的理想结果应该是 100000，但是当我们多运行几次，发现他的结果出错了！结果变成了99999或者更小的数值。有时候甚至还抛出了数组越界异常（概率极小）。\n代码分析 1 2 3 4 5 6 7 8 9 @Override public StringBuilder append(String str) { super.append(str); return this; } public int length() { return count; } 查看 stringbuilder 的 append 方法发现是调用了父类AbstractStringBuilder的 append 方法，那么继续进入父类的方法中进行查看\n1 2 3 4 5 6 7 8 9 10 11 char[] value; public AbstractStringBuilder append(String str) { if (str == null) return appendNull(); int len = str.length(); ensureCapacityInternal(count + len); str.getChars(0, len, value, count); count += len; return this; } 我们跟着代码的逻辑来分析一下：\n入参检查\n获取 append 的字符串长度并确保数组容量足够( ensureCapacityInternal(count + len) )\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 private void ensureCapacityInternal(int minimumCapacity) { // 如果 原来字符串长度 加上 新添加字符串长度 比 原来char数组长度 大，则需要进行扩容 if (minimumCapacity - value.length \u0026gt; 0) { value = Arrays.copyOf(value, newCapacity(minimumCapacity)); } } //扩容的容量大小，默认是原来字符串长度 2 倍+2 private int newCapacity(int minCapacity) { // overflow-conscious code int newCapacity = (value.length \u0026lt;\u0026lt; 1) + 2; if (newCapacity - minCapacity \u0026lt; 0) { newCapacity = minCapacity; } return (newCapacity \u0026lt;= 0 || MAX_ARRAY_SIZE - newCapacity \u0026lt; 0) ? hugeCapacity(minCapacity) : newCapacity; } public static char[] copyOf(char[] original, int newLength) { char[] copy = new char[newLength]; System.arraycopy(original, 0, copy, 0, Math.min(original.length, newLength)); return copy; } 复制字符串( str.getChars(0, len, value, count) )\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) { if (srcBegin \u0026lt; 0) { throw new StringIndexOutOfBoundsException(srcBegin); } if (srcEnd \u0026gt; value.length) { throw new StringIndexOutOfBoundsException(srcEnd); } if (srcBegin \u0026gt; srcEnd) { throw new StringIndexOutOfBoundsException(srcEnd - srcBegin); } System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin); } public static native void arraycopy(Object src, int srcPos, Object dest, int destPos, int length); 最终调用arraycopy方法，将appen 参数字符串，从 0 开始，到 len 长度，也就是全部内容，复制到strinbuilder 的 char[]中，从 count位置开始放。\n这样就完成了一次 stringbuilder 的 append 过程。\n错误分析 为什么长度会不对呢？\n有点经验的朋友们可能发现了在 append 方法中有一行代码是count+=len。而 count 和 len 都是 int 类型，他们在多线程下是不具备原子性的。而长度就是返回的 count 值，所以问题就出现在这里。\n那为什么会出现数组越界错误呢？\n首先我们要知道，不管是 string，stringbuilder，stringbuffer 都是使用的 char数组来保存字符串的。而 string 的 char数组变量被加了 final 修饰符进行修饰，所以它是不可变的。而stringbuilder，stringbuffer 集成的AbstractStringBuilder使用的 char数组没有加 final 修饰符。\n经过上面的分析，数组越界错误可能会出现在两个地方：\nArray.copy\n这个方法是当添加元素时，对原数组进行扩容，保证数组能盛下新数据。将旧数据复制到新长度的数组中。\nSystem.arraycopy\n将要添加的字符串复制到已经扩容完成的 stringbuilder中的char[]中。\n出现错误的地方：\n线程 1 进行扩容，完毕后切换到线程 2，线程 2 发现添加数据不需要进行扩容。然后切换到线程 1 进行添加数据，线程 1 操作完成。再次切换到线程 2，这时由于线程 1 已经添加数据了，再次添加数据时长度不够了，所以会报错。所以这个数组越界错误肯定是由system.arraycopy方法抛出的，在 array.copy 方法中不会抛出异常。\n为什么 StringBuffer 是线程安全的 看一下 stringbuffer 中的代码：\n1 2 3 4 5 public synchronized StringBuffer append(String str) { toStringCache = null; super.append(str); return this; } 从这里就可以看出为什么是线程安全的了，因为他加了锁，同一时间只能有一个线程进行访问。而它后面的代码也跟 stringbuilder 一样。只不过在入口添加了锁。\n","permalink":"https://www.liunaijie.top/coding/java/stringbuilder%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8/","summary":"\u003cp\u003e在脉脉上看到一篇文章，StringBulider 为什么线程不安全，然后想了一下，确实不知道。\u003c/p\u003e\n\u003cp\u003e之前问string 相关问题，只了解了 string 不可变，stringbuffer 线程安全，stringbuilder 线程不安全。但却没有搞清楚为什么是不安全的，今天就去看了一下 stringbuilder 的源码，来了解一下原因。\u003c/p\u003e\n\u003cp\u003e首先来测试一下多线程下的不安全问题：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eStringBuilder\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estringBuilder\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStringBuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e100000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eThread\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estringBuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"na\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estringBuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e这个方法最终的理想结果应该是 100000，但是当我们多运行几次，发现他的结果出错了！结果变成了99999或者更小的数值。有时候甚至还抛出了数组越界异常（概率极小）。\u003c/p\u003e","title":"StringBuilder为什么线程不安全?"},{"content":"题目描述 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n示例 1:\n输入: 123 输出: 321 示例 2:\n输入: -123 输出: -321 示例 3:\n输入: 120 输出: 21 注意:\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231, 231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n题目中给出了条件，我们只能存储32位有符号整数，如果溢出后则返回0，避免出现溢出错误\n解题思路 根据实例可以看出，反转后不会改变符号，我们按照数学方法，将入参x,每次对10取余得结果m，然后预设结果y,y=y*10+m，每次添加时都要判断是否有可能会溢出。\n我们以示例1为例，参数x=123，预设y=0。x%10=3，y\u0026lt;INTMAX/10，y=0*10+3。\n这一步结束后得到x=12,y=3，然后继续执行，直到结束。\n我们在对y溢出情况的判断是要先进行判断，因为y~n~=y~n-1~*10+m\u0026gt;INTMAX时，y~n-1~\u0026gt;INTMAX/10，我们不要在溢出后再进行判断，提前判断预防溢出发生错误。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public int reverse(int x) { int result = 0; while (x != 0) { int last = x % 10; x /= 10; if (result \u0026gt; Integer.MAX_VALUE / 10) { return 0; } if (result \u0026lt; Integer.MIN_VALUE / 10) { return 0; } result = result * 10 + last; } return result; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC-leetcode7/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e输入: 123\n输出: 321\n示例 2:\u003c/p\u003e\n\u003cp\u003e输入: -123\n输出: -321\n示例 3:\u003c/p\u003e\n\u003cp\u003e输入: 120\n输出: 21\n注意:\u003c/p\u003e\n\u003cp\u003e假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e题目中给出了条件，我们只能存储32位有符号整数，如果溢出后则返回0，避免出现溢出错误\u003c/p\u003e","title":"整数反转—LeetCode7"},{"content":"之前看过了HashMap,LinkedHashMap的源码，这次来看一下TreeMap的源码。\n从这个名字就能看出，TreeMap底层使用的是树来进行存储的。\n变量 1 2 3 4 5 6 7 8 9 //比较器，用于左右子树的判断。 //正常情况下，左子树为 1，父节点为 2，右子树为 3。如果比较器设置 3\u0026lt;1\u0026lt;2。则左子树为3，父节点为 1，右子树为 2。 private final Comparator\u0026lt;? super K\u0026gt; comparator; //根节点 private transient Entry\u0026lt;K,V\u0026gt; root; //容量 private transient int size = 0; //修改的次数，在迭代和序列化时用到 private transient int modCount = 0; 看一下 root 节点的数据结构:\n1 2 3 4 5 6 7 8 9 10 static final class Entry\u0026lt;K,V\u0026gt; implements Map.Entry\u0026lt;K,V\u0026gt; { K key; V value; Entry\u0026lt;K,V\u0026gt; left; Entry\u0026lt;K,V\u0026gt; right; Entry\u0026lt;K,V\u0026gt; parent; boolean color = BLACK; ... } 由于有一个color=BLACK属性，所以底层数据结构应该是红黑树\n构造器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // 无参构造器 public TreeMap() { comparator = null; } //传入比较器 public TreeMap(Comparator\u0026lt;? super K\u0026gt; comparator) { this.comparator = comparator; } //传入 map public TreeMap(Map\u0026lt;? extends K, ? extends V\u0026gt; m) { comparator = null; putAll(m); } //传入一个排序的 map public TreeMap(SortedMap\u0026lt;K, ? extends V\u0026gt; m) { comparator = m.comparator(); try { buildFromSorted(m.size(), m.entrySet().iterator(), null, null); } catch (java.io.IOException cannotHappen) { } catch (ClassNotFoundException cannotHappen) { } } get 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 public V get(Object key) { Entry\u0026lt;K,V\u0026gt; p = getEntry(key); return (p==null ? null : p.value); } final Entry\u0026lt;K,V\u0026gt; getEntry(Object key) { // Offload comparator-based version for sake of performance if (comparator != null) return getEntryUsingComparator(key); if (key == null) throw new NullPointerException(); @SuppressWarnings(\u0026#34;unchecked\u0026#34;) Comparable\u0026lt;? super K\u0026gt; k = (Comparable\u0026lt;? super K\u0026gt;) key; Entry\u0026lt;K,V\u0026gt; p = root; while (p != null) { int cmp = k.compareTo(p.key); if (cmp \u0026lt; 0) p = p.left; else if (cmp \u0026gt; 0) p = p.right; else return p; } return null; } final Entry\u0026lt;K,V\u0026gt; getEntryUsingComparator(Object key) { @SuppressWarnings(\u0026#34;unchecked\u0026#34;) K k = (K) key; Comparator\u0026lt;? super K\u0026gt; cpr = comparator; if (cpr != null) { Entry\u0026lt;K,V\u0026gt; p = root; while (p != null) { int cmp = cpr.compare(k, p.key); if (cmp \u0026lt; 0) p = p.left; else if (cmp \u0026gt; 0) p = p.right; else return p; } } return null; } 在上面代码中的第八行进行了判断comparator也就是自定义的比较器是否为空，这两种情况下查找的比较器和 key 有所不同。然后再进行二分查找。\nput 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 public V put(K key, V value) { Entry\u0026lt;K,V\u0026gt; t = root; if (t == null) { //当 map 为空时 compare(key, key); // type (and possibly null) check root = new Entry\u0026lt;\u0026gt;(key, value, null); size = 1; modCount++; return null; } int cmp; Entry\u0026lt;K,V\u0026gt; parent; // split comparator and comparable paths Comparator\u0026lt;? super K\u0026gt; cpr = comparator; if (cpr != null) { //自定义比较器 do { //对树进行插入，如果key 重复则更新 value parent = t; cmp = cpr.compare(key, t.key); if (cmp \u0026lt; 0) t = t.left; else if (cmp \u0026gt; 0) t = t.right; else return t.setValue(value); } while (t != null); } else { //无自定义比较器 if (key == null) throw new NullPointerException(); @SuppressWarnings(\u0026#34;unchecked\u0026#34;) Comparable\u0026lt;? super K\u0026gt; k = (Comparable\u0026lt;? super K\u0026gt;) key; do { parent = t; cmp = k.compareTo(t.key); if (cmp \u0026lt; 0) t = t.left; else if (cmp \u0026gt; 0) t = t.right; else return t.setValue(value); } while (t != null); } Entry\u0026lt;K,V\u0026gt; e = new Entry\u0026lt;\u0026gt;(key, value, parent); if (cmp \u0026lt; 0) parent.left = e; else parent.right = e; //这个方法里面是对红黑树的重排 fixAfterInsertion(e); size++; modCount++; return null; } 首先进行了 map 为空时的判断。然后对比较器为空和非空时的逻辑。最后调用了对红黑树重排的方法。\n","permalink":"https://www.liunaijie.top/coding/java/treemap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/","summary":"\u003cp\u003e之前看过了\u003ccode\u003eHashMap\u003c/code\u003e,\u003ccode\u003eLinkedHashMap\u003c/code\u003e的源码，这次来看一下\u003ccode\u003eTreeMap\u003c/code\u003e的源码。\u003c/p\u003e\n\u003cp\u003e从这个名字就能看出，\u003ccode\u003eTreeMap\u003c/code\u003e底层使用的是树来进行存储的。\u003c/p\u003e\n\u003ch1 id=\"变量\"\u003e变量\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//比较器，用于左右子树的判断。\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e//正常情况下，左子树为 1，父节点为 2，右子树为 3。如果比较器设置 3\u0026lt;1\u0026lt;2。则左子树为3，父节点为 1，右子树为 2。\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eComparator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003esuper\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecomparator\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e//根节点\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003etransient\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e//容量\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003etransient\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e//修改的次数，在迭代和序列化时用到\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003etransient\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emodCount\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e看一下 root 节点的数据结构:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eimplements\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMap\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecolor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eBLACK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e由于有一个\u003ccode\u003ecolor=BLACK\u003c/code\u003e属性，所以底层数据结构应该是\u003cstrong\u003e红黑树\u003c/strong\u003e\u003c/p\u003e","title":"TreeMap源码学习"},{"content":"题目描述 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\n示例 1:\n输入: 121 输出: true 示例 2:\n输入: -121 输出: false 解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。 示例 3:\n输入: 10 输出: false 解释: 从右向左读, 为 01 。因此它不是一个回文数。 进阶:\n你能不将整数转为字符串来解决这个问题吗？\n从示例2中可以看出，负数不是回文数，可以先对此进行判断。\n而提示中有一个提示，能否不使用字符串来解决这个问题，那么使用字符串肯定是可以解决这个问题的。\n解题思路 转换字符串 我们可以直接将数字转换为字符串，然后两个字符串进行匹配，看反转后的字符串是否与入参相同\n代码如下：\n1 2 3 4 5 6 7 public boolean isPalindromeString(int x) { if(x\u0026lt;0){ return false; } String reverseStr = new StringBuilder(x).reverse().toString(); return reverseStr.equals(x + \u0026#34;\u0026#34;); } 数学解法 对比一个数是不是回文数，可以前面和后面各取一位，然后对比，如果不相同则返回false。如果相同，则继续前后各取一位继续进行比较。\n举一个例子：10201：\n第一步，拿到开始和结尾是1和1，相同则继续对比第二位0和0然后只剩一位，所以是回文数。\n再来一个反例：12345：\n第一步，拿到开始和结尾分别是1和5。不一致直接返回false\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public boolean isPalindrome1(int x) { if (x \u0026lt; 0) { return false; } //先计算它的位数 int count = 1; while (x / count \u0026gt;= 10) { count *= 10; } while (x \u0026gt; 0) { //头部的值 int left = x / count; //尾部的值 int right = x % 10; //判断是否相等 if (left != right) { return false; } //将比较过的前后位置去掉 // 10201为例， 先对1000取余，得到201，然后除以10，得到20 //以这个20为例，再次计算是 20/100=0 20%100=0 相等，不会有影响 x = (x % count) / 10; //因为这里每次都去掉了前后两位，所以是除以100 count /= 100; } return true; } 进阶解法 一个回文数，我们只需要比较前一半的数字是否与后一半的数字相等即可。\n参数x，每次先对10取余，得到余数y。\n定义一个数值m表示从后向前的数字，得到余数后进行添加m=m*10+y。\n对x要自除10x/=10\n当x\u0026lt;m时，就说明已经计算了一半或者超过一半了。\n当x是偶数的时候，计算到一半时m=x。当x是奇数时，最中间的数字在m的最低位上，可以比较m/10是否与x相等\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public boolean isPalindrome(int x) { if (x \u0026lt; 0) { return false; } //当x不为0时，余数出现了0，比如 10，这种情况肯定不是回文数 if (x % 10 == 0 \u0026amp;\u0026amp; x != 0) { return false; } int m = 0; while (x \u0026gt; m) { m = m * 10 + x % 10; x /= 10; } //有两种情况，偶数时m=x,奇数时m/10=x return x == m || x == m / 10; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%9B%9E%E6%96%87%E6%95%B0-leetcode9/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e输入: 121\n输出: true\n示例 2:\u003c/p\u003e\n\u003cp\u003e输入: -121\n输出: false\n解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n示例 3:\u003c/p\u003e\n\u003cp\u003e输入: 10\n输出: false\n解释: 从右向左读, 为 01 。因此它不是一个回文数。\n进阶:\u003c/p\u003e\n\u003cp\u003e你能不将整数转为字符串来解决这个问题吗？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e从示例2中可以看出，负数不是回文数，可以先对此进行判断。\u003c/p\u003e\n\u003cp\u003e而提示中有一个提示，能否不使用字符串来解决这个问题，那么使用字符串肯定是可以解决这个问题的。\u003c/p\u003e","title":"回文数—LeetCode9"},{"content":"题目描述 翻转一棵二叉树。\n示例：\n输入：\n4 / \\ 2 7 / \\ / \\ 1 3 6 9 输出：\n4 / \\ 7 2 / \\ / \\ 9 6 3 1 代码实现 1 2 3 4 5 6 7 8 9 10 public TreeNode invertTree(TreeNode root) { if (root == null) { return null; } TreeNode right = invertTree(root.right); TreeNode left = invertTree(root.left); root.left = right; root.right = left; return root; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91-leetcode226/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e翻转一棵二叉树。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e输入：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e输出：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"代码实现\"\u003e代码实现\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003einvertTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eright\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einvertTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eleft\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einvertTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eleft\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eright\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"翻转二叉树—LeetCode226"},{"content":"题目描述 给定二叉搜索树的根结点 root，返回 L 和 R（含）之间的所有结点的值的和。\n二叉搜索树保证具有唯一的值。\n示例 1：\n输入：root = [10,5,15,3,7,null,18], L = 7, R = 15 输出：32 示例 2：\n输入：root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10 输出：23\n提示：\n树中的结点数量最多为 10000 个。 最终的答案保证小于 2^31。\n解题思路 这个题就是对二叉搜索树的遍历，找到两个节点，并且对经过的节点进行累加。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public int rangeSumBST(TreeNode root, int L, int R) { int sum = 0; help(root, L, R, sum); return sum; } private void help(TreeNode node, int L, int R, int sum) { if (node == null) { return; } if (L \u0026lt;= node.val \u0026amp;\u0026amp; node.val \u0026lt;= R) { sum += node.val; } if (L \u0026lt; node.val) { help(node.left, L, R, sum); } if (R \u0026gt; node.val) { help(node.right, L, R, sum); } } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E8%8C%83%E5%9B%B4%E5%92%8C-leetcode938/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定二叉搜索树的根结点 root，返回 L 和 R（含）之间的所有结点的值的和。\u003c/p\u003e\n\u003cp\u003e二叉搜索树保证具有唯一的值。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cp\u003e输入：root = [10,5,15,3,7,null,18], L = 7, R = 15\n输出：32\n示例 2：\u003c/p\u003e\n\u003cp\u003e输入：root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10\n输出：23\u003c/p\u003e\n\u003cp\u003e提示：\u003c/p\u003e\n\u003cp\u003e树中的结点数量最多为 10000 个。\n最终的答案保证小于 2^31。\u003c/p\u003e\u003c/blockquote\u003e","title":"二叉搜索树的范围和-LeetCode938"},{"content":"题目描述 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？\n请你找出所有满足条件且不重复的三元组。\n注意：答案中不可以包含重复的三元组。\n示例：\n给定数组 nums = [-1, 0, 1, 2, -1, -4]，\n满足要求的三元组集合为： [ [-1, 0, 1], [-1, -1, 2] ]\n这个题目中有一个条件，答案中不可以包含重复的三元组，即给定的数组中会有重复值，所以答案可能会存在重复答案，当答案存在时，不在添加到答案中\n解题思路 暴力 根据之前做过的两数之和，这次的target变成了固定值0。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public static List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; threeSum(int[] nums) { if (nums == null || nums.length \u0026lt;= 2) { return Collections.emptyList(); } Set\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new LinkedHashSet\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; nums.length; i++) { for (int j = i + 1; j \u0026lt; nums.length; j++) { for (int k = j + 1; k \u0026lt; nums.length; k++) { if (nums[i] + nums[j] + nums[k] == 0) { List\u0026lt;Integer\u0026gt; value = Arrays.asList(nums[i], nums[j], nums[k]); value.sort(Comparator.naturalOrder()); result.add(value); } } } } return new ArrayList\u0026lt;\u0026gt;(result); } 在第11行中，在添加前先进行了排序，因为存在重复值，并且使用了set进行存储，就是为了去重，如果不排序直接添加，不同顺序相同内容在set中会被认为是不同内容，会添加进去，而我们不需要添加进去，所以先排序。并且这里只排序了长度为3的内容，比在开始对num数组排序的效率要高。\n这个方法在LeetCode上面跑回超出时间限制。我们来分析一下它的复杂度\n时间复杂度\n排序，快排的复杂度为O(nlogn)\n然后用到了三重循环，这个复杂度近似于O(n^3^)\n空间复杂度\n由于这个问题本身就是要求返回集合类，所以肯定要占用额外的空间，使用了set来进行存储，所以空间复杂度为O(n)\n哈希表 在两数相加中，我们还有一种解法，用到了哈希表，在这个题目中也可以用到\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; threeSumHash(int[] nums) { if (nums == null || nums.length \u0026lt;= 2) { return Collections.emptyList(); } Set\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new HashSet\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; nums.length; i++) { int target = -nums[i]; Map\u0026lt;Integer, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); for (int j = i + 1; j \u0026lt; nums.length; j++) { int y = target - nums[j]; if (map.containsKey(y)) { List\u0026lt;Integer\u0026gt; list = Arrays.asList(nums[i], nums[j], y); list.sort(Comparator.naturalOrder()); result.add(list); } else { map.put(nums[j], j); } } } return new ArrayList\u0026lt;\u0026gt;(result); } 复杂度分析：\n时间复杂度：\n两次遍历，时间复杂度为O(n^2^)。在第二层循环中用到了排序，由于只有三个元素的排序，所以每次可以忽略\n空间复杂度\n使用了map作为额外的存储，所以空间复杂度为O(1)\n双指针法 这个方法首先需要排序，O(nlogn)\n固定最小的数字指针k，双指针i,j分别设置在数组左边和右边，通过两个指针交替向中间移动，记录对于固定k是的所有满足条件的结果，然后再向右移动k。\n当nums[k]\u0026gt;0时不再需要向下查找，因为后面三个正数相加肯定不为0。 当nums[k]==nums[k-1]时，跳过这个元素，因为在nums[k-1]中已经将结果添加到结果集中了 i,j分别在数组的两端，当i\u0026lt;j时，计算s=nums[k]+nums[i]+nums[j] 当s\u0026lt;0时，结果小了，需要添加一个大数值，所以左边的i向右移动，i++，同时要跳过重复的值 当s\u0026gt;0时，结果大了，需要添加一个小数值，所以右边的j向左移动,j--，同时跳过重复的值。 当s=0时，找到结果，将k.i,j添加到结果中，然后继续操作i,j进行查找 代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; threeSumDouble(int[] nums) { Arrays.sort(nums); List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); for (int k = 0; k \u0026lt; nums.length; k++) { if (nums[k] \u0026gt; 0) { break; } if (k \u0026gt; 0 \u0026amp;\u0026amp; nums[k] == nums[k - 1]) { continue; } int i = k + 1, j = nums.length - 1; while (i \u0026lt; j) { int sum = nums[k] + nums[i] + nums[j]; if (sum \u0026lt; 0) { while (i \u0026lt; j \u0026amp;\u0026amp; nums[i] == nums[++i]) ; } else if (sum \u0026gt; 0) { while (i \u0026lt; j \u0026amp;\u0026amp; nums[j] == nums[--j]) ; } else { result.add(new ArrayList\u0026lt;\u0026gt;(Arrays.asList(nums[k], nums[i], nums[j]))); while (i \u0026lt; j \u0026amp;\u0026amp; nums[i] == nums[++i]) ; while (i \u0026lt; j \u0026amp;\u0026amp; nums[j] == nums[--j]) ; } } } return result; } 复杂度分析：\n时间复杂度\n排序：O(nlogn)\n双重循环：O(n^2^)\n空间复杂度\n没有用到额外的空间，所以空间复杂度为O(1)\n相关题目 两数之和 ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C-leetcode15/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？\u003c/p\u003e\n\u003cp\u003e请你找出所有满足条件且不重复的三元组。\u003c/p\u003e\n\u003cp\u003e注意：\u003cstrong\u003e答案中不可以包含重复的三元组\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e示例：\u003c/p\u003e\n\u003cp\u003e给定数组 nums = [-1, 0, 1, 2, -1, -4]，\u003c/p\u003e\n\u003cp\u003e满足要求的三元组集合为：\n[\n[-1, 0, 1],\n[-1, -1, 2]\n]\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e这个题目中有一个条件，答案中不可以包含重复的三元组，即给定的数组中会有重复值，所以答案可能会存在重复答案，当答案存在时，不在添加到答案中\u003c/p\u003e","title":"三数之和—LeetCode15"},{"content":"布隆过滤器 一个很长的二进制向量和一个映射函数\n布隆过滤器可以用于检索一个元素是否在一个集合中\n它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。\n先来看这张图：\n步骤一：对参数 A经过映射函数得到一个二进制向量，进行标记。再对参数B进行映射，这时他们两个存在相同的向量位置（类似于哈希冲突）。\n步骤二：检查参数C是否在过滤器中，经过映射函数得到 C 的向量，去过滤器中查看，得到结果 C 不在过滤器中，并且是肯定不在。\n步骤三：检查参数 D是否在过滤器中，经过映射函数得到 D 的向量，发现 D 的向量已经存在于过滤器中，但之前并没有插入 D 这个参数，所以从这里可以看出布隆过滤器在判断参数在过滤器中有一定的误识别率，但是在判断参数不在过滤器中没有问题。\n步骤四：删除参数B，从图中也可以很明显的看出，A,B 存在交集，那么删除 B 的时候怎么删除。这就是删除困难。\n","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/","summary":"\u003ch1 id=\"布隆过滤器\"\u003e布隆过滤器\u003c/h1\u003e\n\u003cp\u003e一个很长的二进制向量和一个映射函数\u003c/p\u003e\n\u003cp\u003e布隆过滤器可以用于检索一个元素是否在一个集合中\u003c/p\u003e\n\u003cp\u003e它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。\u003c/p\u003e\n\u003cp\u003e先来看这张图：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8.png\" alt=\"布隆过滤器\"\u003e\u003c/p\u003e\n\u003cp\u003e步骤一：对参数 \u003ccode\u003eA\u003c/code\u003e经过映射函数得到一个二进制向量，进行标记。再对参数\u003ccode\u003eB\u003c/code\u003e进行映射，这时他们两个存在相同的向量位置（类似于哈希冲突）。\u003c/p\u003e\n\u003cp\u003e步骤二：检查参数\u003ccode\u003eC\u003c/code\u003e是否在过滤器中，经过映射函数得到 C 的向量，去过滤器中查看，得到结果 C 不在过滤器中，并且是肯定不在。\u003c/p\u003e\n\u003cp\u003e步骤三：检查参数 \u003ccode\u003eD\u003c/code\u003e是否在过滤器中，经过映射函数得到 D 的向量，发现 D 的向量已经存在于过滤器中，但之前并没有插入 D 这个参数，所以从这里可以看出布隆过滤器在判断参数在过滤器中有一定的误识别率，但是在判断参数不在过滤器中没有问题。\u003c/p\u003e\n\u003cp\u003e步骤四：删除参数\u003ccode\u003eB\u003c/code\u003e，从图中也可以很明显的看出，A,B 存在交集，那么删除 B 的时候怎么删除。这就是删除困难。\u003c/p\u003e","title":"布隆过滤器"},{"content":"题目 给定一个链表, 再给定起止位置, 要求将起止位置之间的链表进行反转, 其他部分不变\n解答 先移动到开始位置前一个位置 此节点的next节点需要修改为反转后的头节点 反转给定位置的链表 将两部分的链表相连 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public Node reversePart(Node head, int from, int to) { Node startNode = head; Node startNodePre = null; for (int i = 0; i \u0026lt; from - 1; i++) { startNodePre = startNode; startNode = startNode.next; } Node cur = startNode; Node pre = null; for (int i = 0; i \u0026lt;= (to - from); i++) { Node next = cur.next; cur.next = pre; pre = cur; cur = next; } Node headRes = startNodePre == null ? pre : head; if (startNodePre != null) { startNodePre.next = pre; } startNode.next = cur; return headRes; } ","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/%E5%8F%8D%E8%BD%AC%E9%83%A8%E5%88%86%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/","summary":"\u003ch1 id=\"题目\"\u003e题目\u003c/h1\u003e\n\u003cp\u003e给定一个链表, 再给定起止位置, 要求将起止位置之间的链表进行反转, 其他部分不变\u003c/p\u003e\n\u003ch1 id=\"解答\"\u003e解答\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e先移动到开始位置前一个位置 此节点的next节点需要修改为反转后的头节点\u003c/li\u003e\n\u003cli\u003e反转给定位置的链表\u003c/li\u003e\n\u003cli\u003e将两部分的链表相连\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ereversePart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estartNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estartNodePre\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estartNodePre\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estartNode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estartNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estartNode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estartNode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eheadRes\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estartNodePre\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estartNodePre\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estartNodePre\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estartNode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eheadRes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"反转部分单向链表"},{"content":"链表 与数组一样也是一种线性数据结构\n查找的速度：O(n)，要查找一个元素需要从头结点进行遍历\n插入的速度：O(1)，删除的速度：O(1)\n删除和插入的情况多，或者不知道元素的数量时应该要考虑使用链表的数据结构。\n单向链表\n每个结点有一个next属性，指向下一个节点\n双向链表\n每个结点除了有next属性指向下一个节点外，还有一个pre属性指向上一个节点\n环\n当最后一个元素的 next 结点指向第一个结点，就构成了一个环。\n习题 反转一个单链表\nK个一组反转链表\n用单链表简单实现LRU算法\n两数相加\n","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8/","summary":"\u003ch1 id=\"链表\"\u003e链表\u003c/h1\u003e\n\u003cp\u003e与数组一样也是一种线性数据结构\u003c/p\u003e\n\u003cp\u003e查找的速度：O(n)，要查找一个元素需要从头结点进行遍历\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/%E9%93%BE%E8%A1%A8.png\" alt=\"链表\"\u003e\u003c/p\u003e\n\u003cp\u003e插入的速度：O(1)，删除的速度：O(1)\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/%E9%93%BE%E8%A1%A8%E6%96%B0%E5%A2%9E%E5%92%8C%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e删除和插入的情况多，或者不知道元素的数量时应该要考虑使用链表的数据结构。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e单向链表\u003c/p\u003e\n\u003cp\u003e每个结点有一个\u003ccode\u003enext\u003c/code\u003e属性，指向下一个节点\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e双向链表\u003c/p\u003e\n\u003cp\u003e每个结点除了有\u003ccode\u003enext\u003c/code\u003e属性指向下一个节点外，还有一个\u003ccode\u003epre\u003c/code\u003e属性指向上一个节点\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e环\u003c/p\u003e\n\u003cp\u003e当最后一个元素的 next 结点指向第一个结点，就构成了一个环。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"习题\"\u003e习题\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://www.liunaijie.top/2019/11/24/LeetCode/%E5%8F%8D%E8%BD%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E9%93%BE%E8%A1%A8-LeetCode206/\"\u003e反转一个单链表\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://www.liunaijie.top/2019/11/27/LeetCode/K%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8-LeetCode25/\"\u003eK个一组反转链表\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://www.liunaijie.top/2020/02/26/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%94%A8%E5%8D%95%E9%93%BE%E8%A1%A8%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0LRU%E7%AE%97%E6%B3%95\"\u003e用单链表简单实现LRU算法\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://www.liunaijie.top/2019/08/20/LeetCode/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0-LeetCode2/\"\u003e两数相加\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"链表"},{"content":"题目 假设链表中每一个节点的值都在0~9之间, 那么链表整体就可以代表一个整数\n例如: 9→3→7, 可以代表整数937\n给定两个这种链表的头节点, 请生成代表两个整数相加值的结果链表.\n例如: 链表1为9→3→7. 链表2为6→3. 最终生成的结果链表为1→0→0→0\n题解 有两种方式\n借助栈 将链表反转后再进行相加 借助栈 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public Node addLists1(Node head1, Node head2) { Stack\u0026lt;Integer\u0026gt; s1 = new Stack\u0026lt;\u0026gt;(); Stack\u0026lt;Integer\u0026gt; s2 = new Stack\u0026lt;\u0026gt;(); while (head1 != null) { s1.push(head1.value); head1 = head1.next; } while (head2 != null) { s2.push(head2.value); head2 = head2.next; } Node node = null; Node pre = null; int ca = 0; while (!s1.isEmpty() || !s2.isEmpty()) { int n1 = s1.isEmpty() ? 0 : s1.pop(); int n2 = s2.isEmpty() ? 0 : s2.pop(); int n = n1 + n2 + ca; ca = n / 10; pre = node; node = new Node(n % 10); node.next = pre; } if (ca == 1) { pre = node; node = new Node(1); node.next = pre; } return node; } 反转链表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public Node addLists2(Node head1, Node head2) { head1 = reverseList(head1); head2 = reverseList(head2); Node c1 = head1, c2 = head2; Node node = null, pre = null; int ca = 0; while (c1 != null || c2 != null) { int n1 = c1 != null ? c1.value : 0; int n2 = c2 != null ? c2.value : 0; int n = n1 + n2 + ca; ca = n / 10; pre = node; node = new Node(n % 10); node.next = pre; c1 = c1 != null ? c1.next : null; c2 = c2 != null ? c2.next : null; } if (ca == 1) { pre = node; node = new Node(1); node.next = pre; } // 将head1, head2再反转回去 return node; } private Node reverseList(Node head) { Node pre = null; while (head != null) { Node next = head.next; head.next = pre; pre = head; head = next; } return pre; } 相关题目 两数相加\n","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/%E4%B8%A4%E4%B8%AA%E5%8D%95%E9%93%BE%E8%A1%A8%E7%94%9F%E6%88%90%E7%9B%B8%E5%8A%A0%E9%93%BE%E8%A1%A8/","summary":"\u003ch1 id=\"题目\"\u003e题目\u003c/h1\u003e\n\u003cp\u003e假设链表中每一个节点的值都在0~9之间, 那么链表整体就可以代表一个整数\u003c/p\u003e\n\u003cp\u003e例如: 9→3→7, 可以代表整数937\u003c/p\u003e\n\u003cp\u003e给定两个这种链表的头节点, 请生成代表两个整数相加值的结果链表.\u003c/p\u003e\n\u003cp\u003e例如: 链表1为9→3→7. 链表2为6→3. 最终生成的结果链表为1→0→0→0\u003c/p\u003e\n\u003ch1 id=\"题解\"\u003e题解\u003c/h1\u003e\n\u003cp\u003e有两种方式\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e借助栈\u003c/li\u003e\n\u003cli\u003e将链表反转后再进行相加\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"借助栈\"\u003e借助栈\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eaddLists1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003es1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003es2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehead1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003es1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehead1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ehead1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehead2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003es2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehead2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ehead2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eca\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003es1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003es2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003es1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003es1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003es2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003es2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eca\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eca\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e%\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eca\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"反转链表\"\u003e反转链表\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eaddLists2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ehead1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ereverseList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehead1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ehead2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ereverseList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehead2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ec1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ec2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eca\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ec2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ec1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ec1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ec2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ec2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eca\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eca\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e%\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ec1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ec1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ec1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ec2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ec2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ec2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eca\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 将head1, head2再反转回去\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ereverseList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"相关题目\"\u003e相关题目\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0.md\"\u003e两数相加\u003c/a\u003e\u003c/p\u003e","title":"两个单链表生成相加链表"},{"content":"题目 回文结构是指 从中间节点的两边对称. 如 1→2-3→2→1.\n给定一个链表, 判断链表是否为回文结构\n解答 先使用双指针, 将链表从中间节点分为两部分.\n将右边链表插入到栈中.\n从链表头部, 即左边链表的头部开始遍历. 如果与栈顶元素不一致, 则不是回文结构\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public boolean isPalindrome(Node head) { if (head == null || head.next == null) { return true; } // 找到右边部分的开始节点 Node temp = head, right = head.next; while (temp.next != null \u0026amp;\u0026amp; temp.next.next != null) { temp = temp.next.next; right = right.next; } // 将右边部分写入栈中 Stack\u0026lt;Node\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); while (right != null) { stack.push(right); right = right.next; } // 对比左边部分与右边部分 while (!stack.isEmpty()) { if (head.value != stack.pop().value) { return false; } head = head.next; } return true; } ","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E4%B8%BA%E5%9B%9E%E6%96%87%E7%BB%93%E6%9E%84/","summary":"\u003ch1 id=\"题目\"\u003e题目\u003c/h1\u003e\n\u003cp\u003e回文结构是指 从中间节点的两边对称. 如 1→2-3→2→1.\u003c/p\u003e\n\u003cp\u003e给定一个链表, 判断链表是否为回文结构\u003c/p\u003e\n\u003ch1 id=\"解答\"\u003e解答\u003c/h1\u003e\n\u003cp\u003e先使用双指针, 将链表从中间节点分为两部分.\u003c/p\u003e\n\u003cp\u003e将右边链表插入到栈中.\u003c/p\u003e\n\u003cp\u003e从链表头部, 即左边链表的头部开始遍历. 如果与栈顶元素不一致, 则不是回文结构\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eisPalindrome\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e||\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 找到右边部分的开始节点\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eright\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eright\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 将右边部分写入栈中\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eright\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eright\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 对比左边部分与右边部分\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"判断一个链表是否为回文结构"},{"content":"题目： 实现一个特殊的栈，在实现栈的基本功能的基础上，再实现返回栈内最小元素的操作\n要求： pop, push, getMin操作的时间复杂度都是O(1) 设计的栈类型可以使用现成的栈结构 解答： 使用辅助栈 使用两个栈，一个栈完成基础的操作，这样pop，push的时间复杂度都是O(1)。然后使用辅助栈完成getMin的功能。\n辅助栈内的存储也有两种方式：\n辅助栈内元素的数量与基础栈内元素数量一致，对应位置上存储当前时刻的最小值。 辅助栈内的元素数量少于基础栈内元素数量，如果对应位置上的最小值已存在则不进行存储。 实现1：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 public class GetMin1 { private Stack\u0026lt;Integer\u0026gt; stackData; private Stack\u0026lt;Integer\u0026gt; stackMin; private GetMin1() { stackData = new Stack\u0026lt;Integer\u0026gt;(); stackMin = new Stack\u0026lt;Integer\u0026gt;(); } public void push(int num) { if (this.stackMin.isEmpty()) { // 如果最小栈为空，直接放 this.stackMin.push(num); } else if (num \u0026lt; this.getMin()) { // 如果值小于现在的最小值，那么插入值就是当前位置的最小值，将插入值写入到最小栈中 this.stackMin.push(num); } else { // 否则当前位置的最小值就是最小栈的第一个元素，重新写入一次 int min = this.stackMin.peek(); this.stackMin.push(min); } this.stackData.push(num); } public int pop() { if (this.stackData.isEmpty()) { throw new RuntimeException(\u0026#34;empty stack!\u0026#34;); } this.stackMin.pop(); return this.stackData.pop(); } public int getMin() { if (this.stackMin.isEmpty()) { throw new RuntimeException(\u0026#34;empty stack!\u0026#34;); } return this.stackMin.peek(); } } 实现2:\n","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%9C%89getmin%E5%8A%9F%E8%83%BD%E7%9A%84%E6%A0%88/","summary":"\u003ch1 id=\"题目\"\u003e题目：\u003c/h1\u003e\n\u003cp\u003e实现一个特殊的栈，在实现栈的基本功能的基础上，再实现返回栈内最小元素的操作\u003c/p\u003e\n\u003ch1 id=\"要求\"\u003e要求：\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003epop, push, getMin操作的时间复杂度都是O(1)\u003c/li\u003e\n\u003cli\u003e设计的栈类型可以使用现成的栈结构\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"解答\"\u003e解答：\u003c/h1\u003e\n\u003ch2 id=\"使用辅助栈\"\u003e使用辅助栈\u003c/h2\u003e\n\u003cp\u003e使用两个栈，一个栈完成基础的操作，这样pop，push的时间复杂度都是O(1)。然后使用辅助栈完成getMin的功能。\u003c/p\u003e\n\u003cp\u003e辅助栈内的存储也有两种方式：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e辅助栈内元素的数量与基础栈内元素数量一致，对应位置上存储当前时刻的最小值。\u003c/li\u003e\n\u003cli\u003e辅助栈内的元素数量少于基础栈内元素数量，如果对应位置上的最小值已存在则不进行存储。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e实现1：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eGetMin1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estackData\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estackMin\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eGetMin1\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estackData\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estackMin\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estackMin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 如果最小栈为空，直接放\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estackMin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enum\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetMin\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 如果值小于现在的最小值，那么插入值就是当前位置的最小值，将插入值写入到最小栈中\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estackMin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 否则当前位置的最小值就是最小栈的第一个元素，重新写入一次\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estackMin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epeek\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estackMin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estackData\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estackData\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ethrow\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eRuntimeException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;empty stack!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estackMin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estackData\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetMin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estackMin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ethrow\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eRuntimeException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;empty stack!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estackMin\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epeek\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e实现2:\u003c/p\u003e","title":"设计一个有getMin功能的栈"},{"content":"数组 定义 它是一种线性数据结构，在内存里是连续的存储区域。在声明数组时需要声明他的初始容量。\n查找的速度：O(1)，新增的速度：O(n)，删除的速度：O(n)\n查找时根据内存地址就可以直接找到对应的数据，而向中间插入和删除时需要将后面的元素挪动位置，所以速度比较慢，为 O(n)\n习题 高度检查器 三角形最小路径和 反转图像 只出现一次的数字 ","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E7%BB%84/","summary":"\u003ch1 id=\"数组\"\u003e数组\u003c/h1\u003e\n\u003ch2 id=\"定义\"\u003e定义\u003c/h2\u003e\n\u003cp\u003e它是一种线性数据结构，在内存里是连续的存储区域。在声明数组时需要声明他的初始容量。\u003c/p\u003e\n\u003cp\u003e查找的速度：O(1)，新增的速度：O(n)，删除的速度：O(n)\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/%E6%95%B0%E7%BB%84.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e查找时根据内存地址就可以直接找到对应的数据，而向中间插入和删除时需要将后面的元素挪动位置，所以速度比较慢，为 O(n)\u003c/p\u003e\n\u003ch2 id=\"习题\"\u003e习题\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.liunaijie.top/2019/06/18/LeetCode/%E9%AB%98%E5%BA%A6%E6%A3%80%E6%9F%A5%E5%99%A8%E2%80%94LeetCode1051/\"\u003e高度检查器\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.liunaijie.top/2019/06/16/LeetCode/%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C%E2%80%94LeetCode120/\"\u003e三角形最小路径和\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.liunaijie.top/2019/06/10/LeetCode/%E5%8F%8D%E8%BD%AC%E5%9B%BE%E5%83%8F%E2%80%94LeetCode832/\"\u003e反转图像\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.liunaijie.top/2019/04/11/LeetCode/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97--LeetCode136/\"\u003e只出现一次的数字\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"数组"},{"content":"最近在看极客时间覃超的《算法面试通关 40 讲》，也一起看了一些数据结构，正好在这里进行一下整理。\n主要分为数据结构和算法两大章节，每个章节里面都会先结合自己的理解对它的定义进行一下解释，然后会拿出例题来进行实战。\n数据结构 数组 链表 队列 先入先出（first in first out FIFO）\n习题：用栈实现队列\n普通队列 优先队列 堆栈 后入先出(last in first out LIFO)\n习题：用队列实现栈\n树 链表是一种特殊的树，当每个链表节点的链表变成多个时就变成了树\n二叉搜索树（binary search tree BST） 性质：\n左子树上所有节点的值均小于它的根节点的值 右子树上所有节点的值均大于它的根节点的值； 左，右子树也分别满足以上性质 AVL,红黑树学习\n红黑树 手写红黑树的简单实现\nB 树 B+树 MySQL 的 Innodb 中使用的索引就是采用的 B+树的数据结构进行存储的。\n字典树 图 由于没有用到，暂时也不去做深入的了解。\n附图：来自https://www.bigocheatsheet.com/的一张不同数据结构在不同情况下的查找，新增等操作的时间复杂度\n算法 排序 冒泡排序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /** *冒泡排序 *比较相邻的两个元素，如果第一个比第二个大则将两个交换顺序 *i\u0026lt;numbers.length 控制排序轮数 一般为数组长度减1次，因为最后一次循环只剩下一个数组元素，不需要对比，同时数组已经完成排序了 *j\u0026lt;numbers.length-i 因为经过一个排序后，最大（或最小）的元素都已经放到了数组的最后一位，下次不用再进行比较。所以长度改变 */ public void bubbleSort(int[] numbers){ for(int i=1;i\u0026lt;numbers.length;i++){ for(int j=0;j\u0026lt;numbers.length-i;j++){ if(numbers[j]\u0026gt;numbers[j+1]){ int temp=numbers[j]; numbers[j]=numbers[j+1]; numbers[j+1]=temp; } } } } 快速排序 选择排序 首先找到数组中最小的元素，其次，将它与数组第一个元素交换位置\n然后，在剩下的元素中找到最小的元素，将它与数组第二个元素交换位置\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public void selectSort(int[] array){ int N = array.length; for(int i=1;i\u0026lt;N;i++){ int minIndex =i; for(int j=i+1;j\u0026lt;N;j++){ if(array[j]\u0026lt;array[minIndex]){ minIndex=j; } } int temp=array[minIndex]; array[minIndex]=array[i]; array[i]=temp; } } 不会访问索引左侧的元素（j++）\n需要 N 次交换，(n-1)+(n-2)+\u0026hellip;+2+1 ≈ (N^2^)/2 次比较\n数组有序或者混乱时的速度完全一致。\n直接插入排序 将数组中的元素依次与前面已经排好序的元素相比较，如果选择的元素比已排序的元素小，则交换。\n1 2 3 4 5 6 7 8 9 10 11 12 public void sore(int[] nums){ int N=nums.length; for(int i=1;i\u0026lt;N;i++){ for(int j=i;j\u0026gt;0;j--){ if(nums[j]\u0026lt;nums[j-1]){ int temp = nums[j]; nums[j] = nums[j-1]; nums[j-1]=nums[j]; } } } } 不会访问索引右侧的元素（j\u0026ndash;）\n当数组有序时比混乱时速度快。\n查找 二分查找 广度优先遍历（BFS) 打个比方，给出父节点后对树进行遍历，使用 bfs 先去遍历完所有的子节点，再去遍历所有的孙子节点，然后这样一层一层的进行遍历。\n树的几种遍历方式\n深度优先遍历（DFS） 树的几种遍历方式\nLRU 算法 最近最少使用（least recently used）\n用单链表简单实现LRU算法\n递归 分治 将一个大问题，分隔成许多小问题，然后小问题的答案组合成大问题最终的答案。\n位运算 符号 描述 运算规则 \u0026amp; 与 两个位都为 1 时，结果为 1 | 或 两个位都为 0 时，结果为 0 ^ 异或 两个位相同位为 0，相异为 1 ~ 取反 0 变 1，1 变 0 \u0026laquo; 左移 将二进位全部左移若干位，高位丢弃，低位补 0 \u0026raquo; 右移 二进位全部右移若干位，对无符号数，高位补 0 再记录一些高级的位运行：\nx\u0026amp;1 == 1 or ==0 判断奇偶性 x=x\u0026amp;(x-1) 清零最低位的 1 x\u0026amp;-x 得到最低位的 1 将 x 最右边的 n 位清零 x\u0026amp;(~0\u0026lt;\u0026lt;n) 获取 x 的第 n 位值 (x\u0026gt;\u0026gt;n)\u0026amp;1 获取 x 的第 n 位的幂值 x\u0026amp;(1\u0026lt;\u0026lt;(n-1)) 将第 n 位设置为 1 x|(1\u0026lt;\u0026lt;n) 将第 n 为设置为0 x\u0026amp;(~(1\u0026lt;\u0026lt;n)) 将 x 最高位至第 n 位（含）清零 x\u0026amp;((1\u0026lt;\u0026lt;n)-1) 将第 n 位至第 0 位（含）清零 x\u0026amp;(~((1\u0026lt;\u0026lt;(n+1))-1)) 贪心算法 只取当前的最优解，这个解可能并不是最终的最终解。\n比如我们有18 块钱，然后拆分成最少的金额张数，金额面值分别是 10元，9元，1元。如果使用贪心算法第一次会先使用一张10元的(这是第一次的最优解)，然后再 8 张 1 元的(还剩8元，不够9元)。但是最少的拆分方法是两张 9 元的。所以使用贪心算法有可能并不是全局最优解。\n动态规划 布隆过滤器（Bloom Filter）","permalink":"https://www.liunaijie.top/coding/algorithm/algorithm/","summary":"\u003cp\u003e最近在看极客时间覃超的\u003ca href=\"https://time.geekbang.org/course/intro/100019701\"\u003e《算法面试通关 40 讲》\u003c/a\u003e，也一起看了一些数据结构，正好在这里进行一下整理。\u003c/p\u003e\n\u003cp\u003e主要分为数据结构和算法两大章节，每个章节里面都会先结合自己的理解对它的定义进行一下解释，然后会拿出例题来进行实战。\u003c/p\u003e\n\u003ch1 id=\"数据结构\"\u003e数据结构\u003c/h1\u003e\n\u003ch2 id=\"数组httpswwwliunaijietop20191015算法与数据结构数组\"\u003e\u003ca href=\"https://www.liunaijie.top/2019/10/15/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E7%BB%84/\"\u003e数组\u003c/a\u003e\u003c/h2\u003e\n\u003ch2 id=\"链表httpswwwliunaijietop20191015算法与数据结构链表\"\u003e\u003ca href=\"https://www.liunaijie.top/2019/10/15/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/\"\u003e链表\u003c/a\u003e\u003c/h2\u003e\n\u003ch2 id=\"队列\"\u003e队列\u003c/h2\u003e\n\u003cp\u003e先入先出（first in first out FIFO）\u003c/p\u003e\n\u003cp\u003e习题：\u003ca href=\"https://www.liunaijie.top/2019/11/24/LeetCode/%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97-LeetCode232/\"\u003e用栈实现队列\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"普通队列\"\u003e普通队列\u003c/h3\u003e\n\u003ch3 id=\"优先队列\"\u003e优先队列\u003c/h3\u003e\n\u003ch2 id=\"堆栈\"\u003e堆栈\u003c/h2\u003e\n\u003cp\u003e后入先出(last in first out LIFO)\u003c/p\u003e\n\u003cp\u003e习题：\u003ca href=\"https://www.liunaijie.top/2019/11/24/LeetCode/%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88-LeetCode225/\"\u003e用队列实现栈\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"树\"\u003e树\u003c/h2\u003e\n\u003cp\u003e链表是一种特殊的树，当每个链表节点的链表变成多个时就变成了树\u003c/p\u003e\n\u003ch3 id=\"二叉搜索树binary-search-tree-bst\"\u003e二叉搜索树（binary search tree BST）\u003c/h3\u003e\n\u003cp\u003e性质：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e左子树上所有节点的值均小于它的根节点的值\u003c/li\u003e\n\u003cli\u003e右子树上所有节点的值均大于它的根节点的值；\u003c/li\u003e\n\u003cli\u003e左，右子树也分别满足以上性质\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"https://www.liunaijie.top/2019/12/09/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/AVL%EF%BC%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E5%AD%A6%E4%B9%A0\"\u003eAVL,红黑树学习\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"红黑树\"\u003e红黑树\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://www.liunaijie.top/2019/12/24/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%89%8B%E5%86%99%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0\"\u003e手写红黑树的简单实现\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"b-树\"\u003eB 树\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/B%E6%A0%91.png\" alt=\"B树\"\u003e\u003c/p\u003e\n\u003ch3 id=\"b树\"\u003eB+树\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/B%2B%E6%A0%91.png\" alt=\"B+树\"\u003e\u003c/p\u003e\n\u003cp\u003eMySQL 的 Innodb 中使用的索引就是采用的 B+树的数据结构进行存储的。\u003c/p\u003e","title":"算法与数据结构"},{"content":"给定一个以字符串表示的非负整数num和一个整数k, 移除这个数中的k位数字, 使得剩下的数字最小.\n题解 删除规则为\n当左侧数字大于当前数字时, 则将左侧数字删除 如果全部数字是从小到达排列, 即全部左侧数字小于右侧数字. 则从尾部开始删除 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 public static String removeKdigits(String num, int k) { Deque\u0026lt;Character\u0026gt; deque = new LinkedList\u0026lt;Character\u0026gt;(); int length = num.length(); for (int i = 0; i \u0026lt; length; ++i) { char digit = num.charAt(i); // 如果上一位数字比当前位数字大，则删除上一位数字 // 并将需要删除的位数减1，当需要删除的位数为0时不再进行删除 while (!deque.isEmpty() \u0026amp;\u0026amp; k \u0026gt; 0 \u0026amp;\u0026amp; deque.peekLast() \u0026gt; digit) { deque.pollLast(); k--; } //将当前位放入栈中 deque.offerLast(digit); } // 如果k仍然大于0，则从后向前删除k位 for (int i = 0; i \u0026lt; k; ++i) { deque.pollLast(); } // 将剩下的元素拼接成结果 // 需要注意的一点是，可能存在0开头的数字，这时需要将0去掉，即结果为01时需要返回1 StringBuilder ret = new StringBuilder(); boolean leadingZero = true; while (!deque.isEmpty()) { char digit = deque.pollFirst(); if (leadingZero \u0026amp;\u0026amp; digit == \u0026#39;0\u0026#39;) { continue; } leadingZero = false; ret.append(digit); } return ret.length() == 0 ? \u0026#34;0\u0026#34; : ret.toString(); } ","permalink":"https://www.liunaijie.top/coding/algorithm/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E7%A7%BB%E8%B0%83k%E4%BD%8D%E6%95%B0%E5%AD%97/","summary":"\u003cp\u003e给定一个以字符串表示的非负整数num和一个整数k, 移除这个数中的k位数字, 使得剩下的数字最小.\u003c/p\u003e\n\u003ch1 id=\"题解\"\u003e题解\u003c/h1\u003e\n\u003cp\u003e删除规则为\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e当左侧数字大于当前数字时, 则将左侧数字删除\u003c/li\u003e\n\u003cli\u003e如果全部数字是从小到达排列, 即全部左侧数字小于右侧数字. 则从尾部开始删除\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eremoveKdigits\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eDeque\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCharacter\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edeque\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLinkedList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCharacter\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edigit\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003echarAt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 如果上一位数字比当前位数字大，则删除上一位数字\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 并将需要删除的位数减1，当需要删除的位数为0时不再进行删除\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003edeque\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edeque\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epeekLast\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003edeque\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epollLast\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e//将当前位放入栈中\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003edeque\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eofferLast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 如果k仍然大于0，则从后向前删除k位\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003edeque\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epollLast\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 将剩下的元素拼接成结果\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 需要注意的一点是，可能存在0开头的数字，这时需要将0去掉，即结果为01时需要返回1\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eStringBuilder\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStringBuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eleadingZero\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003edeque\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edigit\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edeque\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epollFirst\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eleadingZero\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edigit\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"sc\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eleadingZero\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"移调K位数字"},{"content":"题目： 实现一个函数，将栈内元素的顺序进行翻转。如果当前栈内元素顺序为：1，2，3，4，5. 在调用这个函数后顺序为：5，4，3，2，1.\n要求： 只能使用递归函数来实现，不能使用其他的数据结构。\n解答： 该函数需要将栈内的元素顺序进行反转, 并且只能使用递归来实现.\n我们需要分为两部分来实现:\n实现一个通过递归来获取当前栈内最后一个元素的函数, 并保证其他元素顺序不变 递归调用获取最后一个元素的函数直至栈为空, 此时获取的元素为栈内的第一个元素, 将其插入栈中, 然后将其他元素再写会栈内. 完成逆序. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public class ReverseStack { public void reverse(Stack\u0026lt;Integer\u0026gt; stack) { if (stack.isEmpty()) { return; } int last = getAndRemoveLatestElement(stack); reverse(stack); stack.push(last); } private int getAndRemoveLatestElement(Stack\u0026lt;Integer\u0026gt; stack) { Integer res = stack.pop(); if (stack.isEmpty()) { return res; } else { int last = getAndRemoveLatestElement(stack); stack.push(res); return last; } } } ","permalink":"https://www.liunaijie.top/coding/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E7%94%A8%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0%E5%92%8C%E6%A0%88%E6%93%8D%E4%BD%9C%E9%80%86%E5%BA%8F%E4%B8%80%E4%B8%AA%E6%A0%88/","summary":"\u003ch1 id=\"题目\"\u003e题目：\u003c/h1\u003e\n\u003cp\u003e实现一个函数，将栈内元素的顺序进行翻转。如果当前栈内元素顺序为：1，2，3，4，5. 在调用这个函数后顺序为：5，4，3，2，1.\u003c/p\u003e\n\u003ch1 id=\"要求\"\u003e要求：\u003c/h1\u003e\n\u003cp\u003e只能使用递归函数来实现，不能使用其他的数据结构。\u003c/p\u003e\n\u003ch1 id=\"解答\"\u003e解答：\u003c/h1\u003e\n\u003cp\u003e该函数需要将栈内的元素顺序进行反转, 并且只能使用递归来实现.\u003c/p\u003e\n\u003cp\u003e我们需要分为两部分来实现:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e实现一个通过递归来获取当前栈内最后一个元素的函数, 并保证其他元素顺序不变\u003c/li\u003e\n\u003cli\u003e递归调用获取最后一个元素的函数直至栈为空, 此时获取的元素为栈内的第一个元素, 将其插入栈中, 然后将其他元素再写会栈内. 完成逆序.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eReverseStack\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egetAndRemoveLatestElement\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetAndRemoveLatestElement\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eStack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eisEmpty\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egetAndRemoveLatestElement\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"用递归函数和栈操作逆序一个栈"},{"content":"复杂度无法被消除, 只能被转移.\n总共有23种设计模式, 它们可以分为以下三类:\n创建性 结构性 行为型 这三类又分别有以下几种模式: 创建型 [[Blog-Posts/coding/design/单例模式]] [[Blog-Posts/coding/design/工厂模式]] [[Blog-Posts/coding/design/建造者模式]] [[Blog-Posts/coding/design/原型模式]] 结构性 [[Blog-Posts/coding/design/代理模式]] [[Blog-Posts/coding/design/桥接模式]] [[Blog-Posts/coding/design/装饰器模式]] [[Blog-Posts/coding/design/门面模式]] [[Blog-Posts/coding/design/组合模式]] [[Blog-Posts/coding/design/享元模式]] 行为型 [[Blog-Posts/coding/design/观察者模式]] [[Blog-Posts/coding/design/模板模式]] [[Blog-Posts/coding/design/策略模式]] [[Blog-Posts/coding/design/职责链模式]] [[Blog-Posts/coding/design/状态模式]] [[Blog-Posts/coding/design/迭代器模式]] [[Blog-Posts/coding/design/访问者模式]] [[Blog-Posts/coding/design/备忘录模式]] [[Blog-Posts/coding/design/命令模式]] [[Blog-Posts/coding/design/解释器模式]] [[Blog-Posts/coding/design/中介模式]] 代理、桥接、装饰器、适配器4种设计模式的区别 这4种是比较常见的结构型设计模式, 它们的代码结构非常相似. 笼统来说, 它们都可以被称为Wrapper模式, 也就是通过Wrapper类二次封装原始类.\n尽管代码结构相似, 但是这4种设计模式的用意完全不同, 也就是说要解决的问题, 应用场景.\n代理模式: 代理模式在不改变原始类接口的条件下, 为原始类定义一个代理类, 主要目的是控制访问, 而为加强功能.\n桥接模式: 桥接模式的目的是将接口和实现分离, 从而让它们可以较为容易、也相对独立的加以改变.\n装饰器模式: 装饰器模式在不改变原始类接口的情况下, 对原始类功能进行增强, 并且支持多个装饰器的嵌套使用.\n适配器模式: 适配器模式是一种事后的补救策略. 适配器提供跟原始类不同的接口, 而代理模式, 装饰器模式提供的都是跟原始类相同的接口.\n","permalink":"https://www.liunaijie.top/coding/design/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e\u003cstrong\u003e复杂度无法被消除, 只能被转移.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e总共有23种设计模式, 它们可以分为以下三类:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建性\u003c/li\u003e\n\u003cli\u003e结构性\u003c/li\u003e\n\u003cli\u003e行为型\n这三类又分别有以下几种模式:\u003c/li\u003e\n\u003cli\u003e创建型\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/单例模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/工厂模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/建造者模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/原型模式]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e结构性\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/代理模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/桥接模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/装饰器模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/门面模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/组合模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/享元模式]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e行为型\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/观察者模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/模板模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/策略模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/职责链模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/状态模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/迭代器模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/访问者模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/备忘录模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/命令模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/解释器模式]]\u003c/li\u003e\n\u003cli\u003e[[Blog-Posts/coding/design/中介模式]]\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"代理桥接装饰器适配器4种设计模式的区别\"\u003e代理、桥接、装饰器、适配器4种设计模式的区别\u003c/h1\u003e\n\u003cp\u003e这4种是比较常见的结构型设计模式, 它们的代码结构非常相似. 笼统来说, 它们都可以被称为Wrapper模式, 也就是通过Wrapper类二次封装原始类.\u003c/p\u003e\n\u003cp\u003e尽管代码结构相似, 但是这4种设计模式的用意完全不同, 也就是说要解决的问题, 应用场景.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e代理模式:\u003c/strong\u003e 代理模式在不改变原始类接口的条件下, 为原始类定义一个代理类, 主要目的是控制访问, 而为加强功能.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e桥接模式:\u003c/strong\u003e 桥接模式的目的是将接口和实现分离, 从而让它们可以较为容易、也相对独立的加以改变.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e装饰器模式:\u003c/strong\u003e 装饰器模式在不改变原始类接口的情况下, 对原始类功能进行增强, 并且支持多个装饰器的嵌套使用.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e适配器模式:\u003c/strong\u003e 适配器模式是一种事后的补救策略. 适配器提供跟原始类不同的接口, 而代理模式, 装饰器模式提供的都是跟原始类相同的接口.\u003c/p\u003e","title":"设计模式"},{"content":"也叫快照模式, 在不违背封装原则的前提下, 捕获一个对象的内部状态, 并在该对象之外保存这个状态, 以便之后恢复对象为先前的状态.\n","permalink":"https://www.liunaijie.top/coding/design/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e也叫快照模式, 在不违背封装原则的前提下, 捕获一个对象的内部状态, 并在该对象之外保存这个状态, 以便之后恢复对象为先前的状态.\u003c/p\u003e","title":"设计模式-备忘录模式"},{"content":"策略模式最场景的应用场景是利用它来避免冗长的if-else或switch分支判断. 还可以提供框架的扩展点.\n定义一组算法类, 将每个算法分别封装起来, 让他们可以互相替换. 策略模式可以使算法的变化独立与使用它们的客户端.\n定义一个接口, 每个子类有不同场景下的实现, 并且通过工厂模式来进行子类的创建. 例如实现一个对不同文件大小的排序算法, 首先定义一个排序接口, 然后创建大中小三种文件的子类, 再创建一个工厂模式定义文件大小与具体子类的关系.\n","permalink":"https://www.liunaijie.top/coding/design/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e策略模式最场景的应用场景是利用它来避免冗长的if-else或switch分支判断. 还可以提供框架的扩展点.\u003c/p\u003e\n\u003cp\u003e定义一组算法类, 将每个算法分别封装起来, 让他们可以互相替换. 策略模式可以使算法的变化独立与使用它们的客户端.\u003c/p\u003e\n\u003cp\u003e定义一个接口, 每个子类有不同场景下的实现, 并且通过工厂模式来进行子类的创建. 例如实现一个对不同文件大小的排序算法, 首先定义一个排序接口, 然后创建大中小三种文件的子类, 再创建一个工厂模式定义文件大小与具体子类的关系.\u003c/p\u003e","title":"设计模式-策略模式"},{"content":"原理解析 代理模式(Proxy Design Pattern)在不改变原始类(或叫被代理类)代码的情况下, 通过引入代理类来给原始类附加功能.\n我们可以通过继承或其他方式来实现静态代理, 来实现对原始类的功能扩展.\n动态代理 如果需要代理的类太多, 使用静态代理就需要为每个类都创建一个代理类, 这样过于复杂, 我们可以使用动态代理来实现. 事先不为每个原始类编写代理类, 而是在运行时, 动态的创建原始类对应的代理类, 然后在系统中用代理类替换掉原始类.\nSpring AOP底层的实现原理就是基于动态代理, 用户配置好需要给哪些类创建代理, 并定义好在执行原始类的业务代码前后执行哪些附加功能. Spring为这些类创建动态代理对象, 并在JVM中替代原始类对象.\n代理模式的应用场景 业务系统的非功能性需求开发\n比如需要开发一些非功能性的需求, 监控, 统计, 鉴权, 限流等等. 将这些附加功能与业务功能解耦, 放到代理类中同样处理.\n代理模式在RPC, 缓存中的应用\n实际上RPC框架也可以看作一种代理模式. 通过远程代理, 将网络通信, 数据编解码等细节隐藏起来.\n同样在缓存中, 我们对于某些接口希望在一定时间内的相同参数使用缓存中的结果, 而不是进行数据库查询或者其他计算, 我们可以利用代理模式, 先从缓存中查询, 如果查询不到结果再去走原始类的逻辑.\n代理、桥接、装饰器、适配器4种设计模式的区别\n","permalink":"https://www.liunaijie.top/coding/design/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/","summary":"\u003ch1 id=\"原理解析\"\u003e\u003cstrong\u003e原理解析\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003e代理模式(Proxy Design Pattern)在不改变原始类(或叫被代理类)代码的情况下, 通过引入代理类来给原始类附加功能.\u003c/p\u003e\n\u003cp\u003e我们可以通过继承或其他方式来实现静态代理, 来实现对原始类的功能扩展.\u003c/p\u003e\n\u003ch2 id=\"动态代理\"\u003e\u003cstrong\u003e动态代理\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e如果需要代理的类太多, 使用静态代理就需要为每个类都创建一个代理类, 这样过于复杂, 我们可以使用动态代理来实现. 事先不为每个原始类编写代理类, 而是在运行时, 动态的创建原始类对应的代理类, 然后在系统中用代理类替换掉原始类.\u003c/p\u003e\n\u003cp\u003eSpring AOP底层的实现原理就是基于动态代理, 用户配置好需要给哪些类创建代理, 并定义好在执行原始类的业务代码前后执行哪些附加功能. Spring为这些类创建动态代理对象, 并在JVM中替代原始类对象.\u003c/p\u003e\n\u003ch1 id=\"代理模式的应用场景\"\u003e\u003cstrong\u003e代理模式的应用场景\u003c/strong\u003e\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e业务系统的非功能性需求开发\u003c/p\u003e\n\u003cp\u003e比如需要开发一些非功能性的需求, 监控, 统计, 鉴权, 限流等等. 将这些附加功能与业务功能解耦, 放到代理类中同样处理.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e代理模式在RPC, 缓存中的应用\u003c/p\u003e\n\u003cp\u003e实际上RPC框架也可以看作一种代理模式. 通过远程代理, 将网络通信, 数据编解码等细节隐藏起来.\u003c/p\u003e\n\u003cp\u003e同样在缓存中, 我们对于某些接口希望在一定时间内的相同参数使用缓存中的结果, 而不是进行数据库查询或者其他计算, 我们可以利用代理模式, 先从缓存中查询, 如果查询不到结果再去走原始类的逻辑.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003ca href=\"Blog-Posts/coding/design/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.md#%E4%BB%A3%E7%90%86%E3%80%81%E6%A1%A5%E6%8E%A5%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E3%80%81%E9%80%82%E9%85%8D%E5%99%A84%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB\"\u003e代理、桥接、装饰器、适配器4种设计模式的区别\u003c/a\u003e\u003c/p\u003e","title":"设计模式-代理模式"},{"content":"概念 一个类只允许创建一个对象（或者实例），那这个类就是一个单例类\n为什么要使用单例 有些数据在系统中只应该保存一份，当使用多个对象时会造成一些错误。有一些资源访问冲突时也可以使用单例模式来解决。\n实现方式 由于对象只能有一个，所以构造函数的权限必须是private私有的，这样外部就无法通过new来创建实例\n还有一些需要关注的点\n创建对象的线程安全问题 是否支持延迟加载 获取实例方法的性能是否高 饿汉式 优点：写法简单。在类装载时就完成了实例化。线程安全\n缺点：由于在类装载时就完成了实例化，如果从始至终都没有用到这个实例，会造成内存浪费\nclass Single { /** * 设置成私有的，保证无法在其它类中使用 new 关键字进行实例化 */ private Single() {} private final static Single INSTANCE = new Single(); /** * 从外界获取实例的唯一方法，从这个方法拿到的实例肯定是全局唯一的 * @return */ public static Single getInstance() { return INSTANCE; } } /** * 与上面的类似，用了静态代码块，不同的代码写法其他完全一样 */ class SingleTest2 { private SingleTest2() {} private static SingleTest2 SINGLE_TEST_2; static { SINGLE_TEST_2 = new SingleTest2(); } public static SingleTest2 getInstance() { return SINGLE_TEST_2; } } 懒汉式 在需要用到实例时才进行初始化，所以不会造成内存浪费，但多线程情况下会出现多个实例的情况\n/** * 懒汉式的单例模式 * 线程不安全 */ class UnSafeSingle { private UnSafeSingle() { } private static UnSafeSingle INSTANCE; public static UnSafeSingle getInstance() { if (INSTANCE == null) { //这个地方，当多个线程同时进入判断后会造成多个实例 INSTANCE = new UnSafeSingle(); } return INSTANCE; } } /** * 通过加锁的方式实现线程安全的懒汉式单例 * 由于获取单例的方法每次都需要进行同步，所以效率不高 */ class SynchronizedSingle { private SynchronizedSingle() { } private static SynchronizedSingle INSTANCE; public static synchronized SynchronizedSingle getInstance() { if (INSTANCE == null) { //由于方法加锁，所以每次只能一个线程访问，不会造成多个实例的情况，但是效率不高 INSTANCE = new SynchronizedSingle(); } return INSTANCE; } } /** * 双重检查 * 当使用getInstance()方法时不会进行同步，先进行判断。 * 由于使用了 volatile 关键字，即便有两个线程同时执行了这个方法，只要有一个线程对变量进行了修改，另外一个线程也能接收到更改的信号 */ class SafeSingle{ private SafeSingle(){} private static volatile SafeSingle INSTANCE; public static SafeSingle getInstance(){ if(INSTANCE==null){ //使用了双重检查 synchronized (SafeSingle.class){ if(INSTANCE==null){ INSTANCE = new SafeSingle(); } } } return INSTANCE; } } 静态内部类 使用了静态内部类，在外部类方法调用时才会进行初始化也就实现了懒加载，并且在类加载过程中也是线程安全的，不会出现多个实例的情况. 由JVM来保证了类的唯一性.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /** * 线程安全，实现了懒加载 */ class Single { private Single() { } /** * 内部类在getInstance()方法被调用时才会被加载 */ private static class InSingle { private static final Single INSTANCE = new Single(); } public static Single getInstance() { return InSingle.INSTANCE; } } 枚举 枚举能避免多线程产生多个实例的问题，还能防止反序列化重新创建新的对象\n1 2 3 4 5 6 7 8 9 enum Single { INSTANCE; public void sayHello(String name) { System.out.println(\u0026#34;hello,\u0026#34; + name); } } 单例存在的问题 大部分情况下, 在项目中使用单例来表示一个全局唯一类, 比如配置信息, ID生成器类.\n但是它也存在一些问题:\n单例对OOP特性的支持不友好\nOOP的四大特性是封装, 抽象, 继承, 多态. 单例对抽象, 继承, 多态都支持的不是很好.\n假如我们有一个IdGenerator的类来生成一个全局唯一ID. 如果我们使用单例模式, 就会违背了基于接口而非实现的设计原则, 也就违背了抽象特性. 如果我们需要更改不同业务的ID生成算法, 就需要修改所有用到IdGenerator的地方\n单例会隐藏类之间的依赖关系\n由于单例不需要显示创建, 不需要依赖参数传递, 可以在函数中直接调用. 所以在代码复杂的情况下, 这种调用关系就会非常隐蔽\n单例对代码的扩展性不友好\n单例类只能有一个对象实例, 如果我们需要在代码中创建两个实例或多个实例, 就需要对代码有比较大的改动\n单例对代码的可测试性不友好\n单例不支持有参数的构造函数\n","permalink":"https://www.liunaijie.top/coding/design/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","summary":"\u003ch2 id=\"概念\"\u003e\u003cstrong\u003e概念\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e一个类只允许创建一个对象（或者实例），那这个类就是一个单例类\u003c/p\u003e\n\u003ch2 id=\"为什么要使用单例\"\u003e\u003cstrong\u003e为什么要使用单例\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e有些数据在系统中只应该保存一份，当使用多个对象时会造成一些错误。有一些资源访问冲突时也可以使用单例模式来解决。\u003c/p\u003e\n\u003ch1 id=\"实现方式\"\u003e\u003cstrong\u003e实现方式\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003e由于对象只能有一个，所以构造函数的权限必须是\u003ccode\u003eprivate\u003c/code\u003e私有的，这样外部就无法通过\u003ccode\u003enew\u003c/code\u003e来创建实例\u003c/p\u003e\n\u003cp\u003e还有一些需要关注的点\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建对象的线程安全问题\u003c/li\u003e\n\u003cli\u003e是否支持延迟加载\u003c/li\u003e\n\u003cli\u003e获取实例方法的性能是否高\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"饿汉式\"\u003e\u003cstrong\u003e饿汉式\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e优点：写法简单。在类装载时就完成了实例化。线程安全\u003c/p\u003e\n\u003cp\u003e缺点：由于在类装载时就完成了实例化，如果从始至终都没有用到这个实例，会造成内存浪费\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e class Single {\n /**\n  * 设置成私有的，保证无法在其它类中使用 new 关键字进行实例化\n  */\n private Single() {}\n \n private final static Single INSTANCE = new Single();\n \n     /**\n  * 从外界获取实例的唯一方法，从这个方法拿到的实例肯定是全局唯一的\n  * @return\n  */\n public static Single getInstance() {\n return INSTANCE;\n }\n \n }\n \n /**\n  * 与上面的类似，用了静态代码块，不同的代码写法其他完全一样\n  */\n class SingleTest2 {\n \n private SingleTest2() {}\n \n private static SingleTest2 SINGLE_TEST_2;\n \n static {\n SINGLE_TEST_2 = new SingleTest2();\n }\n\n public static SingleTest2 getInstance() {\n return SINGLE_TEST_2;\n }\n }\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"懒汉式\"\u003e\u003cstrong\u003e懒汉式\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e在需要用到实例时才进行初始化，所以不会造成内存浪费，但多线程情况下会出现多个实例的情况\u003c/p\u003e","title":"设计模式-单例模式"},{"content":"迭代器模式将集合中的遍历操作从集合类中拆分出来, 放到迭代器类中, 让两者的职责更加单一.\n迭代器模式的优势 可以封装一些复杂的遍历逻辑, 比如树的各种遍历方式(BFS, DFS, 前序等等) 后期如果需要变更遍历方式, 只需要替换掉迭代器的实现. ","permalink":"https://www.liunaijie.top/coding/design/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e迭代器模式将集合中的遍历操作从集合类中拆分出来, 放到迭代器类中, 让两者的职责更加单一.\u003c/p\u003e\n\u003ch1 id=\"迭代器模式的优势\"\u003e迭代器模式的优势\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e可以封装一些复杂的遍历逻辑, 比如树的各种遍历方式(BFS, DFS, 前序等等)\u003c/li\u003e\n\u003cli\u003e后期如果需要变更遍历方式, 只需要替换掉迭代器的实现.\u003c/li\u003e\n\u003c/ol\u003e","title":"设计模式-迭代器模式"},{"content":"允许一个或者多个操作应用到一组对象上, 解耦操作和对象本身\n访问者模式针对到是一组类型不同的对象. 不过, 尽管这组对象的类型是不同的, 但是, 它们继承相同的父类或者实现相同的接口. 在不同的应用场景下, 我们需要对这组对象进行一系列不相关的业务操作, 但为了避免不断添加功能导致类不断膨胀, 职责越来越不单一, 以及避免频繁地添加功能导致的频繁代码修改, 我们使用访问者模式, 将对象与操作解耦, 将这些业务操作抽离出来, 定义在独立细分的访问者类中.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 public abstract class ResourceFile { protected String filePath; public ResourceFile(String filePath) { this.filePath = filePath; } abstract public void accept(Visitor vistor); } public class PdfFile extends ResourceFile { public PdfFile(String filePath) { super(filePath); } @Override public void accept(Visitor visitor) { visitor.visit(this); } //... } //...PPTFile、WordFile跟PdfFile类似，这里就省略了... public interface Visitor { void visit(PdfFile pdfFile); void visit(PPTFile pdfFile); void visit(WordFile pdfFile); } public class Extractor implements Visitor { @Override public void visit(PPTFile pptFile) { //... System.out.println(\u0026#34;Extract PPT.\u0026#34;); } @Override public void visit(PdfFile pdfFile) { //... System.out.println(\u0026#34;Extract PDF.\u0026#34;); } @Override public void visit(WordFile wordFile) { //... System.out.println(\u0026#34;Extract WORD.\u0026#34;); } } public class Compressor implements Visitor { @Override public void visit(PPTFile pptFile) { //... System.out.println(\u0026#34;Compress PPT.\u0026#34;); } @Override public void visit(PdfFile pdfFile) { //... System.out.println(\u0026#34;Compress PDF.\u0026#34;); } @Override public void visit(WordFile wordFile) { //... System.out.println(\u0026#34;Compress WORD.\u0026#34;); } } public class ToolApplication { public static void main(String[] args) { Extractor extractor = new Extractor(); List\u0026lt;ResourceFile\u0026gt; resourceFiles = listAllResourceFiles(args[0]); for (ResourceFile resourceFile : resourceFiles) { resourceFile.accept(extractor); } Compressor compressor = new Compressor(); for(ResourceFile resourceFile : resourceFiles) { resourceFile.accept(compressor); } } private static List\u0026lt;ResourceFile\u0026gt; listAllResourceFiles(String resourceDirectory) { List\u0026lt;ResourceFile\u0026gt; resourceFiles = new ArrayList\u0026lt;\u0026gt;(); //...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile) resourceFiles.add(new PdfFile(\u0026#34;a.pdf\u0026#34;)); resourceFiles.add(new WordFile(\u0026#34;b.word\u0026#34;)); resourceFiles.add(new PPTFile(\u0026#34;c.ppt\u0026#34;)); return resourceFiles; } } ","permalink":"https://www.liunaijie.top/coding/design/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e允许一个或者多个操作应用到一组对象上, 解耦操作和对象本身\u003c/p\u003e\n\u003cp\u003e访问者模式针对到是一组类型不同的对象. 不过, 尽管这组对象的类型是不同的, 但是, 它们继承相同的父类或者实现相同的接口. 在不同的应用场景下, 我们需要对这组对象进行一系列不相关的业务操作, 但为了避免不断添加功能导致类不断膨胀, 职责越来越不单一, 以及避免频繁地添加功能导致的频繁代码修改, 我们使用访问者模式, 将对象与操作解耦, 将这些业务操作抽离出来, 定义在独立细分的访问者类中.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e54\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e55\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e56\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e57\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e58\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e59\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e60\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e61\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e62\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e63\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e64\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e65\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e66\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e67\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e68\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e69\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e70\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e71\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e72\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e73\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e74\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e75\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e76\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e77\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e78\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e79\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e80\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e81\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e82\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e83\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e84\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e85\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e86\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e87\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e88\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e89\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e90\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e91\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e92\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eResourceFile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprotected\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efilePath\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eResourceFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efilePath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003efilePath\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efilePath\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eaccept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eVisitor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evistor\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePdfFile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eResourceFile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ePdfFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efilePath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efilePath\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eaccept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eVisitor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003evisitor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e//...PPTFile、WordFile跟PdfFile类似，这里就省略了...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003einterface\u003c/span\u003e \u003cspan class=\"nc\"\u003eVisitor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePdfFile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epdfFile\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePPTFile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epdfFile\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eWordFile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epdfFile\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eExtractor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eimplements\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eVisitor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePPTFile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epptFile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Extract PPT.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePdfFile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epdfFile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Extract PDF.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eWordFile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ewordFile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Extract WORD.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCompressor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eimplements\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eVisitor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePPTFile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epptFile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Compress PPT.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ePdfFile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epdfFile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Compress PDF.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eWordFile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ewordFile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Compress WORD.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eToolApplication\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eExtractor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eextractor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eExtractor\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eResourceFile\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresourceFiles\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elistAllResourceFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eResourceFile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresourceFile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresourceFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"n\"\u003eresourceFile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eaccept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eextractor\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eCompressor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecompressor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eCompressor\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eResourceFile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresourceFile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresourceFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"n\"\u003eresourceFile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eaccept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecompressor\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eResourceFile\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003elistAllResourceFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresourceDirectory\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eResourceFile\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresourceFiles\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eArrayList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eresourceFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ePdfFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a.pdf\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eresourceFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eWordFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;b.word\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eresourceFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ePPTFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;c.ppt\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresourceFiles\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"设计模式-访问者模式"},{"content":"工厂模式可以分为三种更加细分的类型: 简单工厂, 工厂方法和抽象工厂.\n什么时候用工厂方法 当创建逻辑比较复杂时, 可以考虑使用工厂模式, 封装对象的创建过程, 将对象的创建和使用相分离. 对象创建逻辑比较复杂大概为这两种情况:\n代码中存在if/else的分支判断, 动态地根据不同类型创建不同的对象. 针对这种情况我们就可以考虑使用工厂模式, 来将这一大坨if/esle创建对象的逻辑抽离出来, 放到工厂类中 尽管我们不需要根据不同的类型创建不同的对象, 但是, 单个对象的创建过程比较负责, 比如需要组合其他类对象, 做各种初始化操作. 在这种情况下, 也可以考虑使用工厂模式, 将对象的创建过程封装到工厂类中. 工厂模式的作用大概是这四个:\n封装变化: 创建逻辑有可能变化, 封装成工厂类之后, 创建逻辑的变更对调用者透明 代码复用: 创建代码抽离到独立的工厂类之后可以复用 隔离复杂性: 封装复杂的创建逻辑, 调用者无需了解如何创建对象 控制复杂度: 将创建代码抽离出来, 让原本的函数或类职责更单一, 代码更简洁 简单工厂 在下面这段代码中, 我们根据配置文件的后缀(json, xml, yaml), 选择不同的解析器. 将存储在文件中的配置解析成内存对象RuleConfig.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public class RuleConfigSource { public RuleConfig load(String ruleConfigFilePath) { String ruleConfigFileExtension = getFileExtension(ruleConfigFilePath); IRuleConfigParser parser = RuleConfigParserFactory.createParser(ruleConfigFileExtension); if (parser == null) { throw new InvalidRuleConfigException( \u0026#34;Rule config file format is not supported: \u0026#34; + ruleConfigFilePath); } String configText = \u0026#34;\u0026#34;; //从ruleConfigFilePath文件中读取配置文本到configText中 RuleConfig ruleConfig = parser.parse(configText); return ruleConfig; } private String getFileExtension(String filePath) { //...解析文件名获取扩展名，比如rule.json，返回json return \u0026#34;json\u0026#34;; } } public class RuleConfigParserFactory { public static IRuleConfigParser createParser(String configFormat) { IRuleConfigParser parser = null; if (\u0026#34;json\u0026#34;.equalsIgnoreCase(configFormat)) { parser = new JsonRuleConfigParser(); } else if (\u0026#34;xml\u0026#34;.equalsIgnoreCase(configFormat)) { parser = new XmlRuleConfigParser(); } else if (\u0026#34;yaml\u0026#34;.equalsIgnoreCase(configFormat)) { parser = new YamlRuleConfigParser(); } else if (\u0026#34;properties\u0026#34;.equalsIgnoreCase(configFormat)) { parser = new PropertiesRuleConfigParser(); } return parser; } } 将创建RuleParser单独抽取到一个单独的类中, 让这个类只负责对象的创建, 这就是简单工厂模式的实现.\n在上面的代码中, 每次调用createParser时都会创建一个新的对象. 如果parser可以复用, 我们可以将其事先创建并缓存起来, 从而节省内存和对象创建时的时间.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class RuleConfigParserFactory { private static final Map\u0026lt;String, RuleConfigParser\u0026gt; cachedParsers = new HashMap\u0026lt;\u0026gt;(); static { cachedParsers.put(\u0026#34;json\u0026#34;, new JsonRuleConfigParser()); cachedParsers.put(\u0026#34;xml\u0026#34;, new XmlRuleConfigParser()); cachedParsers.put(\u0026#34;yaml\u0026#34;, new YamlRuleConfigParser()); cachedParsers.put(\u0026#34;properties\u0026#34;, new PropertiesRuleConfigParser()); } public static IRuleConfigParser createParser(String configFormat) { if (configFormat == null || configFormat.isEmpty()) { return null;//返回null还是IllegalArgumentException全凭你自己说了算 } IRuleConfigParser parser = cachedParsers.get(configFormat.toLowerCase()); return parser; } } 工厂方法 还可以利用多态, 对上面的代码进行重构\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public interface IRuleConfigParserFactory { IRuleConfigParser createParser(); } public class JsonRuleConfigParserFactory implements IRuleConfigParserFactory { @Override public IRuleConfigParser createParser() { return new JsonRuleConfigParser(); } } public class XmlRuleConfigParserFactory implements IRuleConfigParserFactory { @Override public IRuleConfigParser createParser() { return new XmlRuleConfigParser(); } } public class YamlRuleConfigParserFactory implements IRuleConfigParserFactory { @Override public IRuleConfigParser createParser() { return new YamlRuleConfigParser(); } } public class PropertiesRuleConfigParserFactory implements IRuleConfigParserFactory { @Override public IRuleConfigParser createParser() { return new PropertiesRuleConfigParser(); } } 这就是工厂方法的典型代码实现, 当新增一种parser的时候, 只需要新增一个实现了IRuleConfigParserFactory接口的Factory类即可.\n但是在调用时与之前的代码相差无异, 还是有if/else逻辑的判断, 反而增加了系统的复杂度.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public class RuleConfigSource { public RuleConfig load(String ruleConfigFilePath) { String ruleConfigFileExtension = getFileExtension(ruleConfigFilePath); IRuleConfigParserFactory parserFactory = null; if (\u0026#34;json\u0026#34;.equalsIgnoreCase(ruleConfigFileExtension)) { parserFactory = new JsonRuleConfigParserFactory(); } else if (\u0026#34;xml\u0026#34;.equalsIgnoreCase(ruleConfigFileExtension)) { parserFactory = new XmlRuleConfigParserFactory(); } else if (\u0026#34;yaml\u0026#34;.equalsIgnoreCase(ruleConfigFileExtension)) { parserFactory = new YamlRuleConfigParserFactory(); } else if (\u0026#34;properties\u0026#34;.equalsIgnoreCase(ruleConfigFileExtension)) { parserFactory = new PropertiesRuleConfigParserFactory(); } else { throw new InvalidRuleConfigException(\u0026#34;Rule config file format is not supported: \u0026#34; + ruleConfigFilePath); } IRuleConfigParser parser = parserFactory.createParser(); String configText = \u0026#34;\u0026#34;; //从ruleConfigFilePath文件中读取配置文本到configText中 RuleConfig ruleConfig = parser.parse(configText); return ruleConfig; } private String getFileExtension(String filePath) { //...解析文件名获取扩展名，比如rule.json，返回json return \u0026#34;json\u0026#34;; } } 我们可以再为工厂类创建一个简单工厂\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 public class RuleConfigSource { public RuleConfig load(String ruleConfigFilePath) { String ruleConfigFileExtension = getFileExtension(ruleConfigFilePath); IRuleConfigParserFactory parserFactory = RuleConfigParserFactoryMap.getParserFactory(ruleConfigFileExtension); if (parserFactory == null) { throw new InvalidRuleConfigException(\u0026#34;Rule config file format is not supported: \u0026#34; + ruleConfigFilePath); } IRuleConfigParser parser = parserFactory.createParser(); String configText = \u0026#34;\u0026#34;; //从ruleConfigFilePath文件中读取配置文本到configText中 RuleConfig ruleConfig = parser.parse(configText); return ruleConfig; } private String getFileExtension(String filePath) { //...解析文件名获取扩展名，比如rule.json，返回json return \u0026#34;json\u0026#34;; } } //因为工厂类只包含方法，不包含成员变量，完全可以复用， //不需要每次都创建新的工厂类对象，所以，简单工厂模式的第二种实现思路更加合适。 public class RuleConfigParserFactoryMap { //工厂的工厂 private static final Map\u0026lt;String, IRuleConfigParserFactory\u0026gt; cachedFactories = new HashMap\u0026lt;\u0026gt;(); static { cachedFactories.put(\u0026#34;json\u0026#34;, new JsonRuleConfigParserFactory()); cachedFactories.put(\u0026#34;xml\u0026#34;, new XmlRuleConfigParserFactory()); cachedFactories.put(\u0026#34;yaml\u0026#34;, new YamlRuleConfigParserFactory()); cachedFactories.put(\u0026#34;properties\u0026#34;, new PropertiesRuleConfigParserFactory()); } public static IRuleConfigParserFactory getParserFactory(String type) { if (type == null || type.isEmpty()) { return null; } IRuleConfigParserFactory parserFactory = cachedFactories.get(type.toLowerCase()); return parserFactory; } } 抽象工厂 在简单工厂和工厂方法中, 类只有一种分类方法, 比如上面的解析中只有根据文件格式来分类. 如果类的分类方式有多种, 比如即需按照文件格式又需按照解析的对象来进行分类, 如果还按照之前的方法就需要创建冗余的类.\n针对这种特殊的场景, 可以使用抽象工厂来解决.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public interface IConfigParserFactory { IRuleConfigParser createRuleParser(); ISystemConfigParser createSystemParser(); //此处可以扩展新的parser类型，比如IBizConfigParser } public class JsonConfigParserFactory implements IConfigParserFactory { @Override public IRuleConfigParser createRuleParser() { return new JsonRuleConfigParser(); } @Override public ISystemConfigParser createSystemParser() { return new JsonSystemConfigParser(); } } public class XmlConfigParserFactory implements IConfigParserFactory { @Override public IRuleConfigParser createRuleParser() { return new XmlRuleConfigParser(); } @Override public ISystemConfigParser createSystemParser() { return new XmlSystemConfigParser(); } } // 省略YamlConfigParserFactory和PropertiesConfigParserFactory代码 ","permalink":"https://www.liunaijie.top/coding/design/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e工厂模式可以分为三种更加细分的类型: 简单工厂, 工厂方法和抽象工厂.\u003c/p\u003e\n\u003ch1 id=\"什么时候用工厂方法\"\u003e\u003cstrong\u003e什么时候用工厂方法\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003e当创建逻辑比较复杂时, 可以考虑使用工厂模式, 封装对象的创建过程, 将对象的创建和使用相分离. 对象创建逻辑比较复杂大概为这两种情况:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e代码中存在if/else的分支判断, 动态地根据不同类型创建不同的对象. 针对这种情况我们就可以考虑使用工厂模式, 来将这一大坨if/esle创建对象的逻辑抽离出来, 放到工厂类中\u003c/li\u003e\n\u003cli\u003e尽管我们不需要根据不同的类型创建不同的对象, 但是, 单个对象的创建过程比较负责, 比如需要组合其他类对象, 做各种初始化操作. 在这种情况下, 也可以考虑使用工厂模式, 将对象的创建过程封装到工厂类中.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e工厂模式的作用大概是这四个:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e封装变化: 创建逻辑有可能变化, 封装成工厂类之后, 创建逻辑的变更对调用者透明\u003c/li\u003e\n\u003cli\u003e代码复用: 创建代码抽离到独立的工厂类之后可以复用\u003c/li\u003e\n\u003cli\u003e隔离复杂性: 封装复杂的创建逻辑, 调用者无需了解如何创建对象\u003c/li\u003e\n\u003cli\u003e控制复杂度: 将创建代码抽离出来, 让原本的函数或类职责更单一, 代码更简洁\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"简单工厂\"\u003e简单工厂\u003c/h1\u003e\n\u003cp\u003e在下面这段代码中, 我们根据配置文件的后缀(json, xml, yaml), 选择不同的解析器. 将存储在文件中的配置解析成内存对象RuleConfig.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRuleConfigSource\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eRuleConfig\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eruleConfigFilePath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eruleConfigFileExtension\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egetFileExtension\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eruleConfigFilePath\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eIRuleConfigParser\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparser\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eRuleConfigParserFactory\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecreateParser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eruleConfigFileExtension\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparser\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"k\"\u003ethrow\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eInvalidRuleConfigException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e              \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Rule config file format is not supported: \u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eruleConfigFilePath\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003econfigText\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//从ruleConfigFilePath文件中读取配置文本到configText中\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eRuleConfig\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eruleConfig\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econfigText\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eruleConfig\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetFileExtension\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efilePath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...解析文件名获取扩展名，比如rule.json，返回json\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;json\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRuleConfigParserFactory\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eIRuleConfigParser\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ecreateParser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003econfigFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eIRuleConfigParser\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparser\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;json\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eequalsIgnoreCase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econfigFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"n\"\u003eparser\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eJsonRuleConfigParser\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;xml\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eequalsIgnoreCase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econfigFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"n\"\u003eparser\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eXmlRuleConfigParser\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;yaml\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eequalsIgnoreCase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econfigFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"n\"\u003eparser\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eYamlRuleConfigParser\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;properties\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eequalsIgnoreCase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econfigFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"n\"\u003eparser\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ePropertiesRuleConfigParser\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparser\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e将创建RuleParser单独抽取到一个单独的类中, 让这个类只负责对象的创建, 这就是简单工厂模式的实现.\u003c/p\u003e","title":"设计模式-工厂模式"},{"content":"Observer Design Pattern也被称为发布订阅模式(Publish-Subscribe Design Pattern)\n在对象之间订阅一个一对多的依赖, 当一个对象状态改变的时候, 所以依赖的对象都会自动收到通知.\n","permalink":"https://www.liunaijie.top/coding/design/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003eObserver Design Pattern也被称为发布订阅模式(Publish-Subscribe Design Pattern)\u003c/p\u003e\n\u003cp\u003e在对象之间订阅一个一对多的依赖, 当一个对象状态改变的时候, 所以依赖的对象都会自动收到通知.\u003c/p\u003e","title":"设计模式-观察者模式"},{"content":"我们明明可以直接使用构造函数或者配合set方法就能创建对象, 为什么还需要通过建造者模式来创建呢.\n建造者模式和工厂模式都可以创建对象, 他们之间的区别是什么?\n为什么需要建造者模式 在某些配置类中, 有大量的参数需要传入, 并且这些参数有一些是必须的, 有一些是可选的.\n某些参数之间有依赖关系, 比如当用户设置了A, 那么就必须设置B等等.\n并且我们希望类对象是不可变对象, 也就是说对象在创建好之后, 就不能修改内部的属性值. 要实现这个功能, 我们就不能暴露set方法.\n这时我们对这个类的创建虽然还可以通过构造函数来进行创建, 但是复杂度和可读性都不友好. 这时就可以使用建造者模式来进行对象的创建.\n将校验逻辑放到Builder类中, 先创建建造者, 并通过set方法来设置建造者的变量值, 然后在build方法真正创建对象之前, 做集中的校验, 校验通过之后才会创建对象. 并且将类的构造函数设置成private, 这样就只能通过建造者来创建对象. 同时将不再提供set方法, 这样创建出来的对象就是不可变对象了\n实现 public class ResourcePoolConfig { private String name; private int maxTotal; private int maxIdle; private int minIdle; private ResourcePoolConfig(Builder builder) { this.name = builder.name; this.maxTotal = builder.maxTotal; this.maxIdle = builder.maxIdle; this.minIdle = builder.minIdle; } //...省略getter方法... //我们将Builder类设计成了ResourcePoolConfig的内部类。 //我们也可以将Builder类设计成独立的非内部类ResourcePoolConfigBuilder。 public static class Builder { private static final int DEFAULT_MAX_TOTAL = 8; private static final int DEFAULT_MAX_IDLE = 8; private static final int DEFAULT_MIN_IDLE = 0; private String name; private int maxTotal = DEFAULT_MAX_TOTAL; private int maxIdle = DEFAULT_MAX_IDLE; private int minIdle = DEFAULT_MIN_IDLE; public ResourcePoolConfig build() { // 校验逻辑放到这里来做，包括必填项校验、依赖关系校验、约束条件校验等 if (StringUtils.isBlank(name)) { throw new IllegalArgumentException(\u0026#34;...\u0026#34;); } if (maxIdle \u0026gt; maxTotal) { throw new IllegalArgumentException(\u0026#34;...\u0026#34;); } if (minIdle \u0026gt; maxTotal || minIdle \u0026gt; maxIdle) { throw new IllegalArgumentException(\u0026#34;...\u0026#34;); } return new ResourcePoolConfig(this); } public Builder setName(String name) { if (StringUtils.isBlank(name)) { throw new IllegalArgumentException(\u0026#34;...\u0026#34;); } this.name = name; return this; } public Builder setMaxTotal(int maxTotal) { if (maxTotal \u0026lt;= 0) { throw new IllegalArgumentException(\u0026#34;...\u0026#34;); } this.maxTotal = maxTotal; return this; } public Builder setMaxIdle(int maxIdle) { if (maxIdle \u0026lt; 0) { throw new IllegalArgumentException(\u0026#34;...\u0026#34;); } this.maxIdle = maxIdle; return this; } public Builder setMinIdle(int minIdle) { if (minIdle \u0026lt; 0) { throw new IllegalArgumentException(\u0026#34;...\u0026#34;); } this.minIdle = minIdle; return this; } } } // 这段代码会抛出IllegalArgumentException，因为minIdle\u0026gt;maxIdle ResourcePoolConfig config = new ResourcePoolConfig.Builder() .setName(\u0026#34;dbconnectionpool\u0026#34;) .setMaxTotal(16) .setMaxIdle(10) .setMinIdle(12) .build(); 为了避免这种无效状态的存在, 我们就需要使用构造函数一次性初始化好所有的成员变量. 如果构造函数参数过多, 我们就需要考虑使用建造者模式, 先设置建造者的变量, 然后再一次性的创建对象, 让对象一直处于有效状态.\n使用建造者模式创建对象, 还能避免对象存在无效状态. 假如我们定义了一个长方形, 如果不使用建造者模式, 而是使用set的方式, 那么在调用第一个set之后和调用第二个set之前, 这个对象是处于无效状态的.\n与[[Blog-Posts/coding/design/工厂模式]]的区别 建造者模式创建的是同一种类型的复杂对象, 通过设置不同的可选参数, 来定制化的创建不同的对象\n而工厂模式则是创建不同但是相关类型的对象(继承同一父类或者接口的一组子类), 通过给定的参数来决定创建哪种类型的对象.\n","permalink":"https://www.liunaijie.top/coding/design/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e我们明明可以直接使用构造函数或者配合set方法就能创建对象, 为什么还需要通过建造者模式来创建呢.\u003c/p\u003e\n\u003cp\u003e建造者模式和工厂模式都可以创建对象, 他们之间的区别是什么?\u003c/p\u003e\n\u003ch1 id=\"为什么需要建造者模式\"\u003e\u003cstrong\u003e为什么需要建造者模式\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003e在某些配置类中, 有大量的参数需要传入, 并且这些参数有一些是必须的, 有一些是可选的.\u003c/p\u003e\n\u003cp\u003e某些参数之间有依赖关系, 比如当用户设置了A, 那么就必须设置B等等.\u003c/p\u003e\n\u003cp\u003e并且我们希望类对象是不可变对象, 也就是说对象在创建好之后, 就不能修改内部的属性值. 要实现这个功能, 我们就不能暴露set方法.\u003c/p\u003e\n\u003cp\u003e这时我们对这个类的创建虽然还可以通过构造函数来进行创建, 但是复杂度和可读性都不友好. 这时就可以使用建造者模式来进行对象的创建.\u003c/p\u003e\n\u003cp\u003e将校验逻辑放到Builder类中, 先创建建造者, 并通过set方法来设置建造者的变量值, 然后在build方法真正创建对象之前, 做集中的校验, 校验通过之后才会创建对象. 并且将类的构造函数设置成private, 这样就只能通过建造者来创建对象. 同时将不再提供set方法, 这样创建出来的对象就是不可变对象了\u003c/p\u003e\n\u003ch1 id=\"实现\"\u003e\u003cstrong\u003e实现\u003c/strong\u003e\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e public class ResourcePoolConfig {\n   private String name;\n   private int maxTotal;\n   private int maxIdle;\n   private int minIdle;\n \n   private ResourcePoolConfig(Builder builder) {\n     this.name = builder.name;\n     this.maxTotal = builder.maxTotal;\n     this.maxIdle = builder.maxIdle;\n     this.minIdle = builder.minIdle;\n   }\n   //...省略getter方法...\n \n   //我们将Builder类设计成了ResourcePoolConfig的内部类。\n   //我们也可以将Builder类设计成独立的非内部类ResourcePoolConfigBuilder。\n   public static class Builder {\n     private static final int DEFAULT_MAX_TOTAL = 8;\n     private static final int DEFAULT_MAX_IDLE = 8;\n     private static final int DEFAULT_MIN_IDLE = 0;\n \n     private String name;\n     private int maxTotal = DEFAULT_MAX_TOTAL;\n     private int maxIdle = DEFAULT_MAX_IDLE;\n     private int minIdle = DEFAULT_MIN_IDLE;\n \n     public ResourcePoolConfig build() {\n       // 校验逻辑放到这里来做，包括必填项校验、依赖关系校验、约束条件校验等\n       if (StringUtils.isBlank(name)) {\n         throw new IllegalArgumentException(\u0026#34;...\u0026#34;);\n       }\n       if (maxIdle \u0026gt; maxTotal) {\n         throw new IllegalArgumentException(\u0026#34;...\u0026#34;);\n       }\n       if (minIdle \u0026gt; maxTotal || minIdle \u0026gt; maxIdle) {\n         throw new IllegalArgumentException(\u0026#34;...\u0026#34;);\n       }\n \n       return new ResourcePoolConfig(this);\n     }\n \n     public Builder setName(String name) {\n       if (StringUtils.isBlank(name)) {\n         throw new IllegalArgumentException(\u0026#34;...\u0026#34;);\n       }\n       this.name = name;\n       return this;\n     }\n \n     public Builder setMaxTotal(int maxTotal) {\n       if (maxTotal \u0026lt;= 0) {\n         throw new IllegalArgumentException(\u0026#34;...\u0026#34;);\n       }\n       this.maxTotal = maxTotal;\n       return this;\n     }\n \n     public Builder setMaxIdle(int maxIdle) {\n       if (maxIdle \u0026lt; 0) {\n         throw new IllegalArgumentException(\u0026#34;...\u0026#34;);\n       }\n       this.maxIdle = maxIdle;\n       return this;\n     }\n \n     public Builder setMinIdle(int minIdle) {\n       if (minIdle \u0026lt; 0) {\n         throw new IllegalArgumentException(\u0026#34;...\u0026#34;);\n       }\n       this.minIdle = minIdle;\n       return this;\n     }\n   }\n }\n \n // 这段代码会抛出IllegalArgumentException，因为minIdle\u0026gt;maxIdle\n ResourcePoolConfig config = new ResourcePoolConfig.Builder()\n         .setName(\u0026#34;dbconnectionpool\u0026#34;)\n         .setMaxTotal(16)\n         .setMaxIdle(10)\n         .setMinIdle(12)\n         .build();\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e为了避免这种无效状态的存在, 我们就需要使用构造函数一次性初始化好所有的成员变量. 如果构造函数参数过多, 我们就需要考虑使用建造者模式, 先设置建造者的变量, 然后再一次性的创建对象, 让对象一直处于有效状态.\u003c/p\u003e","title":"设计模式-建造者模式"},{"content":"解释器模式为某个语言定义它的语法表示, 并定义一个解释器用来处理这个语法. 只会在一些特定的领域才会被用到: 比如编译器, 规则引擎, 正则表达式等.\n","permalink":"https://www.liunaijie.top/coding/design/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e解释器模式为某个语言定义它的语法表示, 并定义一个解释器用来处理这个语法. 只会在一些特定的领域才会被用到: 比如编译器, 规则引擎, 正则表达式等.\u003c/p\u003e","title":"设计模式-解释器模式"},{"content":"门面模式主要用在接口设计方面使用.\n在实际工作中, 为了保证接口的可复用性(通用性), 会将接口尽量设计的细粒度一点, 职责单一一点.\n但是如果接口的粒度过小, 在开发一个业务功能时, 就会导致需要调用n多细粒度的接口才能完成.\n相反, 如果接口的粒度太大, 一个接口做了n多件事情, 就会导致接口不够通用, 可复用性不好.\n接口模式就是解决这种情况.\n门面模式为子系统提供一组统一的接口, 定义一组高层接口让子系统更容易使用.\n就是将多个小粒度的接口做一层包装, 做多个接口的整合.\n门面模式的应用场景 解决易用性问题 解决性能问题 解决分布式问题 ","permalink":"https://www.liunaijie.top/coding/design/%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e门面模式主要用在接口设计方面使用.\u003c/p\u003e\n\u003cp\u003e在实际工作中, 为了保证接口的可复用性(通用性), 会将接口尽量设计的细粒度一点, 职责单一一点.\u003c/p\u003e\n\u003cp\u003e但是如果接口的粒度过小, 在开发一个业务功能时, 就会导致需要调用n多细粒度的接口才能完成.\u003c/p\u003e\n\u003cp\u003e相反, 如果接口的粒度太大, 一个接口做了n多件事情, 就会导致接口不够通用, 可复用性不好.\u003c/p\u003e\n\u003cp\u003e接口模式就是解决这种情况.\u003c/p\u003e\n\u003cp\u003e门面模式为子系统提供一组统一的接口, 定义一组高层接口让子系统更容易使用.\u003c/p\u003e\n\u003cp\u003e就是将多个小粒度的接口做一层包装, 做多个接口的整合.\u003c/p\u003e\n\u003ch2 id=\"门面模式的应用场景\"\u003e门面模式的应用场景\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e解决易用性问题\u003c/li\u003e\n\u003cli\u003e解决性能问题\u003c/li\u003e\n\u003cli\u003e解决分布式问题\u003c/li\u003e\n\u003c/ol\u003e","title":"设计模式-门面模式"},{"content":"命令模式将请求(命令)封装成一个对象, 这样可以使用不同的请求参数化其他对象(将不同请求依赖注入到其他对象), 并且能够支持请求(命令)的排队执行, 记录日志, 撤销等(附加控制)功能.\n命令模式用的最核心的实现手法, 是将函数封装成对象.\n","permalink":"https://www.liunaijie.top/coding/design/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e命令模式将请求(命令)封装成一个对象, 这样可以使用不同的请求参数化其他对象(将不同请求依赖注入到其他对象), 并且能够支持请求(命令)的排队执行, 记录日志, 撤销等(附加控制)功能.\u003c/p\u003e\n\u003cp\u003e命令模式用的最核心的实现手法, 是将函数封装成对象.\u003c/p\u003e","title":"设计模式-命令模式"},{"content":"模版模式主要用来解决复用和扩展两个问题\n模版模式在一个方法中定义一个算法骨架, 并将某些步骤推迟到子类中实现. 模版方法模式可以让子类在不改变算法整体结构的情况下, 重新定义算法中的某些步骤.\n在Java中, 可以理解为abstract抽象类, 在父类中定义一个方法, 这个方法中的某一步需要子类去实现.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public abstract class AbstractClass { public final void templateMethod() { //... method1(); //... method2(); //... } protected abstract void method1(); protected abstract void method2(); } public class ConcreteClass1 extends AbstractClass { @Override protected void method1() { //... } @Override protected void method2() { //... } } public class ConcreteClass2 extends AbstractClass { @Override protected void method1() { //... } @Override protected void method2() { //... } } AbstractClass demo = ConcreteClass1(); demo.templateMethod(); ","permalink":"https://www.liunaijie.top/coding/design/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e模版模式主要用来解决复用和扩展两个问题\u003c/p\u003e\n\u003cp\u003e模版模式在一个方法中定义一个算法骨架, 并将某些步骤推迟到子类中实现. 模版方法模式可以让子类在不改变算法整体结构的情况下, 重新定义算法中的某些步骤.\u003c/p\u003e\n\u003cp\u003e在Java中, 可以理解为abstract抽象类, 在父类中定义一个方法, 这个方法中的某一步需要子类去实现.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eAbstractClass\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003etemplateMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003emethod1\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003emethod2\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprotected\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emethod1\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprotected\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emethod2\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eConcreteClass1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eAbstractClass\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprotected\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emethod1\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprotected\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emethod2\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eConcreteClass2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eAbstractClass\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprotected\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emethod1\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprotected\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emethod2\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eAbstractClass\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edemo\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eConcreteClass1\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003edemo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etemplateMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"设计模式-模板模式"},{"content":"抽离一套接口, 下面可以有多种实现.\n原理解析 桥接模式, 也叫做桥梁模式(Bridge Design Pattern), 将抽象和实现解耦, 让他们可以独立变化.\n这里的抽象, 并非指的是\u0026quot;抽象类\u0026quot;或\u0026quot;接口”, 而是被抽象出来的一套“类库”, 它只包含骨架代码, 真正的业务逻辑需要委派给定义中的“实现”来完成. 这里的“实现”, 也并非“接口的实现类”, 而是一套独立的”类库“. ”抽象“和”实现“独立开发, 通过对象之间的组合关系, 组装在一起.\n一个例子就是Java中的JDBC与其他数据库的关系.\nJDBC定义了一个通用的接口, 其他数据库实现这一套接口. 在执行数据库操作时, JDBC将数据库的操作委托给真正执行的实现类来执行.\n举例 使用桥接模式来实现一套告警机制: 根据不同的告警规则, 触发不同类型的告警. 并且告警支持多种通知渠道.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 public interface MsgSender { void send(String message); } public class TelephoneMsgSender implements MsgSender { private List\u0026lt;String\u0026gt; telephones; public TelephoneMsgSender(List\u0026lt;String\u0026gt; telephones) { this.telephones = telephones; } @Override public void send(String message) { //... } } public class EmailMsgSender implements MsgSender { // 与TelephoneMsgSender代码结构类似，所以省略... } public class WechatMsgSender implements MsgSender { // 与TelephoneMsgSender代码结构类似，所以省略... } public abstract class Notification { protected MsgSender msgSender; public Notification(MsgSender msgSender) { this.msgSender = msgSender; } public abstract void notify(String message); } public class SevereNotification extends Notification { public SevereNotification(MsgSender msgSender) { super(msgSender); } @Override public void notify(String message) { msgSender.send(message); } } public class UrgencyNotification extends Notification { // 与SevereNotification代码结构类似，所以省略... } public class NormalNotification extends Notification { // 与SevereNotification代码结构类似，所以省略... } public class TrivialNotification extends Notification { // 与SevereNotification代码结构类似，所以省略... } 代理、桥接、装饰器、适配器4种设计模式的区别\n","permalink":"https://www.liunaijie.top/coding/design/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e抽离一套接口, 下面可以有多种实现.\u003c/p\u003e\n\u003ch1 id=\"原理解析\"\u003e\u003cstrong\u003e原理解析\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003e桥接模式, 也叫做桥梁模式(Bridge Design Pattern), 将抽象和实现解耦, 让他们可以独立变化.\u003c/p\u003e\n\u003cp\u003e这里的抽象, 并非指的是\u0026quot;抽象类\u0026quot;或\u0026quot;接口”, 而是被抽象出来的一套“类库”, 它只包含骨架代码, 真正的业务逻辑需要委派给定义中的“实现”来完成. 这里的“实现”, 也并非“接口的实现类”, 而是一套独立的”类库“. ”抽象“和”实现“独立开发, 通过对象之间的组合关系, 组装在一起.\u003c/p\u003e\n\u003cp\u003e一个例子就是Java中的JDBC与其他数据库的关系.\u003c/p\u003e\n\u003cp\u003eJDBC定义了一个通用的接口, 其他数据库实现这一套接口. 在执行数据库操作时, JDBC将数据库的操作委托给真正执行的实现类来执行.\u003c/p\u003e\n\u003ch2 id=\"举例\"\u003e\u003cstrong\u003e举例\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e使用桥接模式来实现一套告警机制: 根据不同的告警规则, 触发不同类型的告警. 并且告警支持多种通知渠道.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e54\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e55\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e56\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003einterface\u003c/span\u003e \u003cspan class=\"nc\"\u003eMsgSender\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eTelephoneMsgSender\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eimplements\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMsgSender\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etelephones\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eTelephoneMsgSender\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etelephones\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etelephones\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etelephones\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eEmailMsgSender\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eimplements\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMsgSender\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 与TelephoneMsgSender代码结构类似，所以省略...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eWechatMsgSender\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eimplements\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMsgSender\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 与TelephoneMsgSender代码结构类似，所以省略...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eNotification\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"kd\"\u003eprotected\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMsgSender\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emsgSender\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eNotification\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMsgSender\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emsgSender\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emsgSender\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emsgSender\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eabstract\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003enotify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSevereNotification\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNotification\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eSevereNotification\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMsgSender\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emsgSender\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"kd\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emsgSender\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003enotify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"n\"\u003emsgSender\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eUrgencyNotification\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNotification\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 与SevereNotification代码结构类似，所以省略...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eNormalNotification\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNotification\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 与SevereNotification代码结构类似，所以省略...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eTrivialNotification\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNotification\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 与SevereNotification代码结构类似，所以省略...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ca href=\"Blog-Posts/coding/design/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.md#%E4%BB%A3%E7%90%86%E3%80%81%E6%A1%A5%E6%8E%A5%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E3%80%81%E9%80%82%E9%85%8D%E5%99%A84%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB\"\u003e代理、桥接、装饰器、适配器4种设计模式的区别\u003c/a\u003e\u003c/p\u003e","title":"设计模式-桥街模式"},{"content":"Adapter Design Pattern, 这个模式用来做适配, 将不兼容的接口转化为可兼容的接口.\n适配器模式有两种实现方式:\n类适配器, 使用继承关系来实现 对象适配器, 使用组合关系来实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // 类适配器: 基于继承 public interface ITarget { void f1(); void f2(); void fc(); } public class Adaptee { public void fa() { //... } public void fb() { //... } public void fc() { //... } } public class Adaptor extends Adaptee implements ITarget { public void f1() { super.fa(); } public void f2() { //...重新实现f2()... } // 这里fc()不需要实现，直接继承自Adaptee，这是跟对象适配器最大的不同点 } // 对象适配器：基于组合 public interface ITarget { void f1(); void f2(); void fc(); } public class Adaptee { public void fa() { //... } public void fb() { //... } public void fc() { //... } } public class Adaptor implements ITarget { private Adaptee adaptee; public Adaptor(Adaptee adaptee) { this.adaptee = adaptee; } public void f1() { adaptee.fa(); //委托给Adaptee } public void f2() { //...重新实现f2()... } public void fc() { adaptee.fc(); } } 针对这两种实现方式，在实际的开发中，到底该如何选择使用哪一种呢？判断的标准主要有两个，一个是 Adaptee 接口的个数，另一个是 Adaptee 和 ITarget 的契合程度。\n如果 Adaptee 接口并不多，那两种实现方式都可以。 如果 Adaptee 接口很多，而且 Adaptee 和 ITarget 接口定义大部分都相同，那我们推荐使用类适配器，因为 Adaptor 复用父类 Adaptee 的接口，比起对象适配器的实现方式，Adaptor 的代码量要少一些。 如果 Adaptee 接口很多，而且 Adaptee 和 ITarget 接口定义大部分都不相同，那我们推荐使用对象适配器，因为组合结构相对于继承更加灵活。 适配器模式应用场景总结 封装有缺陷的接口设计 统一多个类的接口设计 替换依赖的外部系统 兼容老版本接口 适配不同格式的数据 代理、桥接、装饰器、适配器4种设计模式的区别\n","permalink":"https://www.liunaijie.top/coding/design/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003eAdapter Design Pattern, 这个模式用来做适配, 将不兼容的接口转化为可兼容的接口.\u003c/p\u003e\n\u003cp\u003e适配器模式有两种实现方式:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e类适配器, 使用继承关系来实现\u003c/li\u003e\n\u003cli\u003e对象适配器, 使用组合关系来实现\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e54\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e55\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e56\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e57\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 类适配器: 基于继承\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003einterface\u003c/span\u003e \u003cspan class=\"nc\"\u003eITarget\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ef1\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ef2\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003efc\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eAdaptee\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003efa\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e//... }\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003efb\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e//... }\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003efc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e//... }\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eAdaptor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eAdaptee\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eimplements\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eITarget\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ef1\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003efa\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ef2\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...重新实现f2()...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 这里fc()不需要实现，直接继承自Adaptee，这是跟对象适配器最大的不同点\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 对象适配器：基于组合\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003einterface\u003c/span\u003e \u003cspan class=\"nc\"\u003eITarget\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ef1\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ef2\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003efc\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eAdaptee\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003efa\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e//... }\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003efb\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e//... }\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003efc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e//... }\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eAdaptor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eimplements\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eITarget\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eAdaptee\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eadaptee\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eAdaptor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eAdaptee\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eadaptee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadaptee\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eadaptee\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ef1\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eadaptee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003efa\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e//委托给Adaptee\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ef2\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//...重新实现f2()...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003efc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eadaptee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003efc\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e针对这两种实现方式，在实际的开发中，到底该如何选择使用哪一种呢？判断的标准主要有两个，一个是 Adaptee 接口的个数，另一个是 Adaptee 和 ITarget 的契合程度。\u003c/p\u003e","title":"设计模式-适配器模式"},{"content":"Flyweight Design Pattern. 复用对象, 节省内存. 前提是享元对象是不可变对象.\n例如Java中的Integer缓存池. 或者某些系统中不会改变的值, 可以将其复用.\n","permalink":"https://www.liunaijie.top/coding/design/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003eFlyweight Design Pattern. 复用对象, 节省内存. 前提是享元对象是不可变对象.\u003c/p\u003e\n\u003cp\u003e例如Java中的Integer缓存池. 或者某些系统中不会改变的值, 可以将其复用.\u003c/p\u003e","title":"设计模式-享元模式"},{"content":"原型模式的原理与应用 如果对象的创建成本比较大, 而同一个类的不同对象之间差别不大(大部分字段都相同), 在这种情况下, 我们可以利用对已有对象(原型)进行复制(或者叫拷贝)的方式来创建新对象, 以达到节省创建时间的目的, 这种基于原型来创建对象的方式就叫做原型设计模式.\n何为\u0026quot;对象的创建成本比较大\u0026quot; 创建对象包含的申请内存, 变量赋值这一过程, 本身并不会花费太多时间, 对于大部分业务系统来说, 这点时间是可以忽略的.\n如果对象中的数据需要复杂的计算才能得到(比如排序, 计算哈希值), 或者需要从RPC, 网络, 数据库, 文件系统等非常慢速的IO中读取, 这种情况下, 我们就可以利用原型模式, 从其他已有对象中直接拷贝得到, 而不用每次在创建新对象时, 都重复执行这些耗时的操作.\n原型模式的实现方式: 深拷贝与浅拷贝 深拷贝与浅拷贝的区别在于: 浅拷贝只会复制对象的索引(内存地址), 而不会复制对象本身. 深拷贝不仅会复制索引还好复制对象本身.\n浅拷贝得到的对象跟原始对象共享数据, 当值进行修改后, 两边的值都会被修改, 因为他们是一个值.\n而深拷贝得到的是一份完完全全独立的对象.\nJava中的clone方法执行的就是浅拷贝.\n进行深拷贝有两种方法:\n递归拷贝对象, 对象的引用对象以及饮用对象的引用对象, 直到要拷贝的对象只包含基本数据类型, 没有饮用对象为止.\npublic class Demo { private HashMap\u0026lt;String, SearchWord\u0026gt; currentKeywords=new HashMap\u0026lt;\u0026gt;(); private long lastUpdateTime = -1; public void refresh() { // Deep copy HashMap\u0026lt;String, SearchWord\u0026gt; newKeywords = new HashMap\u0026lt;\u0026gt;(); for (HashMap.Entry\u0026lt;String, SearchWord\u0026gt; e : currentKeywords.entrySet()) { SearchWord searchWord = e.getValue(); SearchWord newSearchWord = new SearchWord( searchWord.getKeyword(), searchWord.getCount(), searchWord.getLastUpdateTime()); newKeywords.put(e.getKey(), newSearchWord); } // 从数据库中取出更新时间\u0026gt;lastUpdateTime的数据，放入到newKeywords中 List\u0026lt;SearchWord\u0026gt; toBeUpdatedSearchWords = getSearchWords(lastUpdateTime); long maxNewUpdatedTime = lastUpdateTime; for (SearchWord searchWord : toBeUpdatedSearchWords) { if (searchWord.getLastUpdateTime() \u0026gt; maxNewUpdatedTime) { maxNewUpdatedTime = searchWord.getLastUpdateTime(); } if (newKeywords.containsKey(searchWord.getKeyword())) { SearchWord oldSearchWord = newKeywords.get(searchWord.getKeyword()); oldSearchWord.setCount(searchWord.getCount()); oldSearchWord.setLastUpdateTime(searchWord.getLastUpdateTime()); } else { newKeywords.put(searchWord.getKeyword(), searchWord); } } lastUpdateTime = maxNewUpdatedTime; currentKeywords = newKeywords; } private List\u0026lt;SearchWord\u0026gt; getSearchWords(long lastUpdateTime) { // TODO: 从数据库中取出更新时间\u0026gt;lastUpdateTime的数据 return null; } } 先将对象序列化, 然后再反序列化成新的对象\npublic Object deepCopy(Object object) { ByteArrayOutputStream bo = new ByteArrayOutputStream(); ObjectOutputStream oo = new ObjectOutputStream(bo); oo.writeObject(object); ByteArrayInputStream bi = new ByteArrayInputStream(bo.toByteArray()); ObjectInputStream oi = new ObjectInputStream(bi); return oi.readObject(); } 优化 这两种方法, 不管采用哪种, 深拷贝都要比浅拷贝耗时, 耗内存空间. 我们可以先采用浅拷贝的方法来进行复制, 对于需要更新的对象, 再使用深拷贝的方式来创建一份新的对象, 替换老对象. 这种方法即利用了浅拷贝节省时间, 空间的优点. 又能保证数据符合要求.\n","permalink":"https://www.liunaijie.top/coding/design/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/","summary":"\u003ch1 id=\"原型模式的原理与应用\"\u003e\u003cstrong\u003e原型模式的原理与应用\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003e如果对象的创建成本比较大, 而同一个类的不同对象之间差别不大(大部分字段都相同), 在这种情况下, 我们可以利用对已有对象(原型)进行复制(或者叫拷贝)的方式来创建新对象, 以达到节省创建时间的目的, 这种基于原型来创建对象的方式就叫做\u003cstrong\u003e原型设计模式\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"何为对象的创建成本比较大\"\u003e\u003cstrong\u003e何为\u0026quot;对象的创建成本比较大\u0026quot;\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e创建对象包含的申请内存, 变量赋值这一过程, 本身并不会花费太多时间, 对于大部分业务系统来说, 这点时间是可以忽略的.\u003c/p\u003e\n\u003cp\u003e如果对象中的数据需要复杂的计算才能得到(比如排序, 计算哈希值), 或者需要从RPC, 网络, 数据库, 文件系统等非常慢速的IO中读取, 这种情况下, 我们就可以利用原型模式, 从其他已有对象中直接拷贝得到, 而不用每次在创建新对象时, 都重复执行这些耗时的操作.\u003c/p\u003e\n\u003ch1 id=\"原型模式的实现方式-深拷贝与浅拷贝\"\u003e\u003cstrong\u003e原型模式的实现方式: 深拷贝与浅拷贝\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003e深拷贝与浅拷贝的区别在于: 浅拷贝只会复制对象的索引(内存地址), 而不会复制对象本身. 深拷贝不仅会复制索引还好复制对象本身.\u003c/p\u003e\n\u003cp\u003e浅拷贝得到的对象跟原始对象共享数据, 当值进行修改后, 两边的值都会被修改, 因为他们是一个值.\u003c/p\u003e\n\u003cp\u003e而深拷贝得到的是一份完完全全独立的对象.\u003c/p\u003e\n\u003cp\u003eJava中的clone方法执行的就是浅拷贝.\u003c/p\u003e\n\u003cp\u003e进行深拷贝有两种方法:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e递归拷贝对象, 对象的引用对象以及饮用对象的引用对象, 直到要拷贝的对象只包含基本数据类型, 没有饮用对象为止.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e public class Demo {\n   private HashMap\u0026lt;String, SearchWord\u0026gt; currentKeywords=new HashMap\u0026lt;\u0026gt;();\n   private long lastUpdateTime = -1;\n \n   public void refresh() {\n     // Deep copy\n     HashMap\u0026lt;String, SearchWord\u0026gt; newKeywords = new HashMap\u0026lt;\u0026gt;();\n     for (HashMap.Entry\u0026lt;String, SearchWord\u0026gt; e : currentKeywords.entrySet()) {\n       SearchWord searchWord = e.getValue();\n       SearchWord newSearchWord = new SearchWord(\n               searchWord.getKeyword(), searchWord.getCount(), searchWord.getLastUpdateTime());\n       newKeywords.put(e.getKey(), newSearchWord);\n     }\n \n     // 从数据库中取出更新时间\u0026gt;lastUpdateTime的数据，放入到newKeywords中\n     List\u0026lt;SearchWord\u0026gt; toBeUpdatedSearchWords = getSearchWords(lastUpdateTime);\n     long maxNewUpdatedTime = lastUpdateTime;\n     for (SearchWord searchWord : toBeUpdatedSearchWords) {\n       if (searchWord.getLastUpdateTime() \u0026gt; maxNewUpdatedTime) {\n         maxNewUpdatedTime = searchWord.getLastUpdateTime();\n       }\n       if (newKeywords.containsKey(searchWord.getKeyword())) {\n         SearchWord oldSearchWord = newKeywords.get(searchWord.getKeyword());\n         oldSearchWord.setCount(searchWord.getCount());\n         oldSearchWord.setLastUpdateTime(searchWord.getLastUpdateTime());\n       } else {\n         newKeywords.put(searchWord.getKeyword(), searchWord);\n       }\n     }\n \n     lastUpdateTime = maxNewUpdatedTime;\n     currentKeywords = newKeywords;\n   }\n \n   private List\u0026lt;SearchWord\u0026gt; getSearchWords(long lastUpdateTime) {\n     // TODO: 从数据库中取出更新时间\u0026gt;lastUpdateTime的数据\n     return null;\n   }\n \n }\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e先将对象序列化, 然后再反序列化成新的对象\u003c/p\u003e","title":"设计模式-原形模式"},{"content":"将请求的发送和接收解耦, 让多个接收对象都有机会处理这个请求. 将这些接收对象串成一条链, 并沿着条链传递这个请求, 直到链上的某个接收对象能够处理它为止.\n定义一个链表(或数组), 存储多个处理器, 当接收到一个请求时, 遍历这个链表, 每个处理器都对这个请求处理一遍. 或者遍历时选择一个处理器来进行处理.\n多个处理器需要实现相同的接口\n","permalink":"https://www.liunaijie.top/coding/design/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e将请求的发送和接收解耦, 让多个接收对象都有机会处理这个请求. 将这些接收对象串成一条链, 并沿着条链传递这个请求, 直到链上的某个接收对象能够处理它为止.\u003c/p\u003e\n\u003cp\u003e定义一个链表(或数组), 存储多个处理器, 当接收到一个请求时, 遍历这个链表, 每个处理器都对这个请求处理一遍. 或者遍历时选择一个处理器来进行处理.\u003c/p\u003e\n\u003cp\u003e多个处理器需要实现相同的接口\u003c/p\u003e","title":"设计模式-职责链模式"},{"content":"中介模式定义来一个单独的(中介)对象, 来封装一组对象之间的交互. 将这组对象之间的交互委派给予中介对象交互, 来避免对象之间的直接交互.\n中介模式的设计思想跟中间层很像, 通过引入中介这个中间层, 将一组对象直接的交互关系(或者依赖关系)从多对多(网状关系)转化为一对多(星状关系). 原来一个对象要跟N个对象交互, 现在只需要跟一个中介对象交互, 从而最小化对象之间的交互关系, 降低了代码的复杂度, 提高了代码的可读性和可维护性.\n观察者模式和中介模式区别 观察者模式中的交互关系一般都是单向的, 一个参与者只有一个身份, 要么是观察者, 要么是被观察者.\n在中介模式中, 参与者之间的关系错综复杂, 既可以是消息的发送者, 也可以是消息的接收者.\n","permalink":"https://www.liunaijie.top/coding/design/%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e中介模式定义来一个单独的(中介)对象, 来封装一组对象之间的交互. 将这组对象之间的交互委派给予中介对象交互, 来避免对象之间的直接交互.\u003c/p\u003e\n\u003cp\u003e中介模式的设计思想跟中间层很像, 通过引入中介这个中间层, 将一组对象直接的交互关系(或者依赖关系)从多对多(网状关系)转化为一对多(星状关系). 原来一个对象要跟N个对象交互, 现在只需要跟一个中介对象交互, 从而最小化对象之间的交互关系, 降低了代码的复杂度, 提高了代码的可读性和可维护性.\u003c/p\u003e\n\u003ch2 id=\"观察者模式和中介模式区别\"\u003e观察者模式和中介模式区别\u003c/h2\u003e\n\u003cp\u003e观察者模式中的交互关系一般都是单向的, 一个参与者只有一个身份, 要么是观察者, 要么是被观察者.\u003c/p\u003e\n\u003cp\u003e在中介模式中, 参与者之间的关系错综复杂, 既可以是消息的发送者, 也可以是消息的接收者.\u003c/p\u003e","title":"设计模式-中介模式"},{"content":"不通过继承的方式, 而是组合的方式来对传入的对象进行功能增强.\n装饰器模式主要解决即成关系过于复杂的问题, 通过组合来替代继承.\n它主要的作用是给原始类添加增强功能.\n装饰器模式还有一个特点, 那就是可以对原始类嵌套使用多个装饰器. 为了满足这个应用场景, 在设计的时候, 装饰器类需要跟原始类继承相同的抽象类或者接口\n代理、桥接、装饰器、适配器4种设计模式的区别\n","permalink":"https://www.liunaijie.top/coding/design/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e不通过继承的方式, 而是组合的方式来对传入的对象进行功能增强.\u003c/p\u003e\n\u003cp\u003e装饰器模式主要解决即成关系过于复杂的问题, 通过组合来替代继承.\u003c/p\u003e\n\u003cp\u003e它主要的作用是给原始类添加增强功能.\u003c/p\u003e\n\u003cp\u003e装饰器模式还有一个特点, 那就是可以对原始类嵌套使用多个装饰器. 为了满足这个应用场景, 在设计的时候, 装饰器类需要跟原始类继承相同的抽象类或者接口\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"Blog-Posts/coding/design/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.md#%E4%BB%A3%E7%90%86%E3%80%81%E6%A1%A5%E6%8E%A5%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E3%80%81%E9%80%82%E9%85%8D%E5%99%A84%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB\"\u003e代理、桥接、装饰器、适配器4种设计模式的区别\u003c/a\u003e\u003c/p\u003e","title":"设计模式-装饰器模式"},{"content":"状态模式一般用来实现状态机. 状态机的实现方式有多种, 除了状态模式还有分支逻辑法和查表法.\n有限状态机 Finite State Machine(FSM), 简称状态机, 状态机有3个组成部分: 状态(State), 事件(Event), 动作(Action). 事件也称为转移条件. 事件触发状态的转移及动作的执行.\n状态模式通过将事件触发的状态转移和动作执行, 拆分到不同的状态类中, 来避免分支判断逻辑\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 public interface IMario { State getName(); void obtainMushRoom(MarioStateMachine stateMachine); void obtainCape(MarioStateMachine stateMachine); void obtainFireFlower(MarioStateMachine stateMachine); void meetMonster(MarioStateMachine stateMachine); } public class SmallMario implements IMario { private static final SmallMario instance = new SmallMario(); private SmallMario() {} public static SmallMario getInstance() { return instance; } @Override public State getName() { return State.SMALL; } @Override public void obtainMushRoom(MarioStateMachine stateMachine) { stateMachine.setCurrentState(SuperMario.getInstance()); stateMachine.setScore(stateMachine.getScore() + 100); } @Override public void obtainCape(MarioStateMachine stateMachine) { stateMachine.setCurrentState(CapeMario.getInstance()); stateMachine.setScore(stateMachine.getScore() + 200); } @Override public void obtainFireFlower(MarioStateMachine stateMachine) { stateMachine.setCurrentState(FireMario.getInstance()); stateMachine.setScore(stateMachine.getScore() + 300); } @Override public void meetMonster(MarioStateMachine stateMachine) { // do nothing... } } // 省略SuperMario、CapeMario、FireMario类... public class MarioStateMachine { private int score; private IMario currentState; public MarioStateMachine() { this.score = 0; this.currentState = SmallMario.getInstance(); } public void obtainMushRoom() { this.currentState.obtainMushRoom(this); } public void obtainCape() { this.currentState.obtainCape(this); } public void obtainFireFlower() { this.currentState.obtainFireFlower(this); } public void meetMonster() { this.currentState.meetMonster(this); } public int getScore() { return this.score; } public State getCurrentState() { return this.currentState.getName(); } public void setScore(int score) { this.score = score; } public void setCurrentState(IMario currentState) { this.currentState = currentState; } } ","permalink":"https://www.liunaijie.top/coding/design/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e状态模式一般用来实现状态机. 状态机的实现方式有多种, 除了状态模式还有分支逻辑法和查表法.\u003c/p\u003e\n\u003ch1 id=\"有限状态机\"\u003e有限状态机\u003c/h1\u003e\n\u003cp\u003eFinite State Machine(FSM), 简称状态机, 状态机有3个组成部分: 状态(State), 事件(Event), 动作(Action). 事件也称为转移条件. 事件触发状态的转移及动作的执行.\u003c/p\u003e\n\u003cp\u003e状态模式通过将事件触发的状态转移和动作执行, 拆分到不同的状态类中, 来避免分支判断逻辑\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e54\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e55\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e56\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e57\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e58\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e59\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e60\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e61\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e62\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e63\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e64\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e65\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e66\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e67\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e68\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e69\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e70\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e71\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e72\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e73\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e74\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e75\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e76\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e77\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e78\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e79\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e80\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e81\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e82\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e83\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e84\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e85\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e86\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e87\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003einterface\u003c/span\u003e \u003cspan class=\"nc\"\u003eIMario\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eState\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetName\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eobtainMushRoom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMarioStateMachine\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eobtainCape\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMarioStateMachine\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eobtainFireFlower\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMarioStateMachine\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emeetMonster\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMarioStateMachine\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSmallMario\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eimplements\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eIMario\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSmallMario\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSmallMario\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eSmallMario\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSmallMario\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eState\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetName\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eSMALL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eobtainMushRoom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMarioStateMachine\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSuperMario\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetScore\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetScore\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eobtainCape\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMarioStateMachine\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCapeMario\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetScore\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetScore\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eobtainFireFlower\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMarioStateMachine\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFireMario\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetScore\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetScore\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e300\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emeetMonster\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMarioStateMachine\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e// do nothing...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 省略SuperMario、CapeMario、FireMario类...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMarioStateMachine\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003escore\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eIMario\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eMarioStateMachine\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003escore\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecurrentState\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSmallMario\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eobtainMushRoom\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eobtainMushRoom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eobtainCape\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eobtainCape\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eobtainFireFlower\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eobtainFireFlower\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emeetMonster\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emeetMonster\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetScore\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003escore\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eState\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetName\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003esetScore\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003escore\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003escore\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003escore\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003esetCurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIMario\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecurrentState\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecurrentState\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"设计模式-状态模式"},{"content":"主要用来处理树形结构数据\n组合模式，将一组对象组织成树形结构，将单个对象和组合对象都看做树中的节点，以统一处理逻辑，并且它利用树形结构的特点，递归地处理每个子树，依次简化代码实现。使用组合模式的前提在于，你的业务场景必须能够表示成树形结构。所以，组合模式的应用场景也比较局限，它并不是一种很常用的设计模式。\n例如有员工和部门这种关系, 或者文件和文件夹这种关系. 这种可以用树来表示的场景, 可以使用组合模式. 更方便的计算某个文件的大小, 文件的数量等. 部门的薪资等等这种问题\n","permalink":"https://www.liunaijie.top/coding/design/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/","summary":"\u003cp\u003e主要用来处理\u003cstrong\u003e树形\u003c/strong\u003e结构数据\u003c/p\u003e\n\u003cp\u003e组合模式，将一组对象组织成树形结构，将单个对象和组合对象都看做树中的节点，以统一处理逻辑，并且它利用树形结构的特点，递归地处理每个子树，依次简化代码实现。使用组合模式的前提在于，你的业务场景必须能够表示成树形结构。所以，组合模式的应用场景也比较局限，它并不是一种很常用的设计模式。\u003c/p\u003e\n\u003cp\u003e例如有员工和部门这种关系, 或者文件和文件夹这种关系. 这种可以用树来表示的场景, 可以使用组合模式. 更方便的计算某个文件的大小, 文件的数量等. 部门的薪资等等这种问题\u003c/p\u003e","title":"设计模式-组合模式"},{"content":"基础概念 线程的所有状态：\n这些状态都在 Thread中的State枚举中定义：\n1 2 3 4 5 6 7 8 9 10 11 12 13 public enum State { //表示刚刚创建的线程，这种线程还没开始执行 NEW, //在 start() 方法调用后，线程开始执行，此时状态处于 RUNABLE RUNNABLE, //如果线程在执行过程中遇到 synchronized 同步块，就会进入 BLOCKED 阻塞状态，直到获取请求的锁 BLOCKED, //等待状态，WAITING 会无时间限制的等待，TIMED_WAITING 会有时间限制 WAITING, TIMED_WAITING, //线程执行完毕，表示结束 TERMINATED; } 初始线程 Thread类\nRunable接口\nThread类中调用start()方法之后会让线程执行run()方法，而run()方法中又是对Runable实例的调用\n1 2 3 4 5 6 7 8 9 /* What will be run. */ private Runnable target; @Override public void run() { if (target != null) { target.run(); } } 中断线程 1 2 3 4 5 6 //中断线程 public void Thread.interrupt(); //判断线程是否被中断 public boolean Thread.isInterrupted(); //判断线程是否被中断，并清除当前的中断状态 public static boolean Thread.interrupted(); 线程中断并不会让线程立即退出，而是给线程发送一个通知，告诉目标线程，有人希望你退出，至于具体要不要退出还是由目标线程自己决定。我们来看一个例子。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public static void main(String[] args) throws InterruptedException { Thread t1 = new Thread() { @Override public void run() { while (true) { if (Thread.currentThread().isInterrupted()) { System.out.println(\u0026#34;interrupted\u0026#34;); break; } System.out.println(\u0026#34;i am running...\u0026#34;); } } }; t1.start(); Thread.sleep(2000); t1.interrupt(); } 在第 16 行对线程进行中断，如果没有第 6 行的判断，线程得到中断信号后不会停止还是会继续运行。这里添加了一个判断，如果被中断则退出。\n等待(wait)和通知(notify) 首先要明确，这两个方法并不是输入Thread类中的，而是输入Object类，这就意味着任何对象都可以调用这两个方法。\n使用wait()方法时，它必须包含在synchronzied语句块中，这也很好理解，对当前对象进行等待，那么首先要获取当前对象。多个线程同时访问一个对象，如果要获取这个对象就要加锁才能获取这个对象。\n当使用wait()方法后，线程进入了WAITING状态，然后锁定对象的其他线程使用notify()方法对其进行唤醒，如果同时有多个线程处于等待状态，notify唤醒的线程是随机的，也可使用notifyAll()方法唤醒所有的线程。使用wait()方法后，会释放当前占用的锁。\n使用了notify()方法后并不会释放锁，也就是被唤醒的线程虽然被唤醒了但是还是无法运行，因为它要获取锁才能进行，而这把锁还是刚才对其进行notify()方法的线程上。\n等待线程结束(join)和谦让(yield) join() 有时候一个线程的输入是依赖于另一个线程的输入的。此时，就需要等待依赖线程执行完毕，才能继续执行，可以使用join()方法来实现这个功能\n1 2 3 4 // 无限等待，会一直阻塞当前线程 public final void join() throws InterruptedException; // 给定最大等待时间，如果超出时间目标线程仍在执行，不会再继续等待 public final synchronized void join(long millis) throws InterruptedException; 下面给出一个例子：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // 定义一个共享变量 volatile static int i = 0; public static class AddThread extends Thread { @Override public void run() { // 对变量 i 进行循环加 for (; i \u0026lt; 1000; i++) { } } } public static void main(String[] args) { AddThread addThread = new AddThread(); addThread.start(); //打印 i 的值 System.out.println(i); } 这时打印出来的值并不确定，他可能是 0~1000 里面的任意一个值。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // 定义一个共享变量 volatile static int i = 0; public static class AddThread extends Thread { @Override public void run() { // 对变量 i 进行循环加 for (; i \u0026lt; 1000; i++) { } } } public static void main(String[] args) { AddThread addThread = new AddThread(); addThread.start(); try { addThread.join(); } catch (InterruptedException e) { e.printStackTrace(); } //打印 i 的值 System.out.println(i); } 这时在第 17 行添加了对目标线程的等待，所以打印会在目标线程完成后执行所以最终结果为 1000。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 volatile static int i = 0; public static class AddThread extends Thread { @Override public void run() { try { Thread.sleep(2000); } catch (InterruptedException e) { e.printStackTrace(); } for (; i \u0026lt; 1000; i++) { } } } public static void main(String[] args) { AddThread addThread = new AddThread(); addThread.start(); try { addThread.join(1000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(i); } 而这一段，我在目标线程中先执行 2 秒的睡眠，然后再对变量加，设置最大等待时长为 1 秒，所以最终打印的结果为 0。\nyield() 1 public static native void yield(); 当使用该方法后，当前线程会让出CPU。\n程序最终在计算机上是一条指令，我们当前线程正在执行一条指令，最终这条执行是由硬件也就是 CPU 来执行的，如果这个执行执行的时间过长，其他指令也就需要等待（假设只有一个 CPU），使用这个方法后可以让出 CPU 来，让其他指令先执行。当前指令的状态被改变，然后 CPU 选择一个指令来执行，这时有可能会选到刚刚释放 CPU 也就是执行yield()方法的线程。\n线程组 1 2 3 4 5 6 7 ThreadGroup threadGroup = new ThreadGroup(\u0026#34;GroupName\u0026#34;); Thread t1 = new Thread(threadGroup,new ThreadGroupName(),\u0026#34;t1\u0026#34;); Thread t2 = new Thread(threadGroup,new ThreadGroupName(),\u0026#34;t2\u0026#34;); t1.start(); t2.start(); System.out.println(threadGroup.activeCount()); threadGroup.list(); 线程组主要有两个方法：activeCount()返回活动线程的总数，但由于线程是动态的，所以这个值只是一个估计值。list()方法打印这个线程组中所有线程的线程信息。\n守护线程（后台线程） 1 2 3 Thread t1 = new Thread(); t1.setDaemon(true); t1.start(); 通过setDaemon()方法可以设置线程是否为守护线程，要注意的是这个方法必须在start()方法前设置，不然线程已经启动起来就无法改变他的状态了。会得到一个异常，但是这时程序依然可以正常运行：\n1 2 3 Exception in thread \u0026#34;main\u0026#34; java.lang.IllegalThreadStateException at java.lang.Thread.setDaemon(Thread.java:1359) ... 当一个 Java 应用中，只有守护线程时，Java 虚拟机会自然退出。\n线程优先级 对于不同的线程，他对应的业务级别可能会不一样，所以需要对其设置不同的线程优先级。\n在 Java 中，使用 1 到 10 表示线程优先级。一般可以使用内置的三个静态标量表示：\n1 2 3 public final static int MIN_PRIORITY = 1; // 最低的等级 public final static int NORM_PRIORITY = 5; // 平常的等级 public final static int MAX_PRIORITY = 10; // 最高的等级 通过setPriority()方法设置线程的优先级。\nJAVA内存模型（JMM） 主要围绕多线程的原子性、可见性、有序性\n原子性：是指一个操作是不可中断的。即使在多个线程一起执行的时候，一个操作一旦开始，就不会被其他线程干扰。\n可见性：是指当一个线程修改了某一个共享变量的值，其他线程是否能够立即知道这个修改。\n有序性：当我们在代码中顺序的写下 a,b,c 三条语句时，按照理想顺序他是按照 a,b,c 这个顺序执行的。但是如果出现指令重排的情况下，它的顺序就可能会发生改变。\nvolatile volatile关键字：修饰一个变量，当多个线程都使用这个变量时，当有一个线程对变量进行了修改，其他线程中的值也会发生改变。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 //定义一个变量 volatile static boolean flag = true; public static void main(String[] args) { //启动一个线程，当变量为 true 时会一直运行 Thread t1 = new Thread(()-\u0026gt;{ while (flag){ System.out.println(\u0026#34;t1 running\u0026#34;); } System.out.println(\u0026#34;t1 end\u0026#34;); }); // 启动一个线程，将变量修改为 false Thread t2 = new Thread(()-\u0026gt;{ flag = false; }); t1.start(); t2.start(); } 通过打印结果可以看出 t2 线程对变量的修改也影响了 t1 线程的运行，这就是可见性。\n但volatile并不能代替锁！它也无法保证一些复合操作的原子性。\nsynchronized synchronized 的作用是实现线程间的同步，它的工作是对同步的代码加锁。使得每一次，只能有一个线程进入同步块，从而保证线程间的安全性。\n关键字synchronized可以有多种用法：\n指定加锁对象：对给定对象加锁，进入同步代码前要获取给定对象的锁\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public class SynchronizedTest { // 指定加锁对象 Object o = new Object(); public void m(){ synchronized (o){ System.out.println(\u0026#34;i am running\u0026#34;); try { Thread.sleep(2000); } catch (InterruptedException e) { e.printStackTrace(); } } } public static void main(String[] args) { SynchronizedTest s1 = new SynchronizedTest(); SynchronizedTest s2 = new SynchronizedTest(); s1.m(); s2.m(); } } /* 指定了加锁的对象为新建的 object 对象 打印出结果后会睡两秒钟后再进行打印，说明同一时间只有一个线程访问了 m() 方法 */ 直接作用于实例方法：相当于对当前实例加锁，进入同步代码前要获取当前实例的锁\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public class SynchronizedTest implements Runnable { static int i = 0; public synchronized void increase() { i++; } @Override public void run() { for (int j = 0; j \u0026lt;10000 ; j++) { increase(); } } public static void main(String[] args) throws InterruptedException { //新建一个实例 SynchronizedTest test = new SynchronizedTest(); // 两个线程启动的是同一个实例 Thread t1 = new Thread(test); Thread t2 = new Thread(test); t1.start(); t2.start(); t1.join(); t2.join(); System.out.println(i); } } 如果将上面代码中的第 20，21 行换成下面的两句则会出现不同的结果\n1 2 Thread t1 = new Thread(new SynchronizedTest()); Thread t2 = new Thread(new SynchronizedTest()); 由于线程启动的是不同的实例，所以最终的输出结果会不正确。\n直接作用于静态方法：相当于对当前类加锁，进入同步代码前要获取当前类的锁\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class SynchronizedTest { //作用于静态方法 public synchronized static void m(){ System.out.println(\u0026#34;i am running\u0026#34;); try { Thread.sleep(2000); } catch (InterruptedException e) { e.printStackTrace(); } } public static void main(String[] args) { SynchronizedTest.m(); SynchronizedTest.m(); } } 除了用于线程同步、确保线程安全外，synchronized 还可以保持线程间的可见性和有序性。从可见性的角度而言，synchronized 完全可以替代 volatile 的功能，只是使用不够方便，没有 volatile 轻量。从有序性上，被 synchronized 限制的代码块每次执行都要获取锁，从而保证了有序性。换句话说，被 synchronized 限制的多线程其实的串行执行的。\nLock 重入锁ReentrantLock 加锁 重入锁可以完全替代 synchronized 关键字，在 jdk1.5之前的版本中，重入锁的性能远远好于 synchronized，但从 jdk1.6 开始，jdk 在 synchronized 上做了大量的优化，使得两者的差距并不大。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public class ReenterLock implements Runnable { // 初始化ReentrantLock锁 public static ReentrantLock lock = new ReentrantLock(); public static int i=0; @Override public void run() { for (int j = 0; j \u0026lt;10000 ; j++) { //加锁 lock.lock(); i++; //释放锁 lock.unlock(); } } public static void main(String[] args) throws InterruptedException { ReenterLock reenterLock = new ReenterLock(); Thread t1 = new Thread(reenterLock); Thread t2 = new Thread(reenterLock); t1.start(); t2.start(); t1.join(); t2.join(); System.out.println(i); } } 可以看出来，使用ReentrantLock时需要显式的加锁与释放锁，所以一定要记得释放锁，不然其他线程就没法访问。\n并且可以多次执行加锁的操作：\n1 2 3 4 5 lock.lock(); lock.lock(); i++: lock.unlock(); lock.unlock(); 但是要记住，上了几次锁，就要释放几次锁，不然其他线程无法访问。如果释放锁的次数多于加锁的次数，则会得到一个java.lang.IllegalMonitorStateException异常。\n中断响应 当启动线程后，可能因为某些原因需要关闭（中断）它，这时就需要线程有响应关闭（中断）的能力。使用lockInterruptibly()方法就可以对中断进行响应，在等待锁的过程中，可以响应中断。\n尝试获取锁 tryLock()：如果锁未被其他线程占用，则直接获取锁。如果锁被其他线程占用，则不会进行等待，立即返回 false\ntryLock(long timeout, TimeUnit unit)：第一个参数表示等待时长，第二个参数表示计时单位。表示最多会等待参数的时间，到时间后如果还未申请到锁，则会返回 false\n公平锁 之前的情况，锁的申请都是不公平的，也就是当锁被释放后，谁获取到锁是不一定的。重入锁运行我们创建一个公平锁：当参数为 true 时，表示锁的公平的。\n1 public ReentrantLock(boolean fair) 想一下，要实现公平锁，那就是谁先来谁获取这把锁，先到先得的意思。那么我们就要维护一个队列来保存这个顺序。所以公平锁的实现成本比较高，性能相对也较低。\nReentrantLock 主要由几个重要的方法\nlock()：获取锁，如果锁已经被占用，则等待。 lockInterruptibly()：获得锁，但优先响应中断 tryLock()：尝试获取锁，如果成功，则获取到锁，并返回 false，如果失败则立即返回 false tryLock(long time,TimeUnit unit)：在给定时间内尝试获取锁 unlock()：释放锁 Condition Condition 是与重入锁相关联的，正如wait()和notify()与synchronized合作使用一样。\nCondition接口主要提供的方法如下：\n1 2 3 4 5 6 7 8 9 10 11 12 //使当前线程等待，同时释放锁。当线程被中断时，也能跳出等待。 void await(); //与 await 相同，但是不会响应中断 void awaitUninterruptibly(); //进行一定时间的等待 boolean await(long time,TimeUnit unit); //最多等待到设定的时间 boolean awaitUntil(Date deadline); //通知。当等待线程接收到通知后，会继续进行 void signal(); //通知全部 void signalAll(); 通过Lock 接口的newCondition()方法生成一个与当前重入锁绑定的 Condition 实例。利用 Condition 对象，我们可以让线程在合适的时间等待，或者在某一个特定的时刻得到通知，继续执行。比如ArrayBlockinQueue就使用了重入锁和 Condition 对象。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 // 定义一个重入锁 final ReentrantLock lock; // 定义条件 private final Condition notEmpty; private final Condition notFull; public ArrayBlockingQueue(int capacity, boolean fair) { if (capacity \u0026lt;= 0) throw new IllegalArgumentException(); this.items = new Object[capacity]; //构造函数将变量初始化 lock = new ReentrantLock(fair); notEmpty = lock.newCondition(); notFull = lock.newCondition(); } public void put(E e) throws InterruptedException { checkNotNull(e); final ReentrantLock lock = this.lock; // 先加锁 lock.lockInterruptibly(); try { while (count == items.length) // 如果数量等于长度，则表示满了，则写线程进行等待 notFull.await(); //当没满的情况或被通知后进行添加 enqueue(e); } finally { //最后将锁释放 lock.unlock(); } } private void enqueue(E x) { // assert lock.getHoldCount() == 1; // assert items[putIndex] == null; final Object[] items = this.items; items[putIndex] = x; if (++putIndex == items.length) putIndex = 0; count++; //添加完成后，通知读的线程，有数据可以读了 notEmpty.signal(); } public E take() throws InterruptedException { final ReentrantLock lock = this.lock; lock.lockInterruptibly(); try { while (count == 0) //如果数量为 0 则表示空，则等待放入，读线程进行等待 notEmpty.await(); //不为 0 或者被通知后，进行读取数据 return dequeue(); } finally { //最后释放锁 lock.unlock(); } } private E dequeue() { // assert lock.getHoldCount() == 1; // assert items[takeIndex] != null; final Object[] items = this.items; @SuppressWarnings(\u0026#34;unchecked\u0026#34;) E x = (E) items[takeIndex]; items[takeIndex] = null; if (++takeIndex == items.length) takeIndex = 0; count--; if (itrs != null) itrs.elementDequeued(); //读取完成后，通知写线程，可以写了。 notFull.signal(); return x; } 信号量（Semaphore） 之前的synchronized、ReentrantLock一次都只允许一个线程访问一个资源，而信号量可以指定多个线程，同时访问一个资源，主要的构造函数如下：\n1 2 3 4 //指定信号量的准入数，最多能有多少个线程同时进入 public Semaphore(int permits); //第二个线程可以指定是否公平 public Semaphore(int permits, boolean fair); 它里面主要的方法有：\n1 2 3 4 5 6 7 8 9 10 //获取锁并响应中断 public void acquire(); //获取锁但不响应中断 public void acquireUninterruptibly(); //尝试获取锁 public boolean tryAcquire(); //在一定时间内尝试获取锁，若超时仍未获取锁则取消等待 public boolean tryAcquire(long timeout,TimeUnit unit); //释放锁 public void release(); 看一下用信号量编写的简单例子：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 public class SemapDemo implements Runnable { //定义一个信号量，指定最多 5 个同时访问 Semaphore semaphore = new Semaphore(5); @Override public void run() { try { //获取锁 semaphore.acquire(); Thread.sleep(2000); System.out.println(Thread.currentThread().getName()+\u0026#34;----\u0026#34;+System.currentTimeMillis()); } catch (InterruptedException e) { e.printStackTrace(); }finally { //释放锁 semaphore.release(); } } public static void main(String[] args) { //新建一个线程，用 20 个线程执行上面的任务 ExecutorService service = Executors.newFixedThreadPool(20); SemapDemo semapDemo = new SemapDemo(); for (int i = 0; i \u0026lt;20 ; i++) { service.submit(semapDemo); } } } /* 从打印结果可以看出，打印是 5 个线程同时执行的 */ 读写锁 ReadWriteLock 之前的synchronized和ReentrantLock等都会进行加锁，然而有些对数据不会有改变的情况它也会对其加锁，也就导致了速度慢。如果一个系统中，读的次数（对数据不改变的情况）多于写的次数（对数据有改变的情况）。其实可以对写进行加锁，而对读则没必要加锁。\n读-读：无锁 读-写：加锁 写-写：加锁 来看一下例子：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 public class ReadWriteLockDemo { private static ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock(); //定义读锁 private static Lock readLock = readWriteLock.readLock(); //定义写锁 private static Lock writeLock = readWriteLock.writeLock(); private int value; public int handleRead(Lock lock) throws InterruptedException { try { lock.lock(); //睡眠 1 秒钟 TimeUnit.SECONDS.sleep(1); return value; } finally { lock.unlock(); } } public void handleWrite(Lock lock, int index) throws InterruptedException { try { lock.lock(); //睡眠 1 秒钟 TimeUnit.SECONDS.sleep(1); value = index; } finally { lock.unlock(); } } public static void main(String[] args) { ReadWriteLockDemo demo = new ReadWriteLockDemo(); Runnable read = new Runnable() { @Override public void run() { try { demo.handleRead(readLock); } catch (InterruptedException e) { e.printStackTrace(); } } }; Runnable write = new Runnable() { @Override public void run() { try { demo.handleWrite(writeLock, new Random().nextInt()); } catch (InterruptedException e) { e.printStackTrace(); } } }; for (int i = 0; i \u0026lt; 18; i++) { new Thread(read).start(); } for (int i = 0; i \u0026lt; 2; i++) { new Thread(write).start(); } } } 启动 18 个读线程，2个写线程。每个线程中都要一个 1 秒的睡眠。如果都是串行执行的，则需要 20+ 秒的时间。从执行结果看出，执行时间只是 2+秒。所以可以看出，写线程是串行的，读线程是并行执行的。\n这两个方法都接受的是 Lock 对象，如果我们不是传入读写锁，而是传入一个ReentrantLock对象实例。则会执行 20+秒。\nCountDownLatch 门闩，或者倒计时器，初始化时指定一个值，当这个值变成 0 时才会等待完成，继续执行。\n1 public CountDownLatch(int count); //计数个数 来看一个具体的例子，\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public class CountDownLatchDemo implements Runnable { // 初始化条件为 10，当变成 0 后才会继续执行 public static final CountDownLatch countDownLatch = new CountDownLatch(10); @Override public void run() { try { //随机睡眠，模拟不同条件的线程 TimeUnit.SECONDS.sleep(new Random().nextInt(10)); System.out.println(\u0026#34; conditional completion~ ~ ~ ~\u0026#34;); } catch (InterruptedException e) { e.printStackTrace(); } finally { //执行完毕后，执行 倒计时减一 countDownLatch.countDown(); } } public static void main(String[] args) { ExecutorService service = Executors.newFixedThreadPool(10); CountDownLatchDemo demo = new CountDownLatchDemo(); for (int i = 0; i \u0026lt; 10; i++) { //10 个线程执行任务 service.submit(demo); } try { //等待计数器完成 countDownLatch.await(); System.out.println(\u0026#34; all finish \u0026#34;); } catch (InterruptedException e) { e.printStackTrace(); }finally { service.shutdown(); } } } CyclicBarrier 它与 CountDownLatch 非常类似，它也可以实现线程间的计数等待，但它的功能更加复杂。看一下它的构造函数\n1 public CyclicBarrier(int parties,Runnable barrierAction); 它多了一个Runnable参数，也就是说他可以在一次计数完成后再执行一次计数然后执行barrierAction。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 public class CyclicBarrierDemo { public static class First implements Runnable { private CyclicBarrier cyclicBarrier; public First(CyclicBarrier cyclicBarrier) { this.cyclicBarrier = cyclicBarrier; } @Override public void run() { try { //进行第一次等待，等待满足 10 个线程才会继续执行，不够则继续等待 System.out.println(Thread.currentThread().getName() + \u0026#34; on wait...\u0026#34;); cyclicBarrier.await(); // 睡眠模拟每个线程的任务 TimeUnit.SECONDS.sleep(new Random().nextInt(10)); System.out.println(Thread.currentThread().getName() + \u0026#34; finish work...\u0026#34;); } catch (InterruptedException e) { e.printStackTrace(); } catch (BrokenBarrierException e) { e.printStackTrace(); } } } public static class Second implements Runnable { @Override public void run() { System.out.println(\u0026#34;second task is running \u0026#34;); } } public static void main(String[] args) { CyclicBarrier cyclicBarrier = new CyclicBarrier(10, new Second()); ExecutorService service = Executors.newFixedThreadPool(10); for (int i = 0; i \u0026lt; 10; i++) { service.submit(new First(cyclicBarrier)); } service.shutdown(); } } /* 打印结果 pool-1-thread-1 on wait... 省略其他线程打印 pool-1-thread-10 on wait... second task is running pool-1-thread-3 finish work 省略其他线程打印 pool-1-thread-4 finish work */ 我们可以看出，由于设置了await()方法，所以线程会先进行等待，满足条件（10 个线程）后会先执行了barrierAction的任务，然后再继续执行下面的代码。\nCountDownLatch 与 CyclieBarrier 两者区别\nCountDownLatch：一个任务需要其他几个条件的完成才能继续执行\nCyclieBarrier：满足条件后需要先执行一个其他的任务后再执行下面的代码块。\n线程池 线程的创建和销毁，以及线程上下文的切换都比较花费资源，有时候在业务逻辑上花费的时间可能还不如创建销毁和切换花费的时间，这时候就需要线程池。\n为了避免系统频繁的创建和销毁线程，我们可以让创建的线程进行复用。当需要使用线程时，先从线程池中拿一个空闲线程，当工作完成后，不去关闭线程，而是把线程还给线程池，方便下次调用。\n在 jdk 中提供了一些线程池方法，在Executors类中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 public static ExecutorService newFixedThreadPool(int nThreads) { return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue\u0026lt;Runnable\u0026gt;()); } public static ExecutorService newSingleThreadExecutor() { return new FinalizableDelegatedExecutorService (new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue\u0026lt;Runnable\u0026gt;())); } public static ExecutorService newCachedThreadPool() { return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue\u0026lt;Runnable\u0026gt;()); } public static ScheduledExecutorService newSingleThreadScheduledExecutor() { return new DelegatedScheduledExecutorService (new ScheduledThreadPoolExecutor(1)); } public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) { return new ScheduledThreadPoolExecutor(corePoolSize); } public static ExecutorService newWorkStealingPool() { return new ForkJoinPool (Runtime.getRuntime().availableProcessors(), ForkJoinPool.defaultForkJoinWorkerThreadFactory, null, true); } newFixedThreadPool()：返回一个固定线程数量的线程池。线程池中的线程数量始终不变。当有新任务提交到线程池中，如果线程池中有空闲的线程，则会交给空闲线程去立即执行。如果没有，则新任务会被暂存到一个任务队列中，待有线程空闲时，便处理任务队列中的任务，并且会先执行等待时间最久的任务（由于LinkedBlockingQueue，后面细讲）。\nnewSingleThreadExecutor()：返回只有一个线程的线程池。若有任务提交，当这个线程空闲则会执行。否则，会将这个任务保存在一个任务队列中，线程空闲后，按先入先出的顺序执行队列任务。\nnewCachedThreadPool()：这个线程池的数量不固定，当有新任务提交时，如果没有空闲的线程则会新启动一个线程执行该任务，任务执行完毕后暂时不会关闭线程，而是等待 60 秒后关闭（在参数中设置）。如果在这 60 秒内有新任务提交，则会使用该线程去执行新任务，如果没有则到时间自动关闭。\nnewSingleThreadScheduledExecutor()：返回一个ScheduledExecutorService对象，线程池大小为 1。可以在给定时间执行某任务：可以在某个固定的延时之后执行，也可以周期性的执行。\nnewScheduledThreadPool()：与newSingleThreadScheduledExecutor()相同，不过可以指定线程池中的线程数量。\nnewWorkStealingPool()：精灵线程。它在执行完自己线程的任务后会自动去任务队列拿取线程进行执行。现在有 3 个线程，每个线程都维护自己的任务队列，第一个任务队列里面有 5 个任务，第二个有 1 个，第三个有 4 个。那么在第二个执行完成后会向第一个里面队尾拿取一个任务进行执行。\n参考 \u0026laquo;实战 Java 高并发程序设计\u0026raquo; -葛一鸣，郭超，电子工业出版社 ","permalink":"https://www.liunaijie.top/coding/java/java%E7%BA%BF%E7%A8%8B/","summary":"\u003ch1 id=\"基础概念\"\u003e基础概念\u003c/h1\u003e\n\u003cp\u003e线程的所有状态：\u003c/p\u003e\n\u003cp\u003e这些状态都在 \u003ccode\u003eThread\u003c/code\u003e中的\u003ccode\u003eState\u003c/code\u003e枚举中定义：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eenum\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eState\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//表示刚刚创建的线程，这种线程还没开始执行\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eNEW\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \t\u003c/span\u003e\u003cspan class=\"c1\"\u003e//在 start() 方法调用后，线程开始执行，此时状态处于 RUNABLE\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eRUNNABLE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e//如果线程在执行过程中遇到 synchronized 同步块，就会进入 BLOCKED 阻塞状态，直到获取请求的锁\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eBLOCKED\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e//等待状态，WAITING 会无时间限制的等待，TIMED_WAITING 会有时间限制\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eWAITING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eTIMED_WAITING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e//线程执行完毕，表示结束\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eTERMINATED\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"初始线程\"\u003e初始线程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eThread\u003c/code\u003e类\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eRunable\u003c/code\u003e接口\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eThread\u003c/code\u003e类中调用\u003ccode\u003estart()\u003c/code\u003e方法之后会让线程执行\u003ccode\u003erun()\u003c/code\u003e方法，而\u003ccode\u003erun()\u003c/code\u003e方法中又是对\u003ccode\u003eRunable\u003c/code\u003e实例的调用\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* What will be run. */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eRunnable\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e","title":"JAVA线程"},{"content":"推荐看一下极客时间上面的一篇教程，《MySQL实战 45 讲》。\n基本架构 引擎层采用插件式。\n连接器 负责跟客户端建立连接，获取权限、维持和管理连接。客户端连接后长时间没动静，连接器会自动将他断开，这个时间是由参数wait_timeout控制的，默认值是 8 小时。\n分析器 这里面判断输入的语句是对什么表，什么列，做什么操作。如果语句不对，则会收到错误提示。\n🌰：select * from user where id=1;\n这个语句它会分析出对user表，id列进行查询操作。如果select单词拼写错误，或者sql 语法错误时，它会返回错误信息。\n优化器 在表里面有多个索引时候，它来决定使用哪个索引；或者在一个语句有多表关联（join）时，决定各个表的连接顺序。\n执行器 先进行权限判断，判断操作用户是否有对表的操作权限。\n如果有权限，就打开表继续执行。\n🌰：select * from user where id=10;\n以这个语句为例，当字段没有索引时，执行器的执行流程是这样的：\n调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存到结果集中； 调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。 执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回。 如果有索引的表，第一步调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口、\n引擎 InnoDB 从 5.5.5 版本开始作为默认的引擎\n支持事务，支持行级锁，支持外键\n事务的基本要素（ACID）:\n原子性（Atomicity） 事务开始后的所有操作，要么全部完成，要么全部不做，不可能部分完成。事务执行过程中出错会回滚到事务开始的状态，所有的操作就像没发生一样。\n一致性（Consistency） 事务开始前和结束后，数据库的完整性约束没有被破坏。\n隔离性（Isolation） 同一时间，只允许一个事务请求同一数据，不同事务之间批次没有任何干扰。\n持久性（Durability） 事务完成后，事务对数据库的所有更新被保存到数据库中，不能回滚，不会改变。\nMyIsam 之前的默认引擎，不支持事务，只支持表级锁，不支持外键\n事务 事务的隔离级别 在MySQL中有4种隔离级别\nREAD UNCOMMITTED 读未提交：一个事务还没提交时，它做的变更就能被其他事务看到。会出现脏读。\n别人改数据的事务尚未提交，我在我的事务中就能读到\nREAD COMMITTED 读提交：一个事务提交后，它做的变更就能被其他事务看见。可以避免脏读，但不能避免重复读和幻读的情况。\n别人改数据的事务提交后，我在我的事务中才能读到\nREPEATABLE READ 可重复读：（MySQL的默认隔离级别）。一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据一致。未提交的变更对其他事务也不可见。它可以避免脏读，不可重复读的问题。理论上会出现幻读的情况，但是MySQL的存储引擎通过多版本并发控制机制（mvcc）解决了该问题，因此该级别是可以避免幻读的。\n别人该数据的事务已经提交，我在我的事务里也不去读\nSERIALIZABLE 可串行化：对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突时，后访问的事务必须等待前一个事务执行完成，才能继续执行。实际运行时是在每个读的数据行上加锁。所以可能导致大量的超时现象和锁竞争。\n我的事务尚未提交，别人就别想该数据\n级别从低到高依次为：读未提交-\u0026gt;读已提交-\u0026gt;可重复读-\u0026gt;可串行化。\n名词解释：\n脏读：一个事务读取了另外一个事务未提交的数据。\n重复读：在事务内重复读取了别的线程已经提交的数据，但是两次读取的结果不一致，原因是在两次读取的过程中其他事务做了更新操作。\n幻读：在一个事务内两次查询的数据条数不一致，原因是在查询的过程中其他事务做了添加操作。\n索引 数据结构 对于 InnoDB 引擎来说，它存储所以采用的是 B+树的数据结构。\n使用 b+ 树作为索引的原因：\n数据库的数据放到磁盘中，对于程序而言是外存，进行读取的时候涉及到磁盘 io 操作，而 io 操作又比较耗时，所以为了减少耗时，不采用二叉树的数据结构（对于树来说，查找的效率取决于树高）。采用 b+ 树，它将所有数据存储到叶子节点中，父节点只存储索引（所以相同的数据大小，能存储更多的节点）。叶子节点构成一个有序链表（便于连续查询）。\nB+树的磁盘读写代价更低 B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。 举个例子，假设磁盘中的一个盘块容纳16bytes，而一个关键字2bytes，一个关键字具体信息指针2bytes。一棵9阶B-tree(一个结点最多8个关键字)的内部结点需要2个盘快。而B+树内部结点只需要1个盘快。当需要把内部结点读入内存中的时候，B 树就比B+树多一次盘块查找时间(在磁盘中就是盘片旋转的时间)。\nB+树的查询效率更加稳定 由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。\n使用 索引类型分为主键索引和非主键索引，主键索引也被称为聚簇索引，叶子节点存的是整行数据。非主键索引也被称为二级索引，叶子节点内容是主键的值。所以使用非主键索引时需要再次使用主键索引进行回表查询。\n覆盖索引 上面提到，当使用非主键索引时需要回表查询，但是如果查询结果只有主键的值，这时所需的结果不需要进行回表就能得到。也就是说，在这个查询里面，非主键索引已经“覆盖了”我们的查询需求，我们称为覆盖索引。\n最左前缀原则 由于使用的是 b+树的数据结构，所以可以使用最左前缀。\n当运行select * from user where name like '张%'这条语句时。可以从 name索引上先找到张的位置，然后再从张的位置向后查找，这样比从头开始查找更有效率。\n并且当我们建立a,b,c三个字段的联合索引时，查询条件只有a或者a.b时也可以用到这个a,b,c的联合索引\n索引下推 有一条语句：select * from user where name like '张%' and age=10 and ismale = 1;。查询姓张的，年龄为 10 岁，并且为男性的用户。\n这个表有一个name,age的联合索引。\n这种情况下，它找到满足 name 条件的结果后，会在索引里面进行 age 的判断（因为是 name，age的联合索引）。然后再去回表，这样能减少回表的次数。提高效率。\ncount()的效率 对于 count 函数，主要有count(*),count(1),count(主键 id),count(字段)这几种用法。\ncount(字段)：遍历整张表，将每一行的这个字段拿出来，判断不为 null 时进行累加。 count(主键id)：遍历整张表，把每一行的 id 取出来， 判断不为空，就按行累加 count(1)：遍历整张表，但不取值，对于返回的每一行，按行累加。 count(*)：按行累加。 整体效率：count(*)≈count(1)\u0026gt;count(主键 id)\u0026gt;count(字段)\n参考： https://blog.csdn.net/qq_35008624/article/details/81947773 极客时间《MySQL 实战 45 讲》 ","permalink":"https://www.liunaijie.top/coding/database/mysql%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/","summary":"\u003cp\u003e推荐看一下极客时间上面的一篇教程，《\u003ca href=\"https://time.geekbang.org/column/intro/100020801\"\u003eMySQL实战 45 讲\u003c/a\u003e》。\u003c/p\u003e\n\u003ch1 id=\"基本架构\"\u003e基本架构\u003c/h1\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/20191110151145.png\" alt=\"MySQL基本架构\"\u003e\u003c/p\u003e\n\u003cp\u003e引擎层采用插件式。\u003c/p\u003e","title":"MySQL知识整理"},{"content":"JAVA基础 类的初始化顺序 静态变量和静态语句块会优先于实例变量和普通语句块\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public static String s = \u0026#34;静态变量\u0026#34;; static { System.out.println(\u0026#34;静态语句块\u0026#34;); } public String z = \u0026#34;实例变量\u0026#34;; { System.out.println(\u0026#34;普通语句块\u0026#34;); } public InitClass(){ System.out.println(\u0026#34;构造函数\u0026#34;); } 父类（静态变量，静态语句块） 子类（静态变量，静态语句块） 父类（实例变量，普通语句块） 父类（构造函数） 子类（实例变量，普通语句块） 子类（构造函数） 集合 System.arraycopy() 这个是标准类库中提供的复制数组的方法，他复制对象的时候是复制的引用，看下面这个例子，我复制完成后，对复制前的元素进行修改，复制完成的内容也发生改变。其实从这里也看出来了，原始数组也是对象的引用，因为的对元素修改后原始数组的内容也发生了改变。\n抽象类与接口 接口和抽象类都不能被实例化。抽象类是对类的抽象，而接口是对行为的抽象\n抽象类abstract 加在方法上，表示该方法为抽象的，不能有方法体，一个类中一旦有方法为抽象的，则类的声明上也必须添加abstract关键字。抽象类中可以有非抽象方法。\n接口interface 在jdk1.8之后在接口中也可以声明方法体了，但是要加default关键字\n其实接口也是一种抽象，在jdk1.8之后他们的使用已经没有了太大的区别，所以了解他们主要还是了解他们两个的设计目的，为什么要用，什么情况下用，这是我从知乎上看到的一段解释\n接口的设计目的，是对类的行为进行约束（更准确的说是一种“有”约束，因为接口不能规定类不可以有什么行为），也就是提供一种机制，可以强制要求不同的类具有相同的行为。它只约束了行为的有无，但不对如何实现行为进行限制。对“接口为何是约束”的理解，我觉得配合泛型食用效果更佳。\n而抽象类的设计目的，是代码复用。当不同的类具有某些相同的行为(记为行为集合A)，且其中一部分行为的实现方式一致时（A的非真子集，记为B），可以让这些类都派生于一个抽象类。在这个抽象类中实现了B，避免让所有的子类来实现B，这就达到了代码复用的目的。而A减B的部分，留给各个子类自己实现。正是因为A-B在这里没有实现，所以抽象类不允许实例化出来（否则当调用到A-B时，无法执行）。\n线程 链接\n反射 Class.getName方法在应用于数组类型的时候会返回一个奇怪的名字\nDouble[].class.getName()\n返回[Ljava.lang.Double;\nint[].class.getName()\n返回[I\nJAVA8新特性 lambda Stream API Date Time API 函数式编程 接口实现方法，hashmap红黑树 。。。 数据结构 链表 给定一个单向链表，给定一个链表中的节点，要求删除这个节点，怎么删除？ 答：根据头部节点，拿到这个要删除节点的上一个节点，记做before，然后将before节点的next节点指向要删除节点的next节点。将这个节点信息置空。完成删除。\n追问：如果不使用before或不给定头部节点，能不能完成删除，怎么删除？\n我这个问题没有回答上来，回来后想了一下，应该是这样的解决方法：\n答：拿到要删除的节点记做A，再根据这个节点获取下一个节点记做B，然后将B的值赋给A，将B的next也赋给A，然后将B置空。完成删除。\n数组 给定两个有序数组nums1,nums2。要求合并成一个有序数组（使用数组实现）。 答：对两个数组进行循环，得到两个值a1,b1。然后毕竟这两个元素的大小，谁小就将其放到结果数组中，然后对比下一个元素。例如：a1\u0026lt;b1，则下一次比较a2与b1的关系。最后有可能两个数组不一样长，有的元素没有放进去，还需要将没放进去的元素放到结果数组中。\nMap 有一个List\u0026lt;String\u0026gt;集合，放着几个单词，比如(abc,zxy,bca,yzx,mn)最终返回的结果是((abc,bcz)(zxy,yzx)(mn))。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; merge(List\u0026lt;String\u0026gt; list) { Map\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; map = new HashMap\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt;(); for (int i = 0; i \u0026lt; list.size(); i++) { String word = list.get(i); char[] chars = word.toCharArray(); Arrays.sort(chars); if (map.containsKey(chars.toString())) { List\u0026lt;String\u0026gt; temp = map.get(chars.toString()); temp.add(word); } else { List\u0026lt;String\u0026gt; temp = new ArrayList\u0026lt;String\u0026gt;(); temp.add(word); map.put(chars.toString(), temp); } } List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; result = new ArrayList\u0026lt;List\u0026lt;String\u0026gt;\u0026gt;(); Set\u0026lt;String\u0026gt; set = map.keySet(); for (String word : set) { result.add(map.get(word)); } return result; } ","permalink":"https://www.liunaijie.top/coding/java/java%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/","summary":"\u003ch1 id=\"java基础\"\u003eJAVA基础\u003c/h1\u003e\n\u003ch2 id=\"类的初始化顺序\"\u003e类的初始化顺序\u003c/h2\u003e\n\u003cp\u003e静态变量和静态语句块会优先于实例变量和普通语句块\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;静态变量\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;静态语句块\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ez\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;实例变量\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;普通语句块\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eInitClass\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;构造函数\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e父类（静态变量，静态语句块）\u003c/li\u003e\n\u003cli\u003e子类（静态变量，静态语句块）\u003c/li\u003e\n\u003cli\u003e父类（实例变量，普通语句块）\u003c/li\u003e\n\u003cli\u003e父类（构造函数）\u003c/li\u003e\n\u003cli\u003e子类（实例变量，普通语句块）\u003c/li\u003e\n\u003cli\u003e子类（构造函数）\u003c/li\u003e\n\u003c/ul\u003e","title":"JAVA知识整理"},{"content":"题目描述 实现 strStr() 函数。\n给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 -1。\n示例 1:\n输入: haystack = \u0026ldquo;hello\u0026rdquo;, needle = \u0026ldquo;ll\u0026rdquo; 输出: 2 示例 2:\n输入: haystack = \u0026ldquo;aaaaa\u0026rdquo;, needle = \u0026ldquo;bba\u0026rdquo; 输出: -1 说明:\n当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。\n对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。\n解题思路 相当于要求自己实现一个indexOf方法\n如果要查找的字符串比目标字符串还长，肯定不存在。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public int strStr(String haystack, String needle) { if (needle.length() == 0) { return 0; } int strLength = haystack.length(); int wordLength = needle.length(); if (strLength \u0026lt; wordLength) { return -1; } for (int i = 0; i \u0026lt; strLength; i++) { if (i + wordLength \u0026gt; strLength) { // 当后面的字符串比要求校验的参数还短的时候就直接退出。 break; } // 每次寻找相同位数的字符串 String temp = haystack.substring(i, i + wordLength); if (needle.equals(temp)) { return i; } } return -1; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%AE%9E%E7%8E%B0strstr-leetcode28/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e实现 strStr() 函数。\u003c/p\u003e\n\u003cp\u003e给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e输入: haystack = \u0026ldquo;hello\u0026rdquo;, needle = \u0026ldquo;ll\u0026rdquo;\n输出: 2\n示例 2:\u003c/p\u003e\n\u003cp\u003e输入: haystack = \u0026ldquo;aaaaa\u0026rdquo;, needle = \u0026ldquo;bba\u0026rdquo;\n输出: -1\n说明:\u003c/p\u003e\n\u003cp\u003e当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。\u003c/p\u003e\n\u003cp\u003e对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。\u003c/p\u003e\u003c/blockquote\u003e","title":"实现strStr()—LeetCode28"},{"content":"最近在阅读《Spring in action》这本书，也以此篇文章记录一下spring框架的相关内容。\n那么既然聊spring了，一定会聊到的两个点就是ioc和aop。那就先来聊一下这两个东西。以下都是个人理解，如果有不对的地方，欢迎探讨指正。\nioc 和 aop 是编程思想，di 和 aspect 是他们的具体实现。\nIOC IOC:控制反转，DI：依赖注入。\n控制 在传统的 Java SE 程序中，我们在对象内部通过 new 的方法来创建对象实例，在这里是程序主动创建的依赖对象。而在 spring 中，它使用了专门的容器去控制对象。\n控制的是对象的创建、初始化、销毁过程\n在传统的 Java SE中，我们使用 new 进行创建。在构造器或者 setter 方法中给依赖对象赋值。给对象赋值 null 来销毁对象。\n而在spring中一个bean的生命周期如下图所示：\n反转 控制反转。我们之前是主动方，主动去控制对象的生命周期。现在变成了由 spring 去进行控制。我们由对象的控制者变成了被动控制者。\n依赖注入 ioc 思想落实到代码上的具体实现。\n在spring中，我们一般使用注解Component，Service，Repository，Controller，Autowired或Resource来进行注入。这个实例化出来的bean生命周期交给了spring来进行管理。我们将他们放在不同的类上表达不同的含义。\n如果不进行主动声明，则默认的bean的名称为类名首字母小写，比如我对一个UserServiceImpl上添加@Service注解，spring则将这个类声明为userServiceImpl的bean。也可以这样进行主动声明@Service(\u0026quot;beanName\u0026quot;)。\n如果我们对一个接口进入注入，这个接口下有多个实现类，这是spring就不知道我们要使用哪个实现类了，启动时会报错。\n这时候有两种解决办法：\n继续使用@Autowired注解\n这个注解下也有两种解决方式：\n对实现类进行修改，添加@Primary首选项注解\n我们对其中一个实现类添加这个注解，那么在注入时会首先注入这个实现类\n对引入类添加@Qualifier限定符注解\n我们在@Autowired下添加这个注解，注解里面的内容为我们要注入实现类bean的id。这时候如果实现类的类名修改了也就是bean的id修改了，就又有问题了。这种情况下可以自定义限定符来实现。\n使用@Resource注解\n使用这个注解，即可在里面直接加参数，指定要注入实现类bean的id。\nAOP 面向切面编程：\n在软件开发中，散布于应用中多处的功能被称为横切关注点。通常来讲，这些横切关注点从概念上是与应用的业务逻辑相分离的（但是往往会直接嵌入到应用的业务逻辑之中）。把这些横切关注点与业务逻辑相分离正是面向切面（AOP）所要解决的问题。\n比如说我们现在有一个业务系统，有学生，教师，课程几个业务模块，我们现在需要一些功能，比如说日志，事务等功能，这些功能实际上并不是我们的业务模块，但是又需要在系统中添加，这就可以利用面向切面来解决这个问题。\n在使用面向切面编程时，我们仍然在一个地方定义通用功能，但是可以通过声明的方式定义这个功能要以何种方式在何处应用，而无需修改受影响的类。横切关注点可以被模块化为特殊的类，这些类被称作切面（aspect）。这样做有两个好处：首先，现在每个关注点都集中于一个地方，而不是分散到多处代码中；其次，服务模块更简洁，因为它们只包含主要关注点（业务功能）的代码，而次要关注点的代码被转移到切面中了。\nAOP术语 描述切面的常用术语有通知(advice)，切点(pointcut)和连接点(joinpoint)。\n通知（Advice） 通知定义了切面是什么以及何时使用。\nspring切面可以应用5种类型的通知\n前置通知（Before）：在目标方法被调用之前调用通知功能； 后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么； 返回通知（After-returning）：在目标方法成功执行之后调用通知； 异常通知（After-throwing）：在目标方法抛出异常后调用通知； 环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。 连接点(JoinPoint) 连接点是在应用执行过程中能够插入切面的一个点。（被切入的地方）\n切点(PointCut) 切点定义了\u0026quot;何处\u0026quot;。切点的定义会匹配通知所要织入的一个或多个连接点。我们通常使用明确的类和方法名称，或是利用正则表达式定义所匹配的类和方法名称来制定这些切点。有些AOP框架允许我们创建动态的切点，可以根据运行时的决策（比如方法的参数值）来决定是否应用通知。（定义的包，类，方法，注解等）\n切面(Aspect) 切面是通知和切点的结合，通知和切点共同定义了切面的全部内容\u0026ndash;它是什么，在何时和何处完成其功能。\n引入 引入允许我们向现有的类添加新方法或属性。\n织入 织入是把切面应用到目标对象并创建新的代理对象的过程。切面在指定的连接点被织入到目标对象中。在目标对象的生命周期里有多个点可以进行织入：\n编译期：切面在目标类编译时被织入，这种方式需要特殊的编译器。AspectJ的织入编译器就是以这种方式织入切面的。 类加载期：切面在目标类加载到JVM时被织入。这种方式需要特殊的类加载器(ClassLoader)，它可以在目标被引入应用之前增强该目标类的字节码，AspectJ5的加载时织入就支持以这种方式织入切面。 运行期：切面在应用运行的某个时刻被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。Spring AOP就是以这种方式织入切面的。 实现 代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // 添加 @Aspect注解声明这是一个切面类 @Aspect // 添加 @Component注解声明这是一个javabean，不然spring扫描不到这个类，我们在这里写的东西就没有用 @Component public class TestAspect{ // 使用@Pointcut注解定义可重用的切点，这样在下面就可以直接调用这个切点的方法名即可 @Pointcut(\u0026#34;execution(* com.test..*.*(..))\u0026#34;) public void testPointcut() { } @Before(\u0026#34;testPointcut()\u0026#34;) public void doBefore(){ System.out.println(\u0026#34;method before...\u0026#34;); } @After(\u0026#34;testPointcut()\u0026#34;) public void doAfter(){ System.out.println(\u0026#34;method after...\u0026#34;); } }\t我先声明了利用@Pointcut声明了一个切点，里面使用了execution关键字，这个关键字里面的内容就描述了我要对哪个地方进行切入。\n在我刚才写的代码里面我是对com.test包下的所有的类，所有的方法，不管其参数类型，返回结果类型都进行切入，当com.test包下的方法被调用时，调用前会打印doBefore()方法中的内容，调用完成后会打印doAfter()方法中的内容。\n我们只需要调整表达式里面的内容就可以自定义实现要切入的点。\n然后再说一下对注解的切入\n如果我们自定义了一个注解，然后需要对这个注解实现切入。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @Aspect @Component public class TestAspect{ @Around(\u0026#34;@annotation(testAnnotation)\u0026#34;) public void around(ProceedingJoinPoint proceedingJoinPoint) { try{ System.out.println(\u0026#34;before method proceed...\u0026#34;); proceedingJoinPoint.proceed(); System.out.println(\u0026#34;after method proceed...\u0026#34;); }catch(Exception e){ System.out.println(\u0026#34;method error...\u0026#34;); } } } 对添加了testAnnotation注解的方法会执行这个切入，并且我使用了环绕通知。这里多了一个ProceedingJoinPoint参数，这个对象是必须要有的，需要调用proceed()方法才会实际调用被切入点执行的方法，而有意思的地方是这个方法我们可以不调用(不会执行被切入点的逻辑)，也可调用一至多次。\n之前说的通知也有相应的注解\n注解 通知 @Before 通知方法会在目标方法调用之前执行 @After 通知方法会在目标方法返回或抛出异常后调用 @AfterReturning 通知方法会在目标方法返回后调用 @AfterThrowing 通知方法会在目标方法抛出异常后调用 @Around 通知方法会将目标方法封装起来 进阶 多个切面时执行顺序\n当一个类被多个切面切入时，如何控制多个切面的顺序呢？这时需要使用@Order()注解。\n1 2 3 4 5 6 @Aspect @Component @Order(1) //数值越小，优先级越高 public class TestAspect{ ... } 设置在特定环境中使用 aop\n有一些通过 aop 实现的功能我们可能只想在开发、测试环境中进行使用。在生成环境中进行关闭。这时我们可以添加@Profile注解即可\n1 2 3 4 5 6 @Aspect @Component @Profile({\u0026#34;dev\u0026#34;,\u0026#34;test\u0026#34;}) //添加这个注解即可在开发，测试环境中使用这个切面 public class TestAspect{ ... } 添加这个注解后，需要在配置文件的spring.profiles.active属性设置为dev或test并添加相应的配置文件即可。\n通过一张图来说明 aop 的执行顺序。\n![aop流程](https://raw.githubusercontent.com/liunaijie/images/master/aop 流程.png)\n通过注解引入新功能 我们知道，切面只是实现了它们所包装的bean相同接口的代理。所以我们可以让接口暴露新的接口来实现添加新功能，比如现在我们需要对源码中的方法进行增强，需要添加一个方法，那么这个方式就很好的实现。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @Aspect @Component public class AddMethodAspect{ @DeclareParents(value=\u0026#34;com.test.ClassA+\u0026#34;,defaultImpl=DefaultEncoreable.class) public static Encoreable encoreable; } // 新增加的接口，对切面新增加了一个方法 public interface Encoreable { void performEncore(); } public class DefaultEncoreable implements Encoreable { @Override void performEncore(){ System.out.println(\u0026#34;this is a new method\u0026#34;); } } 这里也是定义了一个切面，但是这个切面有之前定义的有所不同，它并没有定义切点，通知方法。而是通过@DeclareParents注解，将Encoreable接口引入到ClassAbean中。\n@DeclareParents注解主要由三部分组成\nvalue属性指定了哪种类型的bean要引入该接口，在本例中，也就是所有实现 ClassA的类型。（标记符后面的加号表示所有子类型，而不是本身） defaultImpl属性指定了为引入功能提供实现的类，这里指定了DefaultEncoreable提供实现 @DeclareParents注解所标记的静态属性指明了要引入的接口。 这样在调用所有实现ClassA类型的bean时，都可以进行调用performEncore方法。\nspring会创建一个代理，然后将调用委托给被代理的bean或被引入的实现，这取决于调用的方法属于被代理的bean还是属于被引入的接口。\nAOP 使用场景 权限控制 日志存储 统一异常处理 缓存处理 事务处理 …… 事务 事务隔离级别 在spring中，事务的隔离级别有五种，分别为\nDEFAULT(默认)\n使用数据库的隔离级别\nREAD_UNCOMMITTED(读未提交)\nREAD_COMMITTED(读已提交)\nSERIALIZABLE(串行化)\n就是数据库的四种事务隔离级别再加上一个default，其他四种事务隔离级别在[MySQL知识整理这篇文章中进行了记录\n事务传播级别 一共有7种\nRequired\n当前方法必须运行在事务中，如果当前事务存在，方法就在该事务中运行，否则会启动一个新的事务\nSupports\n不需要事务，但是如果存在事务就在事务中运行\nMandatory\n方法必须在事务中运行，如果不存在事务就抛出一个异常\nREQUIRES_NEW\n当前方法必须运行在自己的事务中，新启动一个事务，如果当时有事务则将当前事务挂起\nNot_Supported\n当前方法不运行在事务中，如果存在事务，则在方法运行期间将事务挂起\nNever\n当前方法不应该运行在事务中，如果有事务，就抛出异常\nNested\n如果当前存在事务，则会嵌套事务运行，嵌套的事务可以独立的提交和回滚，不会对嵌套外部的事务有影响。如果当前不存在事务，则和Required一样\nSpring 中事务无效的情况（@Transactional） 数据库是否支持事务\n注解添加在私有方法上private无效\n拦截的异常小于抛出的异常，注解里面的参数rollbackFor执行回滚的异常类型，如果这个异常类型比抛出的异常类型小就无法回滚。\n加入在未加入接口的public 方法，再通过普通接口方法调用，无效\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 @Service public class UserServiceImpl implements UserService { @Override public void implementsMethod(){ // 实现的接口方法 // 此时事务无效 selfMethod(); } @Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class) public void selfMethod(){ //自己新增的方法 //数据库操作 userDao.insert(new User()); // 我们知道 0 不能作为除数，所以会报错，然后通过异常拦截回滚 int a = 1 / 0; } } 在没有事务的方法中调用有事务的方法，如果在有事务的方法中抛出异常事务也是无效的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 @Service public class UserServiceImpl implements UserService { @Override public void noTransactional() { // 此时事务无效 hasTransactional(); } @Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class) @Override public void hasTransactional() { //数据库操作 userDao.insert(new User()); // 我们知道 0 不能作为除数，所以会报错，然后通过异常拦截回滚 int a = 1 / 0; } } 如果要对这种情况进行改进，可以使用两种方式\n对调用方法添加事务注解\n调用时通过实例调用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @Service public class UserServiceImpl implements UserService { @Autowired private UserService userService; @Override public void noTransactional() { // 此时事务有效 userService.hasTransactional(); } @Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class) @Override public void hasTransactional() { //数据库操作 userDao.insert(new User()); // 我们知道 0 不能作为除数，所以会报错，然后通过异常拦截回滚 int a = 1 / 0; } } 配置文件加载顺序 几个常用的方式顺序，优先级高的会覆盖优先级低的。\n命令行参数 jar包同级的目录中的配置文件 源码resources中的配置文件 我们用几个例子来说明，一个项目的结构如下：\n\u0026ndash; application.properties\n|\u0026ndash; demo.jar\n​\t|\u0026ndash; application.properties\n那么这个在目录外的配置文件会比源码里面的配置文件优先级高\n当我们设置了spring.profile.active这个属性后，会根据不同环境选择不同的配置文件 \u0026ndash; applitaion.properties\n​\t|\u0026ndash; spring.profile.active=dev\n​\t|\u0026ndash; server.port=8080\n\u0026ndash; applicaton-dev.properties\n​\t|\u0026ndash; server.port=8081\n当在主配置文件中设置spring.profile.active属性为dev时，-dev的配置文件就会生效，像上面的配置则会以8081端口启动，即带{profile}的配置文件优先级高\n在上面的情况下在进行扩展，当jar包外部也有一个-dev的配置文件时，在外部的优先级会更高。 ","permalink":"https://www.liunaijie.top/coding/spring/spring%E7%AC%94%E8%AE%B0/","summary":"\u003cp\u003e最近在阅读《Spring in action》这本书，也以此篇文章记录一下\u003ccode\u003espring\u003c/code\u003e框架的相关内容。\u003c/p\u003e\n\u003cp\u003e那么既然聊\u003ccode\u003espring\u003c/code\u003e了，一定会聊到的两个点就是\u003ccode\u003eioc\u003c/code\u003e和\u003ccode\u003eaop\u003c/code\u003e。那就先来聊一下这两个东西。以下都是个人理解，如果有不对的地方，欢迎探讨指正。\u003c/p\u003e\n\u003cp\u003eioc 和 aop 是编程思想，di 和 aspect 是他们的具体实现。\u003c/p\u003e\n\u003ch1 id=\"ioc\"\u003eIOC\u003c/h1\u003e\n\u003cp\u003eIOC:控制反转，DI：依赖注入。\u003c/p\u003e\n\u003ch2 id=\"控制\"\u003e控制\u003c/h2\u003e\n\u003cp\u003e在传统的 Java SE 程序中，我们在对象内部通过 new 的方法来创建对象实例，在这里是程序主动创建的依赖对象。而在 spring 中，它使用了专门的容器去控制对象。\u003c/p\u003e\n\u003cp\u003e控制的是对象的\u003cstrong\u003e创建、初始化、销毁\u003c/strong\u003e过程\u003c/p\u003e\n\u003cp\u003e在传统的 Java SE中，我们使用 new 进行创建。在构造器或者 setter 方法中给依赖对象赋值。给对象赋值 null 来销毁对象。\u003c/p\u003e\n\u003cp\u003e而在spring中一个bean的生命周期如下图所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/spring%E7%9A%84bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" alt=\"bean的生命周期\"\u003e\u003c/p\u003e\n\u003ch2 id=\"反转\"\u003e反转\u003c/h2\u003e\n\u003cp\u003e控制反转。我们之前是主动方，主动去控制对象的生命周期。现在变成了由 spring 去进行控制。我们由对象的控制者变成了被动控制者。\u003c/p\u003e\n\u003ch2 id=\"依赖注入\"\u003e依赖注入\u003c/h2\u003e\n\u003cp\u003eioc 思想落实到代码上的具体实现。\u003c/p\u003e\n\u003cp\u003e在spring中，我们一般使用注解\u003ccode\u003eComponent\u003c/code\u003e，\u003ccode\u003eService\u003c/code\u003e，\u003ccode\u003eRepository\u003c/code\u003e，\u003ccode\u003eController\u003c/code\u003e，\u003ccode\u003eAutowired\u003c/code\u003e或\u003ccode\u003eResource\u003c/code\u003e来进行注入。这个实例化出来的bean生命周期交给了spring来进行管理。我们将他们放在不同的类上表达不同的含义。\u003c/p\u003e\n\u003cp\u003e如果不进行主动声明，则默认的bean的名称为类名首字母小写，比如我对一个\u003ccode\u003eUserServiceImpl\u003c/code\u003e上添加\u003ccode\u003e@Service\u003c/code\u003e注解，spring则将这个类声明为\u003ccode\u003euserServiceImpl\u003c/code\u003e的bean。也可以这样进行主动声明\u003ccode\u003e@Service(\u0026quot;beanName\u0026quot;)\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e如果我们对一个接口进入注入，这个接口下有多个实现类，这是spring就不知道我们要使用哪个实现类了，启动时会报错。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/20190919083201.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e这时候有两种解决办法：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e继续使用\u003ccode\u003e@Autowired\u003c/code\u003e注解\u003c/p\u003e\n\u003cp\u003e这个注解下也有两种解决方式：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e对实现类进行修改，添加\u003ccode\u003e@Primary\u003c/code\u003e首选项注解\u003c/p\u003e\n\u003cp\u003e我们对其中一个实现类添加这个注解，那么在注入时会首先注入这个实现类\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e对引入类添加\u003ccode\u003e@Qualifier\u003c/code\u003e限定符注解\u003c/p\u003e\n\u003cp\u003e我们在\u003ccode\u003e@Autowired\u003c/code\u003e下添加这个注解，注解里面的内容为我们要注入实现类bean的id。这时候如果实现类的类名修改了也就是bean的id修改了，就又有问题了。这种情况下可以自定义限定符来实现。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e使用\u003ccode\u003e@Resource\u003c/code\u003e注解\u003c/p\u003e\n\u003cp\u003e使用这个注解，即可在里面直接加参数，指定要注入实现类bean的id。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"aop\"\u003eAOP\u003c/h1\u003e\n\u003cp\u003e面向切面编程：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在软件开发中，散布于应用中多处的功能被称为横切关注点。通常来讲，这些横切关注点从概念上是与应用的业务逻辑相分离的（但是往往会直接嵌入到应用的业务逻辑之中）。把这些横切关注点与业务逻辑相分离正是面向切面（AOP）所要解决的问题。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e比如说我们现在有一个业务系统，有学生，教师，课程几个业务模块，我们现在需要一些功能，比如说日志，事务等功能，这些功能实际上并不是我们的业务模块，但是又需要在系统中添加，这就可以利用面向切面来解决这个问题。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/a4.1.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在使用面向切面编程时，我们仍然在一个地方定义通用功能，但是可以通过声明的方式定义这个功能要以何种方式在何处应用，而无需修改受影响的类。横切关注点可以被模块化为特殊的类，这些类被称作切面（aspect）。这样做有两个好处：首先，现在每个关注点都集中于一个地方，而不是分散到多处代码中；其次，服务模块更简洁，因为它们只包含主要关注点（业务功能）的代码，而次要关注点的代码被转移到切面中了。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"aop术语\"\u003eAOP术语\u003c/h2\u003e\n\u003cp\u003e描述切面的常用术语有通知(advice)，切点(pointcut)和连接点(joinpoint)。\u003c/p\u003e\n\u003ch3 id=\"通知advice\"\u003e通知（Advice）\u003c/h3\u003e\n\u003cp\u003e通知定义了切面是什么以及何时使用。\u003c/p\u003e\n\u003cp\u003espring切面可以应用5种类型的通知\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e前置通知（Before）：在目标方法被调用之前调用通知功能；\u003c/li\u003e\n\u003cli\u003e后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么；\u003c/li\u003e\n\u003cli\u003e返回通知（After-returning）：在目标方法成功执行之后调用通知；\u003c/li\u003e\n\u003cli\u003e异常通知（After-throwing）：在目标方法抛出异常后调用通知；\u003c/li\u003e\n\u003cli\u003e环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"连接点joinpoint\"\u003e连接点(JoinPoint)\u003c/h3\u003e\n\u003cp\u003e连接点是在应用执行过程中能够插入切面的一个点。（被切入的地方）\u003c/p\u003e","title":"Spring笔记"},{"content":"概述 容器主要包括Collection和Map两种，Collection存储对象的集合，而Map存储着键值对。 而Collection下又分为List，Set，和Queue三种。\n源码分析 Map HashMap LinkedHashMap TreeMap Hashtable HashMap 采用数组+链表+红黑树的数据结构(1.8)，查找的效率由哈希O(1)+链表O(n)，改为了哈希O(1)+O(logN)。当链表长度到达8时转换为红黑树，当红黑树上节点的数量降为6时再转换为链表。遍历时的顺序与插入顺序不一致。它的查找效率高。\nLinkedHashMap 它是 hashmap 的子类，在 hashmap 的基础上添加了双向链表。通过链表的方式保证了遍历时顺序与插入时顺序一致。可以在构造函数中设置访问顺序，实现 lru 算法。\nTreeMap 采用红黑树的数据结构。所以在遍历时内部是排好序的。但效率最低。\nHashtable 采用数组+链表的数据结构。它在可能多线程访问的方法上添加了synchronized关键字，保证了线程的安全性。与HashMap的思路大体相同。\nList ArrayList LinkedList Vector ArrayList 通过数组实现，所以在访问时直接通过下标即可获取，速度快。但插入需要复制数组，速度慢。\nLinkedList 通过链表实现，所以在插入时速度快，但访问时需要通过链表逐个访问，速度慢。\nVector 通过数组实现，大体与ArrayList相同。但它是线程安全的，通过在方法上添加synchronized关键字来实现。并且它可以设置一个扩容的长度，每次扩容时数组增加我们设置的长度，当没设置是为双倍扩容。ArrayList是1.5倍扩容并且没有设置扩容长度的变量。\nSet HashSet LinkedHashSet TreeSet set 是 map 的子集，当 map 只存储 key，value 为空时就是 set。\nQueue LinkedList PriorityQueue 队列，先进先出原则。通过链表很容易实现，获取头部节点，新增时插入到尾部。而PriorityQueue通过数组进行的实现，并可以实现优先级。\n迭代器 ","permalink":"https://www.liunaijie.top/coding/java/java%E5%AE%B9%E5%99%A8/","summary":"\u003ch1 id=\"概述\"\u003e概述\u003c/h1\u003e\n\u003cp\u003e容器主要包括\u003ccode\u003eCollection\u003c/code\u003e和\u003ccode\u003eMap\u003c/code\u003e两种，\u003ccode\u003eCollection\u003c/code\u003e存储对象的集合，而\u003ccode\u003eMap\u003c/code\u003e存储着键值对。  而\u003ccode\u003eCollection\u003c/code\u003e下又分为\u003ccode\u003eList\u003c/code\u003e，\u003ccode\u003eSet\u003c/code\u003e，和\u003ccode\u003eQueue\u003c/code\u003e三种。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/JAVA%E5%AE%B9%E5%99%A8%E5%88%86%E7%B1%BB.png\" alt=\"JAVA容器\"\u003e\u003c/p\u003e\n\u003ch1 id=\"源码分析\"\u003e源码分析\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMap\n\u003cul\u003e\n\u003cli\u003e\u003cinput checked=\"\" disabled=\"\" type=\"checkbox\"\u003e \u003ca href=\"https://www.liunaijie.top/2019/08/22/java/HashMap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/\"\u003eHashMap\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cinput checked=\"\" disabled=\"\" type=\"checkbox\"\u003e \u003ca href=\"https://www.liunaijie.top/2019/08/22/java/LinkedHashMap%E6%BA%90%E7%A0%81/\"\u003eLinkedHashMap\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cinput checked=\"\" disabled=\"\" type=\"checkbox\"\u003e \u003ca href=\"https://www.liunaijie.top/2019/11/12/java/TreeMap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/\"\u003eTreeMap\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cinput checked=\"\" disabled=\"\" type=\"checkbox\"\u003e \u003ca href=\"https://www.liunaijie.top/2019/12/20/java/Java%E5%8F%A4%E8%80%81%E7%9A%84%E9%9B%86%E5%90%88%E7%B1%BB%E4%B9%8BHashtable/\"\u003eHashtable\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHashMap 采用数组+链表+红黑树的数据结构(1.8)，查找的效率由哈希O(1)+链表O(n)，改为了哈希O(1)+O(logN)。当链表长度到达8时转换为红黑树，当红黑树上节点的数量降为6时再转换为链表。遍历时的顺序与插入顺序不一致。它的查找效率高。\u003c/p\u003e\n\u003cp\u003eLinkedHashMap 它是 hashmap 的子类，在 hashmap 的基础上添加了双向链表。通过链表的方式保证了遍历时顺序与插入时顺序一致。可以在构造函数中设置访问顺序，实现 lru 算法。\u003c/p\u003e\n\u003cp\u003eTreeMap 采用红黑树的数据结构。所以在遍历时内部是排好序的。但效率最低。\u003c/p\u003e\n\u003cp\u003eHashtable 采用数组+链表的数据结构。它在可能多线程访问的方法上添加了\u003ccode\u003esynchronized\u003c/code\u003e关键字，保证了线程的安全性。与HashMap的思路大体相同。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eList\n\u003cul\u003e\n\u003cli\u003e\u003cinput checked=\"\" disabled=\"\" type=\"checkbox\"\u003e \u003ca href=\"https://www.liunaijie.top/2019/08/20/java/ArrayList%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/\"\u003eArrayList\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cinput checked=\"\" disabled=\"\" type=\"checkbox\"\u003e \u003ca href=\"https://www.liunaijie.top/2019/08/21/java/LinkedList%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/\"\u003eLinkedList\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cinput checked=\"\" disabled=\"\" type=\"checkbox\"\u003e \u003ca href=\"https://www.liunaijie.top/2019/12/23/java/Java%E5%8F%A4%E8%80%81%E7%9A%84%E9%9B%86%E5%90%88%E7%B1%BB%E4%B9%8BVector/\"\u003eVector\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eArrayList 通过数组实现，所以在访问时直接通过下标即可获取，速度快。但插入需要复制数组，速度慢。\u003c/p\u003e\n\u003cp\u003eLinkedList 通过链表实现，所以在插入时速度快，但访问时需要通过链表逐个访问，速度慢。\u003c/p\u003e\n\u003cp\u003eVector 通过数组实现，大体与ArrayList相同。但它是线程安全的，通过在方法上添加\u003ccode\u003esynchronized\u003c/code\u003e关键字来实现。并且它可以设置一个扩容的长度，每次扩容时数组增加我们设置的长度，当没设置是为双倍扩容。ArrayList是1.5倍扩容并且没有设置扩容长度的变量。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSet\n\u003cul\u003e\n\u003cli\u003e\u003cinput checked=\"\" disabled=\"\" type=\"checkbox\"\u003e \u003ca href=\"https://www.liunaijie.top/2019/08/26/java/HashSet%E6%BA%90%E7%A0%81/\"\u003eHashSet\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e LinkedHashSet\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e TreeSet\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eset 是 map 的子集，当 map 只存储 key，value 为空时就是 set。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eQueue\n\u003cul\u003e\n\u003cli\u003e\u003cinput checked=\"\" disabled=\"\" type=\"checkbox\"\u003e \u003ca href=\"https://www.liunaijie.top/2019/08/21/java/LinkedList%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/\"\u003eLinkedList\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e PriorityQueue\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e队列，先进先出原则。通过链表很容易实现，获取头部节点，新增时插入到尾部。而PriorityQueue通过数组进行的实现，并可以实现优先级。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.liunaijie.top/2019/08/28/java/%E8%BF%AD%E4%BB%A3%E5%99%A8/\"\u003e迭代器\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"JAVA容器"},{"content":"此篇文章来自《Kubernetes权威指南：从Docker到Kubernetes实践全接触（第4版） 》\nMaster Node Pod Replication Controller Service k8s里面的大部分资源都可以被看作一种资源对象，这些对象大部分也都可以通过kubectl工具（或者是API调用）执行增删改查等操作，并将其状态保存在etcd中持久化存储。\n在这个调用中，有一个版本的概念：apiVersion。对于一个接口有时候会进行升级，从而会有不同的版本存在，我们调用不同版本的接口从而对应不同版本的实现。在k8s里面也是如此，需要在调用时指明现在调用的版本号。\nMaster，Node master，node的概念是对于机器的，可是是一台物理主机，也可以是一台虚拟机，在不同的机器上部署k8s服务，这个服务实例可能是master或者是node。\nMaster k8s里面的master指的是集群控制节点，在每个k8s集群里都需要有一个master来负责整个集群的管理和控制，基本上k8s的所有控制命令都发给它，它负责具体的执行过程，\n在master上运行着以下关键进程：\nkubernetes API Server：提供了HTTP Rest接口的关键服务进程，是k8s里所有资源的增删改查等操作的唯一入口，也是集群控制的入口进程。 kubernetes Controller Manager：kubernetes里所有资源对象的自动化控制中心，可以将其理解为资源对象的“大总管”。 kubernetes Scheduler：负责资源调度（Pod调度）的进程 另外，在master上通常还需要部署etcd服务，因为kubernetes里的所有资源对象的数据都被保存在etcd中。\nNode 在k8s集群中，除了master的集群被称为node，node是集群中的工作负载节点，每个node都会被master分配一些工作负载（docker容器），当某个node宕机后，其上的工作负载会被master自动转移到其他节点上。\n每个node上都运行着以下关键进程：\nkubelet：负载pod对应容器的创建，启停等任务，同时与master密切协作，实现集群管理等基本功能。 kube-proxy：实现kubernetes service的通信与负载均衡的重要组件 docker engine：docker引擎，负责本机的容器创建和管理工作 node可以在运行期间动态增加到k8s集群总，前提是在这个节点上已经正确安装、配置和启动了上述关键进程，在默认情况下kubelet会向master注册自己，这也是k8s推荐的node管理方式。一旦node被纳入集群管理范围，kubelet进程就会定时向master汇报自身的情况，例如操作系统，docker版本，机器的cpu和内存情况，以及当前有哪些pod在运行等。这样master就可以获知每个node的资源使用情况，并实现高效均衡的资源调度策略。\n在node超过指定时间不上报信息时，会被master判定为“失联”，node的状态被标记为不可用（not ready），随后master会触发“工作负载大转移”的自动流程。\n可以通过执行如下命令查看在集群上有多少个node：\n1 kubectl get nodes 当想查看node的具体信息时，可以通过这个命令：\n1 kubectl describe node \u0026lt;node-name\u0026gt; 这个命令可以展示Node的如下关键信息。\nNode的基本信息：名称、标签、创建时间等。 Node当前的运行状态：Node启动后会做一系列的自检工作，比如磁盘空间是否不足（DiskPressure）、内存是否不足（MemoryPressure）、网络是否正常（NetworkUnavailable）、PID资源是否充足（PIDPressure）。在一切正常时设置Node为Ready状态（Ready=True），该状态表示Node处于健康状态，Master将可以在其上调度新的任务了（如启动Pod）。 Node的主机地址与主机名。 Node上的资源数量：描述Node可用的系统资源，包括CPU、内存数量、最大可调度Pod数量等。 Node可分配的资源量：描述Node当前可用于分配的资源量。 主机系统信息：包括主机ID、系统UUID、Linux kernel版本号、操作系统类型与版本、Docker版本号、kubelet与kube-proxy的版本号等。 当前运行的Pod列表概要信息。 已分配的资源使用概要信息，例如资源申请的最低、最大允许使用量占系统总量的百分比。 Node相关的Event信息。 master与node是集群中服务实例的一个描述，它对应的都是一个物理主机或者是虚拟机，是机器级别的一个概念\nPod Pod是k8s中管理的最小单元, 一个pod中有一个与业务并且不容易死亡的Pause容器, 可以根据Pause容器的状态来判断整个容器组的状态.\n对于同一个Pod中的多个container, 它们之间共享Pause容器的IP，共享Pause容器挂载的Volume. k8s为每个Pod都分配来一个唯一的IP地址, 称为Pod IP.\n在K8s中, 一个Pod里的容器与另外主机上的Pod容器能够直接通信.\n分类 Pod有两种类型: 普通的Pod以及静态Pod(Static Pod). 静态Pod一般作为系统级别的定义来实现一些系统级别的功能.\n访问 对于Pod中的容器, 可以通过(Pod IP + Container port)来进行访问.\nLabel Label(标签)是K8s系统中的一个核心概念, 很多东西的实现都依赖于Label. 一个Label是一个key=value的键值对, 其中的key与value都可以由用户自己指定. Label可以被添加到任意的资源对象上, 例如Node, Pod, Service等等. 一个资源对象可以定义任意数量的Label.\n我们可以对任意对象上添加和修改任意数量的label, label的名称和值都是我们自己定义的.\n当我们打上标签后, 可以通过Label Selector(标签选择器)查询和筛选这些资源对象.\n1 2 3 kubectl get pod -l \u0026#39;name=name1,project=projectA\u0026#39; kubectl get pods -l \u0026#39;environment in (production),tier in (frontend)\u0026#39; 1 2 3 selector: name: name1 project: projectA 1 2 3 4 5 selector: matchLabels: name: name1 matchExpressions: - {key: project, operator: In, values: [projectrA]} matchExpression用于定义一组基于集合的筛选条件, 支持的操作符有: In, NotIn, Exists, DoesNotExist\nmatchLabels用于定义一组Label, 与直接写在Selector中的作用相同.\n如果同时设置了matchLabels和matchExpressions, 则两组条件为AND关系. Annotation annotation(注解)与Label类似, 也是使用key=value的形式进行定义. 但是key, value值必须是字符串, 不可以是其他类型的值\nannotation不属于k8s管理的元数据信息, 但是可以通过添加某个注解来实现某项功能.\nConfigMap 存放配置文件, 当我们更新配置文件后, Pod可以拿到最新的配置文件.\n所有的配置项都当作key-value字符串, 其中的value可以是一整个配置文件. 也可以是一个具体值.\n1 2 3 4 5 site.xml: | \u0026lt;xml\u0026gt; \u0026lt;a\u0026gt;a\u0026lt;/a\u0026gt; \u0026lt;/xml\u0026gt; val: 123 创建 1 2 # 将folder文件夹下所有文件以文件名为key, 值为value的方式创建出configmap kubectl create configmap \u0026lt;NAME\u0026gt; --from-file=\u0026lt;folder_name\u0026gt; 使用 可以使用四种方式来使用ConfigMap配置Pod中的容器\n在容器命令和参数内 容器的环境变量 将ConfigMap挂载成文件, 让应用来读取 使用代码访问Kubernetes API来读取ConfigMap 如果在ConfigMap中的key使用.作为前缀, 在挂载成文件后, 文件将为隐藏格式\nSecret 存放密码等需要加密的信息, 功能与Configmap类似, 只不过在secret中的值需要进行Base64加密\nReplicaSet-RS ReplicaSet的前身是Replication Controller. 它是k8s系统中的一个核心概念, 由它来控制Pod的副本数量在任意时刻都符合某个期望值. 但是我们现在基本不主动使用RS来管理Pod, 而是使用更高级的对象Deployment来管理.\n主要的组成部分为:\n期望的Pod副本数量 用于筛选目标Pod的Label Selector 当Pod的副本数量小于期望值时, 用于创建新Pod的模板(template) 需要注意的是, 删除RC, RS并不会影响通过该RC,RS已创建好的Pod. 如果需要删除所有的Pod, 可以设置replicas的值为0先将Pod数量减至0后再进行删除.\nRS与RC的区别\nRS支持基于集合的Label Selector, 而RC只支持基于等式的Label Selector\n","permalink":"https://www.liunaijie.top/coding/cloud_native/kubernetes%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD/","summary":"\u003cp\u003e此篇文章来自《Kubernetes权威指南：从Docker到Kubernetes实践全接触（第4版） 》\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMaster\u003c/li\u003e\n\u003cli\u003eNode\u003c/li\u003e\n\u003cli\u003ePod\u003c/li\u003e\n\u003cli\u003eReplication Controller\u003c/li\u003e\n\u003cli\u003eService\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ek8s里面的大部分资源都可以被看作一种资源对象，这些对象大部分也都可以通过\u003ccode\u003ekubectl\u003c/code\u003e工具（或者是API调用）执行增删改查等操作，并将其状态保存在etcd中持久化存储。\u003c/p\u003e\n\u003cp\u003e在这个调用中，有一个版本的概念：\u003ccode\u003eapiVersion\u003c/code\u003e。对于一个接口有时候会进行升级，从而会有不同的版本存在，我们调用不同版本的接口从而对应不同版本的实现。在\u003ccode\u003ek8s\u003c/code\u003e里面也是如此，需要在调用时指明现在调用的版本号。\u003c/p\u003e\n\u003ch1 id=\"masternode\"\u003eMaster，Node\u003c/h1\u003e\n\u003cp\u003emaster，node的概念是对于机器的，可是是一台物理主机，也可以是一台虚拟机，在不同的机器上部署k8s服务，这个服务实例可能是master或者是node。\u003c/p\u003e\n\u003ch2 id=\"master\"\u003eMaster\u003c/h2\u003e\n\u003cp\u003ek8s里面的master指的是集群控制节点，在每个k8s集群里都需要有一个master来负责整个集群的管理和控制，基本上k8s的所有控制命令都发给它，它负责具体的执行过程，\u003c/p\u003e\n\u003cp\u003e在master上运行着以下关键进程：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ekubernetes API Server：提供了HTTP Rest接口的关键服务进程，是k8s里所有资源的增删改查等操作的唯一入口，也是集群控制的入口进程。\u003c/li\u003e\n\u003cli\u003ekubernetes Controller Manager：kubernetes里所有资源对象的自动化控制中心，可以将其理解为资源对象的“大总管”。\u003c/li\u003e\n\u003cli\u003ekubernetes Scheduler：负责资源调度（Pod调度）的进程\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e另外，在master上通常还需要部署etcd服务，因为kubernetes里的所有资源对象的数据都被保存在etcd中。\u003c/p\u003e\n\u003ch2 id=\"node\"\u003eNode\u003c/h2\u003e\n\u003cp\u003e在k8s集群中，除了master的集群被称为node，node是集群中的工作负载节点，每个node都会被master分配一些工作负载（docker容器），当某个node宕机后，其上的工作负载会被master自动转移到其他节点上。\u003c/p\u003e\n\u003cp\u003e每个node上都运行着以下关键进程：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ekubelet：负载pod对应容器的创建，启停等任务，同时与master密切协作，实现集群管理等基本功能。\u003c/li\u003e\n\u003cli\u003ekube-proxy：实现kubernetes service的通信与负载均衡的重要组件\u003c/li\u003e\n\u003cli\u003edocker engine：docker引擎，负责本机的容器创建和管理工作\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003enode可以在运行期间动态增加到k8s集群总，前提是在这个节点上已经正确安装、配置和启动了上述关键进程，在默认情况下kubelet会向master注册自己，这也是k8s推荐的node管理方式。一旦node被纳入集群管理范围，kubelet进程就会定时向master汇报自身的情况，例如操作系统，docker版本，机器的cpu和内存情况，以及当前有哪些pod在运行等。这样master就可以获知每个node的资源使用情况，并实现高效均衡的资源调度策略。\u003c/p\u003e\n\u003cp\u003e在node超过指定时间不上报信息时，会被master判定为“失联”，node的状态被标记为不可用（not ready），随后master会触发“工作负载大转移”的自动流程。\u003c/p\u003e\n\u003cp\u003e可以通过执行如下命令查看在集群上有多少个node：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ekubectl get nodes\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e当想查看node的具体信息时，可以通过这个命令：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ekubectl describe node \u0026lt;node-name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e这个命令可以展示Node的如下关键信息。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNode的基本信息：名称、标签、创建时间等。\u003c/li\u003e\n\u003cli\u003eNode当前的运行状态：Node启动后会做一系列的自检工作，比如磁盘空间是否不足（DiskPressure）、内存是否不足（MemoryPressure）、网络是否正常（NetworkUnavailable）、PID资源是否充足（PIDPressure）。在一切正常时设置Node为Ready状态（Ready=True），该状态表示Node处于健康状态，Master将可以在其上调度新的任务了（如启动Pod）。\u003c/li\u003e\n\u003cli\u003eNode的主机地址与主机名。\u003c/li\u003e\n\u003cli\u003eNode上的资源数量：描述Node可用的系统资源，包括CPU、内存数量、最大可调度Pod数量等。\u003c/li\u003e\n\u003cli\u003eNode可分配的资源量：描述Node当前可用于分配的资源量。\u003c/li\u003e\n\u003cli\u003e主机系统信息：包括主机ID、系统UUID、Linux kernel版本号、操作系统类型与版本、Docker版本号、kubelet与kube-proxy的版本号等。\u003c/li\u003e\n\u003cli\u003e当前运行的Pod列表概要信息。\u003c/li\u003e\n\u003cli\u003e已分配的资源使用概要信息，例如资源申请的最低、最大允许使用量占系统总量的百分比。\u003c/li\u003e\n\u003cli\u003eNode相关的Event信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003emaster与node是集群中服务实例的一个描述，它对应的都是一个物理主机或者是虚拟机，是机器级别的一个概念\u003c/strong\u003e\u003c/p\u003e\n\u003ch1 id=\"pod\"\u003ePod\u003c/h1\u003e\n\u003cp\u003ePod是k8s中管理的最小单元, 一个pod中有一个与业务并且不容易死亡的Pause容器, 可以根据Pause容器的状态来判断整个容器组的状态.\u003c/p\u003e\n\u003cp\u003e对于同一个Pod中的多个container, 它们之间共享Pause容器的IP，共享Pause容器挂载的Volume. k8s为每个Pod都分配来一个唯一的IP地址, 称为Pod IP.\u003c/p\u003e\n\u003cp\u003e在K8s中, 一个Pod里的容器与另外主机上的Pod容器能够直接通信.\u003c/p\u003e","title":"Kubetnetes的一些概念和术语"},{"content":"迭代器 在java中主要有两种迭代器，Iterator和ListIterator。这两个都是接口。先来看一下这两个接口有什么区别\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public interface Iterator\u0026lt;E\u0026gt; { boolean hasNext(); E next(); default void remove() { throw new UnsupportedOperationException(\u0026#34;remove\u0026#34;); } default void forEachRemaining(Consumer\u0026lt;? super E\u0026gt; action) { Objects.requireNonNull(action); while (hasNext()) action.accept(next()); } } Iterator主要有四个方法。判断有没有下一个元素、获取下一个元素，删除元素和forEachRemaining方法。\n再来看一下ListIterator\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public interface ListIterator\u0026lt;E\u0026gt; extends Iterator\u0026lt;E\u0026gt; { boolean hasNext(); E next(); boolean hasPrevious(); E previous(); int nextIndex(); int previousIndex(); void remove(); void set(E e); void add(E e); } 我们可以看到他是继承了Iterator。除了上面的两个方法还多了好几个方法。判断是否有上一个元素，获取上一个元素的值，获取上一个元素的索引，获取上一个元素的索引。除了移除还有添加和更新的方法。\n他们在不同的类里面都有自己的实现，之前看ArrayList，HashMap的时候把这一块给跳过了，现在来看一下他们是如何实现的。\nArrayList 他里面实现了上面说过的两个接口，先来看一下实现的Iterator\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 private class Itr implements Iterator\u0026lt;E\u0026gt; { // 记录下一个返回元素的索引 int cursor; // index of next element to return // 记录刚刚返回的最后一个元素的索引 int lastRet = -1; // index of last element returned; -1 if no such // int expectedModCount = modCount; Itr() {} /** * 判断有没有下一个元素，将下一个元素的索引与元素长度进行对比 */ public boolean hasNext() { return cursor != size; } @SuppressWarnings(\u0026#34;unchecked\u0026#34;) public E next() { checkForComodification(); /** 将下一个的索引赋给i，如果下一个索引比集合长度还大，则抛出异常 **/ int i = cursor; if (i \u0026gt;= size) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (i \u0026gt;= elementData.length) /** 这里又进行了一次判断，判断索引值与元素长度的关系 **/ throw new ConcurrentModificationException(); /**然后将下一个的索引进行加一**/ cursor = i + 1; /**返回这个位置上的元素，并且将lastRet赋值为i **/ return (E) elementData[lastRet = i]; } /**这个方法是移除刚刚获取的那个元素**/ public void remove() { /**如果lastRet小于0，则表示刚刚没有获取过元素**/ if (lastRet \u0026lt; 0) throw new IllegalStateException(); checkForComodification(); try { /**调用了ArrayList的根据索引删除元素方法**/ ArrayList.this.remove(lastRet); /**将下一个元素索引赋值为上一个索引，并且将最后返回的索引置为-1**/ cursor = lastRet; lastRet = -1; /**因为进行了删除，所以modCount进行了修改，这里要再次赋值到expectedModCount上**/ expectedModCount = modCount; } catch (IndexOutOfBoundsException ex) { throw new ConcurrentModificationException(); } } /** * 检查 * 在开始的时候将 expectedModCount初始化为modCount的值 * 如果在初始化后集合进行了 添加或删除元素的操作 则modCount会改变 * 在这里进行判断，有没有进行修改的操作。 * 例：[1,2,3,4,5]。从开始用迭代器，判断了第一位有值(现在是1)，在调用next()方法之前进行了删除，把1删除了。 * 这时再调用next()会返回2。这是不对的。这个判断就是为了这种情况的。 */ final void checkForComodification() { if (modCount != expectedModCount) throw new ConcurrentModificationException(); } } 从上面的代码可以看出\n对于移除元素来说，只能移除刚刚获取的那一个元素。如果刚刚没获取元素获取则抛出异常，如果要删除获取的前两个元素也不可以。 然后再来看一下实现的ListIterator接口\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 private class ListItr extends Itr implements ListIterator\u0026lt;E\u0026gt; { /**它的构造方法必须传入一个参数**/ ListItr(int index) { super(); cursor = index; } /**判断有没有上一个元素，如果下一个返回元素不是第一个元素则表示有上一个元素**/ public boolean hasPrevious() { return cursor != 0; } public int nextIndex() { return cursor; } public int previousIndex() { return cursor - 1; } @SuppressWarnings(\u0026#34;unchecked\u0026#34;) public E previous() { checkForComodification(); int i = cursor - 1; if (i \u0026lt; 0) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (i \u0026gt;= elementData.length) throw new ConcurrentModificationException(); cursor = i; return (E) elementData[lastRet = i]; } /**调用了ArrayList的set方法，传入的坐标是刚刚返回值的坐标**/ public void set(E e) { if (lastRet \u0026lt; 0) throw new IllegalStateException(); checkForComodification(); try { ArrayList.this.set(lastRet, e); } catch (IndexOutOfBoundsException ex) { throw new ConcurrentModificationException(); } } /**添加一个元素，因为多了一个元素，所以下一个元素的索引要加1，并且刚刚没有返回元素，lastRet置为-1**/ public void add(E e) { checkForComodification(); try { int i = cursor; ArrayList.this.add(i, e); cursor = i + 1; lastRet = -1; expectedModCount = modCount; } catch (IndexOutOfBoundsException ex) { throw new ConcurrentModificationException(); } } } LinkedList 也是将这两个接口都实现了，但是从代码里可以看出实现的Iterator最终还是调用了ListIterator方法\n不过他后面的调用next、hasNext方法是调用是是否有上一个值。\n1 2 3 4 5 6 7 8 9 10 11 12 13 private class DescendingIterator implements Iterator\u0026lt;E\u0026gt; { // 这个类是在下面声明的 实现了ListIterator的类 private final ListItr itr = new ListItr(size()); public boolean hasNext() { return itr.hasPrevious(); } public E next() { return itr.previous(); } public void remove() { itr.remove(); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 private class ListItr implements ListIterator\u0026lt;E\u0026gt; { private Node\u0026lt;E\u0026gt; lastReturned; private Node\u0026lt;E\u0026gt; next; private int nextIndex; private int expectedModCount = modCount; /** * 上面调用方法时传入了 size()方法的返回值相当于传入了size变量 * 如果传入的值等于size则 next赋值为null 不然置为该位置上的元素 * 然后让 nextIndex置为传入的值 **/ ListItr(int index) { // assert isPositionIndex(index); next = (index == size) ? null : node(index); nextIndex = index; } /**判断有没有下一个元素，判断下一个的索引是不是小于数组长度**/ public boolean hasNext() { return nextIndex \u0026lt; size; } /**获取下一个元素**/ public E next() { checkForComodification(); if (!hasNext()) throw new NoSuchElementException(); lastReturned = next; next = next.next; nextIndex++; return lastReturned.item; } /**判断有没有上一个元素，如果下一个元素索引大于零则肯定有上一个元素**/ public boolean hasPrevious() { return nextIndex \u0026gt; 0; } /**获取上一个元素**/ public E previous() { checkForComodification(); if (!hasPrevious()) throw new NoSuchElementException(); lastReturned = next = (next == null) ? last : next.prev; nextIndex--; return lastReturned.item; } public int nextIndex() { return nextIndex; } public int previousIndex() { return nextIndex - 1; } public void remove() { checkForComodification(); if (lastReturned == null) throw new IllegalStateException(); Node\u0026lt;E\u0026gt; lastNext = lastReturned.next; unlink(lastReturned); if (next == lastReturned) next = lastNext; else nextIndex--; lastReturned = null; expectedModCount++; } public void set(E e) { if (lastReturned == null) throw new IllegalStateException(); checkForComodification(); lastReturned.item = e; } public void add(E e) { checkForComodification(); lastReturned = null; if (next == null) linkLast(e); else linkBefore(e, next); nextIndex++; expectedModCount++; } final void checkForComodification() { if (modCount != expectedModCount) throw new ConcurrentModificationException(); } } 总结 从这里可以看出之前定义的modCount的作用，这个变量在迭代器中作为一个判断。\nforEachRemaining方法暂时还没弄明白他的作用，而且它的作用应该并不是为了在迭代器中使用，应该有其他方面的作用，这个就放到后面再来看。\n","permalink":"https://www.liunaijie.top/coding/java/%E8%BF%AD%E4%BB%A3%E5%99%A8/","summary":"\u003ch1 id=\"迭代器\"\u003e迭代器\u003c/h1\u003e\n\u003cp\u003e在java中主要有两种迭代器，\u003ccode\u003eIterator\u003c/code\u003e和\u003ccode\u003eListIterator\u003c/code\u003e。这两个都是接口。先来看一下这两个接口有什么区别\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003einterface\u003c/span\u003e \u003cspan class=\"nc\"\u003eIterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ehasNext\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ethrow\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eUnsupportedOperationException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;remove\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eforEachRemaining\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eConsumer\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003esuper\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eaction\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eObjects\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003erequireNonNull\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaction\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehasNext\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eaction\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eaccept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eIterator\u003c/code\u003e主要有四个方法。判断有没有下一个元素、获取下一个元素，删除元素和\u003ccode\u003eforEachRemaining\u003c/code\u003e方法。\u003c/p\u003e\n\u003cp\u003e再来看一下\u003ccode\u003eListIterator\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003einterface\u003c/span\u003e \u003cspan class=\"nc\"\u003eListIterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eIterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ehasNext\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ehasPrevious\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eprevious\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003enextIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003epreviousIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e我们可以看到他是继承了\u003ccode\u003eIterator\u003c/code\u003e。除了上面的两个方法还多了好几个方法。判断是否有上一个元素，获取上一个元素的值，获取上一个元素的索引，获取上一个元素的索引。除了移除还有添加和更新的方法。\u003c/p\u003e\n\u003cp\u003e他们在不同的类里面都有自己的实现，之前看\u003ccode\u003eArrayList\u003c/code\u003e，\u003ccode\u003eHashMap\u003c/code\u003e的时候把这一块给跳过了，现在来看一下他们是如何实现的。\u003c/p\u003e","title":"迭代器"},{"content":"变量 1 2 3 private transient HashMap\u0026lt;E,Object\u0026gt; map; // 传入到HashMap中作为value private static final Object PRESENT = new Object(); 构造函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public HashSet() { map = new HashMap\u0026lt;\u0026gt;(); } public HashSet(int initialCapacity) { map = new HashMap\u0026lt;\u0026gt;(initialCapacity); } public HashSet(int initialCapacity, float loadFactor) { map = new HashMap\u0026lt;\u0026gt;(initialCapacity, loadFactor); } public HashSet(Collection\u0026lt;? extends E\u0026gt; c) { map = new HashMap\u0026lt;\u0026gt;(Math.max((int) (c.size()/.75f) + 1, 16)); addAll(c); } 我们可以看到他的构造函数都是再次调用了HashMap的构造函数。将map变量初始化为相应的HashMap。\n添加 1 2 3 public boolean add(E e) { return map.put(e, PRESENT)==null; } 将传入的key，一个空的value。通过map的put操作放值到map中。通过map的key不能重复原理。如果key重复，则不会添加到map中。\n迭代器 1 2 3 public Iterator\u0026lt;E\u0026gt; iterator() { return map.keySet().iterator(); } 通过这里我们可以看出来HashSet的原理就是在HashMap的基础上实现的。\n我们只需要他的key集合就是我们所需的HashSet。\n","permalink":"https://www.liunaijie.top/coding/java/hashset%E6%BA%90%E7%A0%81/","summary":"\u003ch1 id=\"变量\"\u003e变量\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003etransient\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 传入到HashMap中作为value\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ePRESENT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"构造函数\"\u003e构造函数\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eHashSet\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eHashSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einitialCapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einitialCapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eHashSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einitialCapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003efloat\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eloadFactor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einitialCapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eloadFactor\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eHashSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCollection\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e75f\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eaddAll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e我们可以看到他的构造函数都是再次调用了\u003ccode\u003eHashMap\u003c/code\u003e的构造函数。将\u003ccode\u003emap\u003c/code\u003e变量初始化为相应的\u003ccode\u003eHashMap\u003c/code\u003e。\u003c/p\u003e","title":"HashSet源码"},{"content":"\n画了一张结构图，欢迎指正。\n变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 /** * The default initial capacity - MUST be a power of two. * 默认的容量，容量必须是2的幂 */ static final int DEFAULT_INITIAL_CAPACITY = 1 \u0026lt;\u0026lt; 4; // aka 16 /** * The maximum capacity, used if a higher value is implicitly specified * by either of the constructors with arguments. * MUST be a power of two \u0026lt;= 1\u0026lt;\u0026lt;30. * 最大的容量值 2的30次幂 */ static final int MAXIMUM_CAPACITY = 1 \u0026lt;\u0026lt; 30; /** * The load factor used when none specified in constructor. * 默认的负载系数 */ static final float DEFAULT_LOAD_FACTOR = 0.75f; /** * The bin count threshold for using a tree rather than list for a * bin. Bins are converted to trees when adding an element to a * bin with at least this many nodes. The value must be greater * than 2 and should be at least 8 to mesh with assumptions in * tree removal about conversion back to plain bins upon * shrinkage. * 链表的长度到达8之后转换为红黑树 */ static final int TREEIFY_THRESHOLD = 8; /** * The bin count threshold for untreeifying a (split) bin during a * resize operation. Should be less than TREEIFY_THRESHOLD, and at * most 6 to mesh with shrinkage detection under removal. */ static final int UNTREEIFY_THRESHOLD = 6; /** * The smallest table capacity for which bins may be treeified. * (Otherwise the table is resized if too many nodes in a bin.) * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts * between resizing and treeification thresholds. * */ static final int MIN_TREEIFY_CAPACITY = 64; // 存储的容器 transient Node\u0026lt;K,V\u0026gt;[] table; /** * Holds cached entrySet(). Note that AbstractMap fields are used * for keySet() and values(). */ transient Set\u0026lt;Map.Entry\u0026lt;K,V\u0026gt;\u0026gt; entrySet; /** * The number of key-value mappings contained in this map. */ transient int size; /** * The number of times this HashMap has been structurally modified * Structural modifications are those that change the number of mappings in * the HashMap or otherwise modify its internal structure (e.g., * rehash). This field is used to make iterators on Collection-views of * the HashMap fail-fast. (See ConcurrentModificationException). * 结构修改的次数，每次增加和删除都修改这个数值 */ transient int modCount; /** * The next size value at which to resize (capacity * load factor). * * @serial */ // (The javadoc description is true upon serialization. // Additionally, if the table array has not been allocated, this // field holds the initial array capacity, or zero signifying // DEFAULT_INITIAL_CAPACITY.) // 扩容的阈值，当键值对的数量超过这个值就会扩容 int threshold; /** * The load factor for the hash table. * 负载系数 */ final float loadFactor; 构造方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /** * 构造方法1，无参的构造方法 */ public HashMap() { this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted } /** * 声明容量的构造方法 */ public HashMap(int initialCapacity) { this(initialCapacity, DEFAULT_LOAD_FACTOR); } /** * 声明容量和负载系数的构造方法 */ public HashMap(int initialCapacity, float loadFactor) { if (initialCapacity \u0026lt; 0) throw new IllegalArgumentException(\u0026#34;Illegal initial capacity: \u0026#34; + initialCapacity); if (initialCapacity \u0026gt; MAXIMUM_CAPACITY) initialCapacity = MAXIMUM_CAPACITY; if (loadFactor \u0026lt;= 0 || Float.isNaN(loadFactor)) throw new IllegalArgumentException(\u0026#34;Illegal load factor: \u0026#34; + loadFactor); this.loadFactor = loadFactor; this.threshold = tableSizeFor(initialCapacity); } /** * 参数为map的构造方法 */ public HashMap(Map\u0026lt;? extends K, ? extends V\u0026gt; m) { this.loadFactor = DEFAULT_LOAD_FACTOR; putMapEntries(m, false); } 无参的构造方法\n这个应该就是我们最常用的构造方法，将负载系数初始化为默认的系数。\n声明容量的构造方法\n调用了声明容量和负载系数的构造方法\n声明容量和负载系数的构造方法\n首先会判断这个容量是否符合要求，并且最大值是MAXIMUM_CAPACITY=1\u0026lt;\u0026lt;30，从这里可以看出map的最大容量值。然后再计算threshold值，这个值表示扩容的阈值，当键值对的数量超过这个值就会扩容。下面会介绍一下tableSizeFor()方法。\n1 2 3 4 5 6 7 8 9 static final int tableSizeFor(int cap) { int n = cap - 1; n |= n \u0026gt;\u0026gt;\u0026gt; 1; n |= n \u0026gt;\u0026gt;\u0026gt; 2; n |= n \u0026gt;\u0026gt;\u0026gt; 4; n |= n \u0026gt;\u0026gt;\u0026gt; 8; n |= n \u0026gt;\u0026gt;\u0026gt; 16; return (n \u0026lt; 0) ? 1 : (n \u0026gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1; } 这个方法的主要作用是找到等于或大于cap的，最小的2的幂。比如我们传入6，他返回8，传入8，返回8。利用了位运算。\n参数为map的构造方法\n负载系数使用默认的系数，然后将传入的map参数放到新的map中。这个putMapEntries()方法在下面的putAll方法中进行解读。\n从这里可以看出，在构造函数里面并没有对存储键值对的变量进行初始化，这个初始化过程是放在第一次放的过程中。\n插入 put(K key,V value) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 public V put(K key, V value) { return putVal(hash(key), key, value, false, true); } /** * Implements Map.put and related methods * * @param hash hash for key * @param key the key * @param value the value to put * @param onlyIfAbsent if true, don\u0026#39;t change existing value * @param evict if false, the table is in creation mode. * @return previous value, or null if none */ final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) { Node\u0026lt;K,V\u0026gt;[] tab; Node\u0026lt;K,V\u0026gt; p; int n, i; // 如果table为空进行了初始化， if ((tab = table) == null || (n = tab.length) == 0) // n=16 n = (tab = resize()).length; if ((p = tab[i = (n - 1) \u0026amp; hash]) == null) // 存放新的键值对，根据 n和hash找到这个key对应在桶中的下标，然后赋予p，如果不为空则说明这个key的hash没有重复，直接放入 tab[i] = newNode(hash, key, value, null); else { // 如果不为空，则可能是key重复，或者key的hash重复 // key 重复，覆盖原来的值 // key的hash重复，先使用链表，如果这个链表的长度大于等于7，则转换为红黑树存储。方便后面的查找。 Node\u0026lt;K,V\u0026gt; e; K k; if (p.hash == hash \u0026amp;\u0026amp; ((k = p.key) == key || (key != null \u0026amp;\u0026amp; key.equals(k)))) // key重复的情况 e = p; else if (p instanceof TreeNode) // 当这个hash已经是红黑树了 e = ((TreeNode\u0026lt;K,V\u0026gt;)p).putTreeVal(this, tab, hash, key, value); else { for (int binCount = 0; ; ++binCount) { // 这里是个死循环，当遇到下面两种情况跳出循环 //1.找到最后一个节点并存储值 if ((e = p.next) == null) { // 将下个节点设置成新的键值对，链表长度加1 p.next = newNode(hash, key, value, null); if (binCount \u0026gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st // 这里判断如果这个链表的长度大于等于7，就将链表转换为红黑树 // 从这里可以看出不会存在7个长度的链表，当7的时候就转换成红黑树了 treeifyBin(tab, hash); break; } // 2.这个key重复了。不知道为什么这里还有一个判断。 if (e.hash == hash \u0026amp;\u0026amp; ((k = e.key) == key || (key != null \u0026amp;\u0026amp; key.equals(k)))) break; p = e; } } if (e != null) { // existing mapping for key // 在上面的代码中，用e来存储之前的键值对，如果e不为空说明这个key重复。 V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; // todo 做一些操作，然后返回旧的值 afterNodeAccess(e); return oldValue; } } // 如果key不重复则到这里，将modCount增加 ++modCount; // 如果 容量+1 比要扩容的阈值还大，那么进行扩容 // 他的扩容机制是放在本次结束后的，并不是放到下一次的开始。 if (++size \u0026gt; threshold) resize(); // todo afterNodeInsertion(evict); return null; } 计算hash 在放的时候用到了hash()方法对键做哈希运算，并且没有直接运用Object的hashCode()方法，在这个的基础上又进行了一些运算。这个16位也是有原因的，具体后面再过来讲。\n1 2 3 4 static final int hash(Object key) { int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h \u0026gt;\u0026gt;\u0026gt; 16); } 扩容 还用到了扩容的方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 final Node\u0026lt;K,V\u0026gt;[] resize() { Node\u0026lt;K,V\u0026gt;[] oldTab = table; // 获取原来桶数组的元素长度和扩容阈值，当没初始化时即oldTab=null时，长度为0 阈值=12（16*0.75） int oldCap = (oldTab == null) ? 0 : oldTab.length; int oldThr = threshold; // 新桶数组的元素长度 int newCap, newThr = 0; if (oldCap \u0026gt; 0) { if (oldCap \u0026gt;= MAXIMUM_CAPACITY) { // 原来的桶数组里面有元素，并且容量为最大容量了，将阈值设置为int的最大值，并直接返回原来的桶数组 threshold = Integer.MAX_VALUE; return oldTab; } else if ((newCap = oldCap \u0026lt;\u0026lt; 1) \u0026lt; MAXIMUM_CAPACITY \u0026amp;\u0026amp; oldCap \u0026gt;= DEFAULT_INITIAL_CAPACITY) // 如果旧桶数组的长度乘2后小于最大容量并且旧桶数组的长度大于默认的容量，新桶的容量等于原来容量的两倍，所以扩容是2倍扩容 newThr = oldThr \u0026lt;\u0026lt; 1; // double threshold } else if (oldThr \u0026gt; 0) // initial capacity was placed in threshold // 当原来的容量为小于等于0 并且阈值大于0时，让新容量等于旧的阈值 newCap = oldThr; else { // zero initial threshold signifies using defaults // 如果这两个都小于等于0 使用默认值，初始化 newCap = DEFAULT_INITIAL_CAPACITY; newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); } if (newThr == 0) { float ft = (float)newCap * loadFactor; // 新的负载系数= ft 或者 int的最大值 // 当新容量小于最大容量并且 ft\u0026lt;MAXIMUM_CAPACITY 时 负载系数=ft newThr = (newCap \u0026lt; MAXIMUM_CAPACITY \u0026amp;\u0026amp; ft \u0026lt; (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE); } // 负载系数=newThr threshold = newThr; @SuppressWarnings({\u0026#34;rawtypes\u0026#34;,\u0026#34;unchecked\u0026#34;}) // 将桶数组进行初始化 Node\u0026lt;K,V\u0026gt;[] newTab = (Node\u0026lt;K,V\u0026gt;[])new Node[newCap]; table = newTab; if (oldTab != null) { // 当之前有元素时走这里，否则直接返回newTab，这里进行扩容。 // 还没仔细看，应该是扩容后根据hash计算桶的下标会改变（长度为10时，hash计算出来的角标为5，但是长度为20后角标可能改成10了，所以需要将原来5的放到10的位置。）应该是这样没有仔细看，后面再过来看。 for (int j = 0; j \u0026lt; oldCap; ++j) { Node\u0026lt;K,V\u0026gt; e; if ((e = oldTab[j]) != null) { oldTab[j] = null; if (e.next == null) newTab[e.hash \u0026amp; (newCap - 1)] = e; else if (e instanceof TreeNode) ((TreeNode\u0026lt;K,V\u0026gt;)e).split(this, newTab, j, oldCap); else { // preserve order Node\u0026lt;K,V\u0026gt; loHead = null, loTail = null; Node\u0026lt;K,V\u0026gt; hiHead = null, hiTail = null; Node\u0026lt;K,V\u0026gt; next; do { next = e.next; if ((e.hash \u0026amp; oldCap) == 0) { if (loTail == null) loHead = e; else loTail.next = e; loTail = e; } else { if (hiTail == null) hiHead = e; else hiTail.next = e; hiTail = e; } } while ((e = next) != null); if (loTail != null) { loTail.next = null; newTab[j] = loHead; } if (hiTail != null) { hiTail.next = null; newTab[j + oldCap] = hiHead; } } } } } return newTab; } putAll 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public void putAll(Map\u0026lt;? extends K, ? extends V\u0026gt; m) { putMapEntries(m, true); } final void putMapEntries(Map\u0026lt;? extends K, ? extends V\u0026gt; m, boolean evict) { int s = m.size(); if (s \u0026gt; 0) { if (table == null) { // pre-size // table为初始化的时候 float ft = ((float)s / loadFactor) + 1.0F; int t = ((ft \u0026lt; (float)MAXIMUM_CAPACITY) ? (int)ft : MAXIMUM_CAPACITY); if (t \u0026gt; threshold) threshold = tableSizeFor(t); } else if (s \u0026gt; threshold) // 如果s的容量比扩容的阈值大则进行扩容 resize(); for (Map.Entry\u0026lt;? extends K, ? extends V\u0026gt; e : m.entrySet()) { K key = e.getKey(); V value = e.getValue(); // for循环调用putVal方法 putVal(hash(key), key, value, false, evict); } } } get 给出key，获取value。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public V get(Object key) { Node\u0026lt;K,V\u0026gt; e; return (e = getNode(hash(key), key)) == null ? null : e.value; } final Node\u0026lt;K,V\u0026gt; getNode(int hash, Object key) { Node\u0026lt;K,V\u0026gt;[] tab; Node\u0026lt;K,V\u0026gt; first, e; int n; K k; if ((tab = table) != null \u0026amp;\u0026amp; (n = tab.length) \u0026gt; 0 \u0026amp;\u0026amp; (first = tab[(n - 1) \u0026amp; hash]) != null) { //如果桶数组不为空、长度大于0，并且根据 hash，长度计算出角标的位置的第一个元素也不为空，不然这个key就不存在。 if (first.hash == hash \u0026amp;\u0026amp; ((k = first.key) == key || (key != null \u0026amp;\u0026amp; key.equals(k)))) // always check first node 总从第一个链表开始验证 return first; if ((e = first.next) != null) { if (first instanceof TreeNode) // 如果是红黑树，则走红黑树的查找方法 return ((TreeNode\u0026lt;K,V\u0026gt;)first).getTreeNode(hash, key); do { // 否则一直沿着链表进行查找 if (e.hash == hash \u0026amp;\u0026amp; ((k = e.key) == key || (key != null \u0026amp;\u0026amp; key.equals(k)))) return e; } while ((e = e.next) != null); } } return null; } remove() 根据key删除值。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 public V remove(Object key) { Node\u0026lt;K,V\u0026gt; e; return (e = removeNode(hash(key), key, null, false, true)) == null ? null : e.value; } final Node\u0026lt;K,V\u0026gt; removeNode(int hash, Object key, Object value, boolean matchValue, boolean movable) { Node\u0026lt;K,V\u0026gt;[] tab; Node\u0026lt;K,V\u0026gt; p; int n, index; if ((tab = table) != null \u0026amp;\u0026amp; (n = tab.length) \u0026gt; 0 \u0026amp;\u0026amp; (p = tab[index = (n - 1) \u0026amp; hash]) != null) { Node\u0026lt;K,V\u0026gt; node = null, e; K k; V v; if (p.hash == hash \u0026amp;\u0026amp; ((k = p.key) == key || (key != null \u0026amp;\u0026amp; key.equals(k)))) // 直接命中 node = p; else if ((e = p.next) != null) { if (p instanceof TreeNode) // 如果是红黑树 node = ((TreeNode\u0026lt;K,V\u0026gt;)p).getTreeNode(hash, key); else { // 链表结构 do { if (e.hash == hash \u0026amp;\u0026amp; ((k = e.key) == key || (key != null \u0026amp;\u0026amp; key.equals(k)))) { node = e; break; } p = e; } while ((e = e.next) != null); } } // 经过上面的代码，node是key对应的节点，如果不为空则进行删除节点 if (node != null \u0026amp;\u0026amp; (!matchValue || (v = node.value) == value || (value != null \u0026amp;\u0026amp; value.equals(v)))) { if (node instanceof TreeNode) ((TreeNode\u0026lt;K,V\u0026gt;)node).removeTreeNode(this, tab, movable); else if (node == p) tab[index] = node.next; else p.next = node.next; ++modCount; --size; afterNodeRemoval(node); return node; } } return null; } containsKey(Object key) 判断map中是否包含这个key\n1 2 3 public boolean containsKey(Object key) { return getNode(hash(key), key) != null; } 从代码可以看出，他其实先调用了根据key查询的方法，然后判断这个key对应的键值对是否存在，getNode方法也在上面有用到。\ncontainsValue（Object value） 根据value判断是否存在这个map中。\n1 2 3 4 5 6 7 8 9 10 11 12 public boolean containsValue(Object value) { Node\u0026lt;K,V\u0026gt;[] tab; V v; if ((tab = table) != null \u0026amp;\u0026amp; size \u0026gt; 0) { for (int i = 0; i \u0026lt; tab.length; ++i) { for (Node\u0026lt;K,V\u0026gt; e = tab[i]; e != null; e = e.next) { if ((v = e.value) == value || (value != null \u0026amp;\u0026amp; value.equals(v))) return true; } } } return false; } keySet() 1 2 3 4 5 6 7 8 public Set\u0026lt;K\u0026gt; keySet() { Set\u0026lt;K\u0026gt; ks = keySet; if (ks == null) { ks = new KeySet(); keySet = ks; } return ks; } values 1 2 3 4 5 6 7 8 public Collection\u0026lt;V\u0026gt; values() { Collection\u0026lt;V\u0026gt; vs = values; if (vs == null) { vs = new Values(); values = vs; } return vs; } entrySet 1 2 3 4 public Set\u0026lt;Map.Entry\u0026lt;K,V\u0026gt;\u0026gt; entrySet() { Set\u0026lt;Map.Entry\u0026lt;K,V\u0026gt;\u0026gt; es; return (es = entrySet) == null ? (entrySet = new EntrySet()) : es; } treeifyBin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 final void treeifyBin(Node\u0026lt;K,V\u0026gt;[] tab, int hash) { int n, index; Node\u0026lt;K,V\u0026gt; e; if (tab == null || (n = tab.length) \u0026lt; MIN_TREEIFY_CAPACITY) resize(); else if ((e = tab[index = (n - 1) \u0026amp; hash]) != null) { TreeNode\u0026lt;K,V\u0026gt; hd = null, tl = null; do { TreeNode\u0026lt;K,V\u0026gt; p = replacementTreeNode(e, null); if (tl == null) hd = p; else { p.prev = tl; tl.next = p; } tl = p; } while ((e = e.next) != null); if ((tab[index] = hd) != null) hd.treeify(tab); } } 总结 扩容机制为2倍扩容，最大容量为2的30次幂，并且扩容是放到这一次的结束进行判断下一次是否需要扩容，而不是放到下一次的开始。 实现为数组+链表+红黑树（jdk1.8之后） HashMap是无序的，因为放值的时候下标是(n - 1) \u0026amp; hash计算出来的，如果hash值相同则为同一个下标，然后使用链表或树结构。比如我现在顺序放三个key，（a,b,c）。如果a和c的hash值是一样的，b跟他俩不一样，那么最终得到的结果就是a和c是一起拿出来的。他们中间不会有b。如果希望有序需要使用LinkedHashMap。 参考文章： https://segmentfault.com/a/1190000012926722#articleHeader3\nhttps://zhuanlan.zhihu.com/p/34280652\n","permalink":"https://www.liunaijie.top/coding/java/hashmap%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/","summary":"\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/HashMap.jpg\" alt=\"HashMap结构\"\u003e\u003c/p\u003e\n\u003cp\u003e画了一张结构图，欢迎指正。\u003c/p\u003e\n\u003ch1 id=\"变量\"\u003e变量\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e54\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e55\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e56\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e57\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e58\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e59\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e60\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e61\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e62\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e63\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e64\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e65\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e66\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e67\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e68\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e69\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e70\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e71\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e72\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e73\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e74\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e75\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e76\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e77\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e78\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e79\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e80\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e81\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e82\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e83\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e84\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e85\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e86\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e87\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e88\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* The default initial capacity - MUST be a power of two.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* 默认的容量，容量必须是2的幂\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e*/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDEFAULT_INITIAL_CAPACITY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// aka 16\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* The maximum capacity, used if a higher value is implicitly specified\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* by either of the constructors with arguments.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* MUST be a power of two \u0026lt;= 1\u0026lt;\u0026lt;30.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* 最大的容量值 2的30次幂\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e*/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMAXIMUM_CAPACITY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* The load factor used when none specified in constructor.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* 默认的负载系数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e*/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003efloat\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDEFAULT_LOAD_FACTOR\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e75f\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* The bin count threshold for using a tree rather than list for a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* bin.  Bins are converted to trees when adding an element to a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* bin with at least this many nodes. The value must be greater\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* than 2 and should be at least 8 to mesh with assumptions in\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* tree removal about conversion back to plain bins upon\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* shrinkage.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* 链表的长度到达8之后转换为红黑树\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e*/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eTREEIFY_THRESHOLD\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* The bin count threshold for untreeifying a (split) bin during a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* resize operation. Should be less than TREEIFY_THRESHOLD, and at\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* most 6 to mesh with shrinkage detection under removal.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e*/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eUNTREEIFY_THRESHOLD\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* The smallest table capacity for which bins may be treeified.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* (Otherwise the table is resized if too many nodes in a bin.)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* between resizing and treeification thresholds.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e*/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMIN_TREEIFY_CAPACITY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e64\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 存储的容器\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003etransient\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etable\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* Holds cached entrySet(). Note that AbstractMap fields are used\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* for keySet() and values().\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e*/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003etransient\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSet\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eMap\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eentrySet\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* The number of key-value mappings contained in this map.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e*/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003etransient\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* The number of times this HashMap has been structurally modified\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* Structural modifications are those that change the number of mappings in\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* the HashMap or otherwise modify its internal structure (e.g.,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* rehash).  This field is used to make iterators on Collection-views of\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* the HashMap fail-fast.  (See ConcurrentModificationException).\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* 结构修改的次数，每次增加和删除都修改这个数值\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e*/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003etransient\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emodCount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* The next size value at which to resize (capacity * load factor).\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e*\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* @serial\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e*/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// (The javadoc description is true upon serialization.\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// Additionally, if the table array has not been allocated, this\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// field holds the initial array capacity, or zero signifying\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// DEFAULT_INITIAL_CAPACITY.)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 扩容的阈值，当键值对的数量超过这个值就会扩容\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ethreshold\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* The load factor for the hash table.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* 负载系数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e*/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003efloat\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eloadFactor\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"HashMap源码学习"},{"content":"\nLinkedHashMap继承了HashMap类，实现了Map接口。\n他与HashMap的主要区别就是使用链表存储了每个节点的顺序。这样就能保证有序。\n来看一下他的节点情况：\n1 2 3 4 5 6 static class Entry\u0026lt;K,V\u0026gt; extends HashMap.Node\u0026lt;K,V\u0026gt; { Entry\u0026lt;K,V\u0026gt; before, after; Entry(int hash, K key, V value, Node\u0026lt;K,V\u0026gt; next) { super(hash, key, value, next); } } 从这里可以看出他使用了两个变量，before，after存储这个节点的前后顺序。\n构造方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public LinkedHashMap() { super(); accessOrder = false; } public LinkedHashMap(int initialCapacity) { super(initialCapacity); accessOrder = false; } public LinkedHashMap(int initialCapacity, float loadFactor) { super(initialCapacity, loadFactor); accessOrder = false; } public LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder) { super(initialCapacity, loadFactor); this.accessOrder = accessOrder; } public LinkedHashMap(Map\u0026lt;? extends K, ? extends V\u0026gt; m) { super(); accessOrder = false; putMapEntries(m, false); } LinkedHashMap一共有5个构造方法，仔细看一下主要是三个参数：initialCapacity，loadFactor，accessOrder这三个变量。并且他们都调用了父类也就是HashMap的构造方法。\ninitialCapacity，loadFactor这两个在看HashMap的时候就了解到这是初始容量值与扩容阈值，就不仔细说了，如果想仔细了解这两个字段可以看这一篇HashMap源码学习。\n那就主要看一下accessOrder。\n1 2 3 4 5 6 7 /** * The iteration ordering method for this linked hash map: \u0026lt;tt\u0026gt;true\u0026lt;/tt\u0026gt; * for access-order, \u0026lt;tt\u0026gt;false\u0026lt;/tt\u0026gt; for insertion-order. * * @serial */ final boolean accessOrder; 这个字段也给出了注释，如果为true则表示基于访问顺序，如果为false则基于插入顺序。所以我们想要的按照访问顺序取就要设置为false。如果为true则按照访问顺序排序，将访问过的元素放到链表后面。我们用代码看一下实际效果。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public static void main(String[] args) { LinkedHashMap\u0026lt;String, Integer\u0026gt; first = new LinkedHashMap\u0026lt;String, Integer\u0026gt;(16, 0.75f, false); first.put(\u0026#34;1\u0026#34;, 1); first.put(\u0026#34;2\u0026#34;, 2); first.put(\u0026#34;3\u0026#34;, 3); first.put(\u0026#34;4\u0026#34;, 4); first.get(\u0026#34;1\u0026#34;); first.get(\u0026#34;3\u0026#34;); System.out.println(first); LinkedHashMap\u0026lt;String, Integer\u0026gt; second = new LinkedHashMap\u0026lt;String, Integer\u0026gt;(16, 0.75f, true); second.put(\u0026#34;1\u0026#34;, 1); second.put(\u0026#34;2\u0026#34;, 2); second.put(\u0026#34;3\u0026#34;, 3); second.put(\u0026#34;4\u0026#34;, 4); second.get(\u0026#34;1\u0026#34;); second.get(\u0026#34;3\u0026#34;); System.out.println(second); } /**输出**/ {1=1, 2=2, 3=3, 4=4} {2=2, 4=4, 1=1, 3=3} 初始化了两个容量，负载系数都一样的LinkedHashMap，第一个设置accessOrder属性为false，第二个设置为true。\n然后都执行了相同的代码。先放入元素，然后中间对其中几个元素进行读取。最后在输出查看。\n我们可以看到第一个也就是accessOrder属性设置成false的虽然中间获取了元素，但是他的打印顺序还是按照放入顺序的。而第二个中间对两个元素进行了获取，所以他将这两个元素放在了后面，打印顺序是我们放入的顺序再加上访问顺序后最终得到的顺序。\n添加元素 调用了父类HashMap的方法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 public V put(K key, V value) {\treturn putVal(hash(key), key, value, false, true); } final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) { Node\u0026lt;K,V\u0026gt;[] tab; Node\u0026lt;K,V\u0026gt; p; int n, i; if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; if ((p = tab[i = (n - 1) \u0026amp; hash]) == null) tab[i] = newNode(hash, key, value, null); else { Node\u0026lt;K,V\u0026gt; e; K k; if (p.hash == hash \u0026amp;\u0026amp; ((k = p.key) == key || (key != null \u0026amp;\u0026amp; key.equals(k)))) e = p; else if (p instanceof TreeNode) e = ((TreeNode\u0026lt;K,V\u0026gt;)p).putTreeVal(this, tab, hash, key, value); else { for (int binCount = 0; ; ++binCount) { if ((e = p.next) == null) { p.next = newNode(hash, key, value, null); if (binCount \u0026gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; } if (e.hash == hash \u0026amp;\u0026amp; ((k = e.key) == key || (key != null \u0026amp;\u0026amp; key.equals(k)))) break; p = e; } } if (e != null) { // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; afterNodeAccess(e); // 这一句 return oldValue; } } ++modCount; if (++size \u0026gt; threshold) resize(); afterNodeInsertion(evict); // 这一句 return null; } 先来看afterNodeInsertion方法\n1 2 3 4 5 6 7 8 9 10 11 void afterNodeInsertion(boolean evict) { // possibly remove eldest LinkedHashMap.Entry\u0026lt;K,V\u0026gt; first; if (evict \u0026amp;\u0026amp; (first = head) != null \u0026amp;\u0026amp; removeEldestEntry(first)) { K key = first.key; removeNode(hash(key), key, null, false, true); } } protected boolean removeEldestEntry(Map.Entry\u0026lt;K,V\u0026gt; eldest) { return false; } 这个方法我就没看明白了，他判断条件三个同时成立才会走，然后第三个条件直接返回了false。这不就永远不执行了，还是说实际调用的是其他实现方法？欢迎大家指教。\n获取元素 1 2 3 4 5 6 7 8 public V get(Object key) { Node\u0026lt;K,V\u0026gt; e; if ((e = getNode(hash(key), key)) == null) return null; if (accessOrder) afterNodeAccess(e); // 这一句 return e.value; } 现在来看一下之前没说的方法afterNodeAccess\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 void afterNodeAccess(Node\u0026lt;K,V\u0026gt; e) { // move node to last LinkedHashMap.Entry\u0026lt;K,V\u0026gt; last; if (accessOrder \u0026amp;\u0026amp; (last = tail) != e) { LinkedHashMap.Entry\u0026lt;K,V\u0026gt; p = (LinkedHashMap.Entry\u0026lt;K,V\u0026gt;)e, b = p.before, a = p.after; p.after = null; if (b == null) head = a; else b.after = a; if (a != null) a.before = b; else last = b; if (last == null) head = p; else { p.before = last; last.after = p; } tail = p; ++modCount; } } 这里有accessOrder属性的判断，当其为true时才会执行下面的代码，所以只有在构造函数中将这个属性设置成true时这个方法才会走。\n这个方法的作用就是将这个节点放到整个链表的最后。如果这个节点有下一个节点，则将上一个节点连接到下一个节点。然后将这个节点设置成最后一个节点。像我们刚才执行的演示代码：顺序放置了1,2,3,4。然后中间获取1。这是就走了这个方法，将1放置到了链表最后，变成了2,3,4,1。\n参考文档 https://stackoverflow.com/questions/38974417/what-is-purpose-of-accessorder-field-in-linkedhashmap\n","permalink":"https://www.liunaijie.top/coding/java/linkedhashmap%E6%BA%90%E7%A0%81/","summary":"\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/LinkedHashMap.jpg\" alt=\"LinkedHashMap结构图\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eLinkedHashMap\u003c/code\u003e继承了\u003ccode\u003eHashMap\u003c/code\u003e类，实现了\u003ccode\u003eMap\u003c/code\u003e接口。\u003c/p\u003e\n\u003cp\u003e他与\u003ccode\u003eHashMap\u003c/code\u003e的主要区别就是使用链表存储了每个节点的顺序。这样就能保证有序。\u003c/p\u003e\n\u003cp\u003e来看一下他的节点情况：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ebefore\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eafter\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eEntry\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eV\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kd\"\u003esuper\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e从这里可以看出他使用了两个变量，\u003ccode\u003ebefore\u003c/code\u003e，\u003ccode\u003eafter\u003c/code\u003e存储这个节点的前后顺序。\u003c/p\u003e","title":"LinkedHashMap源码"},{"content":"LinkedList使用了链表实现，相比ArrayList来说，插入更快，查看较慢。\n首先看一下使用的链表结构\n1 2 3 4 5 6 7 8 9 10 11 private static class Node\u0026lt;E\u0026gt; { E item; Node\u0026lt;E\u0026gt; next; Node\u0026lt;E\u0026gt; prev; Node(Node\u0026lt;E\u0026gt; prev, E element, Node\u0026lt;E\u0026gt; next) { this.item = element; this.next = next; this.prev = prev; } } 每个Node节点存储一个元素，item表示这个元素的值，prev表示上一个元素，如果已经的第一个了那么为null。同理，next表示的是下一个元素，当插入新元素时会改变上一个元素的next值指向自己，这样就把这个链表串起来了。\n变量 1 2 3 4 5 6 // 元素的数量 transient int size = 0; // 指向第一个元素 transient Node\u0026lt;E\u0026gt; first; // 指向最后一个元素 transient Node\u0026lt;E\u0026gt; last; 构造方法 1 2 3 4 5 6 7 public LinkedList() { } public LinkedList(Collection\u0026lt;? extends E\u0026gt; c) { this(); addAll(c); } 无参的构造方法\n这个方法什么事情也没做\n传入集合的构造方法\n调用了addAll方法将集合中的元素添加进来。\n增加 add(E e) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public boolean add(E e) { linkLast(e); return true; } void linkLast(E e) { final Node\u0026lt;E\u0026gt; l = last; final Node\u0026lt;E\u0026gt; newNode = new Node\u0026lt;\u0026gt;(l, e, null); last = newNode; if (l == null) first = newNode; else l.next = newNode; size++; modCount++; } 先获取到最后一个元素节点，然后创建一个新节点，并且将这个节点的上一个节点指向当前链表的最后一个元素节点，然后再把最后的元素节点替换成这个新建的节点。\n然后判断这个之前获取的最后一个元素节点是不是空，如果是空那表示我们整个链表都是空的，将第一个元素节点也替换成这个新创建的节点。\n如果不是空，则将之前的最后一个节点的下一个元素指向我们新创建的节点上。\n然后是常规的将容量数量增加，修改的次数增加。\nadd(int index,E element) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 public void add(int index, E element) { checkPositionIndex(index); if (index == size) linkLast(element); else linkBefore(element, node(index)); } private void checkPositionIndex(int index) { if (!isPositionIndex(index)) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } private boolean isPositionIndex(int index) { return index \u0026gt;= 0 \u0026amp;\u0026amp; index \u0026lt;= size; } Node\u0026lt;E\u0026gt; node(int index) { // assert isElementIndex(index); if (index \u0026lt; (size \u0026gt;\u0026gt; 1)) { Node\u0026lt;E\u0026gt; x = first; for (int i = 0; i \u0026lt; index; i++) x = x.next; return x; } else { Node\u0026lt;E\u0026gt; x = last; for (int i = size - 1; i \u0026gt; index; i--) x = x.prev; return x; } } void linkBefore(E e, Node\u0026lt;E\u0026gt; succ) { // assert succ != null; final Node\u0026lt;E\u0026gt; pred = succ.prev; final Node\u0026lt;E\u0026gt; newNode = new Node\u0026lt;\u0026gt;(pred, e, succ); succ.prev = newNode; if (pred == null) first = newNode; else pred.next = newNode; size++; modCount++; } 指定位置插入元素，首先进行判断这个位置是否符合要求。\n如果这个下标的位置等于元素的长度，就表示他是向最后一个进入插入，那就和add(E e)一样，调用的方法也是一样的。如果不是则表示向链表中间进行插入。这里用到了node()方法获取指定位置的元素。\nnode(int index)方法获取元素：判断要查找的位置与（当前元素长度除以2）的关系，判断后决定是从前向后循环还是从后向前循环，从而尽量减少循环的次数。从这里也能看出链表在查找元素时耗时的原因\nlinkBefore()方法：传入了原来的节点，要更改的元素值。获取原来节点的执行的上一个节点pred，创建一个新节点这个新节点的上一个节点指向刚刚获取的pred，下一个节点指向原来的succ节点。\n再将原来节点的上一个节点改为这个新节点。然后判断上一个节点是不是空，如果是空表示我们向第一位进行了插入，这时候将第一个的元素节点替换成这个新节点。不为空则将上一个元素的下一个节点指向这个新节点。\n然后是元素数量加一，修改数量加一。\naddAll(Collection\u0026lt;? extends E\u0026gt; c) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 public boolean addAll(Collection\u0026lt;? extends E\u0026gt; c) { return addAll(size, c); } public boolean addAll(int index, Collection\u0026lt;? extends E\u0026gt; c) { checkPositionIndex(index); // 将集合c转换为数组 Object[] a = c.toArray(); int numNew = a.length; if (numNew == 0) // 如果集合为空 return false; // 定义节点，分别表示 pred上一个 succ下一个 Node\u0026lt;E\u0026gt; pred, succ; if (index == size) { // 如果向链表尾部进行添加 succ = null; pred = last; } else { succ = node(index); pred = succ.prev; } // 循环添加 for (Object o : a) { @SuppressWarnings(\u0026#34;unchecked\u0026#34;) E e = (E) o; // 定义新节点 Node\u0026lt;E\u0026gt; newNode = new Node\u0026lt;\u0026gt;(pred, e, null); if (pred == null) // pred=last == null 表示当前链表为空 让第一个节点为当前节点 first = newNode; else // 否则让上一个节点的 下一个元素节点 指向当前节点 pred.next = newNode; // 将pred再置为当前节点，那么对应下一个节点来说 上一个节点就是这个节点了 pred = newNode; } // 完成了将集合中的元素添加到链表中，还需要对 原来链表插入点之后的元素进行修改 if (succ == null) { // 如果原来的下个节点为空，说明我们是向尾部插入的，让last等于最后插入的一个节点就行了 last = pred; } else { // 不为空时还需要将插入的最后一个节点和之前的下一个节点进行关联 pred.next = succ; succ.prev = pred; } size += numNew; modCount++; return true; } 添加一个集合类，先获取当前LinkedList的元素长度size，具体操作在addAll(int index, Collection\u0026lt;? extends E\u0026gt; c)方法中进行。\n先判断下标是否符合要求，\n更新 set(int index,E element) 1 2 3 4 5 6 7 public E set(int index, E element) { checkElementIndex(index); Node\u0026lt;E\u0026gt; x = node(index); E oldVal = x.item; x.item = element; return oldVal; } 首先执行了判断下标是否符合要求，然后获取这个位置的元素节点。\n将这个节点的值替换为新的值，将原来的值返回。\n查找 get(int index) 1 2 3 4 public E get(int index) { checkElementIndex(index); return node(index).item; } 这里用到的方法上面也有使用过。先检查位置是否符合要求，然后根据下标查找节点，再返回节点的值。\n定义了两个变量first和last，我们只能根据这两个头和尾来找到中间的值，所以先进行了判断，要找的角标更靠近那个一些，如果靠近尾就从尾开始找，所以说他是把沿着链表一个一个的找的，如果现在链表中有100个元素，我们要找第80个。80\u0026gt;(100/2)，所以从后向前找，99-\u0026gt;98-\u0026gt;97-\u0026gt;......-\u0026gt;80这样一个一个的找出来。耗时比较长。\n删除 remove(int index) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public E remove(int index) { checkElementIndex(index); return unlink(node(index)); } E unlink(Node\u0026lt;E\u0026gt; x) { // assert x != null; // 获取这个节点的值 指向的上一个节点 指向的下一个节点 final E element = x.item; final Node\u0026lt;E\u0026gt; next = x.next; final Node\u0026lt;E\u0026gt; prev = x.prev; if (prev == null) { // 上一个节点为空，表示这是第一个元素，让fist等于下一个元素 first = next; } else { // 让上一个节点的 下一个元素节点 指向下一个节点 prev.next = next; // 将本身的上一个节点指向置空 x.prev = null; } if (next == null) { // 下一个节点为空，表示这是最后一个元素，让last等于上一个元素 last = prev; } else { // 让下一个节点的 上一个元素节点 指向上一个节点 next.prev = prev; // 将本身的下一个节点置空 x.next = null; } // 将本身的值置空 这三个置空可能是为了垃圾回收 x.item = null; size--; modCount++; return element; } remove(Object o) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public boolean remove(Object o) { if (o == null) { for (Node\u0026lt;E\u0026gt; x = first; x != null; x = x.next) { if (x.item == null) { unlink(x); return true; } } } else { for (Node\u0026lt;E\u0026gt; x = first; x != null; x = x.next) { if (o.equals(x.item)) { unlink(x); return true; } } } return false; } 给定一个对象，从链表中删除，从链表的头开始循环对比，如果节点的值与给定的值一样则执行删除操作。这个的删除与ArrayList的逻辑是一样的。\n判断元素下标位置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public int indexOf(Object o) { int index = 0; if (o == null) { for (Node\u0026lt;E\u0026gt; x = first; x != null; x = x.next) { if (x.item == null) return index; index++; } } else { for (Node\u0026lt;E\u0026gt; x = first; x != null; x = x.next) { if (o.equals(x.item)) return index; index++; } } return -1; } 给出一个对象，找出这个对象在链表中的位置，从第一个节点开始找，找到第一个匹配的后返回下标，没有找到返回-1。\n**lastIndexOf(Object o)**是从last最后一个节点向前匹配。\n清空链表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public void clear() { // Clearing all of the links between nodes is \u0026#34;unnecessary\u0026#34;, but: // - helps a generational GC if the discarded nodes inhabit // more than one generation // - is sure to free memory even if there is a reachable Iterator for (Node\u0026lt;E\u0026gt; x = first; x != null; ) { Node\u0026lt;E\u0026gt; next = x.next; x.item = null; x.next = null; x.prev = null; x = next; } first = last = null; size = 0; modCount++; } 从first第一个节点开始，将每个节点的 值、上一个节点指向的元素、下一个节点指向的元素都置空。通过注释可以看出这个置空操作也是为了垃圾回收机制，所以上面的删除方法中置空应该也是这个原因。\n队列 Queue LinkedList不仅实现了List的接口，也实现了Queue的接口。\n其实我们先明白队列Queue是什么：\n​\t队列，又称为伫列（queue），是先进先出（FIFO, First-In-First-Out）的线性表。在具体应用中通常用链表或者数组来实现。队列只允许在后端（称为rear）进行插入操作，在前端（称为front）进行删除操作。\n我们从他的定义中可以得知，遵循先进先出的规则，第一个放入的元素，也要第一个拿出来。向这里面插入元素只能从队列最后面插入。从前面进行删除操作。\n其实不用从上面的代码就能大体知道他是怎么实现的了，LinkedList有first和last两个变量存储第一个和最后一个元素。在队列中只要改变这两个变量就可以实现了。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public boolean offer(E e) { return add(e); } public E element() { return getFirst(); } public E poll() { //\t获取第一个元素，并将第一个删除 final Node\u0026lt;E\u0026gt; f = first; return (f == null) ? null : unlinkFirst(f); } private E unlinkFirst(Node\u0026lt;E\u0026gt; f) { // assert f == first \u0026amp;\u0026amp; f != null; final E element = f.item; final Node\u0026lt;E\u0026gt; next = f.next; f.item = null; f.next = null; // help GC first = next; if (next == null) last = null; else next.prev = null; size--; modCount++; return element; } public E peek() { // 只获取不删除 final Node\u0026lt;E\u0026gt; f = first; return (f == null) ? null : f.item; } public E remove() { return removeFirst(); } ","permalink":"https://www.liunaijie.top/coding/java/linkedlist%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/","summary":"\u003cp\u003e\u003ccode\u003eLinkedList\u003c/code\u003e使用了链表实现，相比\u003ccode\u003eArrayList\u003c/code\u003e来说，插入更快，查看较慢。\u003c/p\u003e\n\u003cp\u003e首先看一下使用的链表结构\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eitem\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprev\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e每个\u003ccode\u003eNode\u003c/code\u003e节点存储一个元素，\u003ccode\u003eitem\u003c/code\u003e表示这个元素的值，\u003ccode\u003eprev\u003c/code\u003e表示上一个元素，如果已经的第一个了那么为\u003ccode\u003enull\u003c/code\u003e。同理，\u003ccode\u003enext\u003c/code\u003e表示的是下一个元素，当插入新元素时会改变上一个元素的\u003ccode\u003enext\u003c/code\u003e值指向自己，这样就把这个链表串起来了。\u003c/p\u003e\n\u003ch1 id=\"变量\"\u003e变量\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 元素的数量\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003etransient\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 指向第一个元素\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003etransient\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 指向最后一个元素\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003etransient\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNode\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"LinkedList源码学习"},{"content":"今天早上接到一个任务，说服务器磁盘容量告警让我去排查一下原因。磁盘容量在一天内突然暴涨了好几十个G。\n查看磁盘占用 使用命令\n1 du -h --max-depth=1 查看磁盘占用情况，我是在根目录下执行的命令，后面的max-depth=1指定深入目录的层数，为1就指定1层。然后经过排查后发现了这个文件是Mysql的ibtmp1文件。\nibtmp1是什么 我们使用的Mysql版本是5.7.24。ibtmp1文件是 MySQL5.7的新特性,MySQL5.7使用了独立的临时表空间来存储临时表数据，但不能是压缩表。临时表空间在实例启动的时候进行创建，shutdown的时候进行删除。即为所有非压缩的innodb临时表提供一个独立的表空间，默认的临时表空间文件为ibtmp1。\n解决 Mysql创建的这个文件肯定不能在Mysql还运行时就直接删了，否则可能会出问题。重启Mysql会重置这个文件，但是后面如果不加以限制肯定还会让磁盘爆满。所以说要找一个能彻底解决的办法。\n修改my.cnf配置文件\n这个文件我是在/etc/my.cnf下，有的可能在/etc/mysql/my.cnf下，先找到这个文件然后在后面添加innodb_temp_data_file_path = ibtmp1:12M:autoextend:max:5G这句\n限制这个文件最大增加到5G。\n设置innodb_fast_shutdown参数\n进入mysql命令行，执行SET GLOBAL innodb_fast_shutdown = 0;命令\n然后重启Mysql即可。\n原因 刚才说的了这个文件是临时表空间。那肯定是使用了临时表。那么什么情况下会使用临时表呢。\nGROUP BY 无索引字段或GROUP BY+ ORDER BY 的子句字段不一样时 order by 与distinct 共用，其中distinct与order by里的字段不一致（主键字段除外） UNION查询（MySQL5.7后union all已不使用临时表） insert into select \u0026hellip;from \u0026hellip; 所以在平常写sql时还是要多注意一下。\n参考文章 http://mysql.taobao.org/monthly/2019/04/01/\nhttps://cloud.tencent.com/developer/article/1491411\nhttps://zhuanlan.zhihu.com/p/66847189\n","permalink":"https://www.liunaijie.top/coding/database/mysql%E7%9A%84ibtmp1%E6%96%87%E4%BB%B6%E8%BF%87%E5%A4%A7/","summary":"\u003cp\u003e今天早上接到一个任务，说服务器磁盘容量告警让我去排查一下原因。磁盘容量在一天内突然暴涨了好几十个G。\u003c/p\u003e\n\u003ch1 id=\"查看磁盘占用\"\u003e查看磁盘占用\u003c/h1\u003e\n\u003cp\u003e使用命令\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edu -h --max-depth\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e查看磁盘占用情况，我是在根目录下执行的命令，后面的\u003ccode\u003emax-depth=1\u003c/code\u003e指定深入目录的层数，为1就指定1层。然后经过排查后发现了这个文件是\u003ccode\u003eMysql\u003c/code\u003e的\u003ccode\u003eibtmp1\u003c/code\u003e文件。\u003c/p\u003e\n\u003ch1 id=\"ibtmp1是什么\"\u003eibtmp1是什么\u003c/h1\u003e\n\u003cp\u003e我们使用的\u003ccode\u003eMysql\u003c/code\u003e版本是5.7.24。\u003ccode\u003eibtmp1\u003c/code\u003e文件是 MySQL5.7的新特性,MySQL5.7使用了独立的临时表空间来存储临时表数据，但不能是压缩表。临时表空间在实例启动的时候进行创建，shutdown的时候进行删除。即为所有非压缩的innodb临时表提供一个独立的表空间，默认的临时表空间文件为ibtmp1。\u003c/p\u003e\n\u003ch1 id=\"解决\"\u003e解决\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003eMysql\u003c/code\u003e创建的这个文件肯定不能在\u003ccode\u003eMysql\u003c/code\u003e还运行时就直接删了，否则可能会出问题。重启\u003ccode\u003eMysql\u003c/code\u003e会重置这个文件，但是后面如果不加以限制肯定还会让磁盘爆满。所以说要找一个能彻底解决的办法。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e修改\u003ccode\u003emy.cnf\u003c/code\u003e配置文件\u003c/p\u003e\n\u003cp\u003e这个文件我是在\u003ccode\u003e/etc/my.cnf\u003c/code\u003e下，有的可能在\u003ccode\u003e/etc/mysql/my.cnf\u003c/code\u003e下，先找到这个文件然后在后面添加\u003ccode\u003einnodb_temp_data_file_path = ibtmp1:12M:autoextend:max:5G\u003c/code\u003e这句\u003c/p\u003e\n\u003cp\u003e限制这个文件最大增加到5G。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e设置\u003ccode\u003einnodb_fast_shutdown\u003c/code\u003e参数\u003c/p\u003e\n\u003cp\u003e进入\u003ccode\u003emysql\u003c/code\u003e命令行，执行\u003ccode\u003eSET GLOBAL innodb_fast_shutdown = 0;\u003c/code\u003e命令\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e然后重启\u003ccode\u003eMysql\u003c/code\u003e即可。\u003c/p\u003e\n\u003ch1 id=\"原因\"\u003e原因\u003c/h1\u003e\n\u003cp\u003e刚才说的了这个文件是临时表空间。那肯定是使用了临时表。那么什么情况下会使用临时表呢。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eGROUP BY 无索引字段或GROUP  BY+ ORDER  BY 的子句字段不一样时\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eorder by  与distinct 共用，其中distinct与order by里的字段不一致（主键字段除外）\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUNION查询（MySQL5.7后union all已不使用临时表）\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003einsert into select \u0026hellip;from \u0026hellip;\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以在平常写sql时还是要多注意一下。\u003c/p\u003e\n\u003ch1 id=\"参考文章\"\u003e参考文章\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"http://mysql.taobao.org/monthly/2019/04/01/\"\u003ehttp://mysql.taobao.org/monthly/2019/04/01/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://cloud.tencent.com/developer/article/1491411\"\u003ehttps://cloud.tencent.com/developer/article/1491411\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/66847189\"\u003ehttps://zhuanlan.zhihu.com/p/66847189\u003c/a\u003e\u003c/p\u003e","title":"Mysql的ibtmp1文件过大"},{"content":"变量 1 2 3 4 5 private static final int DEFAULT_CAPACITY = 10; private static final Object[] EMPTY_ELEMENTDATA = {}; private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}; transient Object[] elementData; private int size; DEFAULT_CAPACITY：默认的容量，当我们不指定容量时默认容量是10 EMPTY_ELEMENTDATA：空的数据集 DEFAULTCAPACITY_EMPTY_ELEMENTDATA：同上面的一样，都是空的数据集 elementData：保存的元素 size：元素长度，实际存储的元素数量 构造方法： 无参的构造方法 1 2 3 public ArrayList() { this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA; } 很简单的一句话，将保存元素的变量进行初始化。\n指定容量的构造方法 1 2 3 4 5 6 7 8 9 public ArrayList(int initialCapacity) { if (initialCapacity \u0026gt; 0) { this.elementData = new Object[initialCapacity]; } else if (initialCapacity == 0) { this.elementData = EMPTY_ELEMENTDATA; } else { throw new IllegalArgumentException(\u0026#34;Illegal Capacity: \u0026#34;+ initialCapacity); } } 当我们指定了容量大小，先判断容量是否大于0，毕竟容量不可能是负数，然后将保存元素的变量初始化为一个指定大小的数组。\nCollection对象的构造方法 1 2 3 4 5 6 7 8 9 10 11 public ArrayList(Collection\u0026lt;? extends E\u0026gt; c) { elementData = c.toArray(); if ((size = elementData.length) != 0) { // c.toArray might (incorrectly) not return Object[] (see 6260652) if (elementData.getClass() != Object[].class) elementData = Arrays.copyOf(elementData, size, Object[].class); } else { // replace with empty array. this.elementData = EMPTY_ELEMENTDATA; } } 传入一个容器对象，如果这个容器是空的，初始化为空数组。如果不为空，则将容器转换为Object类型的数组。\n常用方法： add add(E e) 1 2 3 4 5 6 7 public boolean add(E e) { // 检测容量 ensureCapacityInternal(size + 1); // Increments modCount!! // 添加保存元素 elementData[size++] = e; return true; } 首先确保容量是否可以继续添加新元素，然后进行添加元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 /** * The maximum size of array to allocate. * Some VMs reserve some header words in an array. * Attempts to allocate larger arrays may result in * OutOfMemoryError: Requested array size exceeds VM limit */ // 为什么是-8 搜了一些其实这个8并没有什么特别的含义，只是有些虚拟机可能会在头部带有一些信息，所以尽量减少出错的几率 private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8; private void ensureCapacityInternal(int minCapacity) { ensureExplicitCapacity(calculateCapacity(elementData, minCapacity)); } private void ensureExplicitCapacity(int minCapacity) { // 这个变量是为了 Iterable modCount++; // 如果我们现在需要的容量比数组的长度大 那么就需要扩容了 if (minCapacity - elementData.length \u0026gt; 0) grow(minCapacity); } private void grow(int minCapacity) { int oldCapacity = elementData.length; // 新容量=原来数组容量的1.5倍 int newCapacity = oldCapacity + (oldCapacity \u0026gt;\u0026gt; 1); // 如果1.5倍仍然不满足我们要扩容的容量，那么就使用我们传入的容量 // 比如传入16 原来是10 1.5倍后是15 15\u0026lt;16 所以就使用16 if (newCapacity - minCapacity \u0026lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE \u0026gt; 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: // 创建一个容量为新容量的新数组，将旧数组的内容拷贝给新数组。 elementData = Arrays.copyOf(elementData, newCapacity); } private static int hugeCapacity(int minCapacity) { if (minCapacity \u0026lt; 0) // overflow throw new OutOfMemoryError(); // 通过这里可以知道最大容量是 Integer.MAX_VALUE return (minCapacity \u0026gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE; } add(int index,E element) 1 2 3 4 5 6 7 8 9 10 public void add(int index, E element) { rangeCheckForAdd(index); // 容量扩容检测，同上面的方法 ensureCapacityInternal(size + 1); // Increments modCount!! // 这个是主要的实现方法。非常麻烦和耗时，这就是为什么ArrayList最好不要从中间插入 System.arraycopy(elementData, index, elementData, index + 1, size - index); elementData[index] = element; size++; } 在指定位置添加一个元素，首先检查这个插入位置是否符合要求，然后确保容量够用，再在指定位置添加元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // 检查位置是否符合要求 private void rangeCheckForAdd(int index) { if (index \u0026gt; size || index \u0026lt; 0) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } /** * src 从哪里复制 * srcPos 从哪个位置开始 * dest 复制到哪里去 * destPos 从哪里开始放 * length 复制多少个元素 */ public static native void arraycopy(Object src, int srcPos, Object dest, int destPos, int length); 我们再来看arraycopy(elementData, index, elementData, index + 1, size - index)这句，他就是将原来数组中从index开始size-index个元素，再复制到原来的数组中，不过是从index+1开始放，这样就使从index开始的元素都向后挪动了一位，就空出来了index位置存放我们要存放的数据。\n添加集合 1 2 3 4 5 6 7 8 public boolean addAll(Collection\u0026lt;? extends E\u0026gt; c) { Object[] a = c.toArray(); int numNew = a.length; ensureCapacityInternal(size + numNew); // Increments modCount System.arraycopy(a, 0, elementData, size, numNew); size += numNew; return numNew != 0; } 经过上面几个方法我们已经明白了这个过程，首先转换成Object数组，然后进行容量检测，再将要添加的集合复制到我们已有的数组中，元素数量增加。\n从指定位置添加集合 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public boolean addAll(int index, Collection\u0026lt;? extends E\u0026gt; c) { // 检测要插入的位置是否符合要求 rangeCheckForAdd(index); Object[] a = c.toArray(); int numNew = a.length; // 扩容检测 ensureCapacityInternal(size + numNew); // Increments modCount // 计算需要移动的元素数量 int numMoved = size - index; if (numMoved \u0026gt; 0) // 从index位置的元素向后移动要插入的集合长度个单位 System.arraycopy(elementData, index, elementData, index + numNew, numMoved); // 将要插入的集合复制到原有的数组中 System.arraycopy(a, 0, elementData, index, numNew); size += numNew; return numNew != 0; } set 1 2 3 4 5 6 7 public E set(int index, E element) { rangeCheck(index); E oldValue = elementData(index); elementData[index] = element; return oldValue; } set就是对指定位置的元素进行替换，首先检查这个位置是否符合要求，然后获取原来位置的元素，再用新的元素进行替换，返回旧的元素值。\n1 2 3 4 5 6 7 8 9 // 对元素位置进行检查，如果位置大于当前元素数组的实际长度则会报错 private void rangeCheck(int index) { if (index \u0026gt;= size) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } // 获取指定位置的元素 E elementData(int index) { return (E) elementData[index]; } get 1 2 3 4 5 public E get(int index) { rangeCheck(index); return elementData(index); } 先检查位置是否正确，然后返回指定位置的元素。\nremove 删除指定位置的元素 1 2 3 4 5 6 7 8 9 10 11 12 13 public E remove(int index) { rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved \u0026gt; 0) System.arraycopy(elementData, index+1, elementData, index,numMoved); elementData[--size] = null; // clear to let GC do its work return oldValue; } 先检查这个位置是否正确，然后获取指定位置的元素，将这个位置之后的元素复制向前移动。并将最后一个元素置为null。这里也要对modCount进行加1。\n删除指定的对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public boolean remove(Object o) { if (o == null) { for (int index = 0; index \u0026lt; size; index++) if (elementData[index] == null) { fastRemove(index); return true; } } else { for (int index = 0; index \u0026lt; size; index++) if (o.equals(elementData[index])) { fastRemove(index); return true; } return false; } 删除第一个符合条件的对象，具体删除的方法与上面的一致，少了检查位置。\n1 2 3 4 5 6 7 private void fastRemove(int index) { modCount++; int numMoved = size - index - 1; if (numMoved \u0026gt; 0) System.arraycopy(elementData, index+1, elementData, index,numMoved); elementData[--size] = null; // clear to let GC do its work } 删除集合 1 2 3 4 5 public boolean removeAll(Collection\u0026lt;?\u0026gt; c) { // 判断传入的集合不能为空 Objects.requireNonNull(c); return batchRemove(c, false); } 对传入集合里面的元素进行删除\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 private boolean batchRemove(Collection\u0026lt;?\u0026gt; c, boolean complement) { final Object[] elementData = this.elementData; int r = 0, w = 0; boolean modified = false; try { for (; r \u0026lt; size; r++) // 当条件为真时，将符合条件的元素从0开始存储 /* * complement=false（删除元素）时： * 要删除的元素集合中不包含当前元素 条件成立，存储 （移除了要删除的元素） * complement=true（保留元素）时： * 保留的元素集合中包含当前元素 条件成立，存储（保留了要保留的元素） */ if (c.contains(elementData[r]) == complement) elementData[w++] = elementData[r]; } finally { // Preserve behavioral compatibility with AbstractCollection, // even if c.contains() throws. if (r != size) { // 一般情况下是不会走的 // 当遇到异常后将还没有操作的元素复制到要保存的元素之后 System.arraycopy(elementData, r,elementData, w,size - r); w += size - r; } if (w != size) { // clear to let GC do its work // 如果修改了 则将后面的元素置为空 for (int i = w; i \u0026lt; size; i++) elementData[i] = null; modCount += size - w; size = w; modified = true; } } return modified; } 保留集合，删除其他元素 1 2 3 4 public boolean retainAll(Collection\u0026lt;?\u0026gt; c) { Objects.requireNonNull(c); return batchRemove(c, true); } 这个与上面的一样，都调用了batchRemove方法\nindexOf indexOf() 1 2 3 4 5 6 7 8 9 10 11 12 public int indexOf(Object o) { if (o == null) { for (int i = 0; i \u0026lt; size; i++) if (elementData[i]==null) return i; } else { for (int i = 0; i \u0026lt; size; i++) if (o.equals(elementData[i])) return i; } return -1; } 从开始寻找第一个符合的值的下标。\nlastIndexOf() 具体方法与indexOf类似，循环的时候倒序循环。\ncontains 1 2 3 public boolean contains(Object o) { return indexOf(o) \u0026gt;= 0; } 通过调用元素位置来判断的是否包含该元素\n可以看到modCount这个变量在新增，删除操作时，即长度有变化时都需要操作。现在还没弄明白这个变量的作用，好像是与iterator迭代器、线程有关。后面看到相关内容后会再来补充。\n参考文章： https://stackoverflow.com/questions/35582809/java-8-arraylist-hugecapacityint-implementation\nhttps://wiki.jikexueyuan.com/project/java-enhancement/java-twentyone.html\n","permalink":"https://www.liunaijie.top/coding/java/arraylist%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/","summary":"\u003ch1 id=\"变量\"\u003e变量\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDEFAULT_CAPACITY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eEMPTY_ELEMENTDATA\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{};\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDEFAULTCAPACITY_EMPTY_ELEMENTDATA\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{};\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003etransient\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eelementData\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eDEFAULT_CAPACITY\u003c/code\u003e：默认的容量，当我们不指定容量时默认容量是10\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEMPTY_ELEMENTDATA\u003c/code\u003e：空的数据集\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDEFAULTCAPACITY_EMPTY_ELEMENTDATA\u003c/code\u003e：同上面的一样，都是空的数据集\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eelementData\u003c/code\u003e：保存的元素\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esize\u003c/code\u003e：元素长度，实际存储的元素数量\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"构造方法\"\u003e构造方法：\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e无参的构造方法\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eArrayList\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eelementData\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDEFAULTCAPACITY_EMPTY_ELEMENTDATA\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e很简单的一句话，将保存元素的变量进行初始化。\u003c/p\u003e","title":"ArrayList源码学习"},{"content":"题目描述 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n示例：\n输入：(2 -\u0026gt; 4 -\u0026gt; 3) + (5 -\u0026gt; 6 -\u0026gt; 4) 输出：7 -\u0026gt; 0 -\u0026gt; 8 原因：342 + 465 = 807\n题目解析 给了两个链表，每个链表中的节点是数字中的一位数，将这两个链表的数相加后再返回一个链表。\n刚开始的思路是： 将第一个链表转换成数字1，第二个链表转换成数字2，两者相加得到数字3。最后将数字3转换为链表进行返回。\n写了一下运行的时候发现超时了，那这个方法就不行了。\n那就继续想优化的思路吧。\n他现在给出的是每一位上的数值，我们可以利用小学的竖式来计算，个位加个位，十位加十位的这种方式。这种情况下还要考虑进位的问题。\n代码解答 我看了解答区有一种解答思路是先创建一个节点，然后返回值执行该节点的下一个节点。也就是说会多创建一个节点。先来看这种代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 public ListNode addTwoNumbers2(ListNode l1, ListNode l2) { // 定义一个节点，初始化值为0 ListNode node = new ListNode(0); ListNode curr = node; // 进位存储的值 int carry = 0; while (l1 != null || l2 != null) { // 获取两个链表当前位的元素，如果为空则用0代替。 int val1 = l1 == null ? 0 : l1.val; int val2 = l2 == null ? 0 : l2.val; // 计算的时候还要加上之前的进位值 int sum = val1 + val2 + carry; // 计算进位的值，不需进位时为0，需要时为1 carry = sum / 10; // 得到这个位的数值 sum = sum % 10; // 直接创建新节点并且将第一个节点的下一个节点指向新节点 curr.next = new ListNode(sum); curr = curr.next; if (l1 != null) { l1 = l1.next; } if (l2 != null) { l2 = l2.next; } } // 如果还需要进位 （53+61=104） if (carry == 1) { curr.next = new ListNode(carry); } // 返回的时候要返回初始化节点的下一个节点开始 return node.next; } 这样其实最终得到的链表结构最开始会有一个值为0的节点，然后由于返回的是从第二个节点开始，所以对整体运行结果没关系。\n我写的代码主要是在中间放值的时候进行了修改，将计算出来的当前位的值给当前的节点而不是给下一个节点。只有没计算完成时再去关联下一个节点。ps：如果没有这个判断，我们也会多一个节点，不过是在最后的时候多一个，而且在结果中也会有展示。（7-\u0026gt;0-\u0026gt;8）会变成(7-\u0026gt;0-\u0026gt;8-\u0026gt;0)。返回结果的时候也不用返回初始化节点的下一个节点，直接返回初始化节点即可。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 public ListNode addTwoNumbers(ListNode l1, ListNode l2) { ListNode node = new ListNode(0); ListNode curr = node; int carry = 0; while (l1 != null || l2 != null) { int val1 = l1 == null ? 0 : l1.val; int val2 = l2 == null ? 0 : l2.val; int sum = val1 + val2 + carry; carry = sum / 10; sum = sum % 10; // 将当前节点的值更改为 计算得到的值 curr.val = sum; if ((l1 != null \u0026amp;\u0026amp; l1.next != null) || (l2 != null \u0026amp;\u0026amp; l2.next != null)) { // 如果都已经计算完了就不再创建下一个节点 // 如果还需要计算就再新建一个节点 初始化值为0 将这个节点的下个节点执行这个新节点，再将当前操作的节点替换为新建的节点 curr.next = new ListNode(0); curr = curr.next; } if (l1 != null) { l1 = l1.next; } if (l2 != null) { l2 = l2.next; } } if (carry == 1) { curr.next = new ListNode(carry); } return node; } 这两个程序都跑了一下：第一个程序耗时：10ms，内存消耗：47.9MB。第二个程序耗时：5ms，内存消耗43.8MB。\n","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0-leetcode2/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\u003c/p\u003e\n\u003cp\u003e如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\u003c/p\u003e\n\u003cp\u003e您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\u003c/p\u003e\n\u003cp\u003e示例：\u003c/p\u003e\n\u003cp\u003e输入：(2 -\u0026gt; 4 -\u0026gt; 3) + (5 -\u0026gt; 6 -\u0026gt; 4)\n输出：7 -\u0026gt; 0 -\u0026gt; 8\n原因：342 + 465 = 807\u003c/p\u003e\u003c/blockquote\u003e","title":"两数相加-LeetCode2"},{"content":"预备条件 树莓派（我的型号的3b+），电源线 内存卡 class10 8g以上 一台有ssh连接的电脑或者显示器、键鼠 最终实现功能 开机自动挂载外接硬盘 Samba（局域网文件共享） 开启ftp连接 Nginx Mariadb数据库（与MySQL相同） Docker 内网穿透 Aria2下载机 安装系统 下载镜像 从官网下载自己想要的镜像，一般就下载树莓派的默认Raspbian系统就行了，有桌面版和无桌面版。自行选择所需系统下载即可。\n输入内存卡 推荐使用软件balenaEtcher这个软件，这个有windows版本和macos版本，所以还是很方便的。\n选择我们下载镜像的安装位置，选择要刷的设备这里就是我们的内存卡，然后点击确认即可。\n系统配置 在刷完系统后拔出读卡器，然后再插入电脑，此时可以看到一个boot分区。以下文件都保存在这个分区里面。\n设置SSH访问\n写一个空白的文件，命名为ssh，大小写无所谓，注意ssh就是文件的全部名称不要有后缀。\n设置WIFI\n如果有网线，可以先使用网线连接，后面再考虑这一步。\n写一个命名为wpa_supplicant.conf的文件，这里面写wifi的配置信息。\n主要有以下几个属性：\nssid：WiFi的名称 psk： 密码 key_mgmt：WIFI的加密方式 priority：连接的优先级，数字越大优先级越高，不可以是负数 scan_ssid：连接隐藏的wifi时需要将这个指定为1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # WiFi配置 network={ ssid=\u0026#34;WiFi-A\u0026#34; psk=\u0026#34;12345678\u0026#34; key_mgmt=WPA-PSK priority=1 } # 连接隐藏的WiFi network={ ssid=\u0026#34;WiFi-B\u0026#34; psk=\u0026#34;12345678\u0026#34; key_mgmt=WPA-PSK priority=2 scan_ssid=1 } # 无密码时候的配置 network={ ssid=\u0026#34;你的无线网络名称（ssid）\u0026#34; key_mgmt=NONE } # WiFi 使用WEP加密 network={ ssid=\u0026#34;你的无线网络名称（ssid）\u0026#34; key_mgmt=NONE wep_key0=\u0026#34;你的wifi密码\u0026#34; } # WiFi 使用WPA/WPA2加密 network={ ssid=\u0026#34;你的无线网络名称（ssid）\u0026#34; key_mgmt=WPA-PSK psk=\u0026#34;你的wifi密码\u0026#34; } 开机重置密码 如果有屏幕和键鼠就直接连接即可。\n如果没有屏幕，需要先知道树莓派的ip，到路由器上查看树莓派的ip利用ssh软件连接到这个ip即可。\n默认的用户名与密码是pi，raspberry。登录后可以重置密码。\n输入passwd，然后根据提示输入新密码即可。\n树莓派默认是锁住root用户的，如果需要可以执行以下命令进行解锁：\n1 2 sudo passwd root # 根据提示设置root密码即可 sudo passwd --unlock root # 解锁root用户 然后我们可以对系统执行一下更新：\n1 2 sudo apt-get update sudo apt-get upgrade 开机挂载硬盘 由于树莓派使用的是内存卡，并把它当做存储系统，所以存储大小就取决于内存卡的大小，所以我将树莓派挂载了一个外接硬盘。并且设置了开机自动挂载，这样就不用每次执行挂载命令了。但是要注意的是可能供电不足，如果遇到这种情况需要给移动硬盘额外供电，不过我没出现这种情况。\n1.为了在windows和mac上都能使用，所以先将硬盘转换为ExFAT格式并安装所需软件\n1 sudo apt-get install exfat-fuse 2.在树莓派上插上硬盘，查看设备编号。\n1 sudo fdisk -l # 我们可以根据容量大小等信息判断哪个是sd卡，哪个是硬盘 3.建立挂载目录\n1 sudo mkdir /media/yingpan # 这个位置随便 4.挂载\n挂载的时候我遇到了一个问题就是硬盘里面有东西就挂载不进去，所以我将内容备份了一下，重置了后又重新挂载的。\n1 sudo mount /dev/sda1 /media/yingpan # /dev/sda1 是第2步的硬盘编号， /media/yingpan 是第3步建立的位置 5.开机挂载\n编辑/etc/fstab文件，在最后一行添加：\n/dev/sda1 /media/yingpan exfat rw,defaults,nofail 0 0 /dev/sda1是你要自动挂载的硬盘\n/media/yingpan是你要挂载到的地方\nnofail是很重要的一个参数，如果连接了硬盘就实现自动挂载，如果没连接硬盘也能正常启动。\n我就在填了这个文件后启动报错了，然后我连接上屏幕将这个文件又重新修改了后才能开机，所以这个配置文件很重要，如果填错了就开不了机了。一定要注意跟自己的硬盘格式是不是一致，如果错了也不要怕，连上屏幕使用root用户把这个文件再修改回来就好了。\n6.热插拔挂载\n在/etc/udev/rules.d/新建10-usbstorage.rules文件，会自动在/meida/yingpan/目录下挂载。\n[ruby] view plaincopy KERNEL!=\u0026#34;sd*\u0026#34;, GOTO=\u0026#34;media_by_label_auto_mount_end\u0026#34; SUBSYSTEM!=\u0026#34;block\u0026#34;,GOTO=\u0026#34;media_by_label_auto_mount_end\u0026#34; IMPORT{program}=\u0026#34;/sbin/blkid -o udev -p %N\u0026#34; ENV{ID_FS_TYPE}==\u0026#34;\u0026#34;, GOTO=\u0026#34;media_by_label_auto_mount_end\u0026#34; ENV{ID_FS_LABEL}!=\u0026#34;\u0026#34;, ENV{dir_name}=\u0026#34;%E{ID_FS_LABEL}\u0026#34; ENV{ID_FS_LABEL}==\u0026#34;\u0026#34;, ENV{dir_name}=\u0026#34;Untitled-%k\u0026#34; ACTION==\u0026#34;add\u0026#34;, ENV{mount_options}=\u0026#34;relatime,sync\u0026#34; ACTION==\u0026#34;add\u0026#34;, ENV{ID_FS_TYPE}==\u0026#34;vfat\u0026#34;, ENV{mount_options}=\u0026#34;iocharset=utf8,umaskk=000\u0026#34; ACTION==\u0026#34;add\u0026#34;, ENV{ID_FS_TYPE}==\u0026#34;ntfs\u0026#34;, ENV{mount_options}=\u0026#34;iocharset=utf8,umaskk=000\u0026#34; ACTION==\u0026#34;add\u0026#34;, RUN+=\u0026#34;/bin/mkdir -p /mnt/yingpan/\u0026#34;, RUN+=\u0026#34;/bin/mount -o $env{mount__options} /dev/%k /mnt/yingpan/\u0026#34; ACTION==\u0026#34;remove\u0026#34;, ENV{dir_name}!=\u0026#34;\u0026#34;, RUN+=\u0026#34;/bin/umount -l /meida/yingpan/}\u0026#34;, RUN+=\u0026#34;//bin/rmdir /meida/yingpan/\u0026#34; LABEL=\u0026#34;media_by_label_auto_mount_end\u0026#34; Samba（局域网文件共享） 使用树莓派挂载移动硬盘后，如果需要在其他机器上访问移动硬盘，可以在树莓派上安装samba开启局域网的文件共享\n首先我们需要安装samba软件\n1 2 sudo apt-get install samba samba-common-bin sudo apt-get install avahi-daemon（可选，用于支持网内的计算机自动发现） 安装完成后修改配置文件：sudo vim /etc/samba/smb.conf，在配置文件最后追加这些信息：\n[NAS] # 文件夹的名称，在局域网中以这个名称展示 comment = Public Storage # 文件夹说明 path = /path # 共享文件的路径，要把这个文件夹的权限修改成 777 create mask = 0777 #创建文件的权限 directory mask = 0777 #创建文件夹的权限 guest ok = yes # 游客访问，不需密码。 # valid users = pi # 需要登录后查看，登录的用户名 browseable = yes # 允许浏览 read only = no # 是否可读 如果配置了访问的用户，这个用户与系统用户还不一致，需要自行添加用户到samba系统\n1 sudo smbpasswd -a pi # pi 就是用户名 然后输入密码即可 然后我将上面没有的[printers]删掉了，并对[homes]进行了修改，最终[homes]的配置如下：\n[homes] comment = Home Directories browseable = no read only = no create mask = 0777 directory mask = 0777 valid users = %S 这样登录后即可访问[homes]的文件夹下内容了。\n这时打开mac系统的访达就可以看到我设置的[NAS]文件夹，登录后就可以看到[homes]（/home/pi）文件夹下的内容。\n配置ftp 有时候还会使用到ftp操作，所以安装了vsftpd。\n1 sudo apt-get install vsftpd 然后再进行修改配置文件，配置文件在/etc/vsftpd.conf，主要修改为以下的内容：\n1 2 3 4 5 write_enable=YES #可以进行写操作 # 下面几项都是默认的或者被注释的。可改可不改 annoymous_enable=NO #是否开启匿名访问，关闭即可 local_enable=YES #设定本地用户可以访问 local_umask=022 # 上传后文件的权限，默认是077 然后开启服务sudo service vsftpd start。\n我们就可以使用ftp软件连接到树莓派了。\n安装编译nginx 具体文章可以参照我的这篇文章nginx编译安装\n安装、配置Mariadb 安装 1 sudo apt-get install mariadb-server 配置 1 sudo mysql -u root -p # 以root身份登录，然后提示输入密码，安装完成后密码为空，所以直接回车即可 这时已经进入mysql的命令行，对root修改密码并且授权远程访问\n1 2 3 4 5 6 usr mysql; update user set password = PASSWORD(\u0026#39;要设置的密码\u0026#39;) where user = \u0026#39;root\u0026#39; # 对root用户修改密码，如果需要root可远程访问将host更新为 % 即可 # 或者新建其他用户(新建用户为 pi 密码为 123456) CREATE USER \u0026#39;pi\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;123456\u0026#39;; # 对新建用户授予权限 GRANT ALL ON *.* TO \u0026#39;pi\u0026#39;@\u0026#39;%\u0026#39;; 然后还需要修改mysql的配置文件/etc/mysql/mariadb.conf.d/50-server.cnf，将其中的bind-address = 127.0.0.1给注释掉即可。\nDocker 自己的电脑上也能安装docker，但是运行时会有些卡顿，所以我就将docker装在了树莓派上面\n具体安装和使用文章可以看我的这篇文章：Docker\n内网穿透 我仅仅使用过花生壳与frp两种方案，还有很多其他的解决方案。\n花生壳 首先贴出官方文档地址，一般看这个文档按照这个执行就可以完成了：http://service.oray.com/question/2680.html\n但是这个毕竟是人家公司的服务项目，所以我们申请后只有1m的带宽，限制也挺多。但是刚刚开始使用时也是不错的解决方案。\nfrp 这个方案就是使用自己的服务器做中转，所以我们就需要一台自己的服务器。\n具体实现方案可以看我的这篇文章：内网穿透\nAria2下载机 有了NAS和外接硬盘，我们可以做一个下载机。\n安装 1 sudo apt-get install aria2 配置 创建配置文件夹和配置文件、会话文件\n1 2 3 mkdir -p ~/.config/aria2/ #创建文件夹 这个文件夹位置可以随意修改，只要后面能对应即可 touch ~/.config/aria2/aria2.session #创建会话文件 vim ~/.config/aria2/aria2/conf #创建配置文件 然后配置文件的内容可以照着这样写：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 #后台运行 daemon=true #允许rpc enable-rpc=true #允许所有来源, web界面跨域权限需要 rpc-allow-origin-all=true #允许外部访问，false的话只监听本地端口 rpc-listen-all=true #RPC端口, 仅当默认端口被占用时修改 rpc-listen-port=6800 #最大同时下载数(任务数), 路由建议值: 3 max-concurrent-downloads=5 #断点续传 continue=true #同服务器连接数 max-connection-per-server=5 #最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要 min-split-size=10M #单文件最大线程数, 路由建议值: 5 split=10 #下载速度限制 max-overall-download-limit=0 #单文件速度限制 max-download-limit=0 #上传速度限制 max-overall-upload-limit=0 #单文件速度限制 max-upload-limit=0 #文件保存路径, 默认为当前启动位置(我的是外置设备，请自行坐相应修改) dir=/mnt/LiuNaiJie/download #保存下载会话 save-session=/home/pi/.config/aria2/aria2.session input-file=/home/pi/.config/aria2/aria2.session #断电续传 save-session-interval=60 ## BT/PT下载相关 ## # 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true #follow-torrent=true # BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999 listen-port=51413 # 单个种子最大连接数, 默认:55 #bt-max-peers=55 # 打开DHT功能, PT需要禁用, 默认:true enable-dht=false # 打开IPv6 DHT功能, PT需要禁用 #enable-dht6=false # DHT网络监听端口, 默认:6881-6999 #dht-listen-port=6881-6999 # 本地节点查找, PT需要禁用, 默认:false #bt-enable-lpd=false # 种子交换, PT需要禁用, 默认:true enable-peer-exchange=false # 每个种子限速, 对少种的PT很有用, 默认:50K #bt-request-peer-speed-limit=50K # 客户端伪装, PT需要 peer-id-prefix=-TR2770- user-agent=Transmission/2.77 # 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0 seed-ratio=0 # 强制保存会话, 即使任务已经完成, 默认:false # 较新的版本开启后会在任务完成后依然保留.aria2文件 #force-save=false # BT校验相关, 默认:true #bt-hash-check-seed=true # 继续之前的BT任务时, 无需再次校验, 默认:false bt-seed-unverified=true # 保存磁力链接元数据为种子文件(.torrent文件), 默认:false bt-save-metadata=true 启动： aria2c --conf-path=/home/pi/.config/aria2/aria2.config\n下载web管理页面 我这里使用的是AriaNg，官网地址是https://github.com/mayswind/AriaNg/releases，可以下载最近的版本，之前已经安装过nginx了，就直接下载解压到nginx的html下，然后访问树莓派ip/aria-ng显示如下的页面。\n设置开机启动 创建ststemctl service文件\n1 sudo vim /libsudo vim /lib/systemd/system/aria2.service 编写脚本文件，里面的配置文件路径修改为自己的路径\n1 2 3 4 5 6 7 8 9 10 [Unit] Description=Aria2 Service After=network.target [Service] User=pi ExecStart=/usr/bin/aria2c --conf-path=/home/pi/.config/aria2/aria2.config [Install] WantedBy=default.target 然后重载服务并设置开机启动\n1 2 3 4 sudo systemctl daemon-reload sudo systemctl enable aria2 sudo systemctl start aria2 sudo systemctl status aria2 参考文章：\nhttps://www.cnblogs.com/mq0036/p/8886971.html http://shumeipai.nxez.com/ https://blog.csdn.net/kxwinxp/article/details/80288006 https://li-aaron.github.io/2019/01/aira2-on-raspberry/#tocAnchor-1-3-2 http://shumeipai.nxez.com/2014/07/01/raspberry-pi-do-download-machine-aria2.html ","permalink":"https://www.liunaijie.top/coding/tools/raspberry_pi/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/","summary":"\u003ch1 id=\"预备条件\"\u003e预备条件\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e树莓派（我的型号的3b+），电源线\u003c/li\u003e\n\u003cli\u003e内存卡 class10 8g以上\u003c/li\u003e\n\u003cli\u003e一台有ssh连接的电脑或者显示器、键鼠\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"最终实现功能\"\u003e最终实现功能\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e开机自动挂载外接硬盘\u003c/li\u003e\n\u003cli\u003eSamba（局域网文件共享）\u003c/li\u003e\n\u003cli\u003e开启ftp连接\u003c/li\u003e\n\u003cli\u003eNginx\u003c/li\u003e\n\u003cli\u003eMariadb数据库（与MySQL相同）\u003c/li\u003e\n\u003cli\u003eDocker\u003c/li\u003e\n\u003cli\u003e内网穿透\u003c/li\u003e\n\u003cli\u003eAria2下载机\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"安装系统\"\u003e安装系统\u003c/h1\u003e\n\u003ch2 id=\"下载镜像\"\u003e下载镜像\u003c/h2\u003e\n\u003cp\u003e从\u003ca href=\"https://www.raspberrypi.org/downloads/\"\u003e官网\u003c/a\u003e下载自己想要的镜像，一般就下载树莓派的默认\u003ccode\u003eRaspbian\u003c/code\u003e系统就行了，有桌面版和无桌面版。自行选择所需系统下载即可。\u003c/p\u003e\n\u003ch2 id=\"输入内存卡\"\u003e输入内存卡\u003c/h2\u003e\n\u003cp\u003e推荐使用软件\u003ccode\u003ebalenaEtcher\u003c/code\u003e这个软件，这个有windows版本和macos版本，所以还是很方便的。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/20190803094630.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e选择我们下载镜像的安装位置，选择要刷的设备这里就是我们的内存卡，然后点击确认即可。\u003c/p\u003e\n\u003ch2 id=\"系统配置\"\u003e系统配置\u003c/h2\u003e\n\u003cp\u003e在刷完系统后拔出读卡器，然后再插入电脑，此时可以看到一个\u003ccode\u003eboot\u003c/code\u003e分区。以下文件都保存在这个分区里面。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e设置SSH访问\u003c/p\u003e\n\u003cp\u003e写一个空白的文件，命名为\u003ccode\u003essh\u003c/code\u003e，大小写无所谓，注意ssh就是文件的全部名称不要有后缀。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e设置WIFI\u003c/p\u003e\n\u003cp\u003e如果有网线，可以先使用网线连接，后面再考虑这一步。\u003c/p\u003e\n\u003cp\u003e写一个命名为\u003ccode\u003ewpa_supplicant.conf\u003c/code\u003e的文件，这里面写wifi的配置信息。\u003c/p\u003e\n\u003cp\u003e主要有以下几个属性：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003essid：WiFi的名称\u003c/li\u003e\n\u003cli\u003epsk： 密码\u003c/li\u003e\n\u003cli\u003ekey_mgmt：WIFI的加密方式\u003c/li\u003e\n\u003cli\u003epriority：连接的优先级，数字越大优先级越高，不可以是负数\u003c/li\u003e\n\u003cli\u003escan_ssid：连接隐藏的wifi时需要将这个指定为1\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# WiFi配置\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003enetwork\u003c/span\u003e\u003cspan class=\"o\"\u003e={\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nv\"\u003essid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;WiFi-A\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003epsk\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;12345678\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003ekey_mgmt\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eWPA-PSK\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003epriority\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 连接隐藏的WiFi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003enetwork\u003c/span\u003e\u003cspan class=\"o\"\u003e={\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003essid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;WiFi-B\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003epsk\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;12345678\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003ekey_mgmt\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eWPA-PSK\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003epriority\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003escan_ssid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 无密码时候的配置\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003enetwork\u003c/span\u003e\u003cspan class=\"o\"\u003e={\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003essid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;你的无线网络名称（ssid）\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003ekey_mgmt\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eNONE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# WiFi 使用WEP加密\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003enetwork\u003c/span\u003e\u003cspan class=\"o\"\u003e={\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003essid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;你的无线网络名称（ssid）\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003ekey_mgmt\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eNONE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003ewep_key0\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;你的wifi密码\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# WiFi 使用WPA/WPA2加密\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003enetwork\u003c/span\u003e\u003cspan class=\"o\"\u003e={\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003essid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;你的无线网络名称（ssid）\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003ekey_mgmt\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eWPA-PSK\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003epsk\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;你的wifi密码\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"开机重置密码\"\u003e开机重置密码\u003c/h1\u003e\n\u003cp\u003e如果有屏幕和键鼠就直接连接即可。\u003c/p\u003e","title":"树莓派使用笔记"},{"content":"题目描述 在大小为 2N 的数组 A 中有 N+1 个不同的元素，其中有一个元素重复了 N 次。\n返回重复了 N 次的那个元素。\n示例 1：\n输入：[1,2,3,3] 输出：3 示例 2：\n输入：[2,1,2,5,3,2] 输出：2 示例 3：\n输入：[5,1,5,2,5,3,5,4] 输出：5\n提示：\n4 \u0026lt;= A.length \u0026lt;= 10000 0 \u0026lt;= A[i] \u0026lt; 10000 A.length 为偶数\n大小为2N的数字中有个N+1个元素，其中有个元素重复了N次，这也说明了除了这个元素其他元素都没有重复，也可以理解成查找重复的元素\n解题思路 排序后遍历 因为只有一个重复的元素，那么排序后肯定是相邻的。\n排好序后，只要有两个相邻的元素是一样的，那么就是答案\n代码实现：\n1 2 3 4 5 6 7 8 9 public int repeatedNTimes(int[] A) { Arrays.sort(A); for (int i = 0; i \u0026lt; A.length - 1; i++) { if (A[i] == A[i + 1]) { return A[i]; } } return 0; } 哈希表 这个题也相当于查找重复元素，这个时候肯定可以利用哈希表来实现\n代码实现：\n1 2 3 4 5 6 7 8 9 10 public int repeatedNTimesHash(int[] A) { Set\u0026lt;Integer\u0026gt; set = new HashSet\u0026lt;\u0026gt;(A.length); for (int i : A) { if (set.contains(i)) { return i; } set.add(i); } return -1; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E9%87%8D%E5%A4%8Dn%E6%AC%A1%E7%9A%84%E5%85%83%E7%B4%A0-leetcode961/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在大小为 2N 的数组 A 中有 N+1 个不同的元素，其中有一个元素重复了 N 次。\u003c/p\u003e\n\u003cp\u003e返回重复了 N 次的那个元素。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cp\u003e输入：[1,2,3,3]\n输出：3\n示例 2：\u003c/p\u003e\n\u003cp\u003e输入：[2,1,2,5,3,2]\n输出：2\n示例 3：\u003c/p\u003e\n\u003cp\u003e输入：[5,1,5,2,5,3,5,4]\n输出：5\u003c/p\u003e\n\u003cp\u003e提示：\u003c/p\u003e\n\u003cp\u003e4 \u0026lt;= A.length \u0026lt;= 10000\n0 \u0026lt;= A[i] \u0026lt; 10000\nA.length 为偶数\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e大小为2N的数字中有个N+1个元素，其中有个元素重复了N次，这也说明了除了这个元素其他元素都没有重复，也可以理解成查找重复的元素\u003c/p\u003e","title":"重复N次的元素-LeetCode961"},{"content":"题目描述 给定两个数组，编写一个函数来计算它们的交集。\n示例 1:\n输入: nums1 = \\[1,2,2,1], nums2 = \\[2,2] 输出: \\[2,2] 示例 2:\n输入: nums1 = \\[4,9,5], nums2 = \\[9,4,9,8,4] 输出: \\[4,9] 说明：\n输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。 我们可以不考虑输出结果的顺序。 *进阶:*\n如果给定的数组已经排好序呢？你将如何优化你的算法？ 如果 nums1 的大小比 nums2 小很多，哪种方法更优？ 如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？ 这个题目的T349的进阶版。\n解题思路 这个题目有一个不同点是它的结果是交集并且包含重复元素的，在349题中，包含的重复元素在结果中出现一次即可。在这里需要将重复元素表示出来。\n当遇到重复元素时，应该要进行计数，在对第二个数组进行遍历时，如果遇到重复元素并且计数大于0再进行添加。来看一下具体的代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public int[] intersect(int[] nums1, int[] nums2) { Map\u0026lt;Integer, Integer\u0026gt; map = new HashMap\u0026lt;Integer, Integer\u0026gt;(); //遍历，如果遇到重复的数量加一 for (int item : nums2) { if (map.containsKey(item)) { map.put(item, map.get(item) + 1); } else { map.put(item, 1); } } List\u0026lt;Integer\u0026gt; list = new ArrayList\u0026lt;Integer\u0026gt;(); for (int item : nums1) { //当有交集时，数量减一，下次再遇到这个元素先判断数量是否大于0 if (map.containsKey(item) \u0026amp;\u0026amp; map.get(item) \u0026gt; 0) { list.add(item); map.put(item, map.get(item) - 1); } } //转换为数组 int[] result = new int[list.size()]; for (int i = 0; i \u0026lt; list.size(); i++) { result[i] = list.get(i); } return result; } 相关题目 两个数组的交集 ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86ii-leetcode350/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定两个数组，编写一个函数来计算它们的交集。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入: nums1 = \\[1,2,2,1], nums2 = \\[2,2]\n输出: \\[2,2]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入: nums1 = \\[4,9,5], nums2 = \\[9,4,9,8,4]\n输出: \\[4,9]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。\u003c/li\u003e\n\u003cli\u003e我们可以不考虑输出结果的顺序。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003e*进阶:*\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果给定的数组已经排好序呢？你将如何优化你的算法？\u003c/li\u003e\n\u003cli\u003e如果 \u003cem\u003enums1\u003c/em\u003e 的大小比 \u003cem\u003enums2\u003c/em\u003e 小很多，哪种方法更优？\u003c/li\u003e\n\u003cli\u003e如果 \u003cem\u003enums2\u003c/em\u003e 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\u003cp\u003e这个题目的T349的进阶版。\u003c/p\u003e","title":"两个数组的交集II-LeetCode350"},{"content":"题目描述 给定两个数组，编写一个函数来计算它们的交集。\n示例 1:\n输入: nums1 = \\[1,2,2,1], nums2 = \\[2,2] 输出: \\[2] 示例 2:\n输入: nums1 = \\[4,9,5], nums2 = \\[9,4,9,8,4] 输出: \\[9,4] 说明:\n输出结果中的每个元素一定是唯一的。 我们可以不考虑输出结果的顺序。 解题思路 求两个数组中的交集，我们先将nums1放到set1中，然后对nums2遍历，如果存在于set1中则将其添加到set2中，最后需要将set转换为数组返回。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public int[] intersection(int[] nums1, int[] nums2) { Set\u0026lt;Integer\u0026gt; set1 = new HashSet\u0026lt;Integer\u0026gt;(); for (int item : nums1) { set1.add(item); } Set\u0026lt;Integer\u0026gt; set2 = new HashSet\u0026lt;Integer\u0026gt;(); for (int item : nums2) { if (set1.contains(item)) { set2.add(item); } } int[] result = new int[set2.size()]; int index = 0; for (Integer integer : set2) { result[index++] = integer; } return result; } 相关题目 两个数组的交集II ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86-leetcode349/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定两个数组，编写一个函数来计算它们的交集。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入: nums1 = \\[1,2,2,1], nums2 = \\[2,2]\n输出: \\[2]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入: nums1 = \\[4,9,5], nums2 = \\[9,4,9,8,4]\n输出: \\[9,4]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e输出结果中的每个元素一定是唯一的。\u003c/li\u003e\n\u003cli\u003e我们可以不考虑输出结果的顺序。\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e","title":"有效的括号—LeetCode20"},{"content":"题目描述 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。 有效字符串需满足：\n左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 注意空字符串可被认为是有效字符串。 示例 1: 输入: \u0026#34;()\u0026#34; 输出: true 示例 2:\n输入: \u0026#34;()[]{}\u0026#34; 输出: true 示例 3:\n输入: \u0026#34;(]\u0026#34; 输出: false 示例 4:\n输入: \u0026#34;(\\[)]\u0026#34; 输出: false 示例 5:\n输入: \u0026#34;{\\[]}\u0026#34; 输出: true 这个题目与我们编译器对括号的识别一样，当我们多了一个括号后编译器会报错提示。\n解题思路 如果给定的字符串不是偶数长度，则一定不是有效的括号，因为有效的括号一定是成对出现的，长度必然是偶数。\n我们进行遍历时，如果首先出现结束符，即) ] }这三个字符，出现前并没有开始字符出现，那么肯定是无效的括号。\n当出现开始字符( [ {时将它加入到栈中，遇到结束字符时去看栈中的第一个元素是不是对于的开始字符，如果不匹配则不是有效的括号。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public boolean isValid(String s) { if (s.length() % 2 != 0) { // 如果不是偶数长度直接返回 return false; } Stack\u0026lt;Character\u0026gt; stack = new Stack\u0026lt;Character\u0026gt;(); Map\u0026lt;Character, Character\u0026gt; map = new HashMap\u0026lt;Character, Character\u0026gt;(); map.put(\u0026#39;)\u0026#39;, \u0026#39;(\u0026#39;); map.put(\u0026#39;]\u0026#39;, \u0026#39;[\u0026#39;); map.put(\u0026#39;}\u0026#39;, \u0026#39;{\u0026#39;); char[] chars = s.toCharArray(); for (char c : chars) { if (map.containsKey(c)) { if (stack.isEmpty()) { return false; } char temp = stack.pop(); if (temp != map.get(c)) { return false; } } else { stack.add(c); } } return stack.isEmpty(); } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7-leetcode20/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e给定一个只包括 \u003ccode\u003e'('\u003c/code\u003e，\u003ccode\u003e')'\u003c/code\u003e，\u003ccode\u003e'{'\u003c/code\u003e，\u003ccode\u003e'}'\u003c/code\u003e，\u003ccode\u003e'['\u003c/code\u003e，\u003ccode\u003e']'\u003c/code\u003e 的字符串，判断字符串是否有效。\n有效字符串需满足：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e左括号必须用相同类型的右括号闭合。\u003c/li\u003e\n\u003cli\u003e左括号必须以正确的顺序闭合。\n注意空字符串可被认为是有效字符串。\n\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入: \u0026#34;()\u0026#34;\n输出: true\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入: \u0026#34;()[]{}\u0026#34;\n输出: true\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e示例 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入: \u0026#34;(]\u0026#34;\n输出: false\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e示例 4:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e 输入: \u0026#34;(\\[)]\u0026#34;\n 输出: false\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e示例 5:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入: \u0026#34;{\\[]}\u0026#34;\n输出: true\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这个题目与我们编译器对括号的识别一样，当我们多了一个括号后编译器会报错提示。\u003c/p\u003e","title":"有效的括号—LeetCode20"},{"content":"题目描述 在二维数组grid中，grid[i][j]代表位于某处的建筑物的高度。 我们被允许增加任何数量（不同建筑物的数量可能不同）的建筑物的高度。 高度 0 也被认为是建筑物。\n最后，从新数组的所有四个方向（即顶部，底部，左侧和右侧）观看的“天际线”必须与原始数组的天际线相同。 城市的天际线是从远处观看时，由所有建筑物形成的矩形的外部轮廓。 请看下面的例子。\n建筑物高度可以增加的最大总和是多少？\n例子： 输入： grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]] 输出： 35 解释： The grid is: [ [3, 0, 8, 4], [2, 4, 5, 7], [9, 2, 6, 3], [0, 3, 1, 0] ]\n从数组竖直方向（即顶部，底部）看“天际线”是：[9, 4, 8, 7] 从水平水平方向（即左侧，右侧）看“天际线”是：[8, 7, 9, 3]\n在不影响天际线的情况下对建筑物进行增高后，新数组如下：\ngridNew = [ [8, 4, 8, 7], [7, 4, 7, 7], [9, 4, 8, 7], [3, 3, 3, 3] ] 说明:\n1 \u0026lt; grid.length = grid[0].length \u0026lt;= 50。 grid[i][j] 的高度范围是： [0, 100]。 一座建筑物占据一个grid[i][j]：换言之，它们是 1 x 1 x grid[i][j] 的长方体。\n这个问题类似看三视图，然后再根据两个三视图合并出符合条件的最高值。\n最后要返回的结果是这个最高值比原有值增长了多少\n解题思路 我们首先要将左视图和前视图的最大值存储。\n怎样才能增长到最高？当前位置变成左视图、前视图在当前位置的最小值。\n能增长多少要怎么求呢？拿左视图、前视图在当前位置的最小值与原有值做差，然后再每个位置累加。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public static int maxIncreaseKeepingSkyline(int[][] grid) { //左视图 int[] left = new int[grid.length]; //前视图 int[] top = new int[grid[0].length]; for (int i = 0; i \u0026lt; grid.length; i++) { for (int j = 0; j \u0026lt; grid[i].length; j++) { left[i] = Math.max(grid[i][j], left[i]); top[j] = Math.max(grid[i][j], top[j]); } } int result = 0; for (int i = 0; i \u0026lt; left.length; i++) { for (int j = 0; j \u0026lt; top.length; j++) { result += Math.min(left[i], top[j]) - grid[i][j]; } } return result; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BF%9D%E6%8C%81%E5%9F%8E%E5%B8%82%E7%9A%84%E5%A4%A9%E9%99%85%E7%BA%BF-leetcode807/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在二维数组grid中，grid[i][j]代表位于某处的建筑物的高度。 我们被允许增加任何数量（不同建筑物的数量可能不同）的建筑物的高度。 高度 0 也被认为是建筑物。\u003c/p\u003e\n\u003cp\u003e最后，从新数组的所有四个方向（即顶部，底部，左侧和右侧）观看的“天际线”必须与原始数组的天际线相同。 城市的天际线是从远处观看时，由所有建筑物形成的矩形的外部轮廓。 请看下面的例子。\u003c/p\u003e\n\u003cp\u003e建筑物高度可以增加的最大总和是多少？\u003c/p\u003e\n\u003cp\u003e例子：\n输入： grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\n输出： 35\n解释：\nThe grid is:\n[ [3, 0, 8, 4],\n[2, 4, 5, 7],\n[9, 2, 6, 3],\n[0, 3, 1, 0] ]\u003c/p\u003e\n\u003cp\u003e从数组竖直方向（即顶部，底部）看“天际线”是：[9, 4, 8, 7]\n从水平水平方向（即左侧，右侧）看“天际线”是：[8, 7, 9, 3]\u003c/p\u003e\n\u003cp\u003e在不影响天际线的情况下对建筑物进行增高后，新数组如下：\u003c/p\u003e\n\u003cp\u003egridNew = [ [8, 4, 8, 7],\n[7, 4, 7, 7],\n[9, 4, 8, 7],\n[3, 3, 3, 3] ]\n说明:\u003c/p\u003e\n\u003cp\u003e1 \u0026lt; grid.length = \u003ccode\u003egrid[0].length\u003c/code\u003e \u0026lt;= 50。\n\u003ccode\u003egrid[i][j]\u003c/code\u003e 的高度范围是： [0, 100]。\n一座建筑物占据一个\u003ccode\u003egrid[i][j]\u003c/code\u003e：换言之，它们是 \u003ccode\u003e1 x 1 x grid[i][j]\u003c/code\u003e 的长方体。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e这个问题类似看三视图，然后再根据两个三视图合并出符合条件的最高值。\u003c/p\u003e\n\u003cp\u003e最后要返回的结果是这个最高值比原有值增长了多少\u003c/p\u003e","title":"保持城市的天际线-LeetCode807"},{"content":"背景 当单体项目逐渐扩大后，一个项目编译，发布可能需要很久的时间，如果其中一个文件出现 bug，那么需要对整个项目进行打包发布。微服务就是对项目进行拆分，拆分成多个小项目，由这些小项目组成大项目。并且拆分成小项目后，其他单体项目中需要相同功能的地方就不用再次编写，直接用这个就可以了。有种分治的思想。\n那么原来单体项目拆分后，随之而来就会出现一些问题。原来一个项目中直接调用即可，现在请求的类被拆分到其他项目中，如何进行请求，是采用 http 这种请求还是rpc？多个模块如果进行管理等等一系列问题。这里主要写一下 rpc 的理解。\n在微服务中rpc又是重要的一环，现在主流的rpc框架有很多，比如阿里的dubbo，微博的Motan,谷歌的gRpc，还有Thrift，现在主流的应该就这几种吧。按照文档学习了一下dubbo如何使用后，发现并没有了解rpc是如何具体实现的。所以这篇文章记录了自己对rpc的一些理解与实战代码。\n代码链接\nHTTP 与 RPC 的对比 其实就像一些技术一样，没有绝对好的技术，不然大家都去使用它了。都只是在不同场景下有各自的优势。\nrpc一般是自带负载均衡策略，而 http 一般是通过 nginx 这种来实现负载均衡 rpc可以使用 tcp 协议也可以使用 http 协议，而 http 就只能使用 http 协议 rpc可以自定义传输信息和序列化方法，减少传输报文大小。 所以RPC主要用于公司内部的服务调用。HTTP主要用于对外的环境，浏览器接口调用，APP接口调用，第三方接口调用等。\nRPC的主要实现步骤 各个模块的作用 封装rpc请求\n我们在调用其他代码的时候要让别人知道我们调用的是什么类的什么方法，传递了什么参数等信息。所以我们需要将这些信息进行封装起来，然后进行传输。\n序列化与反序列化\n这个主要是传输数据的大小和跨语言的实现，不同的序列化方式会导致我们在网络传输中传输大小不同的信息，所以这个也是影响性能的一部分\n跨语言：这个就像我们说话的方言一样，我们说的方言怎么能让其他人听懂呢，那我们就都说普通话吧，这样大家就比较好理解你的意思了。在编程语言的世界里，java说的话怎么能让go,php等语言听懂呢？我们就定一个协议吧，大家都遵守这个协议，就能明白干什么了，所以gRpc和Thrift就使用了这种的序列化规则。那么有人就说了，既然能使用*普通话*这个标准，为什么其他的框架不用呢？其实这就看公司使用的技术了，如果各个部门都使用的是同一种技术框架，也没有发展其他语言的项目（都是一个地方的人说同一种方言），就没有必要非去弄*普通话*了。\n网络传输\n序列化完成的数据在网络进行传输，比如现在大部分都在使用的netty技术。\n负载均衡\n消费者从注册中心（如果有）获取生产者的ip地址要进行通信了，但是这些生产者的性能可能不一样，我们可以对性能好的多访问几次，性能差的少访问几次。最简单的方式就是轮询，有几个生产者就轮着来，这个基本上都是针对自己公司情况来实现。\n动态代理\n在消费者调用生产者时，我们只需调用接口就能接收到返回信息，那么什么时候封装rpc请求了呢，怎么从注册中心找的节点信息等。这里就用到了aop的原理。并且我们不可能仅仅调用一个方法，如果使用静态代理，那么我们有多少个类就要有多个的代理，并且框架也不知道我们会有什么类，所以就需要使用动态代理。动态代理的作用主要是：在不改变目标对象方法的情况下对方法进行增强\n反射\n动态代理其实也是基于反射实现的，常见的动态代理有：JDK动态代理，Cglib。\njdk动态代理就是基于反射机制实现的。这些东西我也没有具体去理解去看这一块，我想应该是类似这样的：并不清楚调用的具体类是什么，使用一个Object类型来接收，只有当你真正调用的时候才知道这个类是student还是teacher，知道了之后再去调用。\n项目模块 这里在网络传输使用bio的方式，序列化就使用java默认的序列化方式。\nlearn-demo-rpc ├── bio-socket ├── nio-socket ├── simple-api ├── rpc-common ├── simple-rpc ├── simple-rpc-consumer ├── simple-rpc-provider └── simple-rpc-core └── zookeeper-register-rpc ├── zookeeper-register-consumer ├── zookeeper-register-provider └── zookeeper-register-core bio-socket 以bio的方式实现生产者与消费者之间的通信模块 nio-socket 以nio的方式实现生产者与消费者之间的通信模块 simple-api 是定义的公共接口模块 rpc-common 对rpc请求和响应包装的一些实体类 simple-rpc 无注册中心的简单rpc调用实现 Zookeeper-register-rpc 通过zookeeper注册中心的rpc调用实现 -core 是核心实现模块 -provider 是生产者的实现模块 -consumer 是消费者的调用模块 定义接口模块和对应请求响应的包装类 接口模块 这个模块就比较简单了，写个接口，写个方法就可以了\n1 2 3 4 5 public interface ISayHello { String sayHello(String name); } 包装请求和响应信息 这里就要考虑了，我们如果调用一个方法，需要知道一些什么东西才能调用呢。我们在本地调用一个的时候是这样调用的ClassA.methodB(paramC,paramD)，那现在我们知道了classA，所以其他的就是下面这几个了：方法名，参数类型，参数。\n返回信息的时候需要返回一些什么信息呢。首先肯定有个请求方法的返回值，其他的还需要什么呢，参考了一下网络调用的返回信息，我又添加了状态码，提示信息这两个字段。\n然后序列化方式就用默认的方式即可，实现个接口然后定义id就可以了。\n请求信息 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 public class RpcRequest implements Serializable { private static final long serialVersionUID = 5837872617706737632L; /** * 方法名称 */ private String methodName; /** * 参数列表 */ private Object[] parameters; /** * 参数类型 */ private Class\u0026lt;?\u0026gt;[] parameterTypes; public String getMethodName() { return methodName; } public RpcRequest setMethodName(String methodName) { this.methodName = methodName; return this; } public Object[] getParameters() { return parameters; } public RpcRequest setParameters(Object[] parameters) { this.parameters = parameters; return this; } public Class\u0026lt;?\u0026gt;[] getParameterTypes() { return parameterTypes; } public RpcRequest setParameterTypes(Class\u0026lt;?\u0026gt;[] parameterTypes) { this.parameterTypes = parameterTypes; return this; } @Override public String toString() { return \u0026#34;RpcRequest{\u0026#34; + \u0026#34;methodName=\u0026#39;\u0026#34; + methodName + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, parameters=\u0026#34; + Arrays.toString(parameters) + \u0026#34;, parameterTypes=\u0026#34; + Arrays.toString(parameterTypes) + \u0026#39;}\u0026#39;; } } 响应信息 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 public class RpcResponse implements Serializable { private static final long serialVersionUID = -4129585144798112980L; /** * 请求成功的响应码 */ public static int SUCCEED = 200; /** * 请求失败的响应码 */ public static int FAILED = 500; /** * 响应状态，默认就是成功的 */ private int status = 200; /** * 响应信息，如异常信息 */ private String message; /** * 响应数据，返回值 */ private Object data; public int getStatus() { return status; } public RpcResponse setStatus(int status) { this.status = status; return this; } public String getMessage() { return message; } public RpcResponse setMessage(String message) { this.message = message; return this; } public Object getData() { return data; } public RpcResponse setData(Object data) { this.data = data; return this; } @Override public String toString() { return \u0026#34;RpcResponse{\u0026#34; + \u0026#34;status=\u0026#39;\u0026#34; + status + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, message=\u0026#39;\u0026#34; + message + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, data=\u0026#34; + data + \u0026#39;}\u0026#39;; } } 定义bio的socket通信模块 也试过使用nio的方式，但是返回信息在子线程里面返回了，需要使用线程通知机制，后面研究后会再更新。\n服务端代码 提供了一个开启服务端的方法，传入端口，请求的类名和实现类即可\n收到客户端发送的消息后先将其转换为对象，判断客户端发送的信息是不是我们包装好的rpc请求信息，如果是rpc请求那么我们再进行处理，并将结果进行返回\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 public class BioServer\u0026lt;T\u0026gt; { private static final Logger log = LoggerFactory.getLogger(BioServer.class); public void export(int port, Class\u0026lt;?\u0026gt; interfaceClass, T ref) { try { log.info(\u0026#34; bio rpc server is starting,address:{},port:{} \u0026#34;, InetAddress.getLocalHost().getHostAddress(), port); ServerSocket serverSocket = new ServerSocket(port); while (true) { // 获取客户端的连接 Socket client = serverSocket.accept(); // 获取客户端发送的数据 ObjectInputStream objectInputStream = new ObjectInputStream(client.getInputStream()); Object object = objectInputStream.readObject(); if (object instanceof RpcRequest) { RpcRequest request = (RpcRequest) object; log.info(\u0026#34;bio rpc server get the client request:{}\u0026#34;, request); // 处理请求 RpcResponse response = handleRequest(request, interfaceClass, ref); //将请求结果返回客户端 ObjectOutputStream objectOutputStream = new ObjectOutputStream(client.getOutputStream()); objectOutputStream.writeObject(response); } } } catch (Exception e) { log.error(\u0026#34;bio rpc server start failed:{}\u0026#34;, e.toString()); } } /** * 处理请求 * * @param request rpc请求包装类 * @param interfaceClass 接口类 * @param ref 实现类 * @return */ public RpcResponse handleRequest(RpcRequest request, Class\u0026lt;?\u0026gt; interfaceClass, T ref) { RpcResponse response = new RpcResponse(); try { Method method = interfaceClass.getMethod(request.getMethodName(), request.getParameterTypes()); Object data = method.invoke(ref, request.getParameters()); response.setData(data); } catch (Exception e) { response.setStatus(RpcResponse.FAILED).setMessage(e.getMessage()); } return response; } } 客户端代码 客户端的调用在设置好服务端的ip和端口后就可以直接发送数据了，发送的数据格式也是我们进行封装过的，返回信息格式也是我们进行封装完成的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 public class BioClient { private static final Logger log = LoggerFactory.getLogger(BioClient.class); private String address; private int port; public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } public int getPort() { return port; } public void setPort(int port) { this.port = port; } public RpcResponse send(RpcRequest rpcRequest) { try { Socket socket = new Socket(address, port); // 发送rpc请求 ObjectOutputStream objectOutputStream = new ObjectOutputStream(socket.getOutputStream()); objectOutputStream.writeObject(rpcRequest); // 接收响应 ObjectInputStream objectInputStream = new ObjectInputStream(socket.getInputStream()); Object object = objectInputStream.readObject(); if (object instanceof RpcResponse) { return (RpcResponse) object; } } catch (Exception e) { log.error(\u0026#34;the rpc client start failed:{}\u0026#34;, e.toString()); } return null; } } 无注册中心的简单rpc调用 核心实现 生产者： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 private static final Logger log = LoggerFactory.getLogger(RpcProvider.class); /** * 接口类 */ private Class\u0026lt;?\u0026gt; interfaceClass; /** * 具体实现类 */ private T interfaceImpl; public void setInterfaceImpl(T ref) { this.interfaceImpl = ref; } public RpcProvider\u0026lt;T\u0026gt; setInterfaceClass(Class\u0026lt;?\u0026gt; interfaceClass) { this.interfaceClass = interfaceClass; return this; } public void export(int port) { BioServer bioServer = new BioServer(); bioServer.export(port, interfaceClass, interfaceImpl); } } 消费者 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 public class RpcConsumer { private String address; private int port; private Class\u0026lt;?\u0026gt; interfaceClass; public RpcConsumer setAddress(String address) { this.address = address; return this; } public RpcConsumer setPort(int port) { this.port = port; return this; } public RpcConsumer setInterface(Class\u0026lt;?\u0026gt; interfaceClass) { this.interfaceClass = interfaceClass; return this; } public \u0026lt;T\u0026gt; T get() { BioClient client = new BioClient(); client.setAddress(address); client.setPort(port); // 实例化RPC代理处理器 RpcInvocationHandler handler = new RpcInvocationHandler(client); return (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(), new Class[]{interfaceClass}, handler); } } 代理类： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public class RpcInvocationHandler implements InvocationHandler { private BioClient bioClient; public RpcInvocationHandler(BioClient bioClient) { this.bioClient = bioClient; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { //构建rpc请求对象 RpcRequest rpcRequest = new RpcRequest(); rpcRequest.setMethodName(method.getName()) .setParameterTypes(method.getParameterTypes()) .setParameters(args); //发送请求 RpcResponse rpcResponse = bioClient.send(rpcRequest); // 返回响应结果 if (RpcResponse.SUCCEED == rpcResponse.getStatus()) { return rpcResponse.getData(); } throw new RuntimeException(rpcResponse.getMessage()); } } 生产者 实现接口 1 2 3 4 5 6 7 8 public class SimpleRpcProviderImpl implements ISayHello { @Override public String sayHello(String name) { return \u0026#34;hello,\u0026#34; + name + \u0026#34;\\n I am simple rpc provider.\u0026#34;; } } 调用类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class SimpleRpcBioProvider { public static void main(String[] args) { // 初始化实现类 SimpleRpcProviderImpl simpleRpcProvider = new SimpleRpcProviderImpl(); //初始化rpc请求类 RpcProvider\u0026lt;ISayHello\u0026gt; provider = new RpcProvider\u0026lt;\u0026gt;(); // 设置 接口类 和 具体实现类 provider.setInterfaceClass(ISayHello.class) .setInterfaceImpl(simpleRpcProvider); // 设置通信端口 provider.export(9090); } } 消费者 调用类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class SimpleRpcBioConsumer { public static void main(String[] args) { // 初始化消费者对象并设置参数 RpcConsumer rpcConsumer = new RpcConsumer(); rpcConsumer.setAddress(\u0026#34;127.0.0.1\u0026#34;) .setPort(9090) // 设置请求消费的接口 .setInterface(ISayHello.class); ISayHello iSayHello = rpcConsumer.get(); System.out.println(iSayHello.sayHello(\u0026#34;niki\u0026#34;)); } } 这样就实现了一个简单的rpc调用。\n使用zookeeper作为注册中心的简单实现 使用zookeeper后主要添加的东西是：\n生产者启动后向注册中心注册 消费者调用时先向注册中心请求节点信息（没有加缓存） 负载就使用随机访问。 核心实现 生产者 定义了几个参数，主要是实现类，接口类，注册中心的类。\n定义了启动bio socket通信的方法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 public class RpcProvider\u0026lt;T\u0026gt; { private static final Logger log = LoggerFactory.getLogger(RpcProvider.class); private T interfaceImpl; private Class\u0026lt;?\u0026gt; interfaceClass; private RpcZKRegistryService rpcZKRegistryService; public void setInterfaceImpl(T interfaceImpl) { this.interfaceImpl = interfaceImpl; } public RpcProvider\u0026lt;T\u0026gt; setInterfaceClass(Class\u0026lt;?\u0026gt; interfaceClass) { this.interfaceClass = interfaceClass; return this; } public RpcProvider\u0026lt;T\u0026gt; setRpcZKRegistryService(String zkConnectString) { this.rpcZKRegistryService = new RpcZKRegistryService(zkConnectString); return this; } public void export(int port) { ProviderInfo providerInfo = new ProviderInfo(); try { providerInfo.setAddress(InetAddress.getLocalHost().getHostAddress()) .setPort(port) .setId(interfaceClass.getName()); // 将生产者信息注册到zk注册中心 rpcZKRegistryService.register(providerInfo); BioServer bioServer = new BioServer(); bioServer.export(port, interfaceClass, interfaceImpl); } catch (Exception e) { log.error(\u0026#34; zookeeper server start failed:{}\u0026#34;, e.toString()); } } } 消费者 定义了要请求的接口类，注册中心的调用类\n定义了请求，获取节点，负载等方法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 public class RpcConsumer { private String azConnectString; /** * 请求的接口类 */ private Class\u0026lt;?\u0026gt; interfaceClass; private RpcZKRegistryService rpcZKRegistryService; public RpcConsumer setZKConnectString(String zkConnectString) { this.rpcZKRegistryService = new RpcZKRegistryService(zkConnectString); return this; } public RpcConsumer setInterface(Class\u0026lt;?\u0026gt; interfaceClass) { this.interfaceClass = interfaceClass; return this; } public \u0026lt;T\u0026gt; T get() { List\u0026lt;ProviderInfo\u0026gt; providers = getProviders(); ProviderInfo provider = chooseTarget(providers); BioClient bioClient = new BioClient(); bioClient.setAddress(provider.getAddress()); bioClient.setPort(provider.getPort()); RpcInvocationHandler handler = new RpcInvocationHandler(bioClient); return (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(), new Class[]{interfaceClass}, handler); } /** * 获取所有的生产者信息 * * @return */ private List\u0026lt;ProviderInfo\u0026gt; getProviders() { //订阅服务 rpcZKRegistryService.subscribe(interfaceClass.getName()); //获取所有的生产者信息 Map\u0026lt;String, ProviderInfo\u0026gt; providers = rpcZKRegistryService.getRemoteProviders(); return new ArrayList\u0026lt;\u0026gt;(providers.values()); } /** * 模拟负载均衡 * * @param providerInfos 生产者列表 * @return */ private static ProviderInfo chooseTarget(List\u0026lt;ProviderInfo\u0026gt; providerInfos) { if (providerInfos == null || providerInfos.isEmpty()) { throw new RuntimeException(\u0026#34;providers is empty\u0026#34;); } int index = new Random().nextInt(providerInfos.size()); return providerInfos.get(index); } } 代理类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public class RpcInvocationHandler implements InvocationHandler { private BioClient bioClient; public RpcInvocationHandler(BioClient bioClient) { this.bioClient = bioClient; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { //构建请求对象 RpcRequest rpcRequest = new RpcRequest(); rpcRequest.setMethodName(method.getName()) .setParameterTypes(method.getParameterTypes()) .setParameters(args); //发送rpc请求 RpcResponse rpcResponse = bioClient.send(rpcRequest); if (RpcResponse.SUCCEED == rpcResponse.getStatus()) { return rpcResponse.getData(); } throw new RuntimeException(rpcResponse.getMessage()); } } 注册中心 每个节点的信息\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 public class ProviderInfo { /** * 提供者id */ private String id; /** * 提供者的地址 */ private String address; /** * 提供者的端口 */ private int port; public String getId() { return id; } public ProviderInfo setId(String id) { this.id = id; return this; } public String getAddress() { return address; } public ProviderInfo setAddress(String address) { this.address = address; return this; } public int getPort() { return port; } public ProviderInfo setPort(int port) { this.port = port; return this; } public String toJsonString() { return JSON.toJSONString(this); } @Override public String toString() { return \u0026#34;ProviderInfo{\u0026#34; + \u0026#34;id=\u0026#39;\u0026#34; + id + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, address=\u0026#39;\u0026#34; + address + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, port=\u0026#34; + port + \u0026#39;}\u0026#39;; } } java调用zk的类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 public class RpcZKRegistryService { private static final Logger log = LoggerFactory.getLogger(RpcZKRegistryService.class); /** * 注册的名称 */ private static final String NAME_SPACE = \u0026#34;zk-rpc\u0026#34;; /** * 节点信息 */ private static final String RPC_PROVIDER_NODE = \u0026#34;/provider\u0026#34;; /** * 保存多个生产者信息 */ private final Map\u0026lt;String, ProviderInfo\u0026gt; remoteProviders = new HashMap\u0026lt;\u0026gt;(); /** * 客户端 */ private CuratorFramework zkClient; public RpcZKRegistryService(String zkConnectString) { // 设置重试次数和两次重试间隔时间 RetryPolicy retryPolicy = new RetryNTimes(3, 5000); //获取客户端 this.zkClient = CuratorFrameworkFactory.builder() .connectString(zkConnectString) .sessionTimeoutMs(10000) .retryPolicy(retryPolicy) .namespace(NAME_SPACE) .build(); this.zkClient.start(); } /** * 注册服务 * * @param providerInfo 生产者的信息 */ public void register(ProviderInfo providerInfo) { String nodePath = RPC_PROVIDER_NODE + \u0026#34;/\u0026#34; + providerInfo.getId(); try { // 判断节点是否存在，如果不存在则创建 Stat stat = zkClient.checkExists().forPath(nodePath); if (stat == null) { zkClient.create() .creatingParentsIfNeeded() .withMode(CreateMode.EPHEMERAL_SEQUENTIAL) .withACL(ZooDefs.Ids.OPEN_ACL_UNSAFE) .forPath(nodePath, providerInfo.toJsonString().getBytes()); } else { log.error(\u0026#34; thr provider already exists,{} \u0026#34;, providerInfo); } } catch (Exception e) { log.error(\u0026#34;zookeeper register provider failed,{}\u0026#34;, e.toString()); } } /** * 订阅服务 * * @param id 生产者的id或者接口名称 */ public void subscribe(String id) { try { List\u0026lt;String\u0026gt; providerIds = zkClient.getChildren().forPath(RPC_PROVIDER_NODE); for (String providerId : providerIds) { //如果与订阅服务相同，则获取节点信息 if (providerId.contains(id)) { String nodePath = RPC_PROVIDER_NODE + \u0026#34;/\u0026#34; + providerId; byte[] data = zkClient.getData().forPath(nodePath); ProviderInfo providerInfo = JSON.parseObject(data, ProviderInfo.class); this.remoteProviders.put(providerId, providerInfo); } } //添加监听事件 addProviderWatch(id); } catch (Exception e) { e.printStackTrace(); } } public void addProviderWatch(String id) { try { //创建子节点缓存 final PathChildrenCache childrenCache = new PathChildrenCache(this.zkClient, RPC_PROVIDER_NODE, true); childrenCache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE); //添加子节点监听事件 childrenCache.getListenable().addListener((client, event) -\u0026gt; { String nodePath = event.getData().getPath(); if (nodePath.contains(id)) { if (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_REMOVED)) { //节点移除 this.remoteProviders.remove(nodePath); } else if (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_ADDED)) { byte[] data = event.getData().getData(); ProviderInfo providerInfo = JSON.parseObject(data, ProviderInfo.class); //添加节点 this.remoteProviders.put(nodePath, providerInfo); } } }); } catch (Exception e) { e.printStackTrace(); } } /** * 获取节点列表 * * @return */ public Map\u0026lt;String, ProviderInfo\u0026gt; getRemoteProviders() { return remoteProviders; } } 生产者 实现接口 1 2 3 4 5 6 public class ZkProviderImpl implements ISayHello { @Override public String sayHello(String name) { return \u0026#34;hello \u0026#34; + name + \u0026#34;\\n i am zookeeper provider\u0026#34;; } } 调用类 通过传入调用的类，zk的地址，实现的类进行注册中心注册。然后启动连接。\n1 2 3 4 5 6 7 8 9 10 11 12 public class ZKProvider { public static void main(String[] args) { ZkProviderImpl zkProviderImpl = new ZkProviderImpl(); RpcProvider\u0026lt;ISayHello\u0026gt; provider = new RpcProvider\u0026lt;\u0026gt;(); provider.setInterfaceClass(ISayHello.class) .setRpcZKRegistryService(\u0026#34;localhost:2181\u0026#34;) .setInterfaceImpl(zkProviderImpl); provider.export(9090); } } 消费者 调用类 传入zk的地址，接口类。然后调用方法即可。\n1 2 3 4 5 6 7 8 9 10 11 12 public class ZKConsumer { public static void main(String[] args) { RpcConsumer rpcConsumer = new RpcConsumer(); rpcConsumer.setZKConnectString(\u0026#34;localhost:2181\u0026#34;); rpcConsumer.setInterface(ISayHello.class); ISayHello iSayHello = rpcConsumer.get(); System.out.println(iSayHello.sayHello(\u0026#34;zookeeper\u0026#34;)); } } ","permalink":"https://www.liunaijie.top/coding/micro_service/%E6%89%8B%E5%86%99rpc%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/","summary":"\u003ch1 id=\"背景\"\u003e背景\u003c/h1\u003e\n\u003cp\u003e当单体项目逐渐扩大后，一个项目编译，发布可能需要很久的时间，如果其中一个文件出现 bug，那么需要对整个项目进行打包发布。微服务就是对项目进行拆分，拆分成多个小项目，由这些小项目组成大项目。并且拆分成小项目后，其他单体项目中需要相同功能的地方就不用再次编写，直接用这个就可以了。有种\u003ccode\u003e分治\u003c/code\u003e的思想。\u003c/p\u003e\n\u003cp\u003e那么原来单体项目拆分后，随之而来就会出现一些问题。原来一个项目中直接调用即可，现在请求的类被拆分到其他项目中，如何进行请求，是采用 http 这种请求还是rpc？多个模块如果进行管理等等一系列问题。这里主要写一下 rpc 的理解。\u003c/p\u003e\n\u003cp\u003e在微服务中rpc又是重要的一环，现在主流的rpc框架有很多，比如阿里的\u003ccode\u003edubbo\u003c/code\u003e，微博的\u003ccode\u003eMotan\u003c/code\u003e,谷歌的\u003ccode\u003egRpc\u003c/code\u003e，还有\u003ccode\u003eThrift\u003c/code\u003e，现在主流的应该就这几种吧。按照文档学习了一下\u003ccode\u003edubbo\u003c/code\u003e如何使用后，发现并没有了解rpc是如何具体实现的。所以这篇文章记录了自己对rpc的一些理解与实战代码。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/liunaijie/learn-demo/tree/master/learn-demo-rpc\"\u003e代码链接\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"http-与-rpc-的对比\"\u003eHTTP 与 RPC 的对比\u003c/h1\u003e\n\u003cp\u003e其实就像一些技术一样，没有绝对好的技术，不然大家都去使用它了。都只是在不同场景下有各自的优势。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003erpc一般是自带负载均衡策略，而 http 一般是通过 nginx 这种来实现负载均衡\u003c/li\u003e\n\u003cli\u003erpc可以使用 tcp 协议也可以使用 http 协议，而 http 就只能使用 http 协议\u003c/li\u003e\n\u003cli\u003erpc可以自定义传输信息和序列化方法，减少传输报文大小。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以RPC主要用于公司内部的服务调用。HTTP主要用于对外的环境，浏览器接口调用，APP接口调用，第三方接口调用等。\u003c/p\u003e\n\u003ch1 id=\"rpc的主要实现步骤\"\u003eRPC的主要实现步骤\u003c/h1\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/RPC%E8%B0%83%E7%94%A8.png\" alt=\"RPC调用流程\"\u003e\u003c/p\u003e","title":"手写rpc简单实现"},{"content":"利用AOP和注解的方式实现redis的数据缓存\n代码链接\n之前一直没有用到redis，最近想学习一下redis，那么首先想到的就是将数据库的结果添加到缓存中，那么下次访问的时候如果命中缓存了就可以不用访问数据库，节省了时间。\n我在网上搜索了几篇文章，发现他们都是在每个业务逻辑里面添加缓存判断，伪代码如下：\n1 2 3 4 5 6 7 8 9 public Object method1(Object param1){ //如果param1的结果在缓存中存在，直接返回 if(redis has cache){ return redis result; } Object dbResult = dao.select(); redis.add(dbResult); return dbResult } 如果这样写，那么在每个需要缓存的地方都需要添加与本身业务无关的代码，对代码的侵入比较大。所以我利用aop和注解实现了一个方法，在需要缓存的地方添加该注解就可以实现缓存，不会对代码有侵入。最终实现调用的结果如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 @Override @EnableRedisCache(Key = \u0026#34;user\u0026#34;, Time = 100000) public ResultBean getUserById(Long id) { return ResultUtil.success(userDao.selectById(id)); } /** * 同上面的方法一样，这个没有添加 EnableRedisCache，所以每次都会走数据库， * 上面的方法添加了注解会先走缓存，如果没有再走数据库 * * @param id * @return */ @Override public ResultBean getUserNoCache(Long id) { return ResultUtil.success(userDao.selectById(id)); } 该实现主要是利用了aop原理，通过对EnableRedisCache注解进行拦截，如果有该注解就进入到拦截方法中。\n使用@interface即可声明一个注解，@Target({ElementType.METHOD})表示要用在方法上。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 @Target({ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) public @interface EnableRedisCache { /** * redis存储的key值 * 自定义redis存储的前缀，后面在redis存储的key值为：访问的类名+方法名+key值+参数名称+参数值 * @return */ String Key() default \u0026#34;\u0026#34;; /** * 设置一个默认的缓存时间 * * @return */ long Time() default 1000L; /** * 缓存的时间单位 */ TimeUnit TIME_UNIT() default TimeUnit.MILLISECONDS; } 然后实现对该注解的拦截：\n由于我之前没有调用过redis的api，所以闹出了一个问题，我想设置在redis中存储的时间时调用了operations.set(key,val,time)这个方法，我进入这个方法看了一眼也没有仔细看，以为这个就是调用了默认的时间单位设置过期时间。结果这样调用后不行了，进入redis查看数据也不对。就很奇妙。经朋友提现调用的方法不对，需要调用的是operations.set(key,val,time,time_unit)这样的方法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 @Aspect @Component public class RedisAspect { @Autowired private RedisTemplate redisTemplate; // 对有EnableRedisCache注解的方法进行拦截 @Around(\u0026#34;@annotation(enableRedisCache)\u0026#34;) public Object around(ProceedingJoinPoint proceedingJoinPoint, EnableRedisCache enableRedisCache) { // 将类名，方法名，注解中的key值，参数名称与参数值 作为redis存储的键 MethodSignature signature = (MethodSignature) proceedingJoinPoint.getSignature(); Method method = signature.getMethod(); String className = proceedingJoinPoint.getTarget().getClass().getName(); String methodName = signature.getName(); LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer(); String[] paramNames = u.getParameterNames(method); Object[] args = proceedingJoinPoint.getArgs(); String key = enableRedisCache.Key(); String redisKey = className + methodName + key; if (args != null \u0026amp;\u0026amp; paramNames != null) { for (int i = 0; i \u0026lt; args.length; i++) { redisKey += paramNames[i] + \u0026#34;:\u0026#34; + args[i]; } } long cacheTime = enableRedisCache.Time(); TimeUnit timeUnit = enableRedisCache.TIME_UNIT(); Object result = getCacheByRedisKey(proceedingJoinPoint, redisKey, cacheTime, timeUnit); return result; } private Object getCacheByRedisKey(ProceedingJoinPoint proceedingJoinPoint, String redisKey, long cacheTime, TimeUnit timeUnit) { // 从redis里面读取key为rediskey的值，如果不存在那么就走数据库，如果存在就将缓存中内容返回 ValueOperations\u0026lt;String, Object\u0026gt; operations = redisTemplate.opsForValue(); try { if (redisTemplate.hasKey(redisKey)) { ResultBean cacheResult = (ResultBean) operations.get(redisKey); if (cacheResult == null) { return null; } System.out.println(\u0026#34;通过缓存获取数据\u0026#34;); return cacheResult; } else { //如果缓存中没有数据，则执行方法，查询数据库，dbResult是请求方法返回的信息 // 我将注解放在service层上，并且service统一了返回信息格式 ResultBean dbResult = (ResultBean) proceedingJoinPoint.proceed(); System.out.println(\u0026#34;通过数据库获取数据\u0026#34;); // 要将返回信息和实体类都实现序列化的接口 operations.set(redisKey, dbResult, cacheTime, timeUnit); return dbResult; } } catch (Exception e) { e.printStackTrace(); } catch (Throwable throwable) { throwable.printStackTrace(); } return null; } } 这里只有查询的方法，后面添加更新和删除方法时需要将存储到redis中的key（这里用了类名、方法名等拼接）进行修改，不然执行更新和删除时不方便找的key。\n","permalink":"https://www.liunaijie.top/coding/spring/%E5%88%A9%E7%94%A8aop%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0redis%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%BC%93%E5%AD%98/","summary":"\u003cp\u003e\u003cstrong\u003e利用\u003ca href=\"https://www.liunaijie.top/2019/09/04/spring/Spring%E7%AC%94%E8%AE%B0/#AOP\"\u003eAOP\u003c/a\u003e和注解的方式实现redis的数据缓存\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/liunaijie/learn-demo/tree/master/learn-spring-boot-demo/learn-springboot-redis-demo\"\u003e代码链接\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e之前一直没有用到redis，最近想学习一下redis，那么首先想到的就是将数据库的结果添加到缓存中，那么下次访问的时候如果命中缓存了就可以不用访问数据库，节省了时间。\u003c/p\u003e\n\u003cp\u003e我在网上搜索了几篇文章，发现他们都是在每个业务逻辑里面添加缓存判断，伪代码如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emethod1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparam1\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e//如果param1的结果在缓存中存在，直接返回\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eredis\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehas\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecache\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eredis\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edbResult\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edao\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eselect\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"n\"\u003eredis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edbResult\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edbResult\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e如果这样写，那么在每个需要缓存的地方都需要添加与本身业务无关的代码，对代码的侵入比较大。所以我利用aop和注解实现了一个方法，在需要缓存的地方添加该注解就可以实现缓存，不会对代码有侵入。最终实现调用的结果如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nd\"\u003e@EnableRedisCache\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eKey\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;user\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eTime\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e100000\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eResultBean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetUserById\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eResultUtil\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esuccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euserDao\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eselectById\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* 同上面的方法一样，这个没有添加 EnableRedisCache，所以每次都会走数据库，\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* 上面的方法添加了注解会先走缓存，如果没有再走数据库\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e*\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* @param id\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e* @return\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e*/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eResultBean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetUserNoCache\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eLong\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eResultUtil\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esuccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euserDao\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eselectById\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e该实现主要是利用了aop原理，通过对\u003ccode\u003eEnableRedisCache\u003c/code\u003e注解进行拦截，如果有该注解就进入到拦截方法中。\u003c/p\u003e","title":"利用aop和注解实现redis对数据库的缓存"},{"content":"题目描述 我们把符合下列属性的数组 A 称作山脉：\nA.length \u0026gt;= 3 存在 0 \u0026lt; i \u0026lt; A.length - 1 使得A[0] \u0026lt; A[1] \u0026lt; \u0026hellip; A[i-1] \u0026lt; A[i] \u0026gt; A[i+1] \u0026gt; \u0026hellip; \u0026gt; A[A.length - 1] 给定一个确定为山脉的数组，返回任何满足 A[0] \u0026lt; A[1] \u0026lt; \u0026hellip; A[i-1] \u0026lt; A[i] \u0026gt; A[i+1] \u0026gt; \u0026hellip; \u0026gt; A[A.length - 1] 的 i 的值。\n示例 1：\n输入：[0,1,0] 输出：1 示例 2：\n输入：[0,2,1,0] 输出：1\n提示：\n3 \u0026lt;= A.length \u0026lt;= 10000 0 \u0026lt;= A[i] \u0026lt;= 10^6 A 是如上定义的山脉\n其实这就是一个寻找数组最大值的问题\n解题思路 扫描 查找数组的最大值，可以从前向后遍历查找即可\n代码实现：\n1 2 3 4 5 6 7 public int peakIndexInMountainArray(int[] A) { int i = 0; while (A[i] \u0026lt; A[i + 1]) { i++; } return i; } 二分查找 从左向右查找，顺序为递增\n从右向左查找，顺序为递增\n当两边相遇时就遇到了最大值。\n1 2 3 4 5 6 7 8 9 10 11 12 public int peakIndexInMountainArrayDouble(int[] A) { int left = 0, right = A.length - 1; while (left \u0026lt; right) { int mid = left + (right - left) / 2; if (A[mid] \u0026lt; A[mid + 1]) { left = mid + 1; } else { right = mid - 1; } } return left; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84%E7%9A%84%E5%B3%B0%E9%A1%B6%E7%B4%A2%E5%BC%95-leetcode852/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e我们把符合下列属性的数组 A 称作山脉：\u003c/p\u003e\n\u003cp\u003eA.length \u0026gt;= 3\n存在 0 \u0026lt; i \u0026lt; A.length - 1 使得A[0] \u0026lt; A[1] \u0026lt; \u0026hellip; A[i-1] \u0026lt; A[i] \u0026gt; A[i+1] \u0026gt; \u0026hellip; \u0026gt; A[A.length - 1]\n给定一个确定为山脉的数组，返回任何满足 A[0] \u0026lt; A[1] \u0026lt; \u0026hellip; A[i-1] \u0026lt; A[i] \u0026gt; A[i+1] \u0026gt; \u0026hellip; \u0026gt; A[A.length - 1] 的 i 的值。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cp\u003e输入：[0,1,0]\n输出：1\n示例 2：\u003c/p\u003e\n\u003cp\u003e输入：[0,2,1,0]\n输出：1\u003c/p\u003e\n\u003cp\u003e提示：\u003c/p\u003e\n\u003cp\u003e3 \u0026lt;= A.length \u0026lt;= 10000\n0 \u0026lt;= A[i] \u0026lt;= 10^6\nA 是如上定义的山脉\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e其实这就是一个寻找数组最大值的问题\u003c/p\u003e","title":"山脉数组的峰顶索引-LeetCode852"},{"content":"题目描述 给定一个单词列表，只返回可以使用在键盘同一行的字母打印出来的单词。键盘如下图所示。\n示例：\n输入: [\u0026ldquo;Hello\u0026rdquo;, \u0026ldquo;Alaska\u0026rdquo;, \u0026ldquo;Dad\u0026rdquo;, \u0026ldquo;Peace\u0026rdquo;] 输出: [\u0026ldquo;Alaska\u0026rdquo;, \u0026ldquo;Dad\u0026rdquo;]\n注意：\n你可以重复使用键盘上同一字符。 你可以假设输入的字符串将只包含字母。\n判断给出的字符是否全部在一行中\n解题思路 由于键盘行的内容是固定的，所以可以先将信息固定，然后将字符串与它对比，当有不匹配的就返回，完全匹配就添加到结果集中。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public String[] findWords(String[] words) { String[] lines = {\u0026#34;qwertyuiop\u0026#34;, \u0026#34;asdfghjkl\u0026#34;, \u0026#34;zxcvbnm\u0026#34;}; List\u0026lt;String\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); for (String word : words) { char[] chars = word.toLowerCase().toCharArray(); for (String line : lines) { if (line.contains(String.valueOf(chars[0]))) { boolean check = checkWord(line, chars); if (check) { result.add(word); } } } } return result.toArray(new String[result.size()]); } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E9%94%AE%E7%9B%98%E8%A1%8C-leetcode500/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个单词列表，只返回可以使用在键盘同一行的字母打印出来的单词。键盘如下图所示。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/keyboard.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e示例：\u003c/p\u003e\n\u003cp\u003e输入: [\u0026ldquo;Hello\u0026rdquo;, \u0026ldquo;Alaska\u0026rdquo;, \u0026ldquo;Dad\u0026rdquo;, \u0026ldquo;Peace\u0026rdquo;]\n输出: [\u0026ldquo;Alaska\u0026rdquo;, \u0026ldquo;Dad\u0026rdquo;]\u003c/p\u003e\n\u003cp\u003e注意：\u003c/p\u003e\n\u003cp\u003e你可以重复使用键盘上同一字符。\n你可以假设输入的字符串将只包含字母。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e判断给出的字符是否全部在一行中\u003c/p\u003e","title":"键盘行-LeetCode500"},{"content":"题目描述 给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。\n示例 1:\n输入: \u0026ldquo;Let\u0026rsquo;s take LeetCode contest\u0026rdquo; 输出: \u0026ldquo;s\u0026rsquo;teL ekat edoCteeL tsetnoc\u0026rdquo; 注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。\n根据示例可以看出，需要将每个单词反转后再根据原有顺序拼接起来\n解题思路 首先要分解出单词，然后将单词进行反转。将反转后的单词再进行拼接。\n在这里不借助java自带的方法\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public static String reverseWords2(String s) { StringBuilder stringBuilder = new StringBuilder(); int start = 0; for (int end = 0; end \u0026lt; s.length(); end++) { //分隔单词 if (s.charAt(end) == \u0026#39; \u0026#39;) { //将空格前的一个单词进行反转 append(stringBuilder, s, start, end - 1); //反转后还需要添加上空格 stringBuilder.append(\u0026#39; \u0026#39;); //记录下一个单词的开始位置 start = end + 1; } //判断是否达到最后 if (end == s.length() - 1) { append(stringBuilder, s, start, end); } } return stringBuilder.toString(); } private static void append(StringBuilder stringBuilder, String s, int start, int end) { for (int i = end; i \u0026gt;= start; i--) { stringBuilder.append(s.charAt(i)); } } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8Diii-leetcode557/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e输入: \u0026ldquo;Let\u0026rsquo;s take LeetCode contest\u0026rdquo;\n输出: \u0026ldquo;s\u0026rsquo;teL ekat edoCteeL tsetnoc\u0026rdquo;\n注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e根据示例可以看出，需要将每个单词反转后再根据原有顺序拼接起来\u003c/p\u003e","title":"反转字符串中的单词III-LeetCode557"},{"content":"题目描述 编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。\n不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。\n你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。\n示例 1：\n输入：[\u0026ldquo;h\u0026rdquo;,\u0026ldquo;e\u0026rdquo;,\u0026ldquo;l\u0026rdquo;,\u0026ldquo;l\u0026rdquo;,\u0026ldquo;o\u0026rdquo;] 输出：[\u0026ldquo;o\u0026rdquo;,\u0026ldquo;l\u0026rdquo;,\u0026ldquo;l\u0026rdquo;,\u0026ldquo;e\u0026rdquo;,\u0026ldquo;h\u0026rdquo;] 示例 2：\n输入：[\u0026ldquo;H\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;n\u0026rdquo;,\u0026ldquo;n\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;h\u0026rdquo;] 输出：[\u0026ldquo;h\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;n\u0026rdquo;,\u0026ldquo;n\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;H\u0026rdquo;]\n这个题目的要求是在O(1)的空间复杂度下完成反转\n解题思路 不能使用额外的空间，又需要将数组反转，我们可以将第一个与最后一个进行反转，然后第二个与倒数第二个进行反转\n代码实现：\n1 2 3 4 5 6 7 8 public void reverseString(char[] s) { int time = s.length / 2; for (int i = 0; i \u0026lt; time; i++) { char temp = s[i]; s[i] = s[s.length - 1 - i]; s[s.length - 1 - i] = temp; } } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2-leetcode344/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。\u003c/p\u003e\n\u003cp\u003e不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。\u003c/p\u003e\n\u003cp\u003e你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cp\u003e输入：[\u0026ldquo;h\u0026rdquo;,\u0026ldquo;e\u0026rdquo;,\u0026ldquo;l\u0026rdquo;,\u0026ldquo;l\u0026rdquo;,\u0026ldquo;o\u0026rdquo;]\n输出：[\u0026ldquo;o\u0026rdquo;,\u0026ldquo;l\u0026rdquo;,\u0026ldquo;l\u0026rdquo;,\u0026ldquo;e\u0026rdquo;,\u0026ldquo;h\u0026rdquo;]\n示例 2：\u003c/p\u003e\n\u003cp\u003e输入：[\u0026ldquo;H\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;n\u0026rdquo;,\u0026ldquo;n\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;h\u0026rdquo;]\n输出：[\u0026ldquo;h\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;n\u0026rdquo;,\u0026ldquo;n\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;H\u0026rdquo;]\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e这个题目的要求是在O(1)的空间复杂度下完成反转\u003c/p\u003e\n\u003ch1 id=\"解题思路\"\u003e解题思路\u003c/h1\u003e\n\u003cp\u003e不能使用额外的空间，又需要将数组反转，我们可以将第一个与最后一个进行反转，然后第二个与倒数第二个进行反转\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e代码实现：\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ereverseString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"反转字符串-LeetCode344"},{"content":"Docker是一个使用了Linux Namespace和Cgroups的虚拟化工具\n安装 mac\n从官网下载安装包进行安装即可\n树莓派\n使用ssh连接树莓派后执行\ncurl -sSL https://get.docker.com | sh\n就可以安装了，不过这是国外的安装源，速度可能会比较慢一些。\n如果在安装过程中提示缺少某些包根据提示进行安装即可。\n配置 mac\n修改国内源\n点击应用图标后打开daemon选项，在registry mirrors中可以看到我们的镜像下载源，我们可以搜索一些国内源进行替换。\n比如阿里云：\n进入阿里的容器镜像服务：https://cr.console.aliyun.com/cn-hangzhou/instances/repositories 进入镜像加速器，创建加速器 复制加速器地址进行替换 树莓派\n将docker设置为开机自启动\nsudo systemctl enable docker\n然后我们启动 Docker 守护程序，或者重启树莓派来完成启动docker\nsudo systemctl start docker\n将当前用户添加到docker用户组\n现在安装完成后的docker还只能由root用户或者docker组的用户使用，所以如果你不是使用的root用户，例如跟我一样使用的pi用户、或者其他用户。还需要将用户加到docker组中，下面这个命令就是将当前用户加到docker组中\nsudo usermod -aG docker $USER\n完成此操作后，当前用户还是不能操作docker，需要注销后重新连接即可。\n重新连接后运行docker run hello-world就可以运行hello-world的镜像了。\n常用命令 查找镜像 docker search [OPTIONS] TERM 比如我们需要查找一个MySQL镜像，我们可以docker search mysql\n获取镜像 docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签] 当我们对地址和标签缺省时，默认为当前仓库最新的镜像\n列出本地镜像 docker image 将列出下载到本地的所有镜像\n列出本地历史运行镜像 docker ps -a\n删除本地镜像 docker image rm [选项] \u0026lt;镜像1\u0026gt; [\u0026lt;镜像2\u0026gt; ...]\n进入镜像内部 docker exec -it id|name /bin/bash 可以选定镜像的id或者名称来进入镜像内部\nDockerFile 设置时区：\n1 TZ=Etc/GMT+7 参考 https://docker_practice.gitee.io/zh-cn/ ","permalink":"https://www.liunaijie.top/coding/cloud_native/docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/","summary":"\u003cp\u003eDocker是一个使用了Linux Namespace和Cgroups的虚拟化工具\u003c/p\u003e\n\u003ch1 id=\"安装\"\u003e安装\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003emac\u003c/p\u003e\n\u003cp\u003e从官网下载安装包进行安装即可\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e树莓派\u003c/p\u003e\n\u003cp\u003e使用ssh连接树莓派后执行\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ecurl -sSL https://get.docker.com | sh\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e就可以安装了，不过这是国外的安装源，速度可能会比较慢一些。\u003c/p\u003e\n\u003cp\u003e如果在安装过程中提示缺少某些包根据提示进行安装即可。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"配置\"\u003e配置\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003emac\u003c/p\u003e\n\u003cp\u003e修改国内源\u003c/p\u003e\n\u003cp\u003e点击应用图标后打开\u003ccode\u003edaemon\u003c/code\u003e选项，在\u003ccode\u003eregistry mirrors\u003c/code\u003e中可以看到我们的镜像下载源，我们可以搜索一些国内源进行替换。\u003c/p\u003e\n\u003cp\u003e比如阿里云：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e进入阿里的容器镜像服务：https://cr.console.aliyun.com/cn-hangzhou/instances/repositories\u003c/li\u003e\n\u003cli\u003e进入镜像加速器，创建加速器\u003c/li\u003e\n\u003cli\u003e复制加速器地址进行替换\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e树莓派\u003c/p\u003e\n\u003cp\u003e将docker设置为开机自启动\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esudo systemctl enable docker\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e然后我们启动 Docker 守护程序，或者重启树莓派来完成启动docker\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esudo systemctl start docker\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e将当前用户添加到docker用户组\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e现在安装完成后的docker还只能由\u003ccode\u003eroot\u003c/code\u003e用户或者\u003ccode\u003edocker\u003c/code\u003e组的用户使用，所以如果你不是使用的root用户，例如跟我一样使用的pi用户、或者其他用户。还需要将用户加到docker组中，下面这个命令就是将当前用户加到docker组中\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esudo usermod -aG docker $USER\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e完成此操作后，当前用户还是不能操作docker，需要注销后重新连接即可。\u003c/p\u003e\n\u003cp\u003e重新连接后运行\u003ccode\u003edocker run hello-world\u003c/code\u003e就可以运行hello-world的镜像了。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"常用命令\"\u003e常用命令\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e查找镜像\n\u003ccode\u003edocker search [OPTIONS] TERM\u003c/code\u003e\n比如我们需要查找一个MySQL镜像，我们可以\u003ccode\u003edocker search mysql\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e获取镜像\n\u003ccode\u003edocker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]\u003c/code\u003e\n当我们对地址和标签缺省时，默认为当前仓库最新的镜像\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e列出本地镜像\n\u003ccode\u003edocker image\u003c/code\u003e\n将列出下载到本地的所有镜像\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e列出本地历史运行镜像\n\u003ccode\u003edocker ps -a\u003c/code\u003e\u003c/p\u003e","title":"Docker使用笔记"},{"content":"在写博客的时候需要存储一些图片，网上有一些图床工具，有免费的也有收费的。免费的肯定没有保障，我就看到很多人使用一些免费的图床，然后提供方不再提供后图床就挂了。所以我准备使用github作为图床存储，有一定的网络延迟，但也可以接受。\n前期准备： 下载并安装picgo，选择自己系统对应的版本下载安装即可。\n注册github 创建存储图片的项目 这里要注意的是把项目设置成公开的，不用设置私有，不然我们图片是无法访问的。\n这里的图片其他人都是可以查看的，注意不要放一些与自己隐私相关的东西哦。。。\n生成github的token 打开github-\u0026gt;setting-\u0026gt;developer settings-\u0026gt;personal access tokens\n点击生成新的token\n这里我们填写我们这个token的名称和权限，权限就只选repo就可以。\n点击生成token，这时候会显示一串字符，这个信息只出现一次以后是看不到的，所以我们要把它保存下来。\npicgo设置 然后就是设置picgo了。\n仓库名称添加自己创建的仓库名称即可，分支就默认写master，token是我们上一步获取到的token\n最后就是自定义域名了，一般的规律是https://raw.githubusercontent.com/你的github名称/仓库名称/分支名称(默认就是master)\n也可以先预上传一张图片，然后新标签页打卡，查看图片地址，去掉图片名即可。\n然后将github设置成默认图床就可以了\n","permalink":"https://www.liunaijie.top/coding/tools/%E5%88%A9%E7%94%A8github%E5%92%8Cpicgo%E5%88%9B%E5%BB%BA%E5%9B%BE%E5%BA%8A/","summary":"\u003cp\u003e在写博客的时候需要存储一些图片，网上有一些图床工具，有免费的也有收费的。免费的肯定没有保障，我就看到很多人使用一些免费的图床，然后提供方不再提供后图床就挂了。所以我准备使用github作为图床存储，有一定的网络延迟，但也可以接受。\u003c/p\u003e\n\u003ch1 id=\"前期准备\"\u003e前期准备：\u003c/h1\u003e\n\u003cp\u003e下载并安装\u003ca href=\"https://github.com/Molunerfinn/PicGo\"\u003epicgo\u003c/a\u003e，选择自己系统对应的版本下载安装即可。\u003c/p\u003e\n\u003ch1 id=\"注册github\"\u003e注册github\u003c/h1\u003e\n\u003ch2 id=\"创建存储图片的项目\"\u003e创建存储图片的项目\u003c/h2\u003e\n\u003cp\u003e这里要注意的是把项目设置成\u003cem\u003e公开\u003c/em\u003e的，不用设置私有，不然我们图片是无法访问的。\u003c/p\u003e\n\u003cp\u003e这里的图片其他人都是可以查看的，注意不要放一些与自己隐私相关的东西哦。。。\u003c/p\u003e\n\u003ch2 id=\"生成github的token\"\u003e生成github的token\u003c/h2\u003e\n\u003cp\u003e打开\u003ccode\u003egithub\u003c/code\u003e-\u0026gt;\u003ccode\u003esetting\u003c/code\u003e-\u0026gt;\u003ccode\u003edeveloper settings\u003c/code\u003e-\u0026gt;\u003ccode\u003epersonal access tokens\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/1561714944899.jpg\" alt=\"设置的路径\"\u003e\u003c/p\u003e\n\u003cp\u003e点击生成新的token\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/1561715301721.jpg\" alt=\"token设置\"\u003e\u003c/p\u003e\n\u003cp\u003e这里我们填写我们这个token的名称和权限，权限就只选repo就可以。\u003c/p\u003e\n\u003cp\u003e点击生成token，这时候会显示一串字符，这个信息只出现一次以后是看不到的，所以我们要把它保存下来。\u003c/p\u003e\n\u003ch1 id=\"picgo设置\"\u003epicgo设置\u003c/h1\u003e\n\u003cp\u003e然后就是设置picgo了。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/1561715524096.jpg\" alt=\"picgo设置\"\u003e\u003c/p\u003e\n\u003cp\u003e仓库名称添加自己创建的仓库名称即可，分支就默认写master，token是我们上一步获取到的token\u003c/p\u003e\n\u003cp\u003e最后就是自定义域名了，一般的规律是\u003ccode\u003ehttps://raw.githubusercontent.com/你的github名称/仓库名称/分支名称(默认就是master)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e也可以先预上传一张图片，然后新标签页打卡，查看图片地址，去掉图片名即可。\u003c/p\u003e\n\u003cp\u003e然后将github设置成默认图床就可以了\u003c/p\u003e","title":"利用github和picgo创建图床"},{"content":"建立基础项目 建立一个maven项目，然后建立一个api模块，作为这个项目的总的调用接口\nlearn-dubbo-demo/ ├── simple-api https://github.com/liunaijie/learn-demo/tree/master/learn-dubbo-demo\nhttps://github.com/liunaijie/learn-demo/tree/master/learn-dubbo-demo/sample-api\n然后在api项目中创建接口，提供给生产者和消费者调用。\n我这里定义一个了sayhello()方法\n使用zookeeper作为服务注册中心 learn-dubbo-demo/ ├── simple-api ├── zookeeper-register └──zookeeper-consumer-sample └──zookeeper-provider-sample 这里使用zookeeper作为dubbo的服务注册中心，简单实现rpc的调用\n新建两个子项目，一个作为生产者（spring-boot-starter），一个作为消费者 （spring-boot-starter-web）\n在这两个module中都需要引入api的module\n生产者： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package cn.lnj.project.demo.dubbo.zookeeper.provider.service; import cn.lnj.project.demo.dubbo.api.IUserService; import org.springframework.beans.factory.annotation.Value; import org.apache.dubbo.config.annotation.Service; //service的导包要导入dubbo的包，而不是spring的包 //这个版本从配置文件读取，生产者调用的时候只要版本一致就可以调用到这个实现类中 //也就是说我们可以有多个版本的生产者 消费者调用时写不同的版本就可以调用不同的后台内容 @Service(version = \u0026#34;${service.api.version}\u0026#34;) public class UserServiceImpl implements IUserService { //从配置文件中读取我们这个项目的名称，其实就是我随便定义的返回信息 @Value(\u0026#34;${dubbo.application.name}\u0026#34;) private String serviceName; @Override public String sayHello(String name) { System.out.println(\u0026#34;zookeeper provider works\u0026#34;); return String.format(\u0026#34;[%s] : Hello,i am work, %s\u0026#34;, serviceName, name); } } 然后写生产者的配置文件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 spring: application: name: zookeeper-provider-sample dubbo: application: name: zookeeper-provider-sample registry: address: zookeeper://****:2181 #zk的注册地址 file: ${user.home}/dubbo-cache/${spring.application.name}/dubbo.cache scan: base-packages: cn.lnj.project.demo.dubbo.zookeeper.provider.service #实现类的包，dubbo会扫描这个包下，我们如果把实现类放在这个包外就注册不了 service: api: version: 0.0.1 #定义我们api的版本号 然后启动生产者会出现如下就表示我们生产者启动成功了。\n我又进入zk里面查看了这个生产者的信息：\n从这里我们可以看到存储了生产者信息的ip地址为192.168.0.18。所以这也就要求了消费者与生产者在一个网段，否则不会调用成功。如果我将生产者与zk放到同一台机器上，那么这个ip地址就会变成127.0.0.1，这样就要求消费者也要在同一台机器上。当然我们也可以修改本机的hosts来修改注册到zk上的地址，最终保证消费者能ping同生产者的ip才能调用成功。这个我认为是rpc调用与http调用的区别之一。\n2.2消费者 首先是配置文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 spring: application: name: zookeeper-consumer-sample dubbo: application: name: zookeeper-consumer-sample registry: address: zookeeper://****:2181 file: ${user.home}/dubbo-cache/${spring.application.name}/dubbo.cache server: port: 8080 servlet: context-path: /zookeeper-consumer #因为我用了web页面来进行调用，所以写了一个上下文 service: api: version: 0.0.1 #要与生产者里面的版本对应 然后又写了一个controller来提供页面调用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package cn.lnj.project.demo.dubbo.zookeeper.consumer.controller; import cn.lnj.project.demo.dubbo.api.IUserService; import org.apache.dubbo.config.annotation.Reference; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController public class UserController { // dubbo中使用 refernce 来实现注入并指明调用的版本 @Reference(interfaceClass = IUserService.class,version = \u0026#34;${service.api.version}\u0026#34;) private IUserService iUserService; @RequestMapping(value = \u0026#34;/hello\u0026#34;) public Object sayHello(@RequestParam(value = \u0026#34;name\u0026#34;) String name) { return iUserService.sayHello(name); } } 然后进行web页面调用：我传入了一个zookeeper的参数。出现了如下的结果就表示我们这个调用成功了\n","permalink":"https://www.liunaijie.top/coding/micro_service/dubbo%E7%AC%94%E8%AE%B0/","summary":"\u003ch2 id=\"建立基础项目\"\u003e建立基础项目\u003c/h2\u003e\n\u003cp\u003e建立一个\u003ccode\u003emaven\u003c/code\u003e项目，然后建立一个\u003ccode\u003eapi\u003c/code\u003e模块，作为这个项目的总的调用接口\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003elearn-dubbo-demo/\n├── simple-api\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca href=\"https://github.com/liunaijie/learn-demo/tree/master/learn-dubbo-demo\"\u003ehttps://github.com/liunaijie/learn-demo/tree/master/learn-dubbo-demo\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/liunaijie/learn-demo/tree/master/learn-dubbo-demo/sample-api\"\u003ehttps://github.com/liunaijie/learn-demo/tree/master/learn-dubbo-demo/sample-api\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e然后在api项目中创建接口，提供给生产者和消费者调用。\u003c/p\u003e\n\u003cp\u003e我这里定义一个了\u003ccode\u003esayhello()\u003c/code\u003e方法\u003c/p\u003e","title":"dubbo笔记"},{"content":"题目描述： 有效括号字符串为空 (\u0026quot;\u0026quot;)、\u0026quot;(\u0026quot; + A + \u0026ldquo;)\u0026rdquo; 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。 例如，\u0026quot;\u0026quot;，\u0026quot;()\u0026quot;，\u0026quot;(())()\u0026quot; 和 \u0026ldquo;(()(()))\u0026rdquo; 都是有效的括号字符串。 如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。 给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + \u0026hellip; + P_k，其中 P_i 是有效括号字符串原语。 对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。 示例 1： 输入：\u0026quot;(()())(())\u0026quot; 输出：\u0026quot;()()()\u0026quot; 解释： 输入字符串为 \u0026ldquo;(()())(())\u0026quot;，原语化分解得到 \u0026ldquo;(()())\u0026rdquo; + \u0026ldquo;(())\u0026quot;， 删除每个部分中的最外层括号后得到 \u0026ldquo;()()\u0026rdquo; + \u0026ldquo;()\u0026rdquo; = \u0026ldquo;()()()\u0026quot;。 示例 2： 输入：\u0026rdquo;(()())(())(()(()))\u0026rdquo; 输出：\u0026rdquo;()()()()(())\u0026quot; 解释： 输入字符串为 \u0026ldquo;(()())(())(()(()))\u0026quot;，原语化分解得到 \u0026ldquo;(()())\u0026rdquo; + \u0026ldquo;(())\u0026rdquo; + \u0026ldquo;(()(()))\u0026quot;， 删除每隔部分中的最外层括号后得到 \u0026ldquo;()()\u0026rdquo; + \u0026ldquo;()\u0026rdquo; + \u0026ldquo;()(())\u0026rdquo; = \u0026ldquo;()()()()(())\u0026quot;。 示例 3： 输入：\u0026rdquo;()()\u0026rdquo; 输出：\u0026rdquo;\u0026quot; 解释： 输入字符串为 \u0026ldquo;()()\u0026quot;，原语化分解得到 \u0026ldquo;()\u0026rdquo; + \u0026ldquo;()\u0026quot;， 删除每个部分中的最外层括号后得到 \u0026quot;\u0026rdquo; + \u0026quot;\u0026rdquo; = \u0026ldquo;\u0026quot;。 提示： S.length \u0026lt;= 10000 S[i] 为 \u0026ldquo;(\u0026rdquo; 或 \u0026ldquo;)\u0026rdquo; S 是一个有效括号字符串\n解题思路： 字符串S是一个有效括号字符串，那么我们可以先进行原语化分解，然后再对每个原语进行去除最外层括号。\n进行原语分解的时候我们可以定义一个值和一个字符串，遇到左括号这个值加一并将左括号添加到这个字符串上，遇到右括号这个值减一并且将右括号添加到字符串上，当这个值变成0并且字符串的长度为2的倍数时就可以认为这个字符串是一个原语。\n代码实现： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public String removeOuterParentheses(String S) { int left = 0; List\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;String\u0026gt;(); StringBuilder item = new StringBuilder(); for (int i = 0; i \u0026lt; S.length(); i++) { char c = S.charAt(i); if (c == \u0026#39;(\u0026#39;) { item.append(c); left += 1; } else if (c == \u0026#39;)\u0026#39;) { item.append(c); left -= 1; } if (left == 0 \u0026amp;\u0026amp; item.length() % 2 == 0) { list.add(item.toString()); item.setLength(0); } } StringBuilder result = new StringBuilder(); for (String temp : list) { temp = temp.substring(1, temp.length() - 1); result.append(temp); } return result.toString(); } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%88%A0%E9%99%A4%E6%9C%80%E5%A4%96%E5%B1%82%E7%9A%84%E6%8B%AC%E5%8F%B7leetcode1021/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述：\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e有效括号字符串为空 (\u0026quot;\u0026quot;)、\u0026quot;(\u0026quot; + A + \u0026ldquo;)\u0026rdquo; 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。\n例如，\u0026quot;\u0026quot;，\u0026quot;()\u0026quot;，\u0026quot;(())()\u0026quot; 和 \u0026ldquo;(()(()))\u0026rdquo; 都是有效的括号字符串。\n如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。\n给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + \u0026hellip; + P_k，其中 P_i 是有效括号字符串原语。\n对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。\n示例 1：\n输入：\u0026quot;(()())(())\u0026quot;\n输出：\u0026quot;()()()\u0026quot;\n解释：\n输入字符串为 \u0026ldquo;(()())(())\u0026quot;，原语化分解得到 \u0026ldquo;(()())\u0026rdquo; + \u0026ldquo;(())\u0026quot;，\n删除每个部分中的最外层括号后得到 \u0026ldquo;()()\u0026rdquo; + \u0026ldquo;()\u0026rdquo; = \u0026ldquo;()()()\u0026quot;。\n示例 2：\n输入：\u0026rdquo;(()())(())(()(()))\u0026rdquo;\n输出：\u0026rdquo;()()()()(())\u0026quot;\n解释：\n输入字符串为 \u0026ldquo;(()())(())(()(()))\u0026quot;，原语化分解得到 \u0026ldquo;(()())\u0026rdquo; + \u0026ldquo;(())\u0026rdquo; + \u0026ldquo;(()(()))\u0026quot;，\n删除每隔部分中的最外层括号后得到 \u0026ldquo;()()\u0026rdquo; + \u0026ldquo;()\u0026rdquo; + \u0026ldquo;()(())\u0026rdquo; = \u0026ldquo;()()()()(())\u0026quot;。\n示例 3：\n输入：\u0026rdquo;()()\u0026rdquo;\n输出：\u0026rdquo;\u0026quot;\n解释：\n输入字符串为 \u0026ldquo;()()\u0026quot;，原语化分解得到 \u0026ldquo;()\u0026rdquo; + \u0026ldquo;()\u0026quot;，\n删除每个部分中的最外层括号后得到 \u0026quot;\u0026rdquo; + \u0026quot;\u0026rdquo; = \u0026ldquo;\u0026quot;。\n提示：\nS.length \u0026lt;= 10000\nS[i] 为 \u0026ldquo;(\u0026rdquo; 或 \u0026ldquo;)\u0026rdquo;\nS 是一个有效括号字符串\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"解题思路\"\u003e解题思路：\u003c/h1\u003e\n\u003cp\u003e字符串S是一个有效括号字符串，那么我们可以先进行原语化分解，然后再对每个原语进行去除最外层括号。\u003c/p\u003e\n\u003cp\u003e进行原语分解的时候我们可以定义一个值和一个字符串，遇到左括号这个值加一并将左括号添加到这个字符串上，遇到右括号这个值减一并且将右括号添加到字符串上，当这个值变成0并且字符串的长度为2的倍数时就可以认为这个字符串是一个原语。\u003c/p\u003e","title":"删除最外层的括号—LeetCode1021"},{"content":"题目描述： 给定只含 \u0026ldquo;I\u0026rdquo;（增大）或 \u0026ldquo;D\u0026rdquo;（减小）的字符串 S ，令 N = S.length。\n返回 [0, 1, \u0026hellip;, N] 的任意排列 A 使得对于所有 i = 0, \u0026hellip;, N-1，都有：\n如果 S[i] == \u0026ldquo;I\u0026rdquo;，那么 A[i] \u0026lt; A[i+1]\n如果 S[i] == \u0026ldquo;D\u0026rdquo;，那么 A[i] \u0026gt; A[i+1]\n示例 1：\n输出：\u0026ldquo;IDID\u0026rdquo;\n输出：[0,4,1,3,2]\n示例 2：\n输出：\u0026ldquo;III\u0026rdquo;\n输出：[0,1,2,3]\n示例 3：\n输出：\u0026ldquo;DDI\u0026rdquo;\n输出：[3,2,0,1]\n提示：\n1 \u0026lt;= S.length \u0026lt;= 1000\nS 只包含字符 \u0026ldquo;I\u0026rdquo; 或 \u0026ldquo;D\u0026rdquo;。\n解题思路： 给定只包含I和D的字符串，让我们求符合规则的数组。首先确认的是数组内的数值为0到字符串的长度，如果字符串长度为2，那数组内的数值就是0，1，2。\n然后遇到I表示增大，遇到D表示减少，那么可以利用双指针，如果遇到I则从最小值0开始放然后加一，遇到D则从最大值开始放然后减一。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public int[] diStringMatch(String S) { int length = S.length(); int[] result = new int[length+1]; char[] chars = S.toCharArray(); int max = length; int min = 0; for (int i = 0; i \u0026lt; chars.length; i++) { char c = chars[i]; switch (c) { case \u0026#39;I\u0026#39;: result[i] = min; min++; break; case \u0026#39;D\u0026#39;: result[i] = max; max--; break; default: break; } } result[length]=max; return result; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%A2%9E%E5%87%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8Dleetcode942/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述：\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定只含 \u0026ldquo;I\u0026rdquo;（增大）或 \u0026ldquo;D\u0026rdquo;（减小）的字符串 S ，令 N = S.length。\u003c/p\u003e\n\u003cp\u003e返回 [0, 1, \u0026hellip;, N] 的任意排列 A 使得对于所有 i = 0, \u0026hellip;, N-1，都有：\u003c/p\u003e\n\u003cp\u003e如果 \u003ccode\u003eS[i]\u003c/code\u003e == \u0026ldquo;I\u0026rdquo;，那么 \u003ccode\u003eA[i]\u003c/code\u003e \u0026lt; \u003ccode\u003eA[i+1]\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e如果 \u003ccode\u003eS[i]\u003c/code\u003e == \u0026ldquo;D\u0026rdquo;，那么 \u003ccode\u003eA[i]\u003c/code\u003e \u0026gt; \u003ccode\u003eA[i+1]\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cp\u003e输出：\u0026ldquo;IDID\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e输出：[0,4,1,3,2]\u003c/p\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e\n\u003cp\u003e输出：\u0026ldquo;III\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e输出：[0,1,2,3]\u003c/p\u003e\n\u003cp\u003e示例 3：\u003c/p\u003e\n\u003cp\u003e输出：\u0026ldquo;DDI\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e输出：[3,2,0,1]\u003c/p\u003e\n\u003cp\u003e提示：\u003c/p\u003e\n\u003cp\u003e1 \u0026lt;= S.length \u0026lt;= 1000\u003c/p\u003e\n\u003cp\u003eS 只包含字符 \u0026ldquo;I\u0026rdquo; 或 \u0026ldquo;D\u0026rdquo;。\u003c/p\u003e\u003c/blockquote\u003e\n\u003c!-- more --\u003e\n\u003ch1 id=\"解题思路\"\u003e解题思路：\u003c/h1\u003e\n\u003cp\u003e给定只包含\u003ccode\u003eI\u003c/code\u003e和\u003ccode\u003eD\u003c/code\u003e的字符串，让我们求符合规则的数组。首先确认的是数组内的数值为0到字符串的长度，如果字符串长度为2，那数组内的数值就是0，1，2。\u003c/p\u003e\n\u003cp\u003e然后遇到\u003ccode\u003eI\u003c/code\u003e表示增大，遇到\u003ccode\u003eD\u003c/code\u003e表示减少，那么可以利用双指针，如果遇到\u003ccode\u003eI\u003c/code\u003e则从最小值\u003ccode\u003e0\u003c/code\u003e开始放然后加一，遇到\u003ccode\u003eD\u003c/code\u003e则从最大值开始放然后减一。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e代码实现：\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ediStringMatch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eS\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eS\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003echars\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eS\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etoCharArray\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003echars\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003echars\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eswitch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"k\"\u003ecase\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"sc\"\u003e\u0026#39;I\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"k\"\u003ecase\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"sc\"\u003e\u0026#39;D\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e]=\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"增减字符串匹配—LeetCode942"},{"content":"题目描述： 学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。 请你返回至少有多少个学生没有站在正确位置数量。该人数指的是：能让所有学生以 非递减 高度排列的必要移动人数。 示例： 输入：[1,1,4,2,1,3] 输出：3 解释： 高度为 4、3 和最后一个 1 的学生，没有站在正确的位置。 提示： 1 \u0026lt;= heights.length \u0026lt;= 100 1 \u0026lt;= heights[i] \u0026lt;= 100\n解题思路： 要计算没有站在正确位置的数量，首先要知道正确的排列是什么样的 所以我们先进行排序得到正确的排列 然后与原来的数组进行比较，看每一位上的数值是否一样，如果不一样则就是错误的 我使用arrays.sort进行排序 所有要先将原数组复制一下到新数组中，不然排序的时候会将原有的数组也进行改变，最终得到的结果为0\n1 2 3 4 5 6 7 8 9 10 11 public int heightChecker(int[] heights) { int[] after = Arrays.copyOf(heights, heights.length); Arrays.sort(after); int result = 0; for (int i = 0; i \u0026lt; after.length; i++) { if (after[i] != heights[i]) { result += 1; } } return result; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E9%AB%98%E5%BA%A6%E6%A3%80%E6%9F%A5%E5%99%A8leetcode1051/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述：\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。\n请你返回至少有多少个学生没有站在正确位置数量。该人数指的是：能让所有学生以 非递减 高度排列的必要移动人数。\n示例：\n输入：[1,1,4,2,1,3]\n输出：3\n解释：\n高度为 4、3 和最后一个 1 的学生，没有站在正确的位置。\n提示：\n1 \u0026lt;= heights.length \u0026lt;= 100\n1 \u0026lt;= heights[i] \u0026lt;= 100\u003c/p\u003e\u003c/blockquote\u003e","title":"高度检查器—LeetCode1051"},{"content":"题目描述 给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。\n例如，给定三角形：\n[ [2], [3,4], [6,5,7], [4,1,8,3] ] 自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。\n说明：\n如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分。\n题目中有一句话，每一步只能移动到下一行中相邻的结点中，所以在m行n列时，下一步的落地只能在m+1行n列或者m+1行n+1列中。\n解题思路 二维数组，从上向下 利用二维数组，将每一步到开始的步骤记录下来。\n以上面的例子为例：我们如果将每一个位置到顶点的最小步数记录下来，那么就是：\n1 2 3 4 5 6 [ [2], [5,6], [11,10,13], [15,11,18,16] ] 可以看出，第一层不变，每一行的最开始和结束两个位置的计算方法为当前元素加上上一行中的第一个或最后一个元素。即sum[i][0]=a[i][0]+sum[i-1][0]，sum[i][last]=a[i][last]+sum[i-1][last]\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 public static int minimumTotalTwo(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; triangle) { if (triangle.size() == 0) { return 0; } int[][] paths = new int[triangle.size()][triangle.size()]; //对第一层进行初始化 paths[0][0] = triangle.get(0).get(0); //从第二层开始 for (int i = 1; i \u0026lt; triangle.size(); i++) { List\u0026lt;Integer\u0026gt; single = triangle.get(i); for (int j = 0; j \u0026lt; single.size(); j++) { if (j == 0) { // 当前行第一个数字 是上一行的和与当前值累加 //因为第一个元素的上一步只能是第一个过来，m(i,j)的上一步为m(i-1,j-1)和m(i-1,j)由于j已经为0，所以j-1不存在，后面同理在当前行中的最后一个元素，在上一行中是没有的 paths[i][j] = paths[i - 1][0] + single.get(0); } else if (j == single.size() - 1) { // 当前行最后一个数字 paths[i][j] = paths[i - 1][j - 1] + single.get(j); } else { paths[i][j] = Math.min(paths[i - 1][j - 1], paths[i - 1][j]) + single.get(j); } } } int[] nums = paths[triangle.size() - 1]; int min = nums[0]; for (int temp : nums) { if (temp \u0026lt; min) { min = temp; } } return min; } 自下向上，一维数组 刚才我们是从开始向结束看，我们如果从结束向开始看呢？\n那么sum[i,j]=Math.min(sum[i+1,j],sum[i+1,j+1])+a[i,j]。我们可以临时构建一个一维数组，存储每一行到结束的最小路径，那么最后sum[0]就是最小路径\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public static int minimumTotal(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; triangle) { //入参判断 if (triangle.size() == 0) { return 0; } //由于j+1可能会造成越界，所以长度多加一位 int[] dp = new int[triangle.size() + 1]; // 从后向前进行计算 for (int i = triangle.size() - 1; i \u0026gt;= 0; i--) { //从后得到每一行 List\u0026lt;Integer\u0026gt; content = triangle.get(i); //这一行中这一列到终点的最小路径为上一行中能到达位置的最小值加上自身值 for (int j = 0; j \u0026lt; content.size(); j++) { dp[j] = Math.min(dp[j], dp[j + 1]) + content.get(j); } } return dp[0]; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C-leetcode120/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。\u003c/p\u003e\n\u003cp\u003e例如，给定三角形：\u003c/p\u003e\n\u003cp\u003e[\n[2],\n[3,4],\n[6,5,7],\n[4,1,8,3]\n]\n自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。\u003c/p\u003e\n\u003cp\u003e说明：\u003c/p\u003e\n\u003cp\u003e如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e题目中有一句话，每一步只能移动到下一行中相邻的结点中，所以在m行n列时，下一步的落地只能在m+1行n列或者m+1行n+1列中。\u003c/p\u003e","title":"三角形最小路径和—LeetCode120"},{"content":"题目描述： 给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。 给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。 示例: 输入：\u0026ldquo;23\u0026rdquo; 输出：[\u0026ldquo;ad\u0026rdquo;, \u0026ldquo;ae\u0026rdquo;, \u0026ldquo;af\u0026rdquo;, \u0026ldquo;bd\u0026rdquo;, \u0026ldquo;be\u0026rdquo;, \u0026ldquo;bf\u0026rdquo;, \u0026ldquo;cd\u0026rdquo;, \u0026ldquo;ce\u0026rdquo;, \u0026ldquo;cf\u0026rdquo;]. 说明: 尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。\n题目解读： 这个问题的场景就是我们的手机9宫格按键，当我们按下按键时计算出所有的字母组合，当我们按下第一个按键时，现在的组合次数为该按键对应的字母个数(m)。当我们再一次按下一个按键时，现在的次数变成了这一次按键对应的字母个数与上一次的次数相乘(m*n)\n题目解答： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public List\u0026lt;String\u0026gt; letterCombinations(String digits) { char[] chars = digits.toCharArray(); Map\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; keys = new HashMap\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt;(); keys.put(\u0026#34;2\u0026#34;, Arrays.asList(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;)); keys.put(\u0026#34;3\u0026#34;, Arrays.asList(\u0026#34;d\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;f\u0026#34;)); keys.put(\u0026#34;4\u0026#34;, Arrays.asList(\u0026#34;g\u0026#34;, \u0026#34;h\u0026#34;, \u0026#34;i\u0026#34;)); keys.put(\u0026#34;5\u0026#34;, Arrays.asList(\u0026#34;j\u0026#34;, \u0026#34;k\u0026#34;, \u0026#34;l\u0026#34;)); keys.put(\u0026#34;6\u0026#34;, Arrays.asList(\u0026#34;m\u0026#34;, \u0026#34;n\u0026#34;, \u0026#34;o\u0026#34;)); keys.put(\u0026#34;7\u0026#34;, Arrays.asList(\u0026#34;p\u0026#34;, \u0026#34;q\u0026#34;, \u0026#34;r\u0026#34;, \u0026#34;s\u0026#34;)); keys.put(\u0026#34;8\u0026#34;, Arrays.asList(\u0026#34;t\u0026#34;, \u0026#34;u\u0026#34;, \u0026#34;v\u0026#34;)); keys.put(\u0026#34;9\u0026#34;, Arrays.asList(\u0026#34;w\u0026#34;, \u0026#34;x\u0026#34;, \u0026#34;y\u0026#34;, \u0026#34;z\u0026#34;)); List\u0026lt;String\u0026gt; result = new ArrayList\u0026lt;String\u0026gt;(); for (char c : chars) { // 拿到输入的字符对应的字母集合 List values = keys.get(String.valueOf(c)); result = add(result, values); } return result; } /** * @param old 已经有的组合 * @param now 又要添加的字符 * @return */ private List\u0026lt;String\u0026gt; add(List\u0026lt;String\u0026gt; old, List\u0026lt;String\u0026gt; now) { if (old == null || old.size() == 0) { // 如果之前没有组合，那新的字母就是所有的组合 old = now; return old; } List\u0026lt;String\u0026gt; result = new ArrayList\u0026lt;String\u0026gt;(); for (String oldWord : old) { for (String newWord : now) { result.add(oldWord + newWord); } } return result; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88leetcode17/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述：\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。\n给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。\n示例:\n输入：\u0026ldquo;23\u0026rdquo;\n输出：[\u0026ldquo;ad\u0026rdquo;, \u0026ldquo;ae\u0026rdquo;, \u0026ldquo;af\u0026rdquo;, \u0026ldquo;bd\u0026rdquo;, \u0026ldquo;be\u0026rdquo;, \u0026ldquo;bf\u0026rdquo;, \u0026ldquo;cd\u0026rdquo;, \u0026ldquo;ce\u0026rdquo;, \u0026ldquo;cf\u0026rdquo;].\n说明:\n尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"题目解读\"\u003e题目解读：\u003c/h1\u003e\n\u003cp\u003e这个问题的场景就是我们的手机9宫格按键，当我们按下按键时计算出所有的字母组合，当我们按下第一个按键时，现在的组合次数为该按键对应的字母个数(m)。当我们再一次按下一个按键时，现在的次数变成了这一次按键对应的字母个数与上一次的次数相乘(m*n)\u003c/p\u003e","title":"电话号码的字母组合—LeetCode17"},{"content":"题目描述： 给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。 水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。 反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。 示例 1: 输入: [[1,1,0],[1,0,1],[0,0,0]] 输出:[[1,0,0],[0,1,0],[1,1,1]] 解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]； 然后反转图片: [[1,0,0],[0,1,0],[1,1,1]] 示例 2: 输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]] 输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] 说明: 1 \u0026lt;= A.length = A[0].length \u0026lt;= 20 0 \u0026lt;= A[i][j] \u0026lt;= 1\n解题思路： 将每一行进行翻转就是顺序转换，然后再进行反转图片就是将0转换为1，1转换为0，我们可以用 x=1-x来实现\n代码实现： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 /** * 二维数组循环先获取一维数组 * 对一维数组进行逆序 * 再进行取反 * * @param A * @return */ public int[][] flipAndInvertImage(int[][] A) { for (int[] temp : A) { int count = temp.length; for (int j = 0; j \u0026lt; count / 2; j++) { int x = temp[j]; temp[j] = temp[count - 1 - j]; temp[count - 1 - j] = x; } for (int i = 0; i \u0026lt; count; i++) { temp[i] = 1 - temp[i]; } } return A; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8F%8D%E8%BD%AC%E5%9B%BE%E5%83%8Fleetcode832/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述：\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。\n水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。\n反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。\n示例 1:\n输入: [[1,1,0],[1,0,1],[0,0,0]]\n输出:[[1,0,0],[0,1,0],[1,1,1]]\n解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；\n然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]\n示例 2:\n输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\n输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n说明:\n1 \u0026lt;= A.length = A[0].length \u0026lt;= 20\n0 \u0026lt;= A[i][j] \u0026lt;= 1\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"解题思路\"\u003e解题思路：\u003c/h1\u003e\n\u003cp\u003e将每一行进行翻转就是顺序转换，然后再进行反转图片就是将0转换为1，1转换为0，我们可以用 \u003ccode\u003ex=1-x\u003c/code\u003e来实现\u003c/p\u003e","title":"反转图像—LeetCode832"},{"content":"题目描述： 自除数 是指可以被它包含的每一位数除尽的数。 例如，128 是一个自除数，因为 128 % 1 == 0，128 % 2 == 0，128 % 8 == 0。 还有，自除数不允许包含 0 。 给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。 示例 1： 输入： 上边界left = 1, 下边界right = 22 输出： [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22] 注意： 每个输入参数的边界满足 1 \u0026lt;= left \u0026lt;= right \u0026lt;= 10000。\n解读： 判断一个数能不能被他的每一位除尽，那就要取出每一位数，进行计算，并且自除数不允许包含0，所以如果有0则直接判断不是自除数\n代码实现： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /** * 循环获取每一个边界内的数 * 判断这个数是否是自除数 * * @param left 上边界 * @param right 下边界 * @return */ public List\u0026lt;Integer\u0026gt; selfDividingNumbers(int left, int right) { List\u0026lt;Integer\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); for (int i = left; i \u0026lt;= right; i++) { if (isSelfDividing(i)) { result.add(i); } } return result; } /** * 用一个变量存储要计算的数字 * \u0026lt;p\u0026gt; * 1.获取最后一位数 * 2.当这位数字不为零并且能被要计算的数字整除时继续计算 否则返回false * 3.变量除以10 然后重复进行 1，2步操作 * * @param num * @return */ public boolean isSelfDividing(int num) { int temp = num; while (temp != 0) { int digit = temp % 10; if (digit == 0 || num % digit != 0) { return false; } temp /= 10; } return true; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E8%87%AA%E9%99%A4%E6%95%B0leetcode728/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述：\u003c/h1\u003e\n\u003cp\u003e自除数 是指可以被它包含的每一位数除尽的数。\n例如，128 是一个自除数，因为 128 % 1 == 0，128 % 2 == 0，128 % 8 == 0。\n还有，自除数不允许包含 0 。\n给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。\n示例 1：\n输入：\n上边界left = 1, 下边界right = 22\n输出： [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n注意：\n每个输入参数的边界满足 1 \u0026lt;= left \u0026lt;= right \u0026lt;= 10000。\u003c/p\u003e\n\u003ch1 id=\"解读\"\u003e解读：\u003c/h1\u003e\n\u003cp\u003e判断一个数能不能被他的每一位除尽，那就要取出每一位数，进行计算，并且自除数不允许包含0，所以如果有0则直接判断不是自除数\u003c/p\u003e","title":"自除数—LeetCode728"},{"content":"题目描述： 在二维平面上，有一个机器人从原点 (0, 0) 开始。给出它的移动顺序，判断这个机器人在完成移动后是否在 (0, 0) 处结束。 移动顺序由字符串表示。字符 move[i] 表示其第 i 次移动。机器人的有效动作有 R（右），L（左），U（上）和 D（下）。如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。 注意：机器人“面朝”的方向无关紧要。 “R” 将始终使机器人向右移动一次，“L” 将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。 示例 1: 输入: \u0026ldquo;UD\u0026rdquo; 输出: true 解释：机器人向上移动一次，然后向下移动一次。所有动作都具有相同的幅度，因此它最终回到它开始的原点。因此，我们返回 true。 示例 2: 输入: \u0026ldquo;LL\u0026rdquo; 输出: false 解释：机器人向左移动两次。它最终位于原点的左侧，距原点有两次 “移动” 的距离。我们返回 false，因为它在移动结束时没有返回原点。\n解读： 如果机器人能返回原点，那么他上和下移动的次数应该相同，同理左和右的次数也一样。那么我们就定义两个变量，分别记录上和左移动的步数，向上加一，向下减一，向左加一，向右减一。最后判断这两个变量如果都为零，那么就回到了原点。\n代码实现： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public boolean judgeCircle(String moves) { char[] chars = moves.toCharArray(); int left = 0; int up = 0; for (char c : chars) { switch (c) { case \u0026#39;U\u0026#39;: up++; break; case \u0026#39;D\u0026#39;: up--; break; case \u0026#39;L\u0026#39;: left++; break; case \u0026#39;R\u0026#39;: left--; break; default: break; } } if (left == 0 \u0026amp;\u0026amp; up == 0) { return true; } return false; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%83%BD%E5%90%A6%E8%BF%94%E5%9B%9E%E7%BB%88%E7%82%B9leetcode657/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述：\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在二维平面上，有一个机器人从原点 (0, 0) 开始。给出它的移动顺序，判断这个机器人在完成移动后是否在 (0, 0) 处结束。\n移动顺序由字符串表示。字符 move[i] 表示其第 i 次移动。机器人的有效动作有 R（右），L（左），U（上）和 D（下）。如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。\n注意：机器人“面朝”的方向无关紧要。 “R” 将始终使机器人向右移动一次，“L” 将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。\n示例 1:\n输入: \u0026ldquo;UD\u0026rdquo;\n输出: true\n解释：机器人向上移动一次，然后向下移动一次。所有动作都具有相同的幅度，因此它最终回到它开始的原点。因此，我们返回 true。\n示例 2:\n输入: \u0026ldquo;LL\u0026rdquo;\n输出: false\n解释：机器人向左移动两次。它最终位于原点的左侧，距原点有两次 “移动” 的距离。我们返回 false，因为它在移动结束时没有返回原点。\u003c/p\u003e\u003c/blockquote\u003e","title":"机器人能否返回终点—LeetCode657"},{"content":"题目描述： 国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如: \u0026ldquo;a\u0026rdquo; 对应 \u0026ldquo;.-\u0026rdquo;, \u0026ldquo;b\u0026rdquo; 对应 \u0026ldquo;-\u0026hellip;\u0026rdquo;, \u0026ldquo;c\u0026rdquo; 对应 \u0026ldquo;-.-.\u0026rdquo;, 等等。 为了方便，所有26个英文字母对应摩尔斯密码表如下： [\u0026quot;.-\u0026quot;,\u0026quot;-\u0026hellip;\u0026quot;,\u0026quot;-.-.\u0026quot;,\u0026quot;-..\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;..-.\u0026quot;,\u0026quot;\u0026ndash;.\u0026quot;,\u0026quot;\u0026hellip;.\u0026quot;,\u0026quot;..\u0026quot;,\u0026quot;.\u0026mdash;\u0026quot;,\u0026quot;-.-\u0026quot;,\u0026quot;.-..\u0026quot;,\u0026quot;\u0026ndash;\u0026quot;,\u0026quot;-.\u0026quot;,\u0026quot;\u0026mdash;\u0026quot;,\u0026quot;.\u0026ndash;.\u0026quot;,\u0026quot;\u0026ndash;.-\u0026quot;,\u0026quot;.-.\u0026quot;,\u0026quot;\u0026hellip;\u0026quot;,\u0026quot;-\u0026quot;,\u0026quot;..-\u0026quot;,\u0026quot;\u0026hellip;-\u0026quot;,\u0026quot;.\u0026ndash;\u0026quot;,\u0026quot;-..-\u0026quot;,\u0026quot;-.\u0026ndash;\u0026quot;,\u0026quot;\u0026ndash;..\u0026quot;] 给定一个单词列表，每个单词可以写成每个字母对应摩尔斯密码的组合。例如，\u0026ldquo;cab\u0026rdquo; 可以写成 \u0026ldquo;-.-..\u0026ndash;\u0026hellip;\u0026quot;，(即 \u0026ldquo;-.-.\u0026rdquo; + \u0026ldquo;-\u0026hellip;\u0026rdquo; + \u0026ldquo;.-\u0026ldquo;字符串的结合)。我们将这样一个连接过程称作单词翻译。 返回我们可以获得所有词不同单词翻译的数量。 例如: 输入: words = [\u0026ldquo;gin\u0026rdquo;, \u0026ldquo;zen\u0026rdquo;, \u0026ldquo;gig\u0026rdquo;, \u0026ldquo;msg\u0026rdquo;] 输出: 2 解释: 各单词翻译如下: \u0026ldquo;gin\u0026rdquo; -\u0026gt; \u0026ldquo;\u0026ndash;\u0026hellip;-.\u0026rdquo; \u0026ldquo;zen\u0026rdquo; -\u0026gt; \u0026ldquo;\u0026ndash;\u0026hellip;-.\u0026rdquo; \u0026ldquo;gig\u0026rdquo; -\u0026gt; \u0026ldquo;\u0026ndash;\u0026hellip;\u0026ndash;.\u0026rdquo; \u0026ldquo;msg\u0026rdquo; -\u0026gt; \u0026ldquo;\u0026ndash;\u0026hellip;\u0026ndash;.\u0026rdquo; 共有 2 种不同翻译, \u0026ldquo;\u0026ndash;\u0026hellip;-.\u0026rdquo; 和 \u0026ldquo;\u0026ndash;\u0026hellip;\u0026ndash;.\u0026rdquo;. 注意: 单词列表words 的长度不会超过 100。 每个单词 words[i]的长度范围为 [1, 12]。 每个单词 words[i]只包含小写字母。\n解题思路： 我们首先要根据给出的单词转换成摩尔斯密码\n利用一个数组按照字母顺序存储对应的密码值\n将一个单词的每一个字母根据对应位数的摩尔斯密码进行转换然后拼接\n这里利用set的不重复特性，将密码放入set集合中，如果有相同的密码则不会加入，最后获取set的长度即可。\n代码实现： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /** * 利用set不能重复的特性 * 将每个单词获取密码 * 将密码放到set中，由于不能充分，所以最后获取set的长度即可 * * @param words * @return */ public int uniqueMorseRepresentations(String[] words) { Set\u0026lt;String\u0026gt; set = new HashSet\u0026lt;String\u0026gt;(); String[] password = {\u0026#34;.-\u0026#34;, \u0026#34;-...\u0026#34;, \u0026#34;-.-.\u0026#34;, \u0026#34;-..\u0026#34;, \u0026#34;.\u0026#34;, \u0026#34;..-.\u0026#34;, \u0026#34;--.\u0026#34;, \u0026#34;....\u0026#34;, \u0026#34;..\u0026#34;, \u0026#34;.---\u0026#34;, \u0026#34;-.-\u0026#34;, \u0026#34;.-..\u0026#34;, \u0026#34;--\u0026#34;, \u0026#34;-.\u0026#34;, \u0026#34;---\u0026#34;, \u0026#34;.--.\u0026#34;, \u0026#34;--.-\u0026#34;, \u0026#34;.-.\u0026#34;, \u0026#34;...\u0026#34;, \u0026#34;-\u0026#34;, \u0026#34;..-\u0026#34;, \u0026#34;...-\u0026#34;, \u0026#34;.--\u0026#34;, \u0026#34;-..-\u0026#34;, \u0026#34;-.--\u0026#34;, \u0026#34;--..\u0026#34;}; for (String word : words) { StringBuilder pwd = new StringBuilder(); for (int i = 0; i \u0026lt; word.length(); i++) { pwd.append(password[word.charAt(i) - 97]); } set.add(pwd.toString()); } return set.size(); } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%94%AF%E4%B8%80%E6%91%A9%E5%B0%94%E6%96%AF%E5%AF%86%E7%A0%81%E8%AF%8Dleetcode804/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述：\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如: \u0026ldquo;a\u0026rdquo; 对应 \u0026ldquo;.-\u0026rdquo;, \u0026ldquo;b\u0026rdquo; 对应 \u0026ldquo;-\u0026hellip;\u0026rdquo;, \u0026ldquo;c\u0026rdquo; 对应 \u0026ldquo;-.-.\u0026rdquo;, 等等。\n为了方便，所有26个英文字母对应摩尔斯密码表如下：\n[\u0026quot;.-\u0026quot;,\u0026quot;-\u0026hellip;\u0026quot;,\u0026quot;-.-.\u0026quot;,\u0026quot;-..\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;..-.\u0026quot;,\u0026quot;\u0026ndash;.\u0026quot;,\u0026quot;\u0026hellip;.\u0026quot;,\u0026quot;..\u0026quot;,\u0026quot;.\u0026mdash;\u0026quot;,\u0026quot;-.-\u0026quot;,\u0026quot;.-..\u0026quot;,\u0026quot;\u0026ndash;\u0026quot;,\u0026quot;-.\u0026quot;,\u0026quot;\u0026mdash;\u0026quot;,\u0026quot;.\u0026ndash;.\u0026quot;,\u0026quot;\u0026ndash;.-\u0026quot;,\u0026quot;.-.\u0026quot;,\u0026quot;\u0026hellip;\u0026quot;,\u0026quot;-\u0026quot;,\u0026quot;..-\u0026quot;,\u0026quot;\u0026hellip;-\u0026quot;,\u0026quot;.\u0026ndash;\u0026quot;,\u0026quot;-..-\u0026quot;,\u0026quot;-.\u0026ndash;\u0026quot;,\u0026quot;\u0026ndash;..\u0026quot;]\n给定一个单词列表，每个单词可以写成每个字母对应摩尔斯密码的组合。例如，\u0026ldquo;cab\u0026rdquo; 可以写成 \u0026ldquo;-.-..\u0026ndash;\u0026hellip;\u0026quot;，(即 \u0026ldquo;-.-.\u0026rdquo; + \u0026ldquo;-\u0026hellip;\u0026rdquo; + \u0026ldquo;.-\u0026ldquo;字符串的结合)。我们将这样一个连接过程称作单词翻译。\n返回我们可以获得所有词不同单词翻译的数量。\n例如:\n输入: words = [\u0026ldquo;gin\u0026rdquo;, \u0026ldquo;zen\u0026rdquo;, \u0026ldquo;gig\u0026rdquo;, \u0026ldquo;msg\u0026rdquo;]\n输出: 2\n解释:\n各单词翻译如下:\n\u0026ldquo;gin\u0026rdquo; -\u0026gt; \u0026ldquo;\u0026ndash;\u0026hellip;-.\u0026rdquo;\n\u0026ldquo;zen\u0026rdquo; -\u0026gt; \u0026ldquo;\u0026ndash;\u0026hellip;-.\u0026rdquo;\n\u0026ldquo;gig\u0026rdquo; -\u0026gt; \u0026ldquo;\u0026ndash;\u0026hellip;\u0026ndash;.\u0026rdquo;\n\u0026ldquo;msg\u0026rdquo; -\u0026gt; \u0026ldquo;\u0026ndash;\u0026hellip;\u0026ndash;.\u0026rdquo;\n共有 2 种不同翻译, \u0026ldquo;\u0026ndash;\u0026hellip;-.\u0026rdquo; 和 \u0026ldquo;\u0026ndash;\u0026hellip;\u0026ndash;.\u0026rdquo;.\n注意:\n单词列表words 的长度不会超过 100。\n每个单词 \u003ccode\u003ewords[i]\u003c/code\u003e的长度范围为 [1, 12]。\n每个单词 \u003ccode\u003ewords[i]\u003c/code\u003e只包含小写字母。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"解题思路\"\u003e解题思路：\u003c/h1\u003e\n\u003cp\u003e我们首先要根据给出的单词转换成摩尔斯密码\u003c/p\u003e\n\u003cp\u003e利用一个数组按照字母顺序存储对应的密码值\u003c/p\u003e\n\u003cp\u003e将一个单词的每一个字母根据对应位数的摩尔斯密码进行转换然后拼接\u003c/p\u003e\n\u003cp\u003e这里利用set的不重复特性，将密码放入set集合中，如果有相同的密码则不会加入，最后获取set的长度即可。\u003c/p\u003e","title":"唯一摩尔斯密码词—LeetCode804"},{"content":"题目描述： 你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。 你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。 示例: 输入: 4 输出: false 解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛； 因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。 思路： 先考虑一下什么情况会输呢，就是最后的石头被对手拿走，那么只要保证最后剩余1-3块石头我们即可获胜。如何能确保最后一定剩余1-3块呢，就要我们在每一步的时候跟对手拿的块数总和等于4。所以我们这道题就可以判断总块数是不是4的倍数，如果不是我们就可以赢。\n代码实现： 所以这道题用代码写起来就很简单了，判断是否是4的倍数，或对4取余是否等于0\n1 2 3 4 5 6 7 public boolean canWinNim(int n) { int nim = n % 4; if (nim != 0) { return true; } return false; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/nim%E6%B8%B8%E6%88%8Fleetcode292/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述：\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。\n你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。\n示例:\n输入: 4\n输出: false\n解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；\n因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"思路\"\u003e思路：\u003c/h1\u003e\n\u003cp\u003e先考虑一下什么情况会输呢，就是最后的石头被对手拿走，那么只要保证最后剩余1-3块石头我们即可获胜。如何能确保最后一定剩余1-3块呢，就要我们在每一步的时候跟对手拿的块数总和等于4。所以我们这道题就可以判断总块数是不是4的倍数，如果不是我们就可以赢。\u003c/p\u003e","title":"Nim游戏—LeetCode292"},{"content":"安装 mac 通过brew安装 1 brew install git 通过安装包安装 去官网下载mac系统的安装包，下载完成后安装即可\nwindows 去官网下载Windows系统的安装包，除了选择安装目录时修改为自己想要的目录，其他一直点击next即可\n配置 安装完git后我们需要配置个人信息，姓名和邮箱，这些信息在以后提交时都会显示在提交信息中\n1 2 3 4 5 6 # 全局配置 整体有效 git config --global user.name \u0026#34;提交时显示的名字\u0026#34; git config --global user.email \u0026#34;提交时显示的邮箱\u0026#34; # 局部配置 对单个项目有效，如果进行了局部配置，会覆盖全局配置 git config --local user.name \u0026#34;提交时显示的名字\u0026#34; git config --local user.email \u0026#34;提交时显示的邮箱\u0026#34; 配置完成后我们可以通过命令来查看我们的配置信息，例如下面这就会显示我们配置的名称\n1 git config user.name 常用命令 初始化 1 git init 添加文件 1 git add test.md 提交注释 1 git commit -m \u0026#39;注释内容\u0026#39; 关联远程仓库 1 git remote add [shortname] [url]\t查看当前的远程库 1 2 3 4 5 6 7 git remote origin # 也可添加 -v 选项 显示对应的克隆地址 git remote -v origin git://github.com/schacon/ticgit.git (fetch) origin git://github.com/schacon/ticgit.git (push) 推送到远程仓库 1 2 # remote-name默认为origin ，branch-name默认为master git push [remote-name] [branch-name] 从远程仓库拉取代码 git pull\n修改注释 这个主要分为以下几种情况\n修改未推送到远程分支的上一次注释 修改已经推送到远程分支上的上一次注释 修改历史提交过的注释 修改已经推送到远程分支上的历史注释 先来看修改最近一次提交的注释 使用git commit --amend命令\n然后再出来的编辑页面，编辑注释信息，然后保存\n修改历史提交的注释 首先使用git rebase -i HEAD~5，这里的5表示向前推5次。\n然后在出来的页面中选择要修改从那一次，将前面的pick修改为edit。然后保存退出。\n这是再次执行git commit --amend就会修改我们刚刚选择的那个注释了，修改完成后保存。\n这时查看我们刚刚修改的那个变成了日志的最后一次提交了，所以我们要将其修改回原来的时间状态。\n使用git rebase --continue命令即可\n这时如果之前的提交注释都没有推送到远程上就完成了，但是如果推送到远程上，还需要将我们的注释修改推送到远程。 使用git push --force强制推送，这时要注意我们这时候推送上去的会覆盖原来的代码，所以最好在提交之前做一次拉取更新。\n删除关联远程仓库 shellgit remote rm [orgin_name]\n添加远程仓库地址 git remote add upstream xxx\n修改远程仓库地址 git remote set-url origin xxx\n查看远程分支 git branch -a\n删除远程分支 git push origin --delete \u0026lt;branchName\u0026gt;\n取消与远程分支的关联 git branch --unset-upstream\n推送到远程的新分支 git push origin upstream-master-local:upstream-master-upstream\n将本地的upstream-master-local分支推送到origin的upstream-master-upstream分支\n缓存区操作 1 2 3 4 5 6 7 8 9 10 11 12 # 将当前改变存储到缓存区内 git stash save ‘msg’ # 查看缓存区列表 git stash list # 从列表中恢复第一个 git stash pop # 从列表中恢复某一个 stash@{0} git stash apply stash@{0} # 删除某个缓存信息 git stash drop stash@{0} # 清空缓存区 git stash clear 参考 https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8\n","permalink":"https://www.liunaijie.top/coding/devops/git/git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/","summary":"\u003ch1 id=\"安装\"\u003e安装\u003c/h1\u003e\n\u003ch2 id=\"mac\"\u003emac\u003c/h2\u003e\n\u003ch3 id=\"通过brew安装\"\u003e通过\u003ccode\u003ebrew\u003c/code\u003e安装\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebrew install git\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"通过安装包安装\"\u003e通过安装包安装\u003c/h3\u003e\n\u003cp\u003e去官网下载mac系统的安装包，下载完成后安装即可\u003c/p\u003e\n\u003ch2 id=\"windows\"\u003ewindows\u003c/h2\u003e\n\u003cp\u003e去官网下载Windows系统的安装包，除了选择安装目录时修改为自己想要的目录，其他一直点击next即可\u003c/p\u003e\n\u003ch1 id=\"配置\"\u003e配置\u003c/h1\u003e\n\u003cp\u003e安装完git后我们需要配置个人信息，姓名和邮箱，这些信息在以后提交时都会显示在提交信息中\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 全局配置 整体有效\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config --global user.name \u003cspan class=\"s2\"\u003e\u0026#34;提交时显示的名字\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config --global user.email \u003cspan class=\"s2\"\u003e\u0026#34;提交时显示的邮箱\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 局部配置 对单个项目有效，如果进行了局部配置，会覆盖全局配置\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config --local user.name \u003cspan class=\"s2\"\u003e\u0026#34;提交时显示的名字\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config --local user.email \u003cspan class=\"s2\"\u003e\u0026#34;提交时显示的邮箱\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e配置完成后我们可以通过命令来查看我们的配置信息，例如下面这就会显示我们配置的名称\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config user.name\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c!-- more --\u003e\n\u003ch1 id=\"常用命令\"\u003e常用命令\u003c/h1\u003e\n\u003ch2 id=\"初始化\"\u003e初始化\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit init\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"添加文件\"\u003e添加文件\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit add test.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"提交注释\"\u003e提交注释\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit commit -m \u003cspan class=\"s1\"\u003e\u0026#39;注释内容\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"关联远程仓库\"\u003e关联远程仓库\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit remote add \u003cspan class=\"o\"\u003e[\u003c/span\u003eshortname\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003eurl\u003cspan class=\"o\"\u003e]\u003c/span\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"查看当前的远程库\"\u003e查看当前的远程库\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit remote\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eorigin\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 也可添加 -v 选项 显示对应的克隆地址\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit remote -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eorigin  git://github.com/schacon/ticgit.git \u003cspan class=\"o\"\u003e(\u003c/span\u003efetch\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eorigin  git://github.com/schacon/ticgit.git \u003cspan class=\"o\"\u003e(\u003c/span\u003epush\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"推送到远程仓库\"\u003e推送到远程仓库\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# remote-name默认为origin ，branch-name默认为master\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit push \u003cspan class=\"o\"\u003e[\u003c/span\u003eremote-name\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003ebranch-name\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"从远程仓库拉取代码\"\u003e从远程仓库拉取代码\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003egit pull\u003c/code\u003e\u003c/p\u003e","title":"git使用笔记"},{"content":"socket简介 https://blog.csdn.net/httpdrestart/article/details/80670388\n简单socket连接 基于TCP的socket连接 服务端 服务端的实现主要分为以下几步：\n第一步：创建socket服务，指定端口\n第二步：调用accep()方法开始监听，等待客户端的连接\n第三步：获取客户端的输入流\n第四步：响应客户端信息，获取输出流\n第五步：关闭资源\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 import java.io.*; import java.net.ServerSocket; import java.net.Socket; /** * tcp socket 服务端 * * @author LiuNaiJie * on 2019-05-08 */ public class TcpSocketServer { public static void main(String[] args) { try { // 1.连接socket连接，指定端口9090 ServerSocket serverSocket = new ServerSocket(9090); System.out.println(\u0026#34;服务端已启动，等待客户端连接\u0026#34;); // 2.等待客户端连接，此时处于阻塞状态 Socket socket = serverSocket.accept(); // 3.获取客户端的信息 // 字节流 InputStream inputStream = socket.getInputStream(); // 转换为字符流 InputStreamReader inputStreamReader = new InputStreamReader(inputStream); // 建立缓存 BufferedReader bufferedReader = new BufferedReader(inputStreamReader); String receiveLine; StringBuilder stringBuilder = new StringBuilder(); while ((receiveLine = bufferedReader.readLine()) != null) { System.out.println(\u0026#34;客户端的一行信息为：\u0026#34; + receiveLine); stringBuilder.append(receiveLine); } String receiveMsg = stringBuilder.toString(); System.out.println(\u0026#34;客户端的全部信息为：\u0026#34; + receiveMsg); // 4.返回信息 String returnMsg = \u0026#34;你好，socket\u0026#34;; OutputStream outputStream = socket.getOutputStream(); OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream); BufferedWriter bufferedWriter = new BufferedWriter(outputStreamWriter); bufferedWriter.write(returnMsg); bufferedWriter.flush(); // 5.关闭信息流 bufferedWriter.close(); outputStreamWriter.close(); outputStream.close(); bufferedReader.close(); inputStreamReader.close(); inputStream.close(); } catch (IOException e) { System.out.println(\u0026#34;服务端建立socket失败。。。。\u0026#34;); e.printStackTrace(); } } } 客户端 客户端的实现主要为以下几步：\n第一步：建立与服务器端的连接，创建客户端socket，指定服务端的地址与端口\n第二步：获取输出流，向服务器发送消息\n第三步：获取输入流，得到服务器响应的信息\n第四步：释放资源\n其中有一个点需要我们注意的是在第23行的*socket.shutdownOutput()*。我现在服务端是接收完客户端的全部数据后才进行返回信息，如果不添加这句服务端就会认为客户端没有发送完毕消息就会一直进入堵塞状态，并不会执行响应客户端的语句，具体大家可以注释掉这一行来查看具体效果。并且为了更加方便的演示效果，我在客户端发送的消息添加了一个换行符号。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 import java.io.*; import java.net.Socket; /** * tcp socket 客户端 * * @author LiuNaiJie * on 2019-05-08 */ public class TcpSocketClient { public static void main(String[] args) { try { // 1.连接与服务器的连接 Socket socket = new Socket(\u0026#34;127.0.0.1\u0026#34;, 9090); // 2.发送数据 OutputStream outputStream = socket.getOutputStream(); OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream); BufferedWriter bufferedWriter = new BufferedWriter(outputStreamWriter); bufferedWriter.write(\u0026#34;你好，我是客户端\\n这是第二行消息\u0026#34;); bufferedWriter.flush(); // 这一句必须添加 socket.shutdownOutput(); // 3.接收数据 InputStream inputStream = socket.getInputStream(); InputStreamReader inputStreamReader = new InputStreamReader(inputStream); BufferedReader bufferedReader = new BufferedReader(inputStreamReader); StringBuilder msg = new StringBuilder(); String line; while ((line = bufferedReader.readLine()) != null) { System.out.println(\u0026#34;返回信息的行：\u0026#34; + line); msg.append(line); } System.out.println(\u0026#34;全部信息为：\u0026#34; + msg.toString()); // 4.关闭连接 bufferedReader.close(); inputStreamReader.close(); inputStream.close(); bufferedWriter.close(); outputStreamWriter.close(); outputStream.close(); socket.close(); } catch (IOException e) { System.out.println(\u0026#34;客户端建立连接失败。。。\u0026#34;); e.printStackTrace(); } } } 运行结果：\n需要注意的是我们需要先启动服务端，然后再启动客户端。\n服务端：\n客户端：\n基于UDP的socket连接 udp的连接主要使用DatagramPacket进行信息传输\n服务器 服务端的实现主要是以下步骤：\n第一步：创建服务器端DatagramSocket,指定端口\n第二步：创建数据包，用于接收客户端发送的数据\n第三步：接收客户端发来的信息\n第四步：创建数据包，用于响应客户端\n第五步：响应客户端\n第六步：关闭资源\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 import java.io.IOException; import java.net.DatagramPacket; import java.net.DatagramSocket; import java.net.InetAddress; import java.net.SocketException; /** * udp socket 服务端 * * @author LiuNaiJie * on 2019-05-09 */ public class UdpSocketServer { public static void main(String[] args) { try { /* 接收客户端的数据 */ // 1.创建服务器端DatagramSocket，指定端口 DatagramSocket datagramSocket = new DatagramSocket(8888); System.out.println(\u0026#34;服务器已启动，等待客户端连接\u0026#34;); // 2.创建数据报，用于接收客户端发送的数据 byte[] data = new byte[1024]; DatagramPacket datagramPacket = new DatagramPacket(data, data.length); // 3.接收客户端发送的数据。 此方法在接收到数据报之前会一直阻塞 datagramSocket.receive(datagramPacket); // 4.读取数据 String info = new String(data, 0, datagramPacket.getLength()); System.out.println(\u0026#34;服务器接收到数据为：\u0026#34; + info); /* 向客户端响应数据 */ // 1.定义客户端的地址，端口号，数据 InetAddress inetAddress = datagramPacket.getAddress(); int port = datagramPacket.getPort(); byte[] returnMsg = (\u0026#34;我是服务器返回信息，你发送给我的信息为：\u0026#34; + info).getBytes(); // 2.创建数据报，包含响应的数据信息 DatagramPacket returnPacket = new DatagramPacket(returnMsg, returnMsg.length, inetAddress, port); // 3.响应客户端 datagramSocket.send(returnPacket); // 4.关闭资源 datagramSocket.close(); } catch (SocketException e) { System.out.println(\u0026#34;服务端启动socket失败。。。\u0026#34;); e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } } 客户端 客户端的实现主要是以下步骤：\n第一步：定义服务器的地址、端口号、数据\n第二步：创建数据报，包含发送的数据信息\n第三步：创建数据报，用于接收服务器响应的数据\n第四步：接收服务器响应的数据\n第五步：读取数据\n第六步：关闭资源\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 import java.io.IOException; import java.net.*; /** * @author LiuNaiJie * on 2019-05-09 */ public class UdpSocketClient { public static void main(String[] args) { try { /* 向服务器发送数据 */ // 1.定义服务器的地址，端口号，数据 InetAddress inetAddress = InetAddress.getByName(\u0026#34;localhost\u0026#34;); int port = 8888; byte[] data = \u0026#34;这是客户端发送的信息\u0026#34;.getBytes(); // 2.创建数据报，包含发送的数据信息 DatagramPacket datagramPacket = new DatagramPacket(data, data.length, inetAddress, port); // 3.创建DatagramSocket对象 DatagramSocket datagramSocket = new DatagramSocket(); // 4.向服务端发送数据报 datagramSocket.send(datagramPacket); /* 接收服务器响应的数据 */ // 1.创建数据报，接收服务器响应的数据 byte[] returnMsg = new byte[1024]; DatagramPacket returnPacket = new DatagramPacket(returnMsg, returnMsg.length); // 2.接收服务器响应的数据 datagramSocket.receive(returnPacket); // 3.读取数据 String reply = new String(returnMsg, 0, returnPacket.getLength()); System.out.println(\u0026#34;服务器返回信息为：\u0026#34; + reply); // 4.关闭资源 datagramSocket.close(); } catch (IOException e) { e.printStackTrace(); } } } 参考：\nhttps://blog.csdn.net/httpdrestart/article/details/80670388\n[https://shirukai.github.io/2018/09/30/Java Socket 基础以及NIO Socket/#2-5-基于UDP的Sokcet客户端](https://shirukai.github.io/2018/09/30/Java Socket 基础以及NIO Socket/#2-5-基于UDP的Sokcet客户端)\n","permalink":"https://www.liunaijie.top/coding/java/java_socket%E5%9F%BA%E7%A1%80/","summary":"\u003ch1 id=\"socket简介\"\u003esocket简介\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://blog.csdn.net/httpdrestart/article/details/80670388\"\u003ehttps://blog.csdn.net/httpdrestart/article/details/80670388\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"简单socket连接\"\u003e简单socket连接\u003c/h1\u003e\n\u003ch2 id=\"基于tcp的socket连接\"\u003e基于TCP的socket连接\u003c/h2\u003e\n\u003ch3 id=\"服务端\"\u003e服务端\u003c/h3\u003e\n\u003cp\u003e服务端的实现主要分为以下几步：\u003c/p\u003e\n\u003cp\u003e第一步：创建socket服务，指定端口\u003c/p\u003e\n\u003cp\u003e第二步：调用accep()方法开始监听，等待客户端的连接\u003c/p\u003e\n\u003cp\u003e第三步：获取客户端的输入流\u003c/p\u003e\n\u003cp\u003e第四步：响应客户端信息，获取输出流\u003c/p\u003e\n\u003cp\u003e第五步：关闭资源\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e30\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e31\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e32\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e33\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e34\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e35\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e36\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e37\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e38\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e39\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e40\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e41\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e42\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e43\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e44\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e45\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e46\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e47\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e48\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e49\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e50\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e51\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e52\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e53\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e54\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e55\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e56\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e57\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e58\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e59\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e60\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nn\"\u003ejava.io.*\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nn\"\u003ejava.net.ServerSocket\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nn\"\u003ejava.net.Socket\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"cm\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e * tcp socket 服务端\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e *\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e * @author LiuNaiJie\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e * on 2019-05-08\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e */\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eTcpSocketServer\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003etry\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 1.连接socket连接，指定端口9090\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eServerSocket\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eserverSocket\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eServerSocket\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e9090\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;服务端已启动，等待客户端连接\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 2.等待客户端连接，此时处于阻塞状态\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eSocket\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esocket\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eserverSocket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eaccept\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 3.获取客户端的信息\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 字节流\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eInputStream\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einputStream\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esocket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetInputStream\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 转换为字符流\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eInputStreamReader\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einputStreamReader\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eInputStreamReader\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einputStream\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 建立缓存\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eBufferedReader\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ebufferedReader\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eBufferedReader\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einputStreamReader\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ereceiveLine\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eStringBuilder\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estringBuilder\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eStringBuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003ereceiveLine\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ebufferedReader\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ereadLine\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;客户端的一行信息为：\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ereceiveLine\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003estringBuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceiveLine\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ereceiveMsg\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estringBuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;客户端的全部信息为：\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ereceiveMsg\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 4.返回信息\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ereturnMsg\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;你好，socket\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eOutputStream\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eoutputStream\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esocket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetOutputStream\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eOutputStreamWriter\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eoutputStreamWriter\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eOutputStreamWriter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoutputStream\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eBufferedWriter\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ebufferedWriter\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eBufferedWriter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoutputStreamWriter\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ebufferedWriter\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereturnMsg\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ebufferedWriter\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eflush\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 5.关闭信息流\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ebufferedWriter\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eoutputStreamWriter\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eoutputStream\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ebufferedReader\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003einputStreamReader\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003einputStream\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ecatch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIOException\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;服务端建立socket失败。。。。\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintStackTrace\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"客户端\"\u003e客户端\u003c/h3\u003e\n\u003cp\u003e客户端的实现主要为以下几步：\u003c/p\u003e","title":"Java Socket基础"},{"content":"题目描述 给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。\n在杨辉三角中，每个数是它左上方和右上方的数的和。\n示例:\n输入: 5 输出: [ [1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1] ]\n解题思路 杨辉三角是一个经典的数学问题，可以知道\nf(m,n)=f(m-1,n-1)+f(m-1,n)\n并且f(m,1)=1,f(m,m)=1\n用代码实现一下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; generate(int numRows) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); if (numRows \u0026lt; 1) { return result; } for (int i = 0; i \u0026lt; numRows; i++) { List\u0026lt;Integer\u0026gt; temp = Arrays.asList(new Integer[i+1]); temp.set(0, 1); temp.set(i, 1); for (int j = 1; j \u0026lt; i; j++) { temp.set(j, result.get(i - 1).get(j - 1) + result.get(i - 1).get(j)); } result.add(temp); } return result; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92-leetcode118/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e在杨辉三角中，每个数是它左上方和右上方的数的和。\u003c/p\u003e\n\u003cp\u003e示例:\u003c/p\u003e\n\u003cp\u003e输入: 5\n输出:\n[\n[1],\n[1,1],\n[1,2,1],\n[1,3,3,1],\n[1,4,6,4,1]\n]\u003c/p\u003e\u003c/blockquote\u003e","title":"杨辉三角—LeetCode118"},{"content":"在一些平台上我们可以轻松的使用命令安装nginx，但是安装完成的软件在某些时候可能并不能满足我们的需求，这时候可能就需要从源码来进行编译安装了。\n提前需要安装的软件 Ubuntu\n1 2 sudo apt-get install gcc automake autoconf make libpcre3 libpcre3-dev sudo apt-get install openssl # 开启ssl、https时需要 centos\n1 2 yum -y install gcc gcc-c++ zlib zlib-devel openssl openssl-devel pcre pcre-devel unzip zip yum -y install openssl-devel # 开启ssl、https时需要 树莓派\n1 sudo apt-get install -y make gcc libpcre3 libpcre3-dev libperl-dev libssl-dev libcurl4-openssl-dev 下载、解压 去官网找到最近的稳定版本，右键复制下载链接\n1 2 wget 下载链接 tar -zxvf 下载的压缩包 编译 进入解压完成的文件夹，执行编译命令\n1 ./configure 我常用的命令有这些：\n命令 说明 \u0026ndash;prefix=path 指定nginx的安装目录，默认是安装在/usr/local/nginx文件夹下 \u0026ndash;with-http_ssl_module 开启ssl模块，即网站支持https访问，这个默认是不开启的，需要编译时开启后配置文件中的配置才能生效 \u0026ndash;with-http_realip_module 开启realip模块，获取用户访问的真实ip 其他还有很多的配置项，可以从http://nginx.org/en/docs/configure.html网站上自行查阅并配置。\n我常用的编译命令就是：\n1 ./configure --with-http_ssl_module --with-http_realip_module 安装 执行make,make install\n运行 如果没有指定安装目录则默认安装在了/usr/local/nginx里面，进入该文件夹。\n执行./sbin/nginx即可开启nginx，如果提示权限不足，前面添加sudo即可。\n这时访问127.0.0.1即可看到nginx默认的访问页面。\n设置开机自启，修改/etc/rc.local文件，在后面添加/usr/local/nginx/sbin/nginx，如果权限不足，在前面添加sudo即可。\n修改配置文件，重新启动 nginx的配置文件在conf/nginx.conf文件中。在这个文件中对根据我们的需求进行修改即可。修改完成后执行./sbin/nginx -t这是测试我们的配置文件是否格式正确，也可直接使用./sbin/nginx -s reload执行重启命令，执行重启命令时也会执行检查配置文件格式。如果我们的配置文件格式有错误，都会在命令行中提示错误的位置，进入查看修改即可。\n一般的web服务器配置都像这样：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 #user nobody; ## 指定nginx的用户，默认为nobody 我们也可以修改为root worker_processes 1; # 以下几个配置都是指定日志文件和启动的id路径，不用管它 #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024; } # http模块，这是我们主要进行配置的地方 http { include mime.types; default_type application/octet-stream; # 设置访问日志的格式，log_format 是命令 main是这个格式的名称后面直接用名称就知道是这个格式了 再后面的就是具体的日志格式了 log_format main \u0026#39;$remote_addr $server_port - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39; \u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39; \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;; # 指定访问日志的存储路径和日志格式 access_log logs/access.log main; # ip黑名单(从其他配置文件中读取配置) include ip_deny.conf; server_tokens off; # 关闭nginx版本号 sendfile on; tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; gzip on; # 开启gzip压缩 # 负载均衡的配置，这个配置也值得拿出来单独记录，我这里就是简单的配置了一下 upstream users { server 192.168.0.13:8001 weight=2; #权重为2 3次访问中会有两次到这个机器上去 server 192.168.0.14:8001 weight=1; } # 设置无法通过其他域名,ip访问(即除了我们配置的server_name所有请求都会被阻拦) server { listen 80 default; server_name _name_; return 403; } # liunaijie page settings # server { listen 80; # server_name 可以配置多个域名 server_name www.liunaijie.top liunaijie.top; # 强制将http重定向到https rewrite ^ https://www.liunaijie.top$request_uri? permanent; } # HTTPS server # server { access_log logs/liunaijie.log main; listen 443 ssl; server_name www.liunaijie.top; charset utf-8; # 设置文件编码格式 ssl_certificate /usr/top.pem; #这两个是https的ssl证书路径 ssl_certificate_key /usr/key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1.2; ssl_prefer_server_ciphers on; # location是指定对域名下访问路径的处理 location / { # 什么都不写表示直接访问域名 access_log logs/blog.log main; root html; } # 对 /videos 开启文件访问 location /videos { alias /aaa/bbb/ccc/ddd/videos; # 指定文件夹 autoindex on; #开启索引 autoindex_localtime on; # 显示时间 autoindex_exact_size on; #显示文件大小 } # 这个是对我写的项目的一个配置 location /users { # 下面三行是开启 websocket 配置 proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; proxy_pass http://users; #开启负载均衡 # 解决跨域 add_header \u0026#39;Access-Control-Allow-Origin\u0026#39; \u0026#39;$http_origin\u0026#39;; add_header \u0026#39;Access-Control-Allow-Methods\u0026#39; \u0026#39;GET, POST, OPTIONS\u0026#39;; add_header \u0026#39;Access-Control-Allow-Headers\u0026#39; \u0026#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\u0026#39;; add_header \u0026#39;Access-Control-Allow-Credentials\u0026#39; \u0026#39;true\u0026#39;; } } } 停止 停止nginx有几种方式，使用nginx自己的停止方式或者找到nginx的进程然后杀掉他\nnginx -s quit这个命令是优雅的停止，会先完成当前正在进行的工作后再停止。 nginx -s stop这个就直接停止了，不管有没有正在进行的工作 kill nginx这个是使用的系统命令直接杀死进程。 ","permalink":"https://www.liunaijie.top/coding/devops/nginx/nginx%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/","summary":"\u003cp\u003e在一些平台上我们可以轻松的使用命令安装nginx，但是安装完成的软件在某些时候可能并不能满足我们的需求，这时候可能就需要从源码来进行编译安装了。\u003c/p\u003e\n\u003ch1 id=\"提前需要安装的软件\"\u003e提前需要安装的软件\u003c/h1\u003e\n\u003cp\u003eUbuntu\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo apt-get install gcc automake autoconf make libpcre3 libpcre3-dev\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo apt-get install openssl \u003cspan class=\"c1\"\u003e# 开启ssl、https时需要\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003ecentos\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eyum -y install gcc gcc-c++ zlib zlib-devel openssl openssl-devel pcre pcre-devel unzip zip\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eyum -y install openssl-devel \u003cspan class=\"c1\"\u003e# 开启ssl、https时需要\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e树莓派\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo apt-get install -y make gcc libpcre3 libpcre3-dev  libperl-dev libssl-dev libcurl4-openssl-dev\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c!-- more --\u003e\n\u003ch1 id=\"下载解压\"\u003e下载、解压\u003c/h1\u003e\n\u003cp\u003e去官网找到最近的稳定版本，右键复制下载链接\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ewget 下载链接\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etar -zxvf 下载的压缩包\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"编译\"\u003e编译\u003c/h1\u003e\n\u003cp\u003e进入解压完成的文件夹，执行编译命令\u003c/p\u003e","title":"nginx源码编译安装"},{"content":"题目描述： 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\n示例1：\n输入：[2,2,1] 输出：1 示例2：\n输入：[4,1,2,1,2] 输出：4 解题思路： 刚开始是这样想的，先进行排序，然后我们两个一组，如果这两个数字一样，则开始下一组。如果不一样，那么第一个就是我们要找的元素。我们这组元素是奇数个，所以如果前面的都是相同的，那最后剩下的这个元素就是我们要找的元素。\n代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public int singleNumber(int[] nums) { //排序 Arrays.sort(nums); // 默认第一个元素 int result = nums[0]; int count = nums.length; // 两个一组 for (int i = 0; i \u0026lt; count; i += 2) { int first = nums[i]; //如果是最后一个，那么直接返回 if (i == count - 1) { return first; } int second = nums[i + 1]; // 如果两个数字不一样，返回第一个数字 if (first != second) { return first; } } return result; } 提交后发现我这个代码运行需要9ms，然后看了前面的代码，发现了一个很好的点：利用异或操作。(两个数字异或，相同得0，不同得1)。\n代码如下：\n1 2 3 4 5 6 7 8 public int singleNumber(int[] nums) { //使用异或运算似的出现偶数次数的数组元素消除。 int result=nums[0]; for(int i=0;i\u0026lt;nums.length;i++){ result=result^nums[i]; } return result; } 是不是很简洁，而且速度也比我的快(1ms)~~~\n","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97--leetcode136/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述：\u003c/h1\u003e\n\u003cp\u003e给定一个\u003cstrong\u003e非空\u003c/strong\u003e整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\u003c/p\u003e\n\u003cp\u003e示例1：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入：[2,2,1]\n输出：1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e示例2：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入：[4,1,2,1,2]\n输出：4\n\u003c/code\u003e\u003c/pre\u003e\u003c!-- more --\u003e\n\u003ch1 id=\"解题思路\"\u003e解题思路：\u003c/h1\u003e\n\u003cp\u003e刚开始是这样想的，先进行排序，然后我们两个一组，如果这两个数字一样，则开始下一组。如果不一样，那么第一个就是我们要找的元素。我们这组元素是奇数个，所以如果前面的都是相同的，那最后剩下的这个元素就是我们要找的元素。\u003c/p\u003e\n\u003ch1 id=\"代码\"\u003e代码：\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003esingleNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e       \u003c/span\u003e\u003cspan class=\"c1\"\u003e//排序\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"n\"\u003eArrays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 默认第一个元素\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \t\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 两个一组\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"c1\"\u003e//如果是最后一个，那么直接返回\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 如果两个数字不一样，返回第一个数字\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\t\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e提交后发现我这个代码运行需要9ms，然后看了前面的代码，发现了一个很好的点：利用异或操作。(两个数字异或，相同得0，不同得1)。\u003c/p\u003e","title":"只出现一次的数字—LeetCode136"},{"content":"题目描述 请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。\n示例 1:\n输入: head = [4,5,1,9], node = 5 输出: [4,1,9] 解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -\u0026gt; 1 -\u0026gt; 9. 示例 2:\n输入: head = [4,5,1,9], node = 1 输出: [4,5,9] 解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -\u0026gt; 5 -\u0026gt; 9.\n说明:\n链表至少包含两个节点。 链表中所有节点的值都是唯一的。 给定的节点为非末尾节点并且一定是链表中的一个有效节点。 不要从你的函数中返回任何结果。\n解题思路 给定一个链表，一个节点，要求将这个节点删除，并且没有给出链表的头结点。\n先回想一下如果给出头结点要删除一个节点是怎样操作？\n是不是从头结点开始遍历，找到要删除的节点，然后将前面节点的后继改为找到节点的下个节点。\n我们现在找不到上一个节点，要怎样操作？\n可以这样做，看做删除后面的一个节点，然后将后面节点信息复制到当前节点，然后将后面的节点删除即可。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 public void deleteNode(ListNode node) { ListNode next = node.next; if (next == null) { node = null; return; } node.val = next.val; node.next = next.next; next = null; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9-leetcode237/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e输入: head = [4,5,1,9], node = 5\n输出: [4,1,9]\n解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -\u0026gt; 1 -\u0026gt; 9.\n示例 2:\u003c/p\u003e\n\u003cp\u003e输入: head = [4,5,1,9], node = 1\n输出: [4,5,9]\n解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -\u0026gt; 5 -\u0026gt; 9.\u003c/p\u003e\n\u003cp\u003e说明:\u003c/p\u003e\n\u003cp\u003e链表至少包含两个节点。\n链表中所有节点的值都是唯一的。\n给定的节点为非末尾节点并且一定是链表中的一个有效节点。\n不要从你的函数中返回任何结果。\u003c/p\u003e\u003c/blockquote\u003e","title":"删除链表中的节点—LeetCode237"},{"content":"背景 随着现在小程序的流行，许多软件也将web页面转移到小程序之中。让用户更方便的使用。当我们做了微信和支付宝两个的小程序后，意味着我们要将两个二维码展示给用户扫码。所以当需要将微信、支付宝小程序二维码合一，或者对其做一些自定义操作时，就不能再使用官方提供的二维码生成接口。\n微信、支付宝官方也提供了自定义二维码的文档：\n微信：https://developers.weixin.qq.com/miniprogram/introduction/qrcode.html\n支付宝：https://docs.alipay.com/mini/introduce/vzd5v0\n所以通过上面的设置就可以实现二维码合一的操作。\n原理解析 二维码存储的是一串信息，微信官网二维码里面可能存储的为：https://weixin.com?appid=123。支付宝二维码存储的可能是：https://alipay.com?appid=abc。这种有一定规则的信息。 我们通过两个的自定义设置，将访问两者小程序的二维码信息进行合一。比如，定义：https://www.abc.com，让微信和支付宝扫描到这个信息后都跳转到我们的小程序中。那就可以实现二维码合一。 代码实现 我们自定义了规则，就需要自己去生成二维码，而不能使用官方提供的接口进行生成了。\n使用java生成二维码并且添加logo图片，二维码下方添加说明文字的代码。为了生成的二维码好看一些，我的logo图片使用了圆角，白色背景。\n首先导入jar包\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.google.zxing\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.3.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 import com.google.zxing.BarcodeFormat; import com.google.zxing.EncodeHintType; import com.google.zxing.MultiFormatWriter; import com.google.zxing.common.BitMatrix; import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel; import org.apache.commons.lang.StringUtils; import javax.imageio.ImageIO; import java.awt.*; import java.awt.image.BufferedImage; import java.io.File; import java.util.HashMap; import java.util.Map; import java.util.Objects; /** * @author LiuNaiJie * on 2019-04-01 */ public class QrCodeUtils { /** * 黑色 */ private static final int QRCOLOR = 0xFF000000; /** * 白色 */ private static final int BGWHITE = 0xFFFFFFFF; /** * 二维码宽 */ private static final int WIDTH = 400; /** * 二维码高 */ private static final int HEIGHT = 400; /** * 用于设置QR二维码参数 */ private static Map\u0026lt;EncodeHintType, Object\u0026gt; hints = new HashMap\u0026lt;EncodeHintType, Object\u0026gt;() { private static final long serialVersionUID = 1L; { // 设置QR二维码的纠错级别（H为最高级别）具体级别信息 put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H); // 设置编码方式 put(EncodeHintType.CHARACTER_SET, \u0026#34;utf-8\u0026#34;); put(EncodeHintType.MARGIN, 0); } }; /** * @param logoFile logo图片 * @param codeFile 生成的二维码 * @param qrUrl 二维码内容 * @param note 二维码下方说明文字 */ public static void drawLogoQRCode(File logoFile, File codeFile, String qrUrl, String note) { try { MultiFormatWriter multiFormatWriter = new MultiFormatWriter(); // 参数顺序分别为：二维码内容，编码类型，生成图片宽度，生成图片高度，设置参数 BitMatrix bm = multiFormatWriter.encode(qrUrl, BarcodeFormat.QR_CODE, WIDTH, HEIGHT, hints); BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB); // 开始利用二维码数据创建Bitmap图片，分别设为黑（0xFFFFFFFF）白（0xFF000000）两色 for (int x = 0; x \u0026lt; WIDTH; x++) { for (int y = 0; y \u0026lt; HEIGHT; y++) { image.setRGB(x, y, bm.get(x, y) ? QRCOLOR : BGWHITE); } } int width = image.getWidth(); int height = image.getHeight(); //添加logo图片 if (Objects.nonNull(logoFile) \u0026amp;\u0026amp; logoFile.exists()) { // 构建绘图对象l Graphics2D g = image.createGraphics(); // 读取logo图片 BufferedImage logo = ImageIO.read(logoFile); // 开始绘制logo图片 logo大小为整体的 1/4 开始绘制的x,y为3/8处。 g.drawImage(logo, width * 3 / 8, height * 3 / 8, width / 4, height / 4, null); g.dispose(); logo.flush(); } // 添加下方说明文字 if (StringUtils.isNotEmpty(note)) { // 新的图片，把带logo的二维码下面加上文字 BufferedImage outImage = new BufferedImage(400, 445, BufferedImage.TYPE_4BYTE_ABGR); Graphics2D outg = outImage.createGraphics(); // 画二维码到新的面板 outg.drawImage(image, 0, 0, image.getWidth(), image.getHeight(), null); // 画文字到新的面板 outg.setColor(Color.BLACK); // 字体、字型、字号 outg.setFont(new Font(\u0026#34;黑体\u0026#34;, Font.PLAIN, 30)); int strWidth = outg.getFontMetrics().stringWidth(note); // 画文字 outg.drawString(note, 200 - strWidth / 2, height + (outImage.getHeight() - height) / 2 + 12); outg.dispose(); outImage.flush(); image = outImage; } image.flush(); ImageIO.write(image, \u0026#34;png\u0026#34;, codeFile); } catch (Exception e) { e.printStackTrace(); } } } 最后使用main方法进行测试\n1 2 3 4 5 public static void main(String[] args) { File logoFile = new File(\u0026#34;/xxx/logo.jpg\u0026#34;); File codeFile = new File(\u0026#34;/xxx/content.png\u0026#34;); QrCodeUtils.drawLogoQRCode(logoFile,codeFile,\u0026#34;https://www.liunaijie.top\u0026#34;,\u0026#34;liunaijie.top\u0026#34;); } 最终生成如下的二维码：\n","permalink":"https://www.liunaijie.top/coding/project_notes/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E4%BA%8C%E7%A0%81%E5%90%88%E4%B8%80/","summary":"\u003ch1 id=\"背景\"\u003e背景\u003c/h1\u003e\n\u003cp\u003e随着现在小程序的流行，许多软件也将web页面转移到小程序之中。让用户更方便的使用。当我们做了微信和支付宝两个的小程序后，意味着我们要将两个二维码展示给用户扫码。所以当需要将微信、支付宝小程序二维码合一，或者对其做一些自定义操作时，就不能再使用官方提供的二维码生成接口。\u003c/p\u003e\n\u003cp\u003e微信、支付宝官方也提供了自定义二维码的文档：\u003c/p\u003e\n\u003cp\u003e微信：\u003ca href=\"https://developers.weixin.qq.com/miniprogram/introduction/qrcode.html\"\u003ehttps://developers.weixin.qq.com/miniprogram/introduction/qrcode.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e支付宝：\u003ca href=\"https://docs.alipay.com/mini/introduce/vzd5v0\"\u003ehttps://docs.alipay.com/mini/introduce/vzd5v0\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e所以通过上面的设置就可以实现二维码合一的操作。\u003c/p\u003e\n\u003ch1 id=\"原理解析\"\u003e原理解析\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e二维码存储的是一串信息，微信官网二维码里面可能存储的为：\u003ccode\u003ehttps://weixin.com?appid=123\u003c/code\u003e。支付宝二维码存储的可能是：\u003ccode\u003ehttps://alipay.com?appid=abc\u003c/code\u003e。这种有一定规则的信息。\u003c/li\u003e\n\u003cli\u003e我们通过两个的自定义设置，将访问两者小程序的二维码信息进行合一。比如，定义：\u003ccode\u003ehttps://www.abc.com\u003c/code\u003e，让微信和支付宝扫描到这个信息后都跳转到我们的小程序中。那就可以实现二维码合一。\u003c/li\u003e\n\u003c/ol\u003e","title":"微信、支付宝小程序二码合一"},{"content":"环境需求 一台有公网ip的机器，一台内网的机器(以树莓派为例)\n使用软件：nginx、frp\nfrp软件地址：https://github.com/fatedier/frp\n申请自己的域名，并将域名解析到公网ip(可以为三级或四级域名)(可选) frp配置 我们首先需要根据自己的机型下载适合的版本，要注意的是服务器与客户端都要使用同一个frp版本\n下载地址：https://github.com/fatedier/frp/releases\n比如我使用的树莓派是arm系统的，就选择了最新版本的linux_arm版本，下载完成后解压，进入\n服务器： 服务器修改的是frps.ini配置文件\n1 2 3 4 [common] bind_port = 7000 # 绑定本机的端口 vhost_http_port = 7001 #http访问的端口 subdomail_host = pi.liunaijie.top # 自己的域名 然后后台启动即可：nohup ./frps -c ./frps.ini \u0026amp;\n默认日志为nohup.out，可以查看这个文件查看frp是否正常启动\n树莓派(或其他内网机器) 客户端修改frpc.ini配置文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 [common] server_addr = x.x.x.x #公网的ip地址 server_port = 7000 # 服务器开启的端口 [ssh] # 开启ssh type = tcp local_ip = 127.0.0.1 local_port = 22 remote_port = 6000 # 远程ssh端口 [web] # web服务 type = http local_port = 80 custom_domains = pi.liunaijie.top # 我们自己的域名，可以通过这个域名访问这个机器 然后后台启动服务nohup ./frpc -c ./frpc.ini \u0026amp;。要注意的是我们要先开启服务器的服务，不然本地是无法开启的。\nnginx配置 如果按照官网的文档这样就配置完成了，但是我的服务器并不只是作为这个内网穿透的功能，还有其他的功能，并且是通过nginx进行转发，所以还需要配置ningx。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 。。。其他设置。。。 server { listen 80; #监听http的80端口 server_name pi.liunaijie.top; # 这是我们设置的域名 access_log logs/pi_liunaijie.log main; # 记录日志 location / { proxy_pass http://127.0.0.1:7001; # 转发到我们在frps.ini中设置的vhost_http_port端口 proxy_set_header Host $host:80; #不添加这行时访问需要 域名:7001才能访问到内网的机器，如果加了就不再需要后面的端口，直接使用域名访问 proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_hide_header X-Powered-By; } } 。。。其他设置。。。 https配置 首先在frps.ini中进行添加https的配置\n1 2 3 4 5 [common] bind_port = 7000 # 绑定本机的端口 vhost_http_port = 7001 #http访问的端口 vhost_https_port = 7002 # https的端口 subdomail_host = pi.liunaijie.top # 自己的域名 在frpc.ini中修改配置\n1 2 3 4 ...省略... type = https local_port = 443 custom_domains = pi.liunaijie.top # 我们自己的域名，可以通过这个域名访问这个机器 然后开启服务我们可以通过我们设置的域名加端口进行访问，例如以我上面的配置就需要https://pi.liunaijie.top:7002来进行访问。但是我不想使用后面的端口所以又进行修改了nginx的配置文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ...省略... server { listen 443 ssl; server_name pi.liunaijie.top; charset utf-8; ssl_certificate /usr/local/nginx/cert/pi.liunaijie.top.pem; ssl_certificate_key /usr/local/nginx/cert/pi.liunaijie.top.key; access_log logs/pi_liunaijie.log main; location / { resolver 8.8.8.8; proxy_ssl_server_name on; proxy_pass https://$host:7002; proxy_set_header Host $host:$server_port; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_hide_header X-Powered-By; } } 其中有很重要的几条配置，一定要注意，不然还是没法不加端口进行访问\n1 resolver 8.8.8.8; # 这个最重要 不加这个就是502，加了就好了 也不知道是为什么 我现在是http与https并存，如果只想使用https可以在nginx的80端口进行跳转\n到此我们就完成了通过我们预定义的域名访问在内网中的机器。\n","permalink":"https://www.liunaijie.top/coding/tools/raspberry_pi/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B9%B6%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D/","summary":"\u003ch1 id=\"环境需求\"\u003e环境需求\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e一台有公网ip的机器，一台内网的机器(以树莓派为例)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e使用软件：\u003ccode\u003enginx\u003c/code\u003e、\u003ccode\u003efrp\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003efrp软件地址：\u003ca href=\"https://github.com/fatedier/frp\"\u003ehttps://github.com/fatedier/frp\u003c/a\u003e\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e申请自己的域名，并将域名解析到公网ip(可以为三级或四级域名)(可选)\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"frp配置\"\u003efrp配置\u003c/h1\u003e\n\u003cp\u003e我们首先需要根据自己的机型下载适合的版本，要注意的是服务器与客户端都要使用同一个frp版本\u003c/p\u003e\n\u003cp\u003e下载地址：\u003ca href=\"https://github.com/fatedier/frp/releases\"\u003ehttps://github.com/fatedier/frp/releases\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e比如我使用的树莓派是arm系统的，就选择了最新版本的linux_arm版本，下载完成后解压，进入\u003c/p\u003e\n\u003ch2 id=\"服务器\"\u003e服务器：\u003c/h2\u003e\n\u003cp\u003e服务器修改的是frps.ini配置文件\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003ecommon\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"nv\"\u003ebind_port\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e7000\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 绑定本机的端口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"nv\"\u003evhost_http_port\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e7001\u003c/span\u003e  \u003cspan class=\"c1\"\u003e#http访问的端口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"nv\"\u003esubdomail_host\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e pi.liunaijie.top \u003cspan class=\"c1\"\u003e# 自己的域名\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e然后后台启动即可：\u003ccode\u003enohup ./frps -c ./frps.ini \u0026amp;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e默认日志为nohup.out，可以查看这个文件查看frp是否正常启动\u003c/p\u003e\n\u003ch2 id=\"树莓派或其他内网机器\"\u003e树莓派(或其他内网机器)\u003c/h2\u003e\n\u003cp\u003e客户端修改frpc.ini配置文件\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003ecommon\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eserver_addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e x.x.x.x \u003cspan class=\"c1\"\u003e#公网的ip地址\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eserver_port\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e7000\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 服务器开启的端口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003essh\u003cspan class=\"o\"\u003e]\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 开启ssh\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e tcp\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003elocal_ip\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 127.0.0.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003elocal_port\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e22\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eremote_port\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e6000\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 远程ssh端口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003eweb\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"c1\"\u003e# web服务\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e http \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003elocal_port\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003ecustom_domains\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e pi.liunaijie.top  \u003cspan class=\"c1\"\u003e# 我们自己的域名，可以通过这个域名访问这个机器\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e然后后台启动服务\u003ccode\u003enohup ./frpc -c ./frpc.ini \u0026amp;\u003c/code\u003e。要注意的是我们要先开启服务器的服务，不然本地是无法开启的。\u003c/p\u003e","title":"frp内网穿透并绑定自已的域名"},{"content":"题目描述 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。\n设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。\n注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。\n示例 1:\n输入: [7,1,5,3,6,4] 输出: 7 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。 示例 2:\n输入: [1,2,3,4,5] 输出: 4 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。 示例 3:\n输入: [7,6,4,3,1] 输出: 0 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0\n题目中给出数组，第i个元素表示第i天的价格，我们要做的是求出能获取的最大利润，并且没有限制购买次数，我们可以第一天买入，最后一天卖出。也可以当天买入，第二天就卖出，然后再买入，再卖出。但是我们只能同时有一笔交易。\n解题思路 贪心算法 这个算法的意思是什么呢，我们将购买股票的行为可以进行拆分，比如当天买入，第二天卖出，然后再买入，再卖出。我们每一次只选择可以赚钱的时候购入，这个虽然不符合实际情况，因为没有人能知道股票第二天能不能涨价，但是在这个情景中是可以得到答案的。\n并且这个还有一个原因是假如三天的价格分别为(1,4,7)。我们第一天买入，第三天卖出的收入为(7-1=6)。而第一天卖出，第二个卖出，再买入，再卖出的收益为（(4-1)+(7-4)=6）。这两种方式的收益是相同的，所以可以采用贪心算法能得到最优解。\n代码实现：\n1 2 3 4 5 6 7 8 9 public int maxProfitGreedy(int[] prices) { int result = 0; for (int i = 0; i \u0026lt; prices.length - 1; i++) { if (prices[i] \u0026lt; prices[i + 1]) { result += prices[i + 1] - prices[i]; } } return result; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAii-leetcode122/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。\u003c/p\u003e\n\u003cp\u003e设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。\u003c/p\u003e\n\u003cp\u003e注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e输入: [7,1,5,3,6,4]\n输出: 7\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。\n示例 2:\u003c/p\u003e\n\u003cp\u003e输入: [1,2,3,4,5]\n输出: 4\n解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。\n因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。\n示例 3:\u003c/p\u003e\n\u003cp\u003e输入: [7,6,4,3,1]\n输出: 0\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e题目中给出数组，第i个元素表示第i天的价格，我们要做的是求出能获取的最大利润，并且没有限制购买次数，我们可以第一天买入，最后一天卖出。也可以当天买入，第二天就卖出，然后再买入，再卖出。但是我们只能同时有一笔交易。\u003c/p\u003e","title":"买卖股票的最佳时机II-LeetCode122"},{"content":"题目描述 链接: https://leetcode-cn.com/problems/climbing-stairs/\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n每次你可以爬 1 或 2 个台阶。问你有多少种不同的方法可以爬到楼顶？\n示例 1：\n输入： 2 输出： 2 有两种方法可以爬到楼顶。\n第一种: 1 阶 + 1 阶\n第二种: 2 阶\n示例 2：\n输入： 3\n输出： 3\n有三种方法可以爬到楼顶。\n1 阶 + 1 阶 + 1 阶 1 阶 + 2 阶 2 阶 + 1 阶 解题思路 动态规划 每次可以爬1层或者2层, 所以我们在最后一层台阶时, 它上一次可以在第n-1层台阶上或n-2层台阶上.\n递归方程为: f(x) = f(x-1) + f(x-2) (x\u0026gt;=2)\n再看一下边界条件:\nf(0) : 由于我们是从开始爬, 要到达0可以看作只有一种方案, 也就是 f(0) = 1\nf(1) : 从0到1也只有1种方案, 即f(1) = 1.\n代码实现 DP数组: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public int climbStairs(int n) { if (n == 1) { return 1; }else if (n == 2) { return 2; }else { int[] ans = new int[n]; ans[0] = 1; ans[1] = 2; for(int i=2;i\u0026lt;n;i++) { ans[i]=ans[i-1]+ans[i-2]; } return ans[n-1]; } } 临时变量: 上面的代码, 我们创建了一个DP数组来存储每次的结果, 但是我们可以看出f(x)只与f(x-1)与f(x-2)有关. 所以我们可以定义两个变量表示f(x-1)和f(x-2)\n1 2 3 4 5 6 7 8 9 10 11 12 13 public int climbStairs(int n) { if (n \u0026lt;= 2) { return n; } int x = 1, y = 2; int res = 0; for (int i = 3; i \u0026lt;= n; i++) { res = x + y; x = y; y = res; } return res; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E7%88%AC%E6%A5%BC%E6%A2%AF-leetcode70/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cp\u003e链接: \u003ca href=\"https://leetcode-cn.com/problems/climbing-stairs/\"\u003ehttps://leetcode-cn.com/problems/climbing-stairs/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\u003c/p\u003e\n\u003cp\u003e每次你可以爬 1 或 2 个台阶。问你有多少种不同的方法可以爬到楼顶？\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cp\u003e输入： 2\n输出： 2\n有两种方法可以爬到楼顶。\u003c/p\u003e\n\u003cp\u003e第一种: 1 阶 + 1 阶\u003c/p\u003e\n\u003cp\u003e第二种: 2 阶\u003c/p\u003e\n\u003cp\u003e示例 2：\u003c/p\u003e\n\u003cp\u003e输入： 3\u003c/p\u003e\n\u003cp\u003e输出： 3\u003c/p\u003e\n\u003cp\u003e有三种方法可以爬到楼顶。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e1 阶 + 1 阶 + 1 阶\u003c/li\u003e\n\u003cli\u003e1 阶 + 2 阶\u003c/li\u003e\n\u003cli\u003e2 阶 + 1 阶\u003c/li\u003e\n\u003c/ol\u003e\u003c/blockquote\u003e","title":"爬楼梯-LeetCode70"},{"content":"微信小程序支付流程：\n根据流程图，我们支付的流程应该是：\n用户在微信小程序点击下单，小程序请求我们自己的后台程序\n后台在接收到下单请求后，先进行自己的业务逻辑，生成预订单，然后请求微信的下单接口。微信接口对我们请求进行校验，通过后返回 prepay_id(预付款 id)。\n在这里要获取小程序用户的 openid。一般在下单前就获取到了，或者在这里再进行访问微信接口进行获取 发送请求时需要经过签名等操作 在向微信请求时，参数中有一个通知地址，支付成功后微信会向这个地址发送通知。 拿到 prepay_id 后，需要再次签名。然后将数据返回给小程序 微信小程序获取到请求响应，响应数据里面有预付款 id，然后通过微信提供的支付方法进行付款。\n付款成功后，微信会向下单时提供的通知地址发送通知。通知数据里面有实际付款金额等信息。\n我之前写过的下单代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 public Object devicePay(int userId,String deviceCode, double money,String time) { ResultBean result = new ResultBean(); /*自身业务逻辑代码*/ //判断设备是否存在 Device isExist = deviceDao.selectByDeviceCode(deviceCode); if(isExist==null){ throw new AppException(ResultEnums.DEVICE_NOT_EXIST); } //判断用户是否存在 User user = userDao.getId((long)userId); if(user==null){ throw new AppException(ResultEnums.USER_NOT_EXIST); } String uuid = UUID.randomUUID().toString().substring(0,8); String nowTime = DateUtils.getNowTimestamp(); //生成订单编号 String historyCode = nowTime+uuid; DeviceHistory deviceHistory = new DeviceHistory(historyCode,deviceCode,userId,money,time,new DateUtils().getNowTime()); //新建一个订单 deviceHistoryDao.insertDeviceHistory(deviceHistory); /*构建微信下单请求参数*/ Map\u0026lt;String, String\u0026gt; map = new HashMap\u0026lt;String, String\u0026gt;(); map.put(\u0026#34;appid\u0026#34;,GlobalParas.APPID);//appid map.put(\u0026#34;mch_id\u0026#34;,GlobalParas.MCH_ID);//商户号 map.put(\u0026#34;nonce_str\u0026#34;, WXPayUtil.generateNonceStr());//随机字符串 map.put(\u0026#34;sign_type\u0026#34;, WXPayConstants.SignType.MD5.toString());//签名类型 map.put(\u0026#34;body\u0026#34;,isExist.getDeviceName());//商品描述 map.put(\u0026#34;out_trade_no\u0026#34;,historyCode);//商户订单号，不能重复 map.put(\u0026#34;trade_type\u0026#34;,\u0026#34;JSAPI\u0026#34;);//小程序支付都填写 JSAPI map.put(\u0026#34;notify_url\u0026#34;,\u0026#34;https://xxxxx/pay/complete/\u0026#34;+historyCode);//通知地址，不能传递参数 int totalFee = (int) (money*100); map.put(\u0026#34;total_fee\u0026#34;,String.valueOf(totalFee));//金额，以分为单位 map.put(\u0026#34;openid\u0026#34;,user.getOpenId());//小程序支付时，这个必须填，为用户唯一的编号 openid String sign = \u0026#34;\u0026#34;; try { //先进行签名 sign = WXPayUtil.generateSignature(map, GlobalParas.APIKEY); map.put(\u0026#34;sign\u0026#34;,sign); //转换为xml格式 String xml = WXPayUtil.generateSignedXml(map,GlobalParas.APIKEY); //统一下单接口 String resultXml = HttpUtil.sendPostXml(GlobalParas.PAY_API_URL,xml); Map\u0026lt;String, String\u0026gt; resultMap = WXPayUtil.xmlToMap(resultXml); //判断是否请求成功 String RETURN_CODE = \u0026#34;return_code\u0026#34;; String return_code = null; if (resultMap.containsKey(RETURN_CODE)) { return_code = resultMap.get(RETURN_CODE); } String success = \u0026#34;SUCCESS\u0026#34;; if(!success.equals(return_code)){ throw new AppException(ResultEnums.FAIL); } //判断签名是否正确 if (!WXPayUtil.isSignatureValid(resultMap, GlobalParas.APIKEY, WXPayConstants.SignType.MD5)) { throw new AppException(ResultEnums.SIGN_FAIL); } //获取prepay_id（预付单信息） String prepayId = resultMap.get(\u0026#34;prepay_id\u0026#34;); String timeStamp = String.valueOf(WXPayUtil.getCurrentTimestamp()); String nonceStr = WXPayUtil.generateNonceStr(); String Package = \u0026#34;prepay_id=\u0026#34;+prepayId; Map paySignMap = new HashMap(); paySignMap.put(\u0026#34;appId\u0026#34;,GlobalParas.APPID); paySignMap.put(\u0026#34;timeStamp\u0026#34;,timeStamp);//时间戳 paySignMap.put(\u0026#34;nonceStr\u0026#34;,nonceStr);//随机字符串 paySignMap.put(\u0026#34;package\u0026#34;,Package);//固定格式 paySignMap.put(\u0026#34;signType\u0026#34;,\u0026#34;MD5\u0026#34;); //再次生成签名（含有预付单信息） String paySign = WXPayUtil.generateSignature(paySignMap, GlobalParas.APIKEY); JSONObject json = new JSONObject(); json.put(\u0026#34;paySign\u0026#34;,paySign); json.put(\u0026#34;timeStamp\u0026#34;,timeStamp); json.put(\u0026#34;nonceStr\u0026#34;,nonceStr); json.put(\u0026#34;Package\u0026#34;,Package); json.put(\u0026#34;appId\u0026#34;,GlobalParas.APPID); //返回信息 result.setStatus(true); result.setCode(ResultEnums.SELECT_SUCCESS.getCode()); result.setMsg(ResultEnums.SELECT_SUCCESS.getMessage()); result.setData(json); } catch (Exception e) { throw new AppException(ResultEnums.UN_KNOW_ERROR); } return result; } ​\t用户在小程序调起支付后发送到后台，发送到程序后台。后台再去调用微信支付的接口。先将所需传递的数据进行签名然后调用统一下单api，成功返回一个预付单编号（prepay_id）。将预付单编号与一些数据再次签名生成签名信息，返回小程序签名和一些数据。小程序前台调用下单接口。\n统一下单api：https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=9_1\n​\t里面有一些必须的参数：（小程序id，商户号，随机字符串，签名，商品描述，商户订单号，标价金额（以分为单位），通知地址(支付成功后微信后台会向这个地址发送信息，我们可以在这个接口实现更新订单状态)，交易类型（小程序填写\u0026quot;JSAPI\u0026quot;））。参数需要为xml格式的。\n​\t其中随机字符串，签名我们可以利用微信提供的wxPayUtil类中的方法\n​\t返回信息也是xml格式。我们可以利用wxPayUtils里面的方法进行map与xml转换。判断返回信息中的return_code是否为success。然后获取prepay_id。\n​\t再次签名。所需appid，时间戳，随机字符串，package等参数。将签名后的数据与参数一同返回前台。前台根据这些参数调起支付。\n​\t支付成功后会微信会请求我们第一次签名时设置的通知地址，我们可以在那个里面实现将订单状态修改为完成或其他业务逻辑。\n​\t微信sdk下载地址：https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=11_1\n","permalink":"https://www.liunaijie.top/coding/project_notes/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%AF%E4%BB%98/","summary":"\u003cp\u003e微信小程序支付流程：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://pay.weixin.qq.com/wiki/doc/api/img/wxa-7-2.jpg\" alt=\"wxa-7-2\"\u003e\u003c/p\u003e\n\u003cp\u003e根据流程图，我们支付的流程应该是：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e用户在微信小程序点击下单，小程序请求我们自己的后台程序\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e后台在接收到下单请求后，先进行自己的业务逻辑，生成预订单，然后请求微信的下单接口。微信接口对我们请求进行校验，通过后返回 prepay_id(预付款 id)。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在这里要获取小程序用户的 openid。一般在下单前就获取到了，或者在这里再进行访问微信接口进行获取\u003c/li\u003e\n\u003cli\u003e发送请求时需要经过签名等操作\u003c/li\u003e\n\u003cli\u003e在向微信请求时，参数中有一个通知地址，支付成功后微信会向这个地址发送通知。\u003c/li\u003e\n\u003cli\u003e拿到 prepay_id 后，需要再次签名。然后将数据返回给小程序\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e微信小程序获取到请求响应，响应数据里面有预付款 id，然后通过微信提供的支付方法进行付款。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e付款成功后，微信会向下单时提供的通知地址发送通知。通知数据里面有实际付款金额等信息。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e","title":"微信小程序支付"},{"content":"题目描述 给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n示例 1:\n输入: \u0026ldquo;abcabcbb\u0026rdquo; 输出: 3 解释: 因为无重复字符的最长子串是 \u0026ldquo;abc\u0026rdquo;，所以其长度为 3。 示例 2:\n输入: \u0026ldquo;bbbbb\u0026rdquo; 输出: 1 解释: 因为无重复字符的最长子串是 \u0026ldquo;b\u0026rdquo;，所以其长度为 1。 示例 3:\n输入: \u0026ldquo;pwwkew\u0026rdquo; 输出: 3 解释: 因为无重复字符的最长子串是 \u0026ldquo;wke\u0026rdquo;，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，\u0026ldquo;pwke\u0026rdquo; 是一个子序列，不是子串。\n要注意这个题目最后要求返回的是长度，并不是最长的子串内容是什么\n解题思路 先来分析一下我的做法，我将字符串遍历，然后添加到一个新字符串中。如果字符没有出现在字符串中就添加，当字符串已经出现在字符串中后，从出现位置开始截取，然后与后面的内容再进行拼接，最后比较字符串的长度与预设值，取最大值作为新的长度。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public int lengthOfLongestSubstring(String s) { int length = 0; StringBuilder str = new StringBuilder(); for (int i = 0; i \u0026lt; s.length(); i++) { int index = str.indexOf(String.valueOf(s.charAt(i))); if (index \u0026lt; 0) { str.append(s.charAt(i)); } else { String rest = str.substring(index + 1); str.setLength(0); str.append(rest); str.append(s.charAt(i)); } length = Math.max(length, str.length()); } return length; } 滑动窗口 利用两个变量i,j来表示窗口的两侧，j向右移动，遇到未出现的字符时，比较长度。遇到已经添加的字符时i向右移动直到出现的字符串后面，此时窗口内的内容是无重复的，然后继续向右移动，直至末尾。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public int lengthOfLongestSubstringWindow(String s) { int n = s.length(); Set\u0026lt;Character\u0026gt; set = new HashSet\u0026lt;\u0026gt;(); int result = 0, i = 0, j = 0; while (i \u0026lt; n \u0026amp;\u0026amp; j \u0026lt; n) { if (!set.contains(s.charAt(j))) { set.add(s.charAt(j++)); result = Math.max(result, j - i); } else { //一直向右删除，一直到不再包含此字符 set.remove(s.charAt(i++)); } } return result; } 进阶 这个题目中只要求返回最大的长度，如果要求返回具体的子串是什么则要怎么做呢？\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public static String lengthOfLongestSubstringWindowString(String s) { int n = s.length(); Set\u0026lt;Character\u0026gt; set = new HashSet\u0026lt;\u0026gt;(); int result = 0, i = 0, j = 0; String word = \u0026#34;\u0026#34;; StringBuilder stringBuilder = new StringBuilder(); while (i \u0026lt; n \u0026amp;\u0026amp; j \u0026lt; n) { if (!set.contains(s.charAt(j))) { stringBuilder.append(s.charAt(j)); set.add(s.charAt(j++)); result = Math.max(result, j - i); } else { //一直向右删除，一直到不再包含此字符 set.remove(s.charAt(i++)); stringBuilder.setLength(0); } if (stringBuilder.length() \u0026gt; word.length()) { word = stringBuilder.toString(); } } return word; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2-leetcode3/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e输入: \u0026ldquo;abcabcbb\u0026rdquo;\n输出: 3\n解释: 因为无重复字符的最长子串是 \u0026ldquo;abc\u0026rdquo;，所以其长度为 3。\n示例 2:\u003c/p\u003e\n\u003cp\u003e输入: \u0026ldquo;bbbbb\u0026rdquo;\n输出: 1\n解释: 因为无重复字符的最长子串是 \u0026ldquo;b\u0026rdquo;，所以其长度为 1。\n示例 3:\u003c/p\u003e\n\u003cp\u003e输入: \u0026ldquo;pwwkew\u0026rdquo;\n输出: 3\n解释: 因为无重复字符的最长子串是 \u0026ldquo;wke\u0026rdquo;，所以其长度为 3。\n请注意，你的答案必须是 子串 的长度，\u0026ldquo;pwke\u0026rdquo; 是一个子序列，不是子串。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e要注意这个题目最后要求返回的是长度，并不是最长的子串内容是什么\u003c/p\u003e","title":"无重复字符的最长子串-LeetCode3"},{"content":"题目描述 给定一个整数数组，判断是否存在重复元素。\n如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。\n示例 1:\n输入: [1,2,3,1] 输出: true 示例 2:\n输入: [1,2,3,4] 输出: false 示例 3:\n输入: [1,1,1,3,3,4,3,2,4,2] 输出: true\n判断数组中是否有元素存在重复值。\n解题思路 遍历查找 我们可以直接使用最粗暴的双重循环进行查找。拿一个值与后面所有的元素比较，如果都不相等则拿第二个值与后面的所有元素比较。\n代码实现如下：\n1 2 3 4 5 6 7 8 9 10 public boolean containsDuplicate(int[] nums) { for (int i = 0; i \u0026lt; nums.length - 1; i++) { for (int j = i+1; j \u0026lt; nums.length; j++) { if (nums[i] == nums[j]) { return true; } } } return false; } 我们来分析一下这个实现的时间和空间复杂度：\n空间复杂度\n由于没有用到额外的空间，所以空间复杂度为O(1)\n时间复杂度\n由于用到了双重for循环，它的运行次数约为n^2^。所以它的时间复杂度也约为O(n^2^)。\n如果将此答案放到LeetCode上跑，则会超出时间。\n排序后查找 我们如果先进行排序，则相同的元素应该前后相邻。\n而排序我们可以使用快速排序达到O(nlogn)的复杂度，然后再进行数组查找，这个的复杂度为O(n)。\n代码实现如下：\n1 2 3 4 5 6 7 8 9 public boolean containsDuplicateSort(int[] nums) { Arrays.sort(nums); for (int i = 0; i \u0026lt; nums.length - 1; i++) { if (nums[i] == nums[i + 1]) { return true; } } return false; } 这里直接调用了java的api来进行排序，后面就是对数组的查找，我们只需要遍历一次，比较前后两个位置元素是否相同即可。\n复杂度分析：\n空间复杂度\n没有用到额外的空间，所以空间复杂度为O(1)\n时间复杂度\n时间复杂度为排序的复杂度O(nlogn)+O(n)。\n哈希表 我们将元素做哈希运算，然后进行存储，对新元素与存储的哈希值做对比，如果哈希值不存在则继续存储进行下一个查找。当存在时比较具体值是否相同，如果相同则返回结果。\n代码实现:\n1 2 3 4 5 6 7 8 9 10 11 public boolean containsDuplicateHash(int[] nums) { Set\u0026lt;Integer\u0026gt; set = new HashSet\u0026lt;\u0026gt;(nums.length); for (int num : nums) { if (set.contains(num)) { return true; } else { set.add(num); } } return false; } 这里使用了java中的HashSet。\n复杂度分析：\n空间复杂度：\n由于使用了set来存储数组，所以空间复杂度为O(n)\n时间复杂度：\n从上面代码可以看出，我们只对数组遍历了一次，时间复杂度也就是O(n)\n","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-leetcode217/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个整数数组，判断是否存在重复元素。\u003c/p\u003e\n\u003cp\u003e如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e输入: [1,2,3,1]\n输出: true\n示例 2:\u003c/p\u003e\n\u003cp\u003e输入: [1,2,3,4]\n输出: false\n示例 3:\u003c/p\u003e\n\u003cp\u003e输入: [1,1,1,3,3,4,3,2,4,2]\n输出: true\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e判断数组中是否有元素存在重复值。\u003c/p\u003e","title":"存在重复元素-LeetCode217"},{"content":"题目描述 给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n你可以假设数组中无重复元素。\n示例 1:\n输入: [1,3,5,6], 5 输出: 2 示例 2:\n输入: [1,3,5,6], 2 输出: 1 示例 3:\n输入: [1,3,5,6], 7 输出: 4 示例 4:\n输入: [1,3,5,6], 0 输出: 0\n解题思路 遍历 由于数组已经排序，可以从头开始向后查找，当target与数组内某个元素相等时，返回下标，当target比某个元素大时，返回下标。\n1 2 3 4 5 6 7 8 9 10 11 12 public int searchInsertSearch(int[] nums, int target) { int result = nums.length; for (int i = 0; i \u0026lt; nums.length; i++) { if (nums[i] == target) { return i; } if (target \u0026lt; nums[i]) { return i; } } return result; } 二分查找 由于已经排序了，先将中间值与目标值对比，然后再分区间对比\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public int searchInsertBinarySearch(int[] nums, int target) { int low = 0; int high = nums.length - 1; while (low \u0026lt;= high) { int mid = low + ((high - low) \u0026gt;\u0026gt; 1); if (nums[mid] \u0026gt;= target) { //当中间值大于等于目标值时 //如果已经到头了，就不再向前查找。或者前一个元素比目标值小也直接返回 if ((mid == 0) || (nums[mid - 1] \u0026lt; target)) { return mid; } else { //否则再向前一位 high = mid - 1; } } else { low = mid + 1; } } return nums.length; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE-leetcode35/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\u003c/p\u003e\n\u003cp\u003e你可以假设数组中无重复元素。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e输入: [1,3,5,6], 5\n输出: 2\n示例 2:\u003c/p\u003e\n\u003cp\u003e输入: [1,3,5,6], 2\n输出: 1\n示例 3:\u003c/p\u003e\n\u003cp\u003e输入: [1,3,5,6], 7\n输出: 4\n示例 4:\u003c/p\u003e\n\u003cp\u003e输入: [1,3,5,6], 0\n输出: 0\u003c/p\u003e\u003c/blockquote\u003e","title":"搜索插入位置-LeetCode35"},{"content":"题目描述 给定一个二叉树，检查它是否是镜像对称的。\n例如，二叉树 [1,2,2,3,4,4,3] 是对称的。\n1 / \\ 2 2 / \\ / \\ 3 4 4 3 但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:\n1 / \\ 2 2 \\ \\ 3 3 说明:\n如果你可以运用递归和迭代两种方法解决这个问题，会很加分。\n解题思路 当一棵树的两个子节点有相同的值，并且每个树的右子树与另一个树的左子树镜像对称。\n递归实现 1 2 3 4 5 6 7 8 9 10 11 12 13 public boolean isSymmetric(TreeNode root) { return isMirror(root, root); } public boolean isMirror(TreeNode t1, TreeNode t2) { if (t1 == null \u0026amp;\u0026amp; t2 == null) { return true; } if (t1 == null || t2 == null) { return false; } return (t1.val == t2.val) \u0026amp;\u0026amp; isMirror(t1.left, t2.right) \u0026amp;\u0026amp; isMirror(t1.right, t2.left); } 迭代实现 迭代实现需要借助队列来进行实现。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public boolean isSymmetricQueue(TreeNode root) { Queue\u0026lt;TreeNode\u0026gt; q = new LinkedList\u0026lt;\u0026gt;(); q.add(root); q.add(root); while (!q.isEmpty()) { TreeNode t1 = q.poll(); TreeNode t2 = q.poll(); if (t1 == null \u0026amp;\u0026amp; t2 == null) { continue; } if (t1 == null || t2 == null) { return false; } if (t1.val != t2.val) { return false; } q.add(t1.left); q.add(t2.right); q.add(t1.right); q.add(t2.left); } return true; } 这样每次都对比左节点和另外一棵树的右节点。\n","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91-leetcode101/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个二叉树，检查它是否是镜像对称的。\u003c/p\u003e\n\u003cp\u003e例如，二叉树 \u003ccode\u003e[1,2,2,3,4,4,3]\u003c/code\u003e 是对称的。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e但是下面这个 \u003ccode\u003e[1,2,2,null,3,null,3]\u003c/code\u003e 则不是镜像对称的:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果你可以运用递归和迭代两种方法解决这个问题，会很加分。\u003c/p\u003e\u003c/blockquote\u003e","title":"对称二叉树—LeetCode101"},{"content":"题目描述 输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。\n示例 1:\n输入: n = 1 输出: \\[1,2,3,4,5,6,7,8,9] 说明：\n用返回一个整数列表来代替打印 n 为正整数 首先要获取最大值，然后遍历添加到数组中，而通过位数获取最大值可以通过10^n^来获取。\n代码实现 1 2 3 4 5 6 7 8 public int[] printNumbers(int n) { int max = (int)Math.pow(10,n); int[] result = new int[max-1]; for(int i=0;i\u0026lt;max-1;i++){ result[i]=i+1; } return result; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0-leetcodem17/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e输入数字 \u003ccode\u003en\u003c/code\u003e，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入: n = 1\n输出: \\[1,2,3,4,5,6,7,8,9] \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e用返回一个整数列表来代替打印\u003c/li\u003e\n\u003cli\u003en 为正整数\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\u003cp\u003e首先要获取最大值，然后遍历添加到数组中，而通过位数获取最大值可以通过\u003ccode\u003e10^n^\u003c/code\u003e来获取。\u003c/p\u003e","title":"打印从1到最大的n位数—LeetCodeM17"},{"content":"题目描述 给你一个单链表的引用结点 head。链表中每个结点的值不是 0 就是 1。已知此链表是一个整数数字的二进制表示形式。\n请你返回该链表所表示数字的 十进制值 。\n示例 1：\n输入：head = \\[1,0,1] 输出：5 解释：二进制数 (101) 转化为十进制数 (5) 示例 2：\n输入：head = \\[0] 输出：0 示例 3：\n输入：head = \\[1] 输出：1 示例 4：\n输入：head = \\[1,0,0,1,0,0,1,1,1,0,0,0,0,0,0] 输出：18880 示例 5：\n输入：head = \\[0,0] 输出：0 提示：\n链表不为空。 链表的结点总数不超过 30。 每个结点的值不是 0 就是 1。 解题思路 二进制链表我们把它写成数字其实就是二进制，我们要做的就是将二进制转换为10进制。\n代码实现：\n1 2 3 4 5 6 7 8 public int getDecimalValue(ListNode head) { int sum = 0; while (head != null) { sum = sum * 2 + head.val; head = head.next; } return sum; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%95%B4%E6%95%B0-leetcode1290/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给你一个单链表的引用结点 \u003ccode\u003ehead\u003c/code\u003e。链表中每个结点的值不是 0 就是 1。已知此链表是一个整数数字的二进制表示形式。\u003c/p\u003e\n\u003cp\u003e请你返回该链表所表示数字的 \u003cstrong\u003e十进制值\u003c/strong\u003e 。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/12/15/graph-1.png\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入：head = \\[1,0,1]\n输出：5\n解释：二进制数 (101) 转化为十进制数 (5)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入：head = \\[0]\n输出：0\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入：head = \\[1]\n输出：1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e示例 4：\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入：head = \\[1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]\n输出：18880\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e示例 5：\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入：head = \\[0,0]\n输出：0\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e链表不为空。\u003c/li\u003e\n\u003cli\u003e链表的结点总数不超过 \u003ccode\u003e30\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e每个结点的值不是 \u003ccode\u003e0\u003c/code\u003e 就是 \u003ccode\u003e1\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e","title":"二进制链表转整数-LeetCode1290"},{"content":"Ubuntu16编译openwrt ​\t新安装的Ubuntu首先更新软件源\n​\tsudo apt update\n​\t更新系统软件\n​\tsudo apt dist-upgrade\n​\t安装系统openwrt需要的环境\nsudo apt-get install build-essential subversion libncurses5-dev zlib1g-dev gawk gcc-multilib flex git-core gettext libssl-dev unzip\n​\t下载openwrt\ngit clone https://github.com/openwrt/openwrt.git\n​\t更新feeds\n1 2 3 cd openwrt ./scripts/feeds update -a ./scripts/feeds install -a ​\t使用默认配置\nmake defconfig\n​\t使用界面编译\nmake menuconfig\n​\t开始编译\nmake V=s\n编译完成后会在bin/target目录下生成固件\n刷机\n使用breed uboot\n开启sftp服务\n1 2 3 4 opkg update opkg install vsftpd /etc/init.d/vsftpd enable /etc/init.d/vsftpd start 安装nginx\n​\t由于nginx使用80端口，和默认luci配置页面有冲突，我们先将luci端口修改。\n1 vi /etc/config/uhttpd 将`list listen_http 0.0.0.0:80​ 的80端口进行修改，比如修改为8001\nlist listen_http [::]:80` 的80端口进行修改，两个要修改一致。\n1 opkg install nginx ​\t完成后修改/etc/nginx/nginx.conf添加以下内容\n1 2 3 4 5 6 7 8 9 10 11 12 location / { root /mnt/www/html; index index.html index.htm; } location /luci/ { proxy_pass http://127.0.0.1:8001/luci/; } location /luci-static/ { alias /www/luci-static/; } ​\t我们是将默认目录改为/mnt/www/html下，记得要授予权限，或者nginx使用root。对luci进行转发，端口是我们上面设置的端口。\n完成后我们可以在192.168.1.1打开nginx页面，在192.168.1.1:8001打开luci路由器配置页面\n","permalink":"https://www.liunaijie.top/coding/tools/openwrt/","summary":"\u003ch2 id=\"ubuntu16编译openwrt\"\u003eUbuntu16编译openwrt\u003c/h2\u003e\n\u003cp\u003e​\t新安装的Ubuntu首先更新软件源\u003c/p\u003e\n\u003cp\u003e​\t\u003ccode\u003esudo apt update\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e​\t更新系统软件\u003c/p\u003e\n\u003cp\u003e​\t\u003ccode\u003esudo apt dist-upgrade\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e​\t安装系统openwrt需要的环境\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esudo apt-get install build-essential subversion libncurses5-dev zlib1g-dev gawk gcc-multilib flex git-core gettext libssl-dev unzip\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e​\t下载openwrt\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003egit clone https://github.com/openwrt/openwrt.git\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e​\t更新feeds\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e openwrt\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./scripts/feeds update -a\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./scripts/feeds install -a\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e​\t使用默认配置\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003emake defconfig\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e​\t使用界面编译\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003emake menuconfig\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e​\t开始编译\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003emake V=s\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e编译完成后会在bin/target目录下生成固件\u003c/p\u003e\n\u003cp\u003e刷机\u003c/p\u003e\n\u003cp\u003e使用breed uboot\u003c/p\u003e\n\u003cp\u003e开启sftp服务\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eopkg update \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eopkg install vsftpd\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/etc/init.d/vsftpd \u003cspan class=\"nb\"\u003eenable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/etc/init.d/vsftpd start\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e安装nginx\u003c/p\u003e","title":"Ubuntu16编译openwrt"},{"content":"其实根据官网文档就很容易进行安装了，官网文档链接，所以也不写安装和启动的流程了。\n安装主题 修改配置 项目配置 主题配置 部署、发布 修改_config.yml配置文件，支持多个配置信息，如果多个需要如下填写\n1 2 3 4 5 6 7 8 9 10 # 单个配置 deploy: type: git repo: # 多个配置 deploy: - type: git repo: - type: sftp repo: 发布到github\n先进行安装npm install hexo-deployer-git --save\n1 2 3 4 5 deploy: type: git repo: # 仓库地址，最好使用http的协议，使用ssh协议时有可能会报错 branch: #发布的分支，默认是 master message: # 提交的信息 发布到个人服务器（sftp）\n先进行安装npm install hexo-deployer-sftp --save\n1 2 3 4 5 6 7 deploy: type: sftp host: \u0026lt;host\u0026gt; # 远程主机的地址 user: \u0026lt;user\u0026gt; # 用户名 pass: \u0026lt;password\u0026gt; # 密码 remotePath: [remote path] # 发布到的路径 port: [port] # 端口 默认为22 经过如上配置后，执行hexo -d后就会将生产的静态文件发布到git和服务器上。\n草稿 有时候建立一些草稿，还没写完不需要发布的时候我们可以使用以下的方式来实现。\n1 2 # 新建草稿 hexo new draft \u0026#39;md_name\u0026#39; 执行这个命令后会在source/_drafts文件夹下新建一个md_name.md文件，所以我们不需要加文件后缀。\n然后我们启动hexo后并不能看到草稿，如果需要看到草稿可以使用以下方案\n修改配置文件\n将配置文件中的render_drafts改为true\n启动hexo时加参数\n1 hexo server --drafts 当我们写完草稿后将其变成正式文章，执行以下命令：\n1 hexo publish \u0026#39;md_name\u0026#39; 这里也不需要加后缀名，如果文件名称是中文，在shell中无法输入中文可以执行以下操作\n先对~/.bash_profile配置文件进行修改，添加或修改这一行信息：\n1 export LANG=en_US.UTF-8 然后执行source ~/.bash_profile，让配置生效。\n最后重新打开终端就可以输入中文了。\n参考文章 https://hexo.io/zh-cn/docs/\nhttps://blog.csdn.net/j754379117/article/details/53897115\n","permalink":"https://www.liunaijie.top/coding/tools/hexo%E4%BD%BF%E7%94%A8/","summary":"\u003cp\u003e其实根据官网文档就很容易进行安装了，\u003ca href=\"https://hexo.io/zh-cn/docs/\"\u003e官网文档链接\u003c/a\u003e，所以也不写安装和启动的流程了。\u003c/p\u003e\n\u003ch1 id=\"安装主题\"\u003e安装主题\u003c/h1\u003e\n\u003ch1 id=\"修改配置\"\u003e修改配置\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e项目配置\u003c/li\u003e\n\u003cli\u003e主题配置\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"部署发布\"\u003e部署、发布\u003c/h1\u003e\n\u003cp\u003e修改\u003ccode\u003e_config.yml\u003c/code\u003e配置文件，支持多个配置信息，如果多个需要如下填写\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 单个配置\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edeploy:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  type: git\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  repo:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 多个配置\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edeploy:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e- type: git\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  repo:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e- type: sftp\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  repo:\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e发布到github\u003c/p\u003e\n\u003cp\u003e先进行安装\u003ccode\u003enpm install hexo-deployer-git --save\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edeploy:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  type: git\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  repo: \u003cspan class=\"c1\"\u003e# 仓库地址，最好使用http的协议，使用ssh协议时有可能会报错\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  branch: \u003cspan class=\"c1\"\u003e#发布的分支，默认是 master\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  message: \u003cspan class=\"c1\"\u003e# 提交的信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e发布到个人服务器（sftp）\u003c/p\u003e","title":"Hexo使用"},{"content":"题目描述 给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。\n示例 1：\n输入：[-4,-1,0,3,10] 输出：[0,1,9,16,100] 示例 2：\n输入：[-7,-3,2,3,11] 输出：[4,9,9,49,121]\n提示：\n1 \u0026lt;= A.length \u0026lt;= 10000 -10000 \u0026lt;= A[i] \u0026lt;= 10000 A 已按非递减顺序排序。\n解题思路 排序 我们先将每个元素平方后放到原来的位置，然后再对数组进行排序\n1 2 3 4 5 6 7 public int[] sortedSquares(int[] A) { for (int i : A) { A[i] *= A[i]; } Arrays.sort(A); return A; } 双指针 平方后对于正负数就没有区别了，所以我们先找到正负数的边间，然后向两边走。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public int[] sortedSquaresDouble(int[] A) { //先找到正数负数的分解 int length = A.length; int j = 0; while (j \u0026lt; length \u0026amp;\u0026amp; A[j] \u0026lt; 0) { j++; } //负数最后的下标 int i = j - 1; int[] res = new int[length]; int index = 0; while (i \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026lt; length) { if (A[i] * A[i] \u0026lt; A[j] * A[j]) { res[index++] = A[i] * A[i]; i--; } else { res[index++] = A[j] * A[j]; j++; } } //再将两边剩余的部分添加到数组中 while (i \u0026gt;= 0) { res[index++] = A[i] * A[i]; i--; } while (j \u0026lt; length) { res[index++] = A[j] * A[j]; j++; } return res; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9-leetcode977/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cp\u003e输入：[-4,-1,0,3,10]\n输出：[0,1,9,16,100]\n示例 2：\u003c/p\u003e\n\u003cp\u003e输入：[-7,-3,2,3,11]\n输出：[4,9,9,49,121]\u003c/p\u003e\n\u003cp\u003e提示：\u003c/p\u003e\n\u003cp\u003e1 \u0026lt;= A.length \u0026lt;= 10000\n-10000 \u0026lt;= \u003ccode\u003eA[i]\u003c/code\u003e \u0026lt;= 10000\nA 已按非递减顺序排序。\u003c/p\u003e\u003c/blockquote\u003e","title":"有序数组的平方—LeetCode977"},{"content":"题目描述 给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：\n二叉树的根是数组中的最大元素。 左子树是通过数组中最大值左边部分构造出的最大二叉树。 右子树是通过数组中最大值右边部分构造出的最大二叉树。 通过给定的数组构建最大二叉树，并且输出这个树的根节点。\n示例 ：\n输入：[3,2,1,6,0,5] 输出：返回下面这棵树的根节点：\n6 / \\ 3 5 \\ / 2 0 \\ 1 提示：\n给定的数组的大小在 [1, 1000] 之间。\n解题思路 首先找到数组中的最大值，然后将它作为根节点\n将数组左侧的数组再按照刚才构建树的方法进行递归构建，然后作为左节点\n将数组右侧的数组按照刚才构建的方法进行递归构建，然后作为右节点\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public TreeNode constructMaximumBinaryTree(int[] nums) { return buildTree(nums, 0, nums.length - 1); } public TreeNode buildTree(int[] nums, int start, int end) { if (start \u0026gt; end) { return null; } int maxIndex = getMaxIndex(nums, start, end); TreeNode root = new TreeNode(nums[maxIndex]); root.left = buildTree(nums, start, maxIndex - 1); root.right = buildTree(nums, maxIndex + 1, end); return root; } //获取从 start到end之间最大值的下标 public int getMaxIndex(int[] array, int start, int end) { int maxIndex = start; for (int i = start; i \u0026lt;= end; i++) { if (array[i] \u0026gt; array[maxIndex]) { maxIndex = i; } } return maxIndex; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91-leetcode654/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：\u003c/p\u003e\n\u003cp\u003e二叉树的根是数组中的最大元素。\n左子树是通过数组中最大值左边部分构造出的最大二叉树。\n右子树是通过数组中最大值右边部分构造出的最大二叉树。\n通过给定的数组构建最大二叉树，并且输出这个树的根节点。\u003c/p\u003e\n\u003cp\u003e示例 ：\u003c/p\u003e\n\u003cp\u003e输入：[3,2,1,6,0,5]\n输出：返回下面这棵树的根节点：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e  \t\t6\n    /   \\\n   3     5\n    \\    / \n     2  0   \n       \\\n        1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e提示：\u003c/p\u003e\n\u003cp\u003e给定的数组的大小在 [1, 1000] 之间。\u003c/p\u003e\u003c/blockquote\u003e","title":"最大二叉树—LeetCode654"},{"content":"题目描述 实现 int sqrt(int x) 函数。\n计算并返回 x 的平方根，其中 x 是非负整数。\n由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。\n示例 1:\n输入: 4 输出: 2 示例 2:\n输入: 8 输出: 2 说明: 8 的平方根是 2.82842\u0026hellip;, 由于返回类型是整数，小数部分将被舍去。\n解题思路 二分查找 这个题目可以用二分查找来做，给定x,求平方根，当x\u0026gt;=2时，x的平方根一定小于x/2且大于0。我们可以不断的逼近x，取中间值然后进行平方，与x比较，如果平方值比x小，则向中间值后面进行查找，否则在前面进行查找。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public int mySqrt(int x) { if (x \u0026lt; 2) { return x; } int left = 2, right = x / 2; while (left \u0026lt;= right) { int mid = left + (right - left) / 2; //为了避免溢出，要转换为long类型，不然结果会有问题 long num = (long) mid * mid; if (num \u0026gt; x) { right = mid - 1; } else if (num \u0026lt; x) { left = mid + 1; } else { return mid; } } return right; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9-leetcode69/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e实现 int sqrt(int x) 函数。\u003c/p\u003e\n\u003cp\u003e计算并返回 x 的平方根，其中 x 是非负整数。\u003c/p\u003e\n\u003cp\u003e由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e输入: 4\n输出: 2\n示例 2:\u003c/p\u003e\n\u003cp\u003e输入: 8\n输出: 2\n说明: 8 的平方根是 2.82842\u0026hellip;,\n由于返回类型是整数，小数部分将被舍去。\u003c/p\u003e\u003c/blockquote\u003e","title":"x的平方根—LeetCode69"},{"content":"题目描述 牌组中的每张卡牌都对应有一个唯一的整数。你可以按你想要的顺序对这套卡片进行排序。\n最初，这些卡牌在牌组里是正面朝下的（即，未显示状态）。\n现在，重复执行以下步骤，直到显示所有卡牌为止：\n从牌组顶部抽一张牌，显示它，然后将其从牌组中移出。 如果牌组中仍有牌，则将下一张处于牌组顶部的牌放在牌组的底部。 如果仍有未显示的牌，那么返回步骤 1。否则，停止行动。 返回能以递增顺序显示卡牌的牌组顺序。\n答案中的第一张牌被认为处于牌堆顶部。\n示例：\n输入：[17,13,11,2,3,5,7] 输出：[2,13,3,11,5,17,7] 解释： 我们得到的牌组顺序为 [17,13,11,2,3,5,7]（这个顺序不重要），然后将其重新排序。 重新排序后，牌组以 [2,13,3,11,5,17,7] 开始，其中 2 位于牌组的顶部。 我们显示 2，然后将 13 移到底部。牌组现在是 [3,11,5,17,7,13]。 我们显示 3，并将 11 移到底部。牌组现在是 [5,17,7,13,11]。 我们显示 5，然后将 17 移到底部。牌组现在是 [7,13,11,17]。 我们显示 7，并将 13 移到底部。牌组现在是 [11,17,13]。 我们显示 11，然后将 17 移到底部。牌组现在是 [13,17]。 我们展示 13，然后将 17 移到底部。牌组现在是 [17]。 我们显示 17。 由于所有卡片都是按递增顺序排列显示的，所以答案是正确的。\n提示：\n1 \u0026lt;= A.length \u0026lt;= 1000 1 \u0026lt;= A[i] \u0026lt;= 10^6 对于所有的 i != j，A[i] != A[j]\n解题思路 首先要理解题意，返回的数组经过它的一系列变化最终结果是递增的。\n我们从示例的介绍反着看\n数组放入最大值17，得到[17] 将数组的最后一个值放到开头，得到[17] 添加13，得到[13,17] 将数组的最后一个值放到开头，得到[17,13] 添加11，得到[11,17,13] 将数组最后一个值放到开头，得到[13,11,17] 添加7，得到[7,13,11,17] 将最后一个值放到开始位置，得到[17,7,13,11] 添加5，得到[5,17,7,13,11] 将数组最后一个值放到开始，得到[11,5,17,7,13] 添加3，得到[3,11,5,17,7,13] 将数组最后一个值方法开始，得到[13,3,11,5,17,7] 添加2，得到[2,13,3,11,5,17,7] 代码实现:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public int[] deckRevealedIncreasing(int[] deck) { if (deck == null || deck.length \u0026lt;= 1) { return deck; } //排序 Arrays.sort(deck); Queue\u0026lt;Integer\u0026gt; result = new LinkedList\u0026lt;Integer\u0026gt;(); //先将最后一个元素放进去 result.add(deck[deck.length - 1]); //从倒数第二个元素开始遍历 for (int i = deck.length - 2; i \u0026gt;= 0; i--) { //将最后一个值放到开始位置 result.add(result.poll()); //添加元素 result.add(deck[i]); } //由于使用的队列，所以位置与数组相反 for (int i = result.size() - 1; i \u0026gt;= 0; i--) { deck[i] = result.poll(); } return deck; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%8C%89%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E6%98%BE%E7%A4%BA%E5%8D%A1%E7%89%8C-leetcode950/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e牌组中的每张卡牌都对应有一个唯一的整数。你可以按你想要的顺序对这套卡片进行排序。\u003c/p\u003e\n\u003cp\u003e最初，这些卡牌在牌组里是正面朝下的（即，未显示状态）。\u003c/p\u003e\n\u003cp\u003e现在，重复执行以下步骤，直到显示所有卡牌为止：\u003c/p\u003e\n\u003cp\u003e从牌组顶部抽一张牌，显示它，然后将其从牌组中移出。\n如果牌组中仍有牌，则将下一张处于牌组顶部的牌放在牌组的底部。\n如果仍有未显示的牌，那么返回步骤 1。否则，停止行动。\n返回能以递增顺序显示卡牌的牌组顺序。\u003c/p\u003e\n\u003cp\u003e答案中的第一张牌被认为处于牌堆顶部。\u003c/p\u003e\n\u003cp\u003e示例：\u003c/p\u003e\n\u003cp\u003e输入：[17,13,11,2,3,5,7]\n输出：[2,13,3,11,5,17,7]\n解释：\n我们得到的牌组顺序为 [17,13,11,2,3,5,7]（这个顺序不重要），然后将其重新排序。\n重新排序后，牌组以 [2,13,3,11,5,17,7] 开始，其中 2 位于牌组的顶部。\n我们显示 2，然后将 13 移到底部。牌组现在是 [3,11,5,17,7,13]。\n我们显示 3，并将 11 移到底部。牌组现在是 [5,17,7,13,11]。\n我们显示 5，然后将 17 移到底部。牌组现在是 [7,13,11,17]。\n我们显示 7，并将 13 移到底部。牌组现在是 [11,17,13]。\n我们显示 11，然后将 17 移到底部。牌组现在是 [13,17]。\n我们展示 13，然后将 17 移到底部。牌组现在是 [17]。\n我们显示 17。\n由于所有卡片都是按递增顺序排列显示的，所以答案是正确的。\u003c/p\u003e\n\u003cp\u003e提示：\u003c/p\u003e\n\u003cp\u003e1 \u0026lt;= A.length \u0026lt;= 1000\n1 \u0026lt;= \u003ccode\u003eA[i]\u003c/code\u003e \u0026lt;= 10^6\n对于所有的 \u003ccode\u003ei != j，A[i] != A[j]\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e","title":"按递增顺序显示卡牌—LeetCode950"},{"content":"题目描述 实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。\n示例 1：\n输入: \u0026ldquo;Hello\u0026rdquo; 输出: \u0026ldquo;hello\u0026rdquo; 示例 2：\n输入: \u0026ldquo;here\u0026rdquo; 输出: \u0026ldquo;here\u0026rdquo; 示例 3：\n输入: \u0026ldquo;LOVELY\u0026rdquo; 输出: \u0026ldquo;lovely\u0026rdquo;\n解题思路 实现一个转换成小写的功能，对字符串进行遍历，如果是大写，将其转换成小写，然后再进行拼接\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 public String toLowerCase(String str) { StringBuilder stringBuilder = new StringBuilder(); for (int i = 0; i \u0026lt; str.length(); i++) { char c = str.charAt(i); if (c \u0026gt;= \u0026#39;A\u0026#39; \u0026amp;\u0026amp; c \u0026lt;= \u0026#39;Z\u0026#39;) { c += 32; } stringBuilder.append(c); } return stringBuilder.toString(); } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D-leetcode709/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。\u003c/p\u003e\n\u003cp\u003e示例 1：\u003c/p\u003e\n\u003cp\u003e输入: \u0026ldquo;Hello\u0026rdquo;\n输出: \u0026ldquo;hello\u0026rdquo;\n示例 2：\u003c/p\u003e\n\u003cp\u003e输入: \u0026ldquo;here\u0026rdquo;\n输出: \u0026ldquo;here\u0026rdquo;\n示例 3：\u003c/p\u003e\n\u003cp\u003e输入: \u0026ldquo;LOVELY\u0026rdquo;\n输出: \u0026ldquo;lovely\u0026rdquo;\u003c/p\u003e\u003c/blockquote\u003e","title":"转换为小写字母—LeetCode709"},{"content":"题目描述 给定一个非负整数数组 A，返回一个数组，在该数组中， A 的所有偶数元素之后跟着所有奇数元素。\n你可以返回满足此条件的任何数组作为答案。\n示例：\n输入：[3,1,2,4] 输出：[2,4,3,1] 输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。\n提示：\n1 \u0026lt;= A.length \u0026lt;= 5000 0 \u0026lt;= A[i] \u0026lt;= 5000\n解题思路 两遍扫描 可以对数组遍历两遍，第一遍将偶数放到新创建的数组中，第二遍将奇数放到新创建的数组中\n代码实现:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public int[] sortArrayByParityArray(int[] A) { int[] result = new int[A.length]; //先放偶数 int index = 0; for (int i = 0; i \u0026lt; A.length; i++) { if ((A[i] \u0026amp; 1) == 0) { result[index++] = A[i]; } } //再放奇数 for (int i = 0; i \u0026lt; A.length; i++) { if ((A[i] \u0026amp; 1) == 1) { result[index++] = A[i]; } } return result; } 双指针法 它对于顺序没有要求，只要将所以偶数放到奇数前面就可以，我们利用两个指针分别从前后向中间移动。\ni从左边向中间移动，时刻保持i左边的都是偶数，i行进过程中遇到偶数继续前进，遇到奇数先暂停。\nj从右边向中间移动，遇到奇数继续前进，遇到偶数暂停。\n当i遇到奇数，j遇到偶数时两者交换，再进行前进。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public int[] sortArrayByParity(int[] A) { int i = 0, j = A.length - 1; while (i \u0026lt; j) { //i遇到偶数继续前进 if (A[i] % 2 == 0) { i++; } //j遇到奇数继续前进 if (A[j] % 2 == 1) { j--; } //当i遇到奇数 1 \u0026gt; j遇到偶数0 时交换 if (A[i] % 2 \u0026gt; A[j] % 2) { int tmp = A[i]; A[i] = A[j]; A[j] = tmp; } } return A; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%8C%89%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84-leetcode905/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个非负整数数组 A，返回一个数组，在该数组中， A 的所有偶数元素之后跟着所有奇数元素。\u003c/p\u003e\n\u003cp\u003e你可以返回满足此条件的任何数组作为答案。\u003c/p\u003e\n\u003cp\u003e示例：\u003c/p\u003e\n\u003cp\u003e输入：[3,1,2,4]\n输出：[2,4,3,1]\n输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。\u003c/p\u003e\n\u003cp\u003e提示：\u003c/p\u003e\n\u003cp\u003e1 \u0026lt;= A.length \u0026lt;= 5000\n0 \u0026lt;= \u003ccode\u003eA[i]\u003c/code\u003e \u0026lt;= 5000\u003c/p\u003e\u003c/blockquote\u003e","title":"按奇偶排序数组-LeetCode905"},{"content":"题目描述 每封电子邮件都由一个本地名称和一个域名组成，以 @ 符号分隔。\n例如，在 alice@leetcode.com中， alice 是本地名称，而 leetcode.com 是域名。\n除了小写字母，这些电子邮件还可能包含 \u0026lsquo;.\u0026rsquo; 或 \u0026lsquo;+\u0026rsquo;。\n如果在电子邮件地址的本地名称部分中的某些字符之间添加句点（\u0026rsquo;.\u0026rsquo;），则发往那里的邮件将会转发到本地名称中没有点的同一地址。例如，\u0026ldquo;alice.z@leetcode.com” 和 “alicez@leetcode.com” 会转发到同一电子邮件地址。 （请注意，此规则不适用于域名。）\n如果在本地名称中添加加号（\u0026rsquo;+\u0026rsquo;），则会忽略第一个加号后面的所有内容。这允许过滤某些电子邮件，例如 m.y+name@email.com 将转发到 my@email.com。 （同样，此规则不适用于域名。）\n可以同时使用这两个规则。\n给定电子邮件列表 emails，我们会向列表中的每个地址发送一封电子邮件。实际收到邮件的不同地址有多少？\n示例：\n输入：[\u0026ldquo;test.email+alex@leetcode.com\u0026rdquo;,\u0026ldquo;test.e.mail+bob.cathy@leetcode.com\u0026rdquo;,\u0026ldquo;testemail+david@lee.tcode.com\u0026rdquo;] 输出：2 解释：实际收到邮件的是 \u0026ldquo;testemail@leetcode.com\u0026rdquo; 和 \u0026ldquo;testemail@lee.tcode.com\u0026rdquo;。\n提示：\n1 \u0026lt;= emails[i].length \u0026lt;= 100 1 \u0026lt;= emails.length \u0026lt;= 100 每封 emails[i] 都包含有且仅有一个 \u0026lsquo;@\u0026rsquo; 字符。\n解题思路 先根据@将本地名称与域名进行区分，域名不用做任何操作。\n将本地名称根据规则进行修改\n然后再将两个信息合并添加到set中，最后返回set的数量即可。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public int numUniqueEmails(String[] emails) { Set\u0026lt;String\u0026gt; all = new HashSet\u0026lt;String\u0026gt;(); for (String email : emails) { //用@符号将两者分隔 String[] address = email.split(\u0026#34;@\u0026#34;); //得到本地名称 String localName = address[0]; //判断是否有+，如果有只截取+前面的内容 String plus = \u0026#34;+\u0026#34;; if (localName.contains(plus)) { localName = localName.substring(0, localName.indexOf(plus)); } //判断是否有. 如果有则替换 String point = \u0026#34;.\u0026#34;; if (localName.contains(point)) { localName = localName.replace(point, \u0026#34;\u0026#34;); } //然后再将两者拼接添加到set中 all.add(localName + \u0026#34;@\u0026#34; + address[1]); } return all.size(); } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E7%8B%AC%E7%89%B9%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%9C%B0%E5%9D%80-leetcode929/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e每封电子邮件都由一个本地名称和一个域名组成，以 @ 符号分隔。\u003c/p\u003e\n\u003cp\u003e例如，在 \u003ca href=\"mailto:alice@leetcode.com\"\u003ealice@leetcode.com\u003c/a\u003e中， alice 是本地名称，而 leetcode.com 是域名。\u003c/p\u003e\n\u003cp\u003e除了小写字母，这些电子邮件还可能包含 \u0026lsquo;.\u0026rsquo; 或 \u0026lsquo;+\u0026rsquo;。\u003c/p\u003e\n\u003cp\u003e如果在电子邮件地址的本地名称部分中的某些字符之间添加句点（\u0026rsquo;.\u0026rsquo;），则发往那里的邮件将会转发到本地名称中没有点的同一地址。例如，\u0026ldquo;\u003ca href=\"mailto:alice.z@leetcode.com\"\u003ealice.z@leetcode.com\u003c/a\u003e” 和 “alicez@leetcode.com” 会转发到同一电子邮件地址。 （请注意，此规则不适用于域名。）\u003c/p\u003e\n\u003cp\u003e如果在本地名称中添加加号（\u0026rsquo;+\u0026rsquo;），则会忽略第一个加号后面的所有内容。这允许过滤某些电子邮件，例如 \u003ca href=\"mailto:m.y+name@email.com\"\u003em.y+name@email.com\u003c/a\u003e 将转发到 \u003ca href=\"mailto:my@email.com\"\u003emy@email.com\u003c/a\u003e。 （同样，此规则不适用于域名。）\u003c/p\u003e\n\u003cp\u003e可以同时使用这两个规则。\u003c/p\u003e\n\u003cp\u003e给定电子邮件列表 emails，我们会向列表中的每个地址发送一封电子邮件。实际收到邮件的不同地址有多少？\u003c/p\u003e\n\u003cp\u003e示例：\u003c/p\u003e\n\u003cp\u003e输入：[\u0026ldquo;\u003ca href=\"mailto:test.email+alex@leetcode.com\"\u003etest.email+alex@leetcode.com\u003c/a\u003e\u0026rdquo;,\u0026ldquo;\u003ca href=\"mailto:test.e.mail+bob.cathy@leetcode.com\"\u003etest.e.mail+bob.cathy@leetcode.com\u003c/a\u003e\u0026rdquo;,\u0026ldquo;\u003ca href=\"mailto:testemail+david@lee.tcode.com\"\u003etestemail+david@lee.tcode.com\u003c/a\u003e\u0026rdquo;]\n输出：2\n解释：实际收到邮件的是 \u0026ldquo;\u003ca href=\"mailto:testemail@leetcode.com\"\u003etestemail@leetcode.com\u003c/a\u003e\u0026rdquo; 和 \u0026ldquo;\u003ca href=\"mailto:testemail@lee.tcode.com\"\u003etestemail@lee.tcode.com\u003c/a\u003e\u0026rdquo;。\u003c/p\u003e\n\u003cp\u003e提示：\u003c/p\u003e\n\u003cp\u003e1 \u0026lt;= \u003ccode\u003eemails[i]\u003c/code\u003e.length \u0026lt;= 100\n1 \u0026lt;= emails.length \u0026lt;= 100\n每封 \u003ccode\u003eemails[i]\u003c/code\u003e 都包含有且仅有一个 \u0026lsquo;@\u0026rsquo; 字符。\u003c/p\u003e\u003c/blockquote\u003e","title":"独特的电子邮件地址-LeetCode929"},{"content":"题目描述 给定一个仅包含大小写字母和空格 \u0026rsquo; \u0026rsquo; 的字符串 s，返回其最后一个单词的长度。如果字符串从左向右滚动显示，那么最后一个单词就是最后出现的单词。\n如果不存在最后一个单词，请返回 0 。\n说明：一个单词是指仅由字母组成、不包含任何空格字符的 最大子字符串。\n示例:\n输入: \u0026ldquo;Hello World\u0026rdquo; 输出: 5\n解题思路 题目要求最后一个单词的长度，我们从字符串最后面开始向前查找，当遇到空格时就表示我们找到了最后一个单词。\n这还有一些其他情况，单词最后还有空格，字符串只有一个单词，都需要进行一些判断。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public int lengthOfLastWord(String s) { int index = s.length() - 1; //先将字符串后面的空格去掉 while (index \u0026gt;= 0 \u0026amp;\u0026amp; s.charAt(index) == \u0026#39; \u0026#39;) { index--; } //如果不存在最后一个单词，返回0 if (index \u0026lt; 0) { return 0; } //查找最后一个单词 int start = index; while (start \u0026gt;= 0 \u0026amp;\u0026amp; s.charAt(start) != \u0026#39; \u0026#39;) { start--; } //返回长度 return index - start; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6-leetcode58/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个仅包含大小写字母和空格 \u0026rsquo; \u0026rsquo; 的字符串 s，返回其最后一个单词的长度。如果字符串从左向右滚动显示，那么最后一个单词就是最后出现的单词。\u003c/p\u003e\n\u003cp\u003e如果不存在最后一个单词，请返回 0 。\u003c/p\u003e\n\u003cp\u003e说明：一个单词是指仅由字母组成、不包含任何空格字符的 最大子字符串。\u003c/p\u003e\n\u003cp\u003e示例:\u003c/p\u003e\n\u003cp\u003e输入: \u0026ldquo;Hello World\u0026rdquo;\n输出: 5\u003c/p\u003e\u003c/blockquote\u003e","title":"最后一个单词的长度-LeetCode58"},{"content":"题目描述 给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。\nJ 中的字母不重复，J 和 S中的所有字符都是字母。字母区分大小写，因此\u0026quot;a\u0026quot;和\u0026quot;A\u0026quot;是不同类型的石头。\n示例 1:\n输入: J = \u0026ldquo;aA\u0026rdquo;, S = \u0026ldquo;aAAbbbb\u0026rdquo; 输出: 3 示例 2:\n输入: J = \u0026ldquo;z\u0026rdquo;, S = \u0026ldquo;ZZ\u0026rdquo; 输出: 0 注意:\nS 和 J 最多含有50个字母。 J 中的字符不重复。\n解题思路 遍历 对S进行遍历，判断每个字符是否在J中，如果在则数量加一\n代码实现：\n1 2 3 4 5 6 7 8 9 public int numJewelsInStones(String J, String S) { int count = 0; for (int i = 0; i \u0026lt; S.length(); i++) { if (J.contains(String.valueOf(S.charAt(i)))) { count++; } } return count; } 哈希 可以先将J中 的内容用哈希表保存，然后再进行查找\n1 2 3 4 5 6 7 8 9 10 11 12 13 public int numJewelsInStonesHash(String J, String S) { int count = 0; Set\u0026lt;Character\u0026gt; set = new HashSet\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; J.length(); i++) { set.add(J.charAt(i)); } for (int i = 0; i \u0026lt; S.length(); i++) { if (set.contains(S.charAt(i))) { count++; } } return count; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%AE%9D%E7%9F%B3%E4%B8%8E%E7%9F%B3%E5%A4%B4-leetcode771/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。\u003c/p\u003e\n\u003cp\u003eJ 中的字母不重复，J 和 S中的所有字符都是字母。字母区分大小写，因此\u0026quot;a\u0026quot;和\u0026quot;A\u0026quot;是不同类型的石头。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e输入: J = \u0026ldquo;aA\u0026rdquo;, S = \u0026ldquo;aAAbbbb\u0026rdquo;\n输出: 3\n示例 2:\u003c/p\u003e\n\u003cp\u003e输入: J = \u0026ldquo;z\u0026rdquo;, S = \u0026ldquo;ZZ\u0026rdquo;\n输出: 0\n注意:\u003c/p\u003e\n\u003cp\u003eS 和 J 最多含有50个字母。\nJ 中的字符不重复。\u003c/p\u003e\u003c/blockquote\u003e","title":"宝石与石头-LeetCode771"},{"content":"这篇文章主要写一下我在利用goaccess查看nginx生成的访问日志时的经历。\n​\t最终会生成一个下面类似的网页：\n配置Nginx ​\t我们在nginx配置文件中可以对总体的访问或单个项目的访问生成日志，我们可以对日志生成网页更加直观的查看访问信息。\n这是我在nginx配置文件中的配置:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 http { include mime.types; default_type application/octet-stream; # 日志格式 名称为 main log_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39; \u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39; \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;; access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; gzip on; ......省略 server { ......省略 location /robot/ { access_log logs/robot_access.log main; ......省略 } ......省略 } 安装 goaccess ​\t在安装之前我们要先安装基础环境\n1 2 3 4 5 6 7 8 #为方便最终日志统计时显示IP地理位置，需要安装依赖项GeoIP-devel： yum install GeoIP-devel.x86_64 #安装ncurses-devel开发库： yum install ncurses-devel #安装tokyocabinet-devel开发库： yum install tokyocabinet-devel #安装openssl-devel开发库： yum install openssl-devel ​\t然后正式安goaccess\n1 2 3 4 5 6 wget https://tar.goaccess.io/goaccess-1.3.tar.gz tar -xzvf goaccess-1.3.tar.gz cd goaccess-1.3/ ./configure --enable-utf8 --enable-geoip=legacy make make install ​\t这里要注意的是，如果我们使用https，我们要在configure中添加一个--with-openssl不然我们使用https时ws会跳转到wss但是会被拒绝掉。\n启动 然后我们进入到nginx下的logs目录中。执行以下命令生成网页(report.html)：\n1 goaccess /usr/local/nginx/logs/access.log -o /usr/local/nginx/html/report.html --real-time-html --time-format=\u0026#39;%H:%M:%S\u0026#39; --date-format=\u0026#39;%d/%b/%Y\u0026#39; --log-format=COMBINED --daemonize ​\t我们加--daemonize参数是为了后台执行，执行这个的前提是有--real-time-html这个参数。如果我们是https的还需要添加 --ssl-cert=crt文件目录 --ssl-key=key文件目录这两个参数才可以实现wss\n​\t完成后我们就可以输入地址进行访问。\n权限访问 ​\t最后我们这个生成的网页并不想让所有人都看到，那我们可以设置一个密码，输入密码后才可以访问。这里我们利用htpasswd这个工具。\n​\t先进行安装yum -y install httpd-tools\n​\t然后设置用户名和密码，并把用户名、密码保存到指定文件中（这里生成的用户名为userTest，存放到nginx下的passwd文件中）\n1 2 3 4 htpasswd -c /usr/local/nginx/passwd userTest New password: Re-type new password: Adding password for user coderschool ​\t然后配置nginx中的访问：\n1 2 3 4 5 6 7 8 location /report.html { alias /usr/local/nginx/html/report.html; auth_basic \u0026#34;请输入用户名和密码！\u0026#34;; #这里是验证时的提示信息 auth_basic_user_file /usr/local/nginx/report_passwd; #这是你生成密码存放的文件 proxy_http_version 1.1; # 这三行是为了实现websocket proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; } ​\t至此，我们就完成了用goaccess对nginx日志的实现监控。\n​\t打开链接会首先让我们输入用户名和密码，然后就可以看到我们统计的信息了，并且是通过websocket连接，请求数据都会实时改变。\n​\n","permalink":"https://www.liunaijie.top/coding/devops/nginx/%E5%88%A9%E7%94%A8goaccess%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7nginx%E7%9A%84%E8%AE%BF%E9%97%AE%E6%97%A5%E5%BF%97/","summary":"\u003cp\u003e这篇文章主要写一下我在利用goaccess查看nginx生成的访问日志时的经历。\u003c/p\u003e\n\u003cp\u003e​\t最终会生成一个下面类似的网页：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/image-20181220155818036.png\" alt=\"goaccess网页\"\u003e\u003c/p\u003e","title":"利用goaccess实时监控nginx的访问日志"},{"content":"题目描述 编写一个函数来查找字符串数组中的最长公共前缀。\n如果不存在公共前缀，返回空字符串 \u0026quot;\u0026quot;。\n示例 1:\n输入: \\[\u0026#34;flower\u0026#34;,\u0026#34;flow\u0026#34;,\u0026#34;flight\u0026#34;] 输出: \u0026#34;fl\u0026#34; 示例 2:\n输入: \\[\u0026#34;dog\u0026#34;,\u0026#34;racecar\u0026#34;,\u0026#34;car\u0026#34;] 输出: \u0026#34;\u0026#34; 解释: 输入不存在公共前缀。 说明:\n所有输入只包含小写字母 a-z 。\n解题思路 首先判断入参数组的长度，如果数组为空则直接返回空字符串，如果长度为1，则返回第一个字符串即可。\n当有多个字符串时，拿第一个字符串去与其他字符串对比。我们默认第一个字符串全部为公共前缀，于其他字符串每每比较，得到公共前缀，最终的结果就是全部字符串的公共前缀。有可能中间存在公共前缀为空的情况，这时不需要再向下遍历比较。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public static String longestCommonPrefix(String[] strs) { if (strs.length == 0) { return \u0026#34;\u0026#34;; } else if (strs.length == 1) { return strs[0]; } String result = strs[0]; for (int i = 1; i \u0026lt; strs.length; i++) { int end = 0; for (; end \u0026lt; result.length() \u0026amp;\u0026amp; end \u0026lt; strs[i].length(); end++) { if (result.charAt(end) != strs[i].charAt(end)) { break; } } result = result.substring(0, end); if (\u0026#34;\u0026#34;.equals(result)) { return result; } } return result; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80-leetcode14/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e编写一个函数来查找字符串数组中的最长公共前缀。\u003c/p\u003e\n\u003cp\u003e如果不存在公共前缀，返回空字符串 \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入: \\[\u0026#34;flower\u0026#34;,\u0026#34;flow\u0026#34;,\u0026#34;flight\u0026#34;]\n输出: \u0026#34;fl\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e输入: \\[\u0026#34;dog\u0026#34;,\u0026#34;racecar\u0026#34;,\u0026#34;car\u0026#34;]\n输出: \u0026#34;\u0026#34;\n解释: 输入不存在公共前缀。\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e所有输入只包含小写字母 \u003ccode\u003ea-z\u003c/code\u003e 。\u003c/p\u003e\u003c/blockquote\u003e","title":"最长公共前缀-LeetCode14"},{"content":"题目描述 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。\n字符 数值 I 1 V 5 X 10 L 50 C 100 D 500 M 1000 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。\n通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：\nI 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。 X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。 给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。\n示例 1:\n输入: \u0026ldquo;III\u0026rdquo; 输出: 3 示例 2:\n输入: \u0026ldquo;IV\u0026rdquo; 输出: 4 示例 3:\n输入: \u0026ldquo;IX\u0026rdquo; 输出: 9 示例 4:\n输入: \u0026ldquo;LVIII\u0026rdquo; 输出: 58 解释: L = 50, V= 5, III = 3. 示例 5:\n输入: \u0026ldquo;MCMXCIV\u0026rdquo; 输出: 1994 解释: M = 1000, CM = 900, XC = 90, IV = 4.\n解题思路 罗马数字与平常看到的十进制不同，它没有进制。它只要把这个符号代表的数值累加起来。\n有一个注意的地方是当I,X,C三个字符出现时要先判断后面出现的字符，拿I来说，如果它的后面出现的是V,X，它的意思就不是加一了，而是减一了，即IV= -1+5 =4。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 public static int romanToInt(String s) { int result = 0; for (int i = 0; i \u0026lt; s.length(); i++) { char c = s.charAt(i); switch (c) { case \u0026#39;I\u0026#39;: if (i + 1 \u0026lt; s.length() \u0026amp;\u0026amp; s.charAt(i + 1) == \u0026#39;V\u0026#39;) { result += 4; i++; continue; } if (i + 1 \u0026lt; s.length() \u0026amp;\u0026amp; s.charAt(i + 1) == \u0026#39;X\u0026#39;) { result += 9; i++; continue; } case \u0026#39;X\u0026#39;: if (i + 1 \u0026lt; s.length() \u0026amp;\u0026amp; s.charAt(i + 1) == \u0026#39;L\u0026#39;) { result += 40; i++; continue; } if (i + 1 \u0026lt; s.length() \u0026amp;\u0026amp; s.charAt(i + 1) == \u0026#39;C\u0026#39;) { result += 90; i++; continue; } case \u0026#39;C\u0026#39;: if (i + 1 \u0026lt; s.length() \u0026amp;\u0026amp; s.charAt(i + 1) == \u0026#39;D\u0026#39;) { result += 400; i++; continue; } if (i + 1 \u0026lt; s.length() \u0026amp;\u0026amp; s.charAt(i + 1) == \u0026#39;M\u0026#39;) { result += 900; i++; continue; } default: } result += help(c); } return result; } private static int help(char c) { switch (c) { case \u0026#39;I\u0026#39;: return 1; case \u0026#39;V\u0026#39;: return 5; case \u0026#39;X\u0026#39;: return 10; case \u0026#39;L\u0026#39;: return 50; case \u0026#39;C\u0026#39;: return 100; case \u0026#39;D\u0026#39;: return 500; case \u0026#39;M\u0026#39;: return 1000; default: return 0; } return 0; } 优化 针对上面的思路我们进行了优化，不再使用额外的函数来进行转换，而是使用hashmap来存储，并且可以看出，如果前面的数字比后面的数字小，那么就应该是做减法\n用代码来实现一下能更好理解：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public int romanToIntMap(String s) { Map\u0026lt;Character, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(7); map.put(\u0026#39;I\u0026#39;, 1); map.put(\u0026#39;V\u0026#39;, 5); map.put(\u0026#39;X\u0026#39;, 10); map.put(\u0026#39;L\u0026#39;, 50); map.put(\u0026#39;C\u0026#39;, 100); map.put(\u0026#39;D\u0026#39;, 500); map.put(\u0026#39;M\u0026#39;, 1000); int result = 0; int pre = map.get(s.charAt(0)); for (int i = 1; i \u0026lt; s.length(); i++) { int now = map.get(s.charAt(i)); if (pre \u0026lt; now) { //比如，1\u0026lt;5。此时应该做减法 即 -1+5 result -= pre; } else { result += pre; } //将当前数字置为下一个的前一个数字 pre = now; } //由于最后一个还没有添加所以再将其累加上 result += pre; return result; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0-leetcode13/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。\u003c/p\u003e\n\u003cp\u003e字符          数值\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。\u003c/p\u003e\n\u003cp\u003e通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：\u003c/p\u003e\n\u003cp\u003eI 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。\nX 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。\nC 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。\n给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e输入: \u0026ldquo;III\u0026rdquo;\n输出: 3\n示例 2:\u003c/p\u003e\n\u003cp\u003e输入: \u0026ldquo;IV\u0026rdquo;\n输出: 4\n示例 3:\u003c/p\u003e\n\u003cp\u003e输入: \u0026ldquo;IX\u0026rdquo;\n输出: 9\n示例 4:\u003c/p\u003e\n\u003cp\u003e输入: \u0026ldquo;LVIII\u0026rdquo;\n输出: 58\n解释: L = 50, V= 5, III = 3.\n示例 5:\u003c/p\u003e\n\u003cp\u003e输入: \u0026ldquo;MCMXCIV\u0026rdquo;\n输出: 1994\n解释: M = 1000, CM = 900, XC = 90, IV = 4.\u003c/p\u003e\u003c/blockquote\u003e","title":"罗马数字转整数-LeetCode13"},{"content":"题目描述 给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。\n不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。\n示例 1:\n给定数组 nums = [1,1,2],\n函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。\n你不需要考虑数组中超出新长度后面的元素。 示例 2:\n给定 nums = [0,0,1,1,1,2,2,3,3,4],\n函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。\n你不需要考虑数组中超出新长度后面的元素。\n说明:\n为什么返回数值是整数，但输出的答案是数组呢?\n请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\n你可以想象内部操作如下:\n// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝 int len = removeDuplicates(nums);\n// 在函数里修改输入数组对于调用者是可见的。 // 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。 for (int i = 0; i \u0026lt; len; i++) { print(nums[i]); }\n这个题目有几个要求，原地算法，即不能使用额外的空间，空间复杂度要求O(1)。\n同时我们不需要考虑数组中超出新长度后面的元素，实例1，我们最后给出的结果是[1,2,*]。第三个元素肯定是有的，不用对它进行重置等操作。\n同时这个题，要求的返回结果是新的长度，即没有重复元素的个数。\n解题思路 双指针法 由于数组是拍好序的，所以如果有重复元素，肯定是挨着的。\n使用两个指针，第一个指针在0位置记作i，第二个指针在1位置记作j。然后比较num[i]与num[j]。如果两者相同，则j向后挪动。当两者不同时，先将i加一，然后判断j与i的关系，如果j=i则不必交换。如果j!=i，则将num[i]的值置为num[j]，然后i向后挪动。然后继续比较，直到j到达数组的末尾。这时i+1就表示未重复元素的个数。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public static int removeDuplicatesSelf(int[] nums) { if (nums.length == 0) { return 0; } int i = 0; for (int j = 1; j \u0026lt; nums.length; j++) { if (nums[j] != nums[i]) { i++; if (j != i) { nums[i] = nums[j]; } } } return i + 1; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9-leetcode26/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。\u003c/p\u003e\n\u003cp\u003e不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e给定数组 nums = [1,1,2],\u003c/p\u003e\n\u003cp\u003e函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。\u003c/p\u003e\n\u003cp\u003e你不需要考虑数组中超出新长度后面的元素。\n示例 2:\u003c/p\u003e\n\u003cp\u003e给定 nums = [0,0,1,1,1,2,2,3,3,4],\u003c/p\u003e\n\u003cp\u003e函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。\u003c/p\u003e\n\u003cp\u003e你不需要考虑数组中超出新长度后面的元素。\u003c/p\u003e\n\u003cp\u003e说明:\u003c/p\u003e\n\u003cp\u003e为什么返回数值是整数，但输出的答案是数组呢?\u003c/p\u003e\n\u003cp\u003e请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\u003c/p\u003e\n\u003cp\u003e你可以想象内部操作如下:\u003c/p\u003e\n\u003cp\u003e// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝\nint len = removeDuplicates(nums);\u003c/p\u003e\n\u003cp\u003e// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。\nfor (int i = 0; i \u0026lt; len; i++) {\nprint(nums[i]);\n}\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e这个题目有几个要求，原地算法，即不能使用额外的空间，空间复杂度要求O(1)。\u003c/p\u003e\n\u003cp\u003e同时我们不需要考虑数组中超出新长度后面的元素，实例1，我们最后给出的结果是[1,2,*]。第三个元素肯定是有的，不用对它进行重置等操作。\u003c/p\u003e\n\u003cp\u003e同时这个题，要求的返回结果是新的长度，即没有重复元素的个数。\u003c/p\u003e","title":"删除排序数组中的重复项—LeetCode26"},{"content":"题目描述 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。\n示例 1:\n输入: [1,2,3,4,5,6,7] 和 k = 3 输出: [5,6,7,1,2,3,4] 解释: 向右旋转 1 步: [7,1,2,3,4,5,6] 向右旋转 2 步: [6,7,1,2,3,4,5] 向右旋转 3 步: [5,6,7,1,2,3,4] 示例 2:\n输入: [-1,-100,3,99] 和 k = 2 输出: [3,99,-1,-100] 解释: 向右旋转 1 步: [99,-1,-100,3] 向右旋转 2 步: [3,99,-1,-100] 说明:\n尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。 要求使用空间复杂度为 O(1) 的 原地 算法。\n首先我们要明确一个问题，当k超过数组长度时，我们要将k对数组长度取余。 当k等于数组长度时，不用进行操作直接返回。\n解题思路 暴力 从上面的步骤可以看到我们可以移动k次，每一次向右移动一次。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public void rotate(int[] nums, int k) { int length = nums.length; //对k的处理 if(k==length){ return; }else if(k\u0026gt;length){ k %= length; } //移动k次， for (int i = 0; i \u0026lt;k ; i++) { //将最后一个元素暂时存储，然后将数组从头开始向后挪动一位，移动元素长度-1个。然后再将第一个置为临时元素。 int temp = nums[length-1]; System.arraycopy(nums,0,nums,1,nums.length-1); nums[0]=temp; } } 复杂度分析：\n时间复杂度：我们移动了k次，每次移动都需要移动n个元素，所以时间复杂度为O(k*n)。\n空间复杂度：没有使用到额外的空间，所以空间复杂度为O(1)\n反转 我们来看一个例子：数组[1,2,3,4,5,6,7],k=3。\n我们首先将全部元素反转[7,6,5,4,3,2,1] 然后将前k个元素反转 [5,6,7,4,3,2,1] 将后面的n-k个元素反转 [5,6,7,1,2,3,4] 代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public void rotateThree(int[] nums, int k) { if (k == nums.length) { return; } else { k %= nums.length; } reverseThreeHelp(nums, 0, nums.length - 1); reverseThreeHelp(nums, 0, k - 1); reverseThreeHelp(nums, k, nums.length - 1); } public void reverseThreeHelp(int[] nums, int start, int end) { while (start \u0026lt; end) { int temp = nums[start]; nums[start] = nums[end]; nums[end] = temp; start++; end--; } } 复杂度分析：\n空间复杂度：没有用到额外的空间，所以空间复杂度为O(1)\n时间复杂度：经过了3次反转，每次反转时间复杂度为O(n)，所以时间复杂度为O(3*n)。\n使用额外的数组 我们可以先将后k个元素存储到数组中，然后将前面的元素移动，再将刚才保存的元素复制到数组开头。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 public void rotateArray(int[] nums, int k) { if (k == nums.length) { return; } else { k %= nums.length; } int[] array = new int[k]; System.arraycopy(nums, nums.length - k, array, 0, k); System.arraycopy(nums, 0, nums, k, nums.length - k); System.arraycopy(array, 0, nums, 0, k); } 但是这个思路的空间复杂度为O(k)，并不是O(1)，所以不符合要求，但是是这个问题的一种解决思路。\n","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84-leetcode189/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e输入: [1,2,3,4,5,6,7] 和 k = 3\n输出: [5,6,7,1,2,3,4]\n解释:\n向右旋转 1 步: [7,1,2,3,4,5,6]\n向右旋转 2 步: [6,7,1,2,3,4,5]\n向右旋转 3 步: [5,6,7,1,2,3,4]\n示例 2:\u003c/p\u003e\n\u003cp\u003e输入: [-1,-100,3,99] 和 k = 2\n输出: [3,99,-1,-100]\n解释:\n向右旋转 1 步: [99,-1,-100,3]\n向右旋转 2 步: [3,99,-1,-100]\n说明:\u003c/p\u003e\n\u003cp\u003e尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。\n要求使用空间复杂度为 O(1) 的 原地 算法。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e首先我们要明确一个问题，当k超过数组长度时，我们要将k对数组长度取余。 当k等于数组长度时，不用进行操作直接返回。\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch1 id=\"解题思路\"\u003e解题思路\u003c/h1\u003e\n\u003ch2 id=\"暴力\"\u003e暴力\u003c/h2\u003e\n\u003cp\u003e从上面的步骤可以看到我们可以移动k次，每一次向右移动一次。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003erotate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e//对k的处理\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e%=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e//移动k次，\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e//将最后一个元素暂时存储，然后将数组从头开始向后挪动一位，移动元素长度-1个。然后再将第一个置为临时元素。\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003earraycopy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]=\u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e复杂度分析：\u003c/p\u003e","title":"旋转数组—LeetCode189"},{"content":"题目描述 给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。\n最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。\n你可以假设除了整数 0 之外，这个整数不会以零开头。\n示例 1:\n输入: [1,2,3] 输出: [1,2,4] 解释: 输入数组表示数字 123。 示例 2:\n输入: [4,3,2,1] 输出: [4,3,2,2] 解释: 输入数组表示数字 4321。\n一个数组，每一位表示一个数字，高位在前面，然后需要将这个值加一，并且按照数组的形式返回。\n解题思路 日常生活中，如果拿到一个值，加一。首先是操作个位。\n这时候有几种情况，\n个位数小于9，长度不变，最后一位加1即可。比如18+1=19。\n个位数等于9，进位过程中在中间某一位完成，比如19+1=20。这时长度没变。\n个位数等于9，进位过程中一直向上进位，最后长度加1，比如99+1=100。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public int[] plusOne(int[] digits) { int n = digits.length; //从个位开始加1 for(int i=n-1; i\u0026gt;=0; i--) { if(digits[i] \u0026lt; 9) { //如果小于9,则加一然后返回 digits[i]++; return digits; } //否则，将这位置为0，然后向上进位 digits[i] = 0; } //这时已经超过数组长度，所以需要新建一个数组，长度加一，第一位1，后面全部为0 int[] newNumber = new int [n+1]; newNumber[0] = 1; return newNumber; } ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E5%8A%A0%E4%B8%80-leetcode66/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。\u003c/p\u003e\n\u003cp\u003e最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。\u003c/p\u003e\n\u003cp\u003e你可以假设除了整数 0 之外，这个整数不会以零开头。\u003c/p\u003e\n\u003cp\u003e示例 1:\u003c/p\u003e\n\u003cp\u003e输入: [1,2,3]\n输出: [1,2,4]\n解释: 输入数组表示数字 123。\n示例 2:\u003c/p\u003e\n\u003cp\u003e输入: [4,3,2,1]\n输出: [4,3,2,2]\n解释: 输入数组表示数字 4321。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e一个数组，每一位表示一个数字，高位在前面，然后需要将这个值加一，并且按照数组的形式返回。\u003c/p\u003e","title":"加一—LeetCode66"},{"content":"题目描述 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n示例:\n给定 nums = [2, 7, 11, 15], target = 9\n因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]\n解题思路 暴力破解 这个题是第一个题，我刚开始的时候什么都没想，直接上来就用了暴力破解。\n遍历每个元素x，然后查找是否存在一个值能和x相加得到target。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 public int[] twoSum(int[] nums, int target) { for(int i=0;i\u0026lt;nums.length;i++){ for(int j=i+1;j\u0026lt;nums.length;j++){ if(nums[i]+nums[j]==target){ return new int[]{i,j}; } } } return new int[]{-1,-1}; } 空间复杂度为：O(1)，时间复杂度为O(n^2^)。\n哈希表 为了降低时间复杂度，我们可以使用哈希表来实现，利用哈希表来存储元素，由于哈希查找的效率为O(1)，所以能降低时间复杂度。\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 public int[] twoSumHash(int[] nums, int target) { Map\u0026lt;Integer, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(nums.length); for (int i = 0; i \u0026lt; nums.length; i++) { int y = target - nums[i]; if (map.containsKey(y)) { return new int[]{i, map.get(y)}; } map.put(nums[i], i); } return new int[]{-1, -1}; } 使用了java中的hashmap。key存储数组的元素，value存储下标。\n时间复杂度为O(n)，空间复杂度为O(n)\n相关题目 三数之和 ","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-leetcode1/","summary":"\u003ch1 id=\"题目描述\"\u003e题目描述\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\u003c/p\u003e\n\u003cp\u003e你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\u003c/p\u003e\n\u003cp\u003e示例:\u003c/p\u003e\n\u003cp\u003e给定 nums = [2, 7, 11, 15], target = 9\u003c/p\u003e\n\u003cp\u003e因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\u003c/p\u003e\u003c/blockquote\u003e","title":"两数之和—LeetCode1"},{"content":"毕业设计-基于SSM架构的网络租车系统\n项目来源： 之前就做了一个简易的租车都不能说是项目的项目，就是将数据库中的信息在页面以表格形式展示，输入租车天数，租赁数量确定租车信息。所以毕业设计以此为思路做一个项目。\n这个项目也是之前做的，也没有进行优化，如果需要代码可以给我发送邮件：liunaijie1996@163.com 。并且希望你能进行一些改进，这才是开源项目的目的，而不是让大家做伸手党。\n\u0026ndash; 项目代码已经找不到了。。。 -2019-11-11\n项目说明： 项目定位是一个租车平台，即将线下租车公司的资源进行整合。让线下租车公司进驻平台，推广平台，获取用户。\n架构： SSM(spring+springmvc+mybatis) 使用该框架主要是实习期间接触了这个框架（第一次使用框架），觉得这个框架整体较之前写的简单，例如在controller类文件中加注解等方式就可以配置控制层。 maven：使用maven方式构建项目，整体项目小，不在有lib文件夹，调整jar包只需修改pom文件。\n需求分析： 1.用户分类： 平台管理员（超级管理员），商家管理员（普通管理员），用户 （1）超级管理员：作为平台的管理员，主要是对商家的信息进行增删改查、设置普通管理员。新建商家，修改商家信息，删除商家。平台管理员也会赋予上传车辆（需指定商家）和删除车辆的权限，主要是对违规车辆进行删除。对进驻的商家设置管理员。 （2）普通管理员：进驻商家的管理员，主要是对本商家进行车辆上传，修改，删除操作。 （3）用户：用户浏览平台，筛选车辆，租赁车辆\n2.图片上传功能：\n车辆信息需要上传图片展示，当时自己写了一个上传图片并预览，并可以删除指定的图片。\n编辑车辆时删除之前上传的图片，新上传图片，删除任意的照片。\n对项目所加的一些小功能 邮箱注册 用户注册，商家注册，用户租赁车辆时都会发送邮件。 （1）用户注册时发送激活邮件，只有激活后账号才能登录。 （2）用户租赁车辆后，会向用户发送邮件提醒用户刚才租赁过车辆，确保是本人操作，并同时向商家发送邮件，提醒商家准备车辆。 毕业项目演示时将项目放到了阿里服务器上，但阿里服务器的25端口关闭了。所以改写了发送邮件代码使用465端口\n调用百度地图 查看车辆信息，商家信息时会展示商家位置，并通过浏览器定位到用户，实现驾车导航。 由于百度地图的定位不准确，所以用户的定位不是很准确。商家注册时需要添加商家经纬度，后来发现可以可以填写具有一定格式的商家位置，百度地图会自动计算经纬度。\n遗憾 本来想做支付模块，但发现支付宝，微信以及百度钱包等方式都需要工商注册信息。所以现在支付只是做了一个弹出框。\n","permalink":"https://www.liunaijie.top/coding/project_notes/%E7%BD%91%E7%BB%9C%E7%A7%9F%E8%BD%A6%E7%B3%BB%E7%BB%9F/","summary":"\u003cp\u003e\u003cstrong\u003e毕业设计-基于SSM架构的网络租车系统\u003c/strong\u003e\u003c/p\u003e\n\u003ch1 id=\"项目来源\"\u003e项目来源：\u003c/h1\u003e\n\u003cp\u003e之前就做了一个简易的租车都不能说是项目的项目，就是将数据库中的信息在页面以表格形式展示，输入租车天数，租赁数量确定租车信息。所以毕业设计以此为思路做一个项目。\u003c/p\u003e\n\u003cp\u003e这个项目也是之前做的，也没有进行优化，如果需要代码可以给我发送邮件：liunaijie1996@163.com 。并且希望你能进行一些改进，这才是开源项目的目的，而不是让大家做伸手党。\u003c/p\u003e\n\u003cp\u003e\u0026ndash; 项目代码已经找不到了。。。 -2019-11-11\u003c/p\u003e\n\u003ch1 id=\"项目说明\"\u003e项目说明：\u003c/h1\u003e\n\u003cp\u003e项目定位是一个租车平台，即将线下租车公司的资源进行整合。让线下租车公司进驻平台，推广平台，获取用户。\u003c/p\u003e\n\u003cp\u003e架构： SSM(spring+springmvc+mybatis) 使用该框架主要是实习期间接触了这个框架（第一次使用框架），觉得这个框架整体较之前写的简单，例如在controller类文件中加注解等方式就可以配置控制层。\nmaven：使用maven方式构建项目，整体项目小，不在有lib文件夹，调整jar包只需修改pom文件。\u003c/p\u003e","title":"网络租车系统"},{"content":"反转排序 以相反的顺序把原有数组的内容重新排序\n/** *基本思想：将数组的最后一个元素与第一个元素替换，倒数第二个元素与第二个元素替换 */ public void ReverseSort(int[] array){ for(int i=0;i\u0026lt;array.length/2;i++){ int temp=array[i]; array[i]=array[array.length-1-i]; array[array.length-1-i]=temp; } } 费氏数列 题目：古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第四个月后每个月又生一对兔子，假如兔子都不死，问第n个月的兔子数量为多少？ 分析：兔子的数量规律为：1,1,2,3,5,8,13,21\u0026hellip;. 当n\u0026gt;=3时，fn=f(n-1)+f(n-2); n为下标\njava实现：\npublic int getCount(int N){ if(N==1||N==2){ return 1; }else { return getCount(N-1)+getCount(N-2); } } 判断素数个数并输出 素数：除了1和它本身以外不再有其他因数 判断N到M直接素数的个数，并输出（N \u0026lt; M）\n/** * 两次循环 *第一次循环是n到m，取每个数 *第二个循环是判断这个数是不是素数 */ public void judgePrimeNumber(int N;int M){ int count=0; for(int i=N;i\u0026lt;=M;i++){ boolean flag=true; //从2到自身-1，如果有因数，则退出判断 for(int j=2;j\u0026lt;i;j++){ if(i%j==0){ flag=flase; break; } } //判断这个数是不是素数，如果是则数量加1并打印 if(flag==true){ count+=1; System.out.print(i+\u0026#34; \u0026#34;); } } System.out.println(\u0026#34;从\u0026#34;+N+\u0026#34;到\u0026#34;+M+\u0026#34;有\u0026#34;+count+\u0026#34;个素数\u0026#34;); } 打印图形类 菱形：\n* *** ***** ******* ***** *** * java实现：\n/** *主要分两部分实现，上三角形和下三角形 *上三角形规律：空格数逐层减1，* 逐层加2 *下三角规律：空格数加1；* 逐层减3 */ public void lingxing(){ //控制上三角的循环 for(int i=1;i\u0026lt;=4;i++){ //打印空白 for(int k=1;k\u0026lt;=4-i;k++){ System.out.print(\u0026#34; \u0026#34;); } //打印 * for(int j=1;j\u0026lt;=2*i-1;j++){ System.out.print(\u0026#34;*\u0026#34;); } //换行 System.out.print(); } //下三角 for(i=3;i\u0026gt;=1;i--){ for(int k=1;k\u0026lt;= 4-i;k++){ System.out.print(\u0026#34; \u0026#34;); } for(int j=1;j\u0026lt;=2*i-1;j++){ System.out.print(\u0026#34;*\u0026#34;); } System.out.println(); } } 打印三角形\n* *** ****** ******** ****** *** * 代码是菱形去掉打印空格的部分\n","permalink":"https://www.liunaijie.top/coding/java/java%E5%AE%9E%E7%8E%B0%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98%E7%AE%97%E6%B3%95/","summary":"\u003ch1 id=\"反转排序\"\u003e反转排序\u003c/h1\u003e\n\u003cp\u003e以相反的顺序把原有数组的内容重新排序\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e/**\n*基本思想：将数组的最后一个元素与第一个元素替换，倒数第二个元素与第二个元素替换\n*/\npublic void ReverseSort(int[] array){\n    for(int i=0;i\u0026lt;array.length/2;i++){\n        int temp=array[i];\n        array[i]=array[array.length-1-i];\n        array[array.length-1-i]=temp;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"费氏数列\"\u003e费氏数列\u003c/h1\u003e\n\u003cp\u003e题目：古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第四个月后每个月又生一对兔子，假如兔子都不死，问第n个月的兔子数量为多少？\n分析：兔子的数量规律为：1,1,2,3,5,8,13,21\u0026hellip;.\n当n\u0026gt;=3时，fn=f(n-1)+f(n-2); n为下标\u003c/p\u003e\n\u003cp\u003ejava实现：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epublic int getCount(int N){\n    if(N==1||N==2){\n        return 1;\n    }else {\n        return getCount(N-1)+getCount(N-2);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"判断素数个数并输出\"\u003e判断素数个数并输出\u003c/h1\u003e\n\u003cp\u003e素数：除了1和它本身以外不再有其他因数\n判断N到M直接素数的个数，并输出（N \u0026lt; M）\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e/**\n* 两次循环\n*第一次循环是n到m，取每个数\n*第二个循环是判断这个数是不是素数\n*/\npublic void judgePrimeNumber(int N;int M){\n    int count=0;\n    for(int i=N;i\u0026lt;=M;i++){\n        boolean flag=true;\n        //从2到自身-1，如果有因数，则退出判断\n        for(int j=2;j\u0026lt;i;j++){\n            if(i%j==0){\n                flag=flase;\n                break;\n            }\n        }\n        //判断这个数是不是素数，如果是则数量加1并打印\n        if(flag==true){\n            count+=1;\n            System.out.print(i+\u0026#34; \u0026#34;);\n        }\n    }\n    System.out.println(\u0026#34;从\u0026#34;+N+\u0026#34;到\u0026#34;+M+\u0026#34;有\u0026#34;+count+\u0026#34;个素数\u0026#34;);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"打印图形类\"\u003e打印图形类\u003c/h1\u003e\n\u003cp\u003e菱形：\u003c/p\u003e","title":"Java实现经典问题算法"},{"content":"前提 安装jdk1.8以上，python2.7\n安装Cassandra Cassandra的下载地址：http://cassandra.apache.org/download/ 下载后将文件解压到某目录下， 然后配置环境变量 CASSANDRA_HOME为你解压的目录， path为%CASSANDRA_HOME%\\bin 然后用管理员身份运行cmd（不然可能提示权限不够） 进入Cassandra目录下的bin， 执行cassandra 然后如果成功会出一大堆东西，并且不能再输入命令；\n查询状态 再打开一个cmd窗口，原来的不要关闭 进入bin文件夹 执行nodetool status 这是成功状态， 然后输入cqlsh进入编写sql 如果执行cqlsh时出现Can't detect python version需要到pylib目录下执行python setup.py install\n出现cqlsh\u0026gt;开头就表示你现在正在编写sql；\n查询命令 查看表空间 describe keyspaces； 查看已有表：describe tables; 查看表结构：describe table table_name;\n多节点部署 以上是单个几点的安装，下面是多个节点的集群部署： 修改配置文件：cassandra.yaml cluster_name：集群名称。 如果启动过数据库再修改集群名称需要先执行命令: 进入cqlsh执行 UPDATE system.local SET cluster_name = '你修改后的名称' where key='local'; 退出cqlsh状态，执行nodetool flush system seeds节点，将每个节点的ip加进去，\u0026quot;x.x.x.x,xx.xx.xx.xx\u0026quot;不用加尖括号！ listen_address改为自己的ip地址 rpc_address改为自己的ip地址 重启数据库。 再次执行cqlsh命令，后面需要加自己的ip\n","permalink":"https://www.liunaijie.top/coding/database/cassandra%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/","summary":"\u003ch1 id=\"前提\"\u003e前提\u003c/h1\u003e\n\u003cp\u003e安装jdk1.8以上，python2.7\u003c/p\u003e\n\u003c!-- more --\u003e\n\u003ch1 id=\"安装cassandra\"\u003e安装Cassandra\u003c/h1\u003e\n\u003cp\u003eCassandra的下载地址：http://cassandra.apache.org/download/\n下载后将文件解压到某目录下，\n然后配置环境变量\n\u003ccode\u003eCASSANDRA_HOME\u003c/code\u003e为你解压的目录，\npath为\u003ccode\u003e%CASSANDRA_HOME%\\bin\u003c/code\u003e\n然后用管理员身份运行cmd（不然可能提示权限不够）\n进入Cassandra目录下的bin，\n执行\u003ccode\u003ecassandra\u003c/code\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/SouthEast.png\" alt=\"执行cassandrs\"\u003e\n然后如果成功会出一大堆东西，并且不能再输入命令；\u003c/p\u003e\n\u003ch1 id=\"查询状态\"\u003e查询状态\u003c/h1\u003e\n\u003cp\u003e再打开一个cmd窗口，原来的不要关闭\n进入bin文件夹\n执行\u003ccode\u003enodetool status\u003c/code\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/nodetool.png\" alt=\"nodetool status\"\u003e\n这是成功状态，\n然后输入\u003ccode\u003ecqlsh\u003c/code\u003e进入编写sql\n\u003cimg src=\"https://raw.githubusercontent.com/liunaijie/images/master/cqlsh.png\" alt=\"执行cqlsh\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e如果执行cqlsh时出现\u003ccode\u003eCan't detect python version\u003c/code\u003e需要到pylib目录下执行\u003ccode\u003epython setup.py install\u003c/code\u003e\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e出现cqlsh\u0026gt;开头就表示你现在正在编写sql；\u003c/p\u003e\n\u003ch1 id=\"查询命令\"\u003e查询命令\u003c/h1\u003e\n\u003cp\u003e查看表空间 \u003ccode\u003edescribe keyspaces\u003c/code\u003e；\n查看已有表：\u003ccode\u003edescribe tables\u003c/code\u003e;\n查看表结构：\u003ccode\u003edescribe table table_name\u003c/code\u003e;\u003c/p\u003e\n\u003ch1 id=\"多节点部署\"\u003e多节点部署\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003e以上是单个几点的安装，下面是多个节点的集群部署：\u003c/strong\u003e\n修改配置文件：\u003ccode\u003ecassandra.yaml\u003c/code\u003e\n\u003ccode\u003ecluster_name\u003c/code\u003e：集群名称。\n如果启动过数据库再修改集群名称需要先执行命令:\n进入cqlsh执行\n\u003ccode\u003eUPDATE system.local SET cluster_name = '你修改后的名称' where key='local';\u003c/code\u003e\n退出cqlsh状态，执行\u003ccode\u003enodetool flush system\u003c/code\u003e\n\u003ccode\u003eseeds\u003c/code\u003e节点，将每个节点的ip加进去，\u003ccode\u003e\u0026quot;x.x.x.x,xx.xx.xx.xx\u0026quot;\u003c/code\u003e不用加尖括号！\n\u003ccode\u003elisten_address\u003c/code\u003e改为自己的ip地址\n\u003ccode\u003erpc_address\u003c/code\u003e改为自己的ip地址\n重启数据库。\n再次执行cqlsh命令，后面需要加自己的ip\u003c/p\u003e","title":"cassandra的安装与集群部署"},{"content":"Hi, I\u0026rsquo;m Jarvis. Nice to meet you here.\n知识就像一个圆，你知道的越多，你就会发现你不知道的越多。保持谦虚，保持学习。 Knowledge is like a circle; the more you know, the more you realize how much you don\u0026rsquo;t know. Stay humble and keep learning.\n","permalink":"https://www.liunaijie.top/about/","summary":"\u003cp\u003eHi, I\u0026rsquo;m Jarvis. Nice to meet you here.\u003c/p\u003e\n\u003cp\u003e知识就像一个圆，你知道的越多，你就会发现你不知道的越多。保持谦虚，保持学习。\nKnowledge is like a circle; the more you know, the more you realize how much you don\u0026rsquo;t know. Stay humble and keep learning.\u003c/p\u003e","title":"About Me"},{"content":"list里面嵌套map，如果map相同，后面的map信息会替代前面的map信息，所以要将map的new放在循环里\n如果将map放在循环外，list的信息将全为最后一个map的信息\nMap map=new HashMap(); List list=new ArrayList(); for (int i=0;i\u0026lt;10;i++){ map.put(\u0026#34;first\u0026#34;,i); map.put(\u0026#34;second\u0026#34;,i+1); list.add(map); } System.out.println(list); 结果为[{first=9,second=10}]\nList list=new ArrayList(); for (int i=0;i\u0026lt;10;i++){ Map map=new HashMap(); map.put(\u0026#34;first\u0026#34;,i); map.put(\u0026#34;second\u0026#34;,i+1); list.add(map); } System.out.println(list); 结果为[{first=0,second=1},\u0026hellip;..,{first=9,second=10}]\n因为map添加相同的键，后面的值会覆盖前面的值，所以我们在循环的时候需要重新new这个map\n","permalink":"https://www.liunaijie.top/coding/java/list%E5%BE%AA%E7%8E%AF%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%90%8C%E7%9A%84map/","summary":"\u003cp\u003elist里面嵌套map，如果map相同，后面的map信息会替代前面的map信息，所以要将map的new放在循环里\u003c/p\u003e\n\u003cp\u003e如果将map放在循环外，list的信息将全为最后一个map的信息\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eMap map=new HashMap();\nList list=new ArrayList();\nfor (int i=0;i\u0026lt;10;i++){\n   map.put(\u0026#34;first\u0026#34;,i);\n   map.put(\u0026#34;second\u0026#34;,i+1);\n   list.add(map);\n}\nSystem.out.println(list);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e结果为[{first=9,second=10}]\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eList list=new ArrayList();\nfor (int i=0;i\u0026lt;10;i++){\n  Map map=new HashMap();\n  map.put(\u0026#34;first\u0026#34;,i);\n  map.put(\u0026#34;second\u0026#34;,i+1);\n  list.add(map);\n}\nSystem.out.println(list);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e结果为[{first=0,second=1},\u0026hellip;..,{first=9,second=10}]\u003c/p\u003e\n\u003cp\u003e因为map添加相同的键，后面的值会覆盖前面的值，所以我们在循环的时候需要重新new这个map\u003c/p\u003e","title":"list循环添加相同的map"},{"content":"","permalink":"https://www.liunaijie.top/coding/algorithm/leetcode/leetcode/","summary":"","title":""}]